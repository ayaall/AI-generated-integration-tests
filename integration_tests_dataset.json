[
{
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django.contrib import admin\n\nfrom oscar.core.loading import get_model\n\n\nclass UserAddressAdmin(admin.ModelAdmin):\n    readonly_fields = ('num_orders_as_billing_address', 'num_orders_as_shipping_address')\n\n\nclass CountryAdmin(admin.ModelAdmin):\n    list_display = [\n        '__str__',\n        'display_order'\n    ]\n    list_filter = [\n        'is_shipping_country'\n    ]\n    search_fields = [\n        'name',\n        'printable_name',\n        'iso_3166_1_a2',\n        'iso_3166_1_a3'\n    ]\n\n\nadmin.site.register(get_model('address', 'useraddress'), UserAddressAdmin)\nadmin.site.register(get_model('address', 'country'), CountryAdmin)\n",
    "output": "from django.test import TestCase\n\nfrom oscar.apps.address import models, forms\nfrom oscar.test.factories import UserFactory\n\n\nclass TestUserAddressForm(TestCase):\n\n    def setUp(self):\n        self.user = UserFactory()\n        self.country = models.Country.objects.create(\n            iso_3166_1_a2='GB', name=\"UNITED KINGDOM\")\n\n    def test_merges_addresses_with_same_hash(self):\n        data = {\n            'user': self.user,\n            'first_name': \"Matus\",\n            'last_name': \"Moravcik\",\n            'line1': \"1 Egg Street\",\n            'line4': \"London\",\n            'postcode': \"N12 9RE\",\n            'country': self.country}\n\n        # Create two addresses, which are slightly different\n        models.UserAddress.objects.create(**data)\n        other = data.copy()\n        other['first_name'] = 'Izidor'\n        duplicate = models.UserAddress.objects.create(**other)\n\n        # Edit duplicate to be same as original and check that the two\n        # addresses are merged when the form saves.\n        post_data = data.copy()\n        post_data['country'] = self.country.iso_3166_1_a2\n        form = forms.UserAddressForm(self.user, post_data, instance=duplicate)\n        self.assertFalse(form.is_valid())\n        self.assertTrue(len(form.errors['__all__']) > 0)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django.contrib import admin\n\nfrom oscar.core.loading import get_model\n\n\nclass UserAddressAdmin(admin.ModelAdmin):\n    readonly_fields = ('num_orders_as_billing_address', 'num_orders_as_shipping_address')\n\n\nclass CountryAdmin(admin.ModelAdmin):\n    list_display = [\n        '__str__',\n        'display_order'\n    ]\n    list_filter = [\n        'is_shipping_country'\n    ]\n    search_fields = [\n        'name',\n        'printable_name',\n        'iso_3166_1_a2',\n        'iso_3166_1_a3'\n    ]\n\n\nadmin.site.register(get_model('address', 'useraddress'), UserAddressAdmin)\nadmin.site.register(get_model('address', 'country'), CountryAdmin)\n",
    "output": "# -*- coding: utf-8 -*-\nimport pytest\nfrom django.test import TestCase\nfrom django.core import exceptions\n\nfrom oscar.apps.order.models import ShippingAddress\nfrom oscar.core.compat import get_user_model\nfrom oscar.apps.address import models\nfrom oscar.test import factories\n\nfrom tests._site.model_tests_app.models import (\n    UserAddressModelWithCustomBaseFields, UserAddressModelWithCustomHashFields\n)\n\nUser = get_user_model()\n\n\nclass UserAddressModelWithCustomBaseFieldsFactory(factories.UserAddressFactory):\n    class Meta:\n        model = UserAddressModelWithCustomBaseFields\n\n\nclass UserAddressModelWithCustomHashFieldsFactory(factories.UserAddressFactory):\n    class Meta:\n        model = UserAddressModelWithCustomHashFields\n\n\nclass TestUserAddress(TestCase):\n\n    def setUp(self):\n        self.country = factories.CountryFactory.build()\n        self.user = factories.UserFactory()\n\n    def test_uses_title_firstname_and_lastname_in_salutation(self):\n        a = factories.UserAddressFactory.build(\n            country=self.country,\n            title='Dr',\n            first_name='Barry',\n            last_name='Barrington',\n            user=self.user)\n        self.assertEqual(\"Dr Barry Barrington\", a.salutation)\n\n    def test_strips_whitespace_from_salutation(self):\n        a = factories.UserAddressFactory.build(\n            title='',\n            first_name='',\n            last_name='Barrington',\n            country=self.country,\n            user=self.user)\n        self.assertEqual(\"Barrington\", a.salutation)\n\n    def test_has_name_property(self):\n        a = factories.UserAddressFactory.build(\n            country=self.country,\n            first_name='Barry',\n            last_name='Barrington',\n            user=self.user)\n        self.assertEqual(\"Barry Barrington\", a.name)\n\n    def test_has_summary_property(self):\n        c = factories.CountryFactory(name='')\n        a = factories.UserAddressFactory(\n            country=c,\n            title='Dr',\n            first_name='Barry',\n            last_name='Barrington',\n            line1='1 King Road',\n            line4='London',\n            postcode='SW1 9RE')\n        self.assertEqual(\n            \"Dr Barry Barrington, 1 King Road, London, SW1 9RE, UNITED KINGDOM\",\n            a.summary)\n\n    def test_summary_includes_country(self):\n        c = factories.CountryFactory.build(name='UNITED KINGDOM')\n        a = factories.UserAddressFactory.build(\n            country=c,\n            title='Dr',\n            first_name='Barry',\n            last_name='Barrington',\n            line1='1 King Road',\n            line4='London',\n            postcode='SW1 9RE',\n            user=self.user)\n        self.assertEqual(\n            \"Dr Barry Barrington, 1 King Road, London, SW1 9RE, UNITED KINGDOM\",\n            a.summary)\n\n    def test_hash_value(self):\n        a = factories.UserAddressFactory.build(\n            country=self.country,\n            user=self.user)\n        self.assertEqual(a.generate_hash(), 2668616117)\n\n    def test_hash_and_summary_values_on_model_with_custom_base_fields(self):\n        a = UserAddressModelWithCustomBaseFieldsFactory.build(country=self.country, user=self.user)\n        self.assertEqual(a.summary, '1 King Road, London')\n        self.assertEqual(a.generate_hash(), 2668616117)\n\n    def test_hash_and_summary_values_on_model_with_custom_hash_fields(self):\n        a = UserAddressModelWithCustomHashFieldsFactory.build(country=self.country, user=self.user)\n        self.assertEqual(a.summary, 'Dr Barry Barrington, 1 King Road, London, SW1 9RE, UNITED KINGDOM')\n        self.assertEqual(a.generate_hash(), 2153195893)\n\n    def test_can_be_hashed_including_non_ascii(self):\n        a = factories.UserAddressFactory.build(\n            first_name=\"\\u0141ukasz Smith\",\n            last_name='Smith',\n            line1=\"75 Smith Road\",\n            postcode=\"n4 8ty\",\n            country=self.country,\n            user=self.user)\n        hash = a.generate_hash()\n        self.assertTrue(hash is not None)\n\n    def test_strips_whitespace_in_name_property(self):\n        a = factories.UserAddressFactory.build(\n            first_name='',\n            last_name='Barrington',\n            country=self.country,\n            user=self.user)\n        self.assertEqual(\"Barrington\", a.name)\n\n    def test_uses_city_as_an_alias_of_line4(self):\n        a = factories.UserAddressFactory.build(\n            line4='London',\n            country=self.country,\n            user=self.user)\n        self.assertEqual('London', a.city)\n\n    def test_converts_postcode_to_uppercase_when_cleaning(self):\n        address = factories.UserAddressFactory.build(\n            postcode=\"n4 8ty\",\n            country=self.country,\n            user=self.user)\n        address.clean()\n        self.assertEqual(\"N4 8TY\", address.postcode)\n\n    def test_strips_whitespace_when_cleaning(self):\n        a = factories.UserAddressFactory.build(\n            line1=\"  75 Smith Road  \",\n            postcode=\"  n4 8ty\",\n            country=self.country,\n            user=self.user)\n        a.clean()\n        self.assertEqual(\"N4 8TY\", a.postcode)\n        self.assertEqual(\"75 Smith Road\", a.line1)\n\n    def test_active_address_fields_skips_whitespace_only_fields(self):\n        a = factories.UserAddressFactory.build(\n            first_name='   ',\n            last_name='Barrington',\n            line1='  75 Smith Road  ',\n            postcode='  n4 8ty',\n            title='',\n            country=self.country,\n            user=self.user)\n        active_fields = a.active_address_fields()\n        self.assertEqual(\"Barrington\", active_fields[0])\n\n    def test_ignores_whitespace_when_hashing(self):\n        a1 = factories.UserAddressFactory.build(\n            first_name='Terry',\n            last_name='Barrington',\n            country=self.country,\n            user=self.user)\n        a1.clean()\n        a2 = factories.UserAddressFactory.build(\n            first_name='   Terry  ',\n            last_name='     Barrington',\n            country=self.country,\n            user=self.user)\n        a2.clean()\n        self.assertEqual(a1.generate_hash(), a2.generate_hash())\n\n    def test_populate_shipping_address_doesnt_set_id(self):\n        a = factories.UserAddressFactory.build(\n            country=self.country,\n            user=self.user)\n        a.clean()\n        sa = ShippingAddress()\n        a.populate_alternative_model(sa)\n        self.assertIsNone(sa.id)\n\n    def test_populated_shipping_address_has_same_summary_user_address(self):\n        a = factories.UserAddressFactory.build(\n            country=self.country,\n            user=self.user)\n        a.clean()\n        sa = ShippingAddress()\n        a.populate_alternative_model(sa)\n        self.assertEqual(sa.summary, a.summary)\n\n    def test_summary_value(self):\n        a = factories.UserAddressFactory.build(\n            country=self.country,\n            user=self.user)\n        self.assertEqual(a.summary, 'Dr Barry Barrington, 1 King Road, London, SW1 9RE, UNITED KINGDOM')\n\n    def test_summary_is_property(self):\n        a = factories.UserAddressFactory.build(\n            title='',\n            line4='',\n            first_name=\" Terry  \",\n            last_name='Barrington',\n            line1=\"  75 Smith Road  \",\n            postcode=\"  n4 8ty\",\n            country=self.country,\n            user=self.user)\n        a.clean()\n        self.assertEqual(\n            \"Terry Barrington, 75 Smith Road, N4 8TY, UNITED KINGDOM\",\n            a.summary)\n\n\nVALID_POSTCODES = [\n    ('GB', 'N1 9RT'),\n    ('SK', '991 41'),\n    ('CZ', '612 00'),\n    ('CC', '6799'),\n    ('CY', '8240'),\n    ('MC', '98000'),\n    ('SH', 'STHL 1ZZ'),\n    ('JP', '150-2345'),\n    ('PG', '314'),\n    ('HN', '41202'),\n    ('BN', 'BC3615'),\n    ('TW', '104'),\n    ('TW', '10444'),\n    # It works for small cases as well\n    ('GB', 'sw2 1rw'),\n]\n\n\nINVALID_POSTCODES = [\n    ('GB', 'not-a-postcode'),\n    ('DE', '123b4'),\n]\n\n\n@pytest.mark.parametrize('country_value, postcode_value', VALID_POSTCODES)\ndef test_assert_valid_postcode(country_value, postcode_value):\n    country = models.Country(iso_3166_1_a2=country_value)\n    address = models.UserAddress(country=country, postcode=postcode_value)\n    address.clean()\n\n\n@pytest.mark.parametrize('country_value, postcode_value', INVALID_POSTCODES)\ndef test_assert_invalid_postcode(country_value, postcode_value):\n    country = models.Country(iso_3166_1_a2=country_value)\n    address = models.UserAddress(country=country, postcode=postcode_value)\n\n    with pytest.raises(exceptions.ValidationError):\n        address.clean()\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django.contrib import admin\n\nfrom oscar.core.loading import get_model\n\n\nclass UserAddressAdmin(admin.ModelAdmin):\n    readonly_fields = ('num_orders_as_billing_address', 'num_orders_as_shipping_address')\n\n\nclass CountryAdmin(admin.ModelAdmin):\n    list_display = [\n        '__str__',\n        'display_order'\n    ]\n    list_filter = [\n        'is_shipping_country'\n    ]\n    search_fields = [\n        'name',\n        'printable_name',\n        'iso_3166_1_a2',\n        'iso_3166_1_a3'\n    ]\n\n\nadmin.site.register(get_model('address', 'useraddress'), UserAddressAdmin)\nadmin.site.register(get_model('address', 'country'), CountryAdmin)\n",
    "output": ""
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django.contrib import admin\n\nfrom oscar.core.loading import get_model\n\n\nclass UserAddressAdmin(admin.ModelAdmin):\n    readonly_fields = ('num_orders_as_billing_address', 'num_orders_as_shipping_address')\n\n\nclass CountryAdmin(admin.ModelAdmin):\n    list_display = [\n        '__str__',\n        'display_order'\n    ]\n    list_filter = [\n        'is_shipping_country'\n    ]\n    search_fields = [\n        'name',\n        'printable_name',\n        'iso_3166_1_a2',\n        'iso_3166_1_a3'\n    ]\n\n\nadmin.site.register(get_model('address', 'useraddress'), UserAddressAdmin)\nadmin.site.register(get_model('address', 'country'), CountryAdmin)\n",
    "output": "from datetime import datetime, date\n\nfrom django.test import TestCase\nfrom django.core.exceptions import ValidationError\nfrom django.core.files.uploadedfile import SimpleUploadedFile\n\nfrom oscar.test import factories\n\n\nclass TestBooleanAttributes(TestCase):\n\n    def setUp(self):\n        self.attr = factories.ProductAttributeFactory(type=\"boolean\")\n\n    def test_validate_boolean_values(self):\n        self.assertIsNone(self.attr.validate_value(True))\n\n    def test_validate_invalid_boolean_values(self):\n        with self.assertRaises(ValidationError):\n            self.attr.validate_value(1)\n\n\nclass TestMultiOptionAttributes(TestCase):\n\n    def setUp(self):\n        self.option_group = factories.AttributeOptionGroupFactory()\n        self.attr = factories.ProductAttributeFactory(\n            type='multi_option',\n            name='Sizes',\n            code='sizes',\n            option_group=self.option_group,\n        )\n\n        # Add some options to the group\n        self.options = factories.AttributeOptionFactory.create_batch(\n            3, group=self.option_group)\n\n    def test_validate_multi_option_values(self):\n        self.assertIsNone(self.attr.validate_value([\n            self.options[0], self.options[1]]))\n\n    def test_validate_invalid_multi_option_values(self):\n        with self.assertRaises(ValidationError):\n            # value must be an iterable\n            self.attr.validate_value('foobar')\n\n        with self.assertRaises(ValidationError):\n            # Items must all be AttributeOption objects\n            self.attr.validate_value([self.options[0], 'notanOption'])\n\n    def test_save_multi_option_value(self):\n        product = factories.ProductFactory()\n        # We'll save two out of the three available options\n        self.attr.save_value(product, [self.options[0], self.options[2]])\n        product.refresh_from_db()\n        self.assertEqual(list(product.attr.sizes), [self.options[0], self.options[2]])\n\n    def test_delete_multi_option_value(self):\n        product = factories.ProductFactory()\n        self.attr.save_value(product, [self.options[0], self.options[1]])\n        # Now delete these values\n        self.attr.save_value(product, None)\n        product.refresh_from_db()\n        self.assertFalse(hasattr(product.attr, 'sizes'))\n\n    def test_multi_option_value_as_text(self):\n        product = factories.ProductFactory()\n        self.attr.save_value(product, self.options)\n        attr_val = product.attribute_values.get(attribute=self.attr)\n        self.assertEqual(attr_val.value_as_text, \", \".join(o.option for o in self.options))\n\n\nclass TestDatetimeAttributes(TestCase):\n\n    def setUp(self):\n        self.attr = factories.ProductAttributeFactory(type=\"datetime\")\n\n    def test_validate_datetime_values(self):\n        self.assertIsNone(self.attr.validate_value(datetime.now()))\n\n    def test_validate_invalid_datetime_values(self):\n        with self.assertRaises(ValidationError):\n            self.attr.validate_value(1)\n\n\nclass TestDateAttributes(TestCase):\n\n    def setUp(self):\n        self.attr = factories.ProductAttributeFactory(type=\"date\")\n\n    def test_validate_datetime_values(self):\n        self.assertIsNone(self.attr.validate_value(datetime.now()))\n\n    def test_validate_date_values(self):\n        self.assertIsNone(self.attr.validate_value(date.today()))\n\n    def test_validate_invalid_date_values(self):\n        with self.assertRaises(ValidationError):\n            self.attr.validate_value(1)\n\n\nclass TestIntegerAttributes(TestCase):\n\n    def setUp(self):\n        self.attr = factories.ProductAttributeFactory(type=\"integer\")\n\n    def test_validate_integer_values(self):\n        self.assertIsNone(self.attr.validate_value(1))\n\n    def test_validate_str_integer_values(self):\n        self.assertIsNone(self.attr.validate_value('1'))\n\n    def test_validate_invalid_integer_values(self):\n        with self.assertRaises(ValidationError):\n            self.attr.validate_value('notanInteger')\n\n\nclass TestFloatAttributes(TestCase):\n\n    def setUp(self):\n        self.attr = factories.ProductAttributeFactory(type=\"float\")\n\n    def test_validate_integer_values(self):\n        self.assertIsNone(self.attr.validate_value(1))\n\n    def test_validate_float_values(self):\n        self.assertIsNone(self.attr.validate_value(1.2))\n\n    def test_validate_str_float_values(self):\n        self.assertIsNone(self.attr.validate_value('1.2'))\n\n    def test_validate_invalid_float_values(self):\n        with self.assertRaises(ValidationError):\n            self.attr.validate_value('notaFloat')\n\n\nclass TestTextAttributes(TestCase):\n\n    def setUp(self):\n        self.attr = factories.ProductAttributeFactory(type=\"text\")\n\n    def test_validate_string_and_unicode_values(self):\n        self.assertIsNone(self.attr.validate_value('String'))\n\n    def test_validate_invalid_float_values(self):\n        with self.assertRaises(ValidationError):\n            self.attr.validate_value(1)\n\n\nclass TestFileAttributes(TestCase):\n    def setUp(self):\n        self.attr = factories.ProductAttributeFactory(type=\"file\")\n\n    def test_validate_file_values(self):\n        file_field = SimpleUploadedFile('test_file.txt', b'Test')\n        self.assertIsNone(self.attr.validate_value(file_field))\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django.contrib import admin\n\nfrom oscar.core.loading import get_model\n\n\nclass UserAddressAdmin(admin.ModelAdmin):\n    readonly_fields = ('num_orders_as_billing_address', 'num_orders_as_shipping_address')\n\n\nclass CountryAdmin(admin.ModelAdmin):\n    list_display = [\n        '__str__',\n        'display_order'\n    ]\n    list_filter = [\n        'is_shipping_country'\n    ]\n    search_fields = [\n        'name',\n        'printable_name',\n        'iso_3166_1_a2',\n        'iso_3166_1_a3'\n    ]\n\n\nadmin.site.register(get_model('address', 'useraddress'), UserAddressAdmin)\nadmin.site.register(get_model('address', 'country'), CountryAdmin)\n",
    "output": "# -*- coding: utf-8 -*-\nfrom django.core.cache import cache\nfrom django.test import TestCase\nfrom django.test.utils import override_settings\n\nfrom oscar.apps.catalogue.models import Category\nfrom oscar.apps.catalogue.categories import create_from_breadcrumbs\nfrom oscar.templatetags.category_tags import get_annotated_list\n\n\nclass TestCategory(TestCase):\n\n    def setUp(self):\n        self.products = Category.add_root(name=\"Pr\u00f6ducts\")\n        self.books = self.products.add_child(name=\"B\u00fccher\")\n\n    def tearDown(self):\n        cache.clear()\n\n    def test_includes_parents_name_in_full_name(self):\n        self.assertTrue(self.products.name in self.books.full_name)\n\n    def test_has_children_method(self):\n        self.assertTrue(self.products.has_children())\n\n    def test_slugs_were_autogenerated(self):\n        self.assertTrue(self.products.slug)\n        self.assertTrue(self.books.slug)\n\n    def test_supplied_slug_is_not_altered(self):\n        more_books = self.products.add_child(\n            name=self.books.name, slug=self.books.slug)\n        self.assertEqual(more_books.slug, self.books.slug)\n\n    @override_settings(OSCAR_SLUG_ALLOW_UNICODE=True)\n    def test_unicode_slug(self):\n        root_category = Category.add_root(name=\"Vins fran\u00e7ais\")\n        child_category = root_category.add_child(name=\"Ch\u00e2teau d'Yquem\")\n        self.assertEqual(root_category.slug, 'vins-fran\u00e7ais')\n        self.assertEqual(\n            root_category.get_absolute_url(), '/catalogue/category/vins-fran%C3%A7ais_{}/'.format(root_category.pk)\n        )\n        self.assertEqual(child_category.slug, 'ch\u00e2teau-dyquem')\n        self.assertEqual(\n            child_category.get_absolute_url(),\n            '/catalogue/category/vins-fran%C3%A7ais/ch%C3%A2teau-dyquem_{}/'.format(child_category.pk)\n        )\n\n    @override_settings(OSCAR_SLUG_ALLOW_UNICODE=True)\n    def test_url_caching(self):\n        category = self.products.add_child(name=\"Fromages fran\u00e7ais\")\n        absolute_url = category.get_absolute_url()\n        url = cache.get(category.get_url_cache_key())\n        self.assertEqual(url, '/catalogue/category/products/fromages-fran%C3%A7ais_{}/'.format(category.pk))\n        self.assertEqual(absolute_url, '/catalogue/category/products/fromages-fran%C3%A7ais_{}/'.format(category.pk))\n\n\nclass TestMovingACategory(TestCase):\n\n    def setUp(self):\n        breadcrumbs = (\n            'Books > Fiction > Horror > Teen',\n            'Books > Fiction > Horror > Gothic',\n            'Books > Fiction > Comedy',\n            'Books > Non-fiction > Biography',\n            'Books > Non-fiction > Programming',\n            'Books > Children',\n        )\n        for trail in breadcrumbs:\n            create_from_breadcrumbs(trail)\n\n        horror = Category.objects.get(name=\"Horror\")\n        programming = Category.objects.get(name=\"Programming\")\n        horror.move(programming)\n\n        # Reload horror instance to pick up changes\n        self.horror = Category.objects.get(name=\"Horror\")\n\n    def test_updates_instance_name(self):\n        self.assertEqual('Books > Non-fiction > Horror', self.horror.full_name)\n\n    def test_updates_subtree_names(self):\n        teen = Category.objects.get(name=\"Teen\")\n        self.assertEqual('Books > Non-fiction > Horror > Teen',\n                         teen.full_name)\n        gothic = Category.objects.get(name=\"Gothic\")\n        self.assertEqual('Books > Non-fiction > Horror > Gothic',\n                         gothic.full_name)\n\n\nclass TestCategoryFactory(TestCase):\n\n    def test_can_create_single_level_category(self):\n        trail = 'Books'\n        category = create_from_breadcrumbs(trail)\n        self.assertIsNotNone(category)\n        self.assertEqual(category.name, 'Books')\n        self.assertEqual(category.slug, 'books')\n\n    def test_can_create_parent_and_child_categories(self):\n        trail = 'Books > Science-Fiction'\n        category = create_from_breadcrumbs(trail)\n\n        self.assertIsNotNone(category)\n        self.assertEqual(category.name, 'Science-Fiction')\n        self.assertEqual(category.get_depth(), 2)\n        self.assertEqual(category.get_parent().name, 'Books')\n        self.assertEqual(2, Category.objects.count())\n        self.assertEqual(category.full_slug, 'books/science-fiction')\n\n    def test_can_create_multiple_categories(self):\n        trail = 'Books > Science-Fiction > Star Trek'\n        create_from_breadcrumbs(trail)\n        trail = 'Books > Factual > Popular Science'\n        category = create_from_breadcrumbs(trail)\n\n        self.assertIsNotNone(category)\n        self.assertEqual(category.name, 'Popular Science')\n        self.assertEqual(category.get_depth(), 3)\n        self.assertEqual(category.get_parent().name, 'Factual')\n        self.assertEqual(5, Category.objects.count())\n        self.assertEqual(category.full_slug, 'books/factual/popular-science', )\n\n    def test_can_use_alternative_separator(self):\n        trail = 'Food|Cheese|Blue'\n        create_from_breadcrumbs(trail, separator='|')\n        self.assertEqual(3, len(Category.objects.all()))\n\n    def test_updating_subtree_slugs_when_moving_category_to_new_parent(self):\n        trail = 'A > B > C'\n        create_from_breadcrumbs(trail)\n        trail = 'A > B > D'\n        create_from_breadcrumbs(trail)\n        trail = 'A > E > F'\n        create_from_breadcrumbs(trail)\n        trail = 'A > E > G'\n        create_from_breadcrumbs(trail)\n\n        trail = 'T'\n        target = create_from_breadcrumbs(trail)\n        category = Category.objects.get(name='A')\n\n        category.move(target, pos='first-child')\n\n        c1 = Category.objects.get(name='A')\n        self.assertEqual(c1.full_slug, 't/a')\n        self.assertEqual(c1.full_name, 'T > A')\n\n        child = Category.objects.get(name='F')\n        self.assertEqual(child.full_slug, 't/a/e/f')\n        self.assertEqual(child.full_name, 'T > A > E > F')\n\n        child = Category.objects.get(name='D')\n        self.assertEqual(child.full_slug, 't/a/b/d')\n        self.assertEqual(child.full_name, 'T > A > B > D')\n\n    def test_updating_subtree_when_moving_category_to_new_sibling(self):\n        trail = 'A > B > C'\n        create_from_breadcrumbs(trail)\n        trail = 'A > B > D'\n        create_from_breadcrumbs(trail)\n        trail = 'A > E > F'\n        create_from_breadcrumbs(trail)\n        trail = 'A > E > G'\n        create_from_breadcrumbs(trail)\n\n        category = Category.objects.get(name='E')\n        target = Category.objects.get(name='A')\n\n        category.move(target, pos='right')\n\n        child = Category.objects.get(name='E')\n        self.assertEqual(child.full_slug, 'e')\n        self.assertEqual(child.full_name, 'E')\n\n        child = Category.objects.get(name='F')\n        self.assertEqual(child.full_slug, 'e/f')\n        self.assertEqual(child.full_name, 'E > F')\n\n\nclass TestCategoryTemplateTags(TestCase):\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.template = \"\"\"\n          {% if tree_categories %}\n              <ul>\n              {% for tree_category, info in tree_categories %}\n                  <li>\n                  {% if tree_category.pk == category.pk %}\n                      <strong>{{ tree_category.name }}</strong>\n                  {% else %}\n                      <a href=\"{{ tree_category.get_absolute_url }}\">\n                          {{ tree_category.name }}</a>\n                  {% endif %}\n                  {% if info.has_children %}<ul>{% else %}</li>{% endif %}\n                  {% for n in info.num_to_close %}\n                      </ul></li>\n                  {% endfor %}\n              {% endfor %}\n              </ul>\n          {% endif %}\n        \"\"\"\n\n    def setUp(self):\n        breadcrumbs = (\n            'Books > Fiction > Horror > Teen',\n            'Books > Fiction > Horror > Gothic',\n            'Books > Fiction > Comedy',\n            'Books > Non-fiction > Biography',\n            'Books > Non-fiction > Programming',\n            'Books > Children',\n        )\n        for trail in breadcrumbs:\n            create_from_breadcrumbs(trail)\n\n    def get_category_names(self, depth=None, parent=None):\n        \"\"\"\n        For the tests, we are only interested in the category names returned\n        from the template tag. This helper calls the template tag and\n        returns a list of the included categories.\n        \"\"\"\n        annotated_list = get_annotated_list(depth, parent)\n        names = [category.name for category, __ in annotated_list]\n        names_set = set(names)\n        # We return a set to ease testing, but need to be sure we're not\n        # losing any duplicates through that conversion.\n        self.assertEqual(len(names_set), len(names))\n        return names_set\n\n    def test_all_categories(self):\n        expected_categories = {\n            'Books', 'Fiction', 'Horror', 'Teen', 'Gothic', 'Comedy',\n            'Non-fiction', 'Biography', 'Programming', 'Children'}\n        actual_categories = self.get_category_names()\n        self.assertEqual(expected_categories, actual_categories)\n\n    def test_categories_depth(self):\n        expected_categories = {'Books'}\n        actual_categories = self.get_category_names(depth=1)\n        self.assertEqual(expected_categories, actual_categories)\n\n    def test_categories_parent(self):\n        parent = Category.objects.get(name=\"Fiction\")\n        actual_categories = self.get_category_names(parent=parent)\n        expected_categories = {'Horror', 'Teen', 'Gothic', 'Comedy'}\n        self.assertEqual(expected_categories, actual_categories)\n\n    def test_categories_depth_parent(self):\n        parent = Category.objects.get(name=\"Fiction\")\n        actual_categories = self.get_category_names(depth=1, parent=parent)\n        expected_categories = {'Horror', 'Comedy'}\n        self.assertEqual(expected_categories, actual_categories)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django.contrib import admin\n\nfrom oscar.core.loading import get_model\n\n\nclass UserAddressAdmin(admin.ModelAdmin):\n    readonly_fields = ('num_orders_as_billing_address', 'num_orders_as_shipping_address')\n\n\nclass CountryAdmin(admin.ModelAdmin):\n    list_display = [\n        '__str__',\n        'display_order'\n    ]\n    list_filter = [\n        'is_shipping_country'\n    ]\n    search_fields = [\n        'name',\n        'printable_name',\n        'iso_3166_1_a2',\n        'iso_3166_1_a3'\n    ]\n\n\nadmin.site.register(get_model('address', 'useraddress'), UserAddressAdmin)\nadmin.site.register(get_model('address', 'country'), CountryAdmin)\n",
    "output": "import pytest\nfrom django.core.exceptions import ValidationError\n\nfrom oscar.apps.catalogue import models\n\n\ndef test_product_attributes_can_contain_underscores():\n    attr = models.ProductAttribute(name=\"A\", code=\"a_b\")\n    attr.full_clean()\n\n\ndef test_product_attributes_cant_contain_hyphens():\n    attr = models.ProductAttribute(name=\"A\", code=\"a-b\")\n    with pytest.raises(ValidationError):\n        attr.full_clean()\n\n\ndef test_product_attributes_cant_be_python_keywords():\n    attr = models.ProductAttribute(name=\"A\", code=\"import\")\n    with pytest.raises(ValidationError):\n        attr.full_clean()\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django.contrib import admin\n\nfrom oscar.core.loading import get_model\n\n\nclass UserAddressAdmin(admin.ModelAdmin):\n    readonly_fields = ('num_orders_as_billing_address', 'num_orders_as_shipping_address')\n\n\nclass CountryAdmin(admin.ModelAdmin):\n    list_display = [\n        '__str__',\n        'display_order'\n    ]\n    list_filter = [\n        'is_shipping_country'\n    ]\n    search_fields = [\n        'name',\n        'printable_name',\n        'iso_3166_1_a2',\n        'iso_3166_1_a3'\n    ]\n\n\nadmin.site.register(get_model('address', 'useraddress'), UserAddressAdmin)\nadmin.site.register(get_model('address', 'country'), CountryAdmin)\n",
    "output": "from django.test import TestCase\n\nfrom oscar.test import factories\nfrom oscar.core.loading import get_model\n\n\nProduct = get_model('catalogue', 'Product')\n\n\nclass ProductOptionTests(TestCase):\n    def setUp(self):\n        self.product_class = factories.ProductClassFactory()\n        self.product = factories.create_product(product_class=self.product_class)\n        self.option = factories.OptionFactory()\n\n    def test_product_has_options_per_product_class(self):\n        self.product_class.options.add(self.option)\n        self.assertTrue(self.product.has_options)\n\n    def test_product_has_options_per_product(self):\n        self.product.product_options.add(self.option)\n        self.assertTrue(self.product.has_options)\n\n    def test_queryset_per_product_class(self):\n        self.product_class.options.add(self.option)\n        qs = Product.browsable.base_queryset().filter(id=self.product.id)\n        product = qs.first()\n        self.assertTrue(product.has_options)\n        self.assertEquals(product.num_product_class_options, 1)\n\n    def test_queryset_per_product(self):\n        self.product.product_options.add(self.option)\n        qs = Product.browsable.base_queryset().filter(id=self.product.id)\n        product = qs.first()\n        self.assertTrue(product.has_options)\n        self.assertEquals(product.num_product_options, 1)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django.contrib import admin\n\nfrom oscar.core.loading import get_model\n\n\nclass UserAddressAdmin(admin.ModelAdmin):\n    readonly_fields = ('num_orders_as_billing_address', 'num_orders_as_shipping_address')\n\n\nclass CountryAdmin(admin.ModelAdmin):\n    list_display = [\n        '__str__',\n        'display_order'\n    ]\n    list_filter = [\n        'is_shipping_country'\n    ]\n    search_fields = [\n        'name',\n        'printable_name',\n        'iso_3166_1_a2',\n        'iso_3166_1_a3'\n    ]\n\n\nadmin.site.register(get_model('address', 'useraddress'), UserAddressAdmin)\nadmin.site.register(get_model('address', 'country'), CountryAdmin)\n",
    "output": "# coding=utf-8\nfrom django.db import IntegrityError\nfrom django.test import TestCase\nfrom django.core.exceptions import ValidationError\n\nfrom oscar.apps.catalogue.models import (Product, ProductClass,\n                                         ProductAttribute,\n                                         AttributeOption,\n                                         ProductRecommendation)\nfrom oscar.test import factories\n\n\nclass ProductTests(TestCase):\n\n    def setUp(self):\n        self.product_class, _ = ProductClass.objects.get_or_create(\n            name='Clothing')\n\n\nclass ProductCreationTests(ProductTests):\n\n    def setUp(self):\n        super().setUp()\n        ProductAttribute.objects.create(product_class=self.product_class,\n                                        name='Number of pages',\n                                        code='num_pages',\n                                        type='integer')\n        Product.ENABLE_ATTRIBUTE_BINDING = True\n\n    def tearDown(self):\n        Product.ENABLE_ATTRIBUTE_BINDING = False\n\n    def test_create_products_with_attributes(self):\n        product = Product(upc='1234',\n                          product_class=self.product_class,\n                          title='testing')\n        product.attr.num_pages = 100\n        product.save()\n\n    def test_none_upc_is_represented_as_empty_string(self):\n        product = Product(product_class=self.product_class,\n                          title='testing', upc=None)\n        product.save()\n        product.refresh_from_db()\n        self.assertEqual(product.upc, '')\n\n    def test_upc_uniqueness_enforced(self):\n        Product.objects.create(product_class=self.product_class,\n                               title='testing', upc='bah')\n        self.assertRaises(IntegrityError, Product.objects.create,\n                          product_class=self.product_class,\n                          title='testing', upc='bah')\n\n    def test_allow_two_products_without_upc(self):\n        for x in range(2):\n            Product.objects.create(product_class=self.product_class,\n                                   title='testing', upc=None)\n\n\nclass TopLevelProductTests(ProductTests):\n\n    def test_top_level_products_must_have_titles(self):\n        product = Product(product_class=self.product_class)\n        self.assertRaises(ValidationError, product.clean)\n\n    def test_top_level_products_must_have_product_class(self):\n        product = Product(title=\"Kopfh\u00f6rer\")\n        self.assertRaises(ValidationError, product.clean)\n\n    def test_top_level_products_are_part_of_browsable_set(self):\n        product = Product.objects.create(\n            product_class=self.product_class, title=\"Kopfh\u00f6rer\")\n        self.assertEqual(set([product]), set(Product.browsable.all()))\n\n\nclass ChildProductTests(ProductTests):\n\n    def setUp(self):\n        super().setUp()\n        self.parent = Product.objects.create(\n            title=\"Parent product\",\n            product_class=self.product_class,\n            structure=Product.PARENT,\n            is_discountable=False)\n\n    def test_child_products_dont_need_titles(self):\n        Product.objects.create(\n            parent=self.parent, structure=Product.CHILD)\n\n    def test_child_products_dont_need_a_product_class(self):\n        Product.objects.create(parent=self.parent, structure=Product.CHILD)\n\n    def test_child_products_inherit_fields(self):\n        p = Product.objects.create(\n            parent=self.parent,\n            structure=Product.CHILD,\n            is_discountable=True)\n        self.assertEqual(\"Parent product\", p.get_title())\n        self.assertEqual(\"Clothing\", p.get_product_class().name)\n        self.assertEqual(False, p.get_is_discountable())\n\n    def test_child_products_are_not_part_of_browsable_set(self):\n        Product.objects.create(\n            product_class=self.product_class, parent=self.parent,\n            structure=Product.CHILD)\n        self.assertEqual(set([self.parent]), set(Product.browsable.all()))\n\n\nclass TestAChildProduct(TestCase):\n\n    def setUp(self):\n        clothing = ProductClass.objects.create(\n            name='Clothing', requires_shipping=True)\n        self.parent = clothing.products.create(\n            title=\"Parent\", structure=Product.PARENT)\n        self.child = self.parent.children.create(structure=Product.CHILD)\n\n    def test_delegates_requires_shipping_logic(self):\n        self.assertTrue(self.child.is_shipping_required)\n\n\nclass ProductAttributeCreationTests(TestCase):\n\n    def test_validating_option_attribute(self):\n        option_group = factories.AttributeOptionGroupFactory()\n        option_1 = factories.AttributeOptionFactory(group=option_group)\n        option_2 = factories.AttributeOptionFactory(group=option_group)\n        pa = factories.ProductAttribute(\n            type='option', option_group=option_group)\n\n        self.assertRaises(ValidationError, pa.validate_value, 'invalid')\n        pa.validate_value(option_1)\n        pa.validate_value(option_2)\n\n        invalid_option = AttributeOption(option='invalid option')\n        self.assertRaises(\n            ValidationError, pa.validate_value, invalid_option)\n\n    def test_entity_attributes(self):\n        unrelated_object = factories.PartnerFactory()\n        attribute = factories.ProductAttributeFactory(type='entity')\n\n        attribute_value = factories.ProductAttributeValueFactory(\n            attribute=attribute, value_entity=unrelated_object)\n\n        self.assertEqual(attribute_value.value, unrelated_object)\n\n\nclass ProductRecommendationTests(ProductTests):\n\n    def setUp(self):\n        super().setUp()\n        self.primary_product = Product.objects.create(\n            upc='1234', product_class=self.product_class, title='Primary Product'\n        )\n\n    def test_recommended_products_ordering(self):\n        secondary_products = []\n        for i in range(5):\n            secondary_products.append(Product.objects.create(\n                upc='secondary%s' % i, product_class=self.product_class, title='Secondary Product #%s' % i\n            ))\n\n        ProductRecommendation.objects.create(\n            primary=self.primary_product, recommendation=secondary_products[3], ranking=5)\n        ProductRecommendation.objects.create(\n            primary=self.primary_product, recommendation=secondary_products[1], ranking=2)\n        ProductRecommendation.objects.create(\n            primary=self.primary_product, recommendation=secondary_products[2], ranking=4)\n        ProductRecommendation.objects.create(\n            primary=self.primary_product, recommendation=secondary_products[4], ranking=1)\n        ProductRecommendation.objects.create(\n            primary=self.primary_product, recommendation=secondary_products[0], ranking=3)\n        recommended_products = [\n            secondary_products[3], secondary_products[2], secondary_products[0],\n            secondary_products[1], secondary_products[4]\n        ]\n        self.assertEqual(self.primary_product.sorted_recommended_products, recommended_products)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django.contrib import admin\n\nfrom oscar.core.loading import get_model\n\n\nclass UserAddressAdmin(admin.ModelAdmin):\n    readonly_fields = ('num_orders_as_billing_address', 'num_orders_as_shipping_address')\n\n\nclass CountryAdmin(admin.ModelAdmin):\n    list_display = [\n        '__str__',\n        'display_order'\n    ]\n    list_filter = [\n        'is_shipping_country'\n    ]\n    search_fields = [\n        'name',\n        'printable_name',\n        'iso_3166_1_a2',\n        'iso_3166_1_a3'\n    ]\n\n\nadmin.site.register(get_model('address', 'useraddress'), UserAddressAdmin)\nadmin.site.register(get_model('address', 'country'), CountryAdmin)\n",
    "output": "from django.test import TestCase\n\nfrom oscar.apps.catalogue import models\n\n\nclass TestProductClassModel(TestCase):\n\n    def test_slug_is_auto_created(self):\n        books = models.ProductClass.objects.create(\n            name=\"Book\",\n        )\n        self.assertEqual('book', books.slug)\n\n    def test_has_attribute_for_whether_shipping_is_required(self):\n        models.ProductClass.objects.create(\n            name=\"Download\",\n            requires_shipping=False,\n        )\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django.contrib import admin\n\nfrom oscar.core.loading import get_model\n\n\nclass UserAddressAdmin(admin.ModelAdmin):\n    readonly_fields = ('num_orders_as_billing_address', 'num_orders_as_shipping_address')\n\n\nclass CountryAdmin(admin.ModelAdmin):\n    list_display = [\n        '__str__',\n        'display_order'\n    ]\n    list_filter = [\n        'is_shipping_country'\n    ]\n    search_fields = [\n        'name',\n        'printable_name',\n        'iso_3166_1_a2',\n        'iso_3166_1_a3'\n    ]\n\n\nadmin.site.register(get_model('address', 'useraddress'), UserAddressAdmin)\nadmin.site.register(get_model('address', 'country'), CountryAdmin)\n",
    "output": "import os\nimport tempfile\nfrom unittest import mock\n\nfrom django.contrib.staticfiles.testing import StaticLiveServerTestCase\nfrom django.test import TestCase, override_settings\n\nfrom oscar.apps.catalogue.abstract_models import MissingProductImage\nfrom oscar.test import factories\n\n\nclass TestProductImages(TestCase):\n\n    def test_images_are_in_consecutive_order(self):\n        product = factories.create_product()\n        for i in range(4):\n            factories.create_product_image(product=product, display_order=i)\n\n        product.images.all()[2].delete()\n\n        for idx, im in enumerate(product.images.all()):\n            self.assertEqual(im.display_order, idx)\n\n    def test_variant_images(self):\n        parent = factories.ProductFactory(structure='parent')\n        variant = factories.create_product(parent=parent)\n        factories.create_product_image(product=variant, caption='Variant Image')\n        all_images = variant.get_all_images()\n        self.assertEquals(all_images.count(), 1)\n        product_image = all_images.first()\n        self.assertEquals(product_image.caption, 'Variant Image')\n\n    def test_variant_images_fallback_to_parent(self):\n        parent = factories.ProductFactory(structure='parent')\n        variant = factories.create_product(parent=parent)\n        factories.create_product_image(product=parent, caption='Parent Product Image')\n        all_images = variant.get_all_images()\n        self.assertEquals(all_images.count(), 1)\n        product_image = all_images.first()\n        self.assertEquals(product_image.caption, 'Parent Product Image')\n\n\nclass TestMissingProductImage(StaticLiveServerTestCase):\n\n    TEMP_MEDIA_ROOT = tempfile.mkdtemp()\n\n    @override_settings(MEDIA_ROOT=TEMP_MEDIA_ROOT)\n    @mock.patch('oscar.apps.catalogue.abstract_models.find')\n    def test_symlink_creates_directories(self, mock_find):\n        # Create a fake empty file to symlink\n        img = tempfile.NamedTemporaryFile(delete=False)\n        img.close()\n\n        mock_find.return_value = img.name\n        # Initialise the class with a nested path\n        path = 'image/path.jpg'\n        MissingProductImage(path)\n        # Check that the directory exists\n        image_path = os.path.join(self.TEMP_MEDIA_ROOT, path)\n        self.assertTrue(os.path.exists(image_path))\n\n        # Clean up\n        for f in [image_path, img.name]:\n            os.unlink(f)\n        for d in [os.path.join(self.TEMP_MEDIA_ROOT, 'image'), self.TEMP_MEDIA_ROOT]:\n            os.rmdir(d)\n\n    @mock.patch('oscar.apps.catalogue.abstract_models.MissingProductImage.symlink_missing_image')\n    def test_no_symlink_when_no_media_root(self, mock_symlink):\n        MissingProductImage()\n        self.assertEqual(mock_symlink.call_count, 0)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django.contrib import admin\n\nfrom oscar.core.loading import get_model\n\n\nclass UserAddressAdmin(admin.ModelAdmin):\n    readonly_fields = ('num_orders_as_billing_address', 'num_orders_as_shipping_address')\n\n\nclass CountryAdmin(admin.ModelAdmin):\n    list_display = [\n        '__str__',\n        'display_order'\n    ]\n    list_filter = [\n        'is_shipping_country'\n    ]\n    search_fields = [\n        'name',\n        'printable_name',\n        'iso_3166_1_a2',\n        'iso_3166_1_a3'\n    ]\n\n\nadmin.site.register(get_model('address', 'useraddress'), UserAddressAdmin)\nadmin.site.register(get_model('address', 'country'), CountryAdmin)\n",
    "output": "from django.test import TestCase\nfrom django.test.utils import override_settings\n\nfrom oscar.apps.catalogue.search_handlers import (\n    get_product_search_handler_class,\n)\n\n\nclass TestSearchHandler(object):\n    pass\n\n\nclass TestProductSearchHandlerSetting(TestCase):\n    def test_product_search_handler_setting(self):\n        \"\"\"\n        Test that the `OSCAR_PRODUCT_SEARCH_HANDLER` setting, when set,\n        dictates the return value of the `get_product_search_handler_class`\n        function.\n        \"\"\"\n        handler_override = 'tests.integration.catalogue.test_product_search_handler_setting.TestSearchHandler'\n        with override_settings(OSCAR_PRODUCT_SEARCH_HANDLER=handler_override):\n            handler_class = get_product_search_handler_class()\n\n        self.assertEqual(handler_class, TestSearchHandler)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django.contrib import admin\n\nfrom oscar.core.loading import get_model\n\n\nclass UserAddressAdmin(admin.ModelAdmin):\n    readonly_fields = ('num_orders_as_billing_address', 'num_orders_as_shipping_address')\n\n\nclass CountryAdmin(admin.ModelAdmin):\n    list_display = [\n        '__str__',\n        'display_order'\n    ]\n    list_filter = [\n        'is_shipping_country'\n    ]\n    search_fields = [\n        'name',\n        'printable_name',\n        'iso_3166_1_a2',\n        'iso_3166_1_a3'\n    ]\n\n\nadmin.site.register(get_model('address', 'useraddress'), UserAddressAdmin)\nadmin.site.register(get_model('address', 'country'), CountryAdmin)\n",
    "output": ""
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django.contrib import admin\n\nfrom oscar.core.loading import get_model\n\n\nclass UserAddressAdmin(admin.ModelAdmin):\n    readonly_fields = ('num_orders_as_billing_address', 'num_orders_as_shipping_address')\n\n\nclass CountryAdmin(admin.ModelAdmin):\n    list_display = [\n        '__str__',\n        'display_order'\n    ]\n    list_filter = [\n        'is_shipping_country'\n    ]\n    search_fields = [\n        'name',\n        'printable_name',\n        'iso_3166_1_a2',\n        'iso_3166_1_a3'\n    ]\n\n\nadmin.site.register(get_model('address', 'useraddress'), UserAddressAdmin)\nadmin.site.register(get_model('address', 'country'), CountryAdmin)\n",
    "output": "from django.test import TestCase\n\nfrom oscar.apps.catalogue.reviews import forms\nfrom oscar.test.factories import UserFactory, create_product\n\n\nclass TestReviewForm(TestCase):\n\n    def test_cleans_title(self):\n        product = create_product()\n        reviewer = UserFactory()\n        data = {\n            'title': '  This product is lovely',\n            'body': 'I really like this cheese',\n            'score': 0,\n            'name': 'JR Hartley',\n            'email': 'hartley@example.com'\n        }\n        form = forms.ProductReviewForm(\n            product=product, user=reviewer, data=data)\n\n        assert form.is_valid()\n\n        review = form.save()\n        assert review.title == \"This product is lovely\"\n\n    def test_validates_empty_data_correctly(self):\n        form = forms.ProductReviewForm(product=None, user=None, data={})\n        assert form.is_valid() is False\n\n    def test_validates_correctly(self):\n        data = {\n            'title': 'This product is lovely',\n            'body': 'I really like this cheese',\n            'score': 0,\n            'name': 'JR Hartley',\n            'email': 'hartley@example.com'\n        }\n        form = forms.ProductReviewForm(product=None, user=None, data=data)\n        assert form.is_valid()\n\n\nclass TestVoteForm(TestCase):\n\n    def setUp(self):\n        self.product = create_product()\n        self.reviewer = UserFactory()\n        self.voter = UserFactory()\n        self.review = self.product.reviews.create(\n            title='This is nice',\n            score=3,\n            body=\"This is the body\",\n            user=self.reviewer)\n\n    def test_allows_real_users_to_vote(self):\n        form = forms.VoteForm(self.review, self.voter, data={'delta': 1})\n        self.assertTrue(form.is_valid())\n\n    def test_prevents_users_from_voting_more_than_once(self):\n        self.review.vote_up(self.voter)\n        form = forms.VoteForm(self.review, self.voter, data={'delta': 1})\n        self.assertFalse(form.is_valid())\n        self.assertTrue(len(form.errors['__all__']) > 0)\n\n    def test_prevents_users_voting_on_their_own_reviews(self):\n        form = forms.VoteForm(self.review, self.reviewer, data={'delta': 1})\n        self.assertFalse(form.is_valid())\n        self.assertTrue(len(form.errors['__all__']) > 0)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django.contrib import admin\n\nfrom oscar.core.loading import get_model\n\n\nclass UserAddressAdmin(admin.ModelAdmin):\n    readonly_fields = ('num_orders_as_billing_address', 'num_orders_as_shipping_address')\n\n\nclass CountryAdmin(admin.ModelAdmin):\n    list_display = [\n        '__str__',\n        'display_order'\n    ]\n    list_filter = [\n        'is_shipping_country'\n    ]\n    search_fields = [\n        'name',\n        'printable_name',\n        'iso_3166_1_a2',\n        'iso_3166_1_a3'\n    ]\n\n\nadmin.site.register(get_model('address', 'useraddress'), UserAddressAdmin)\nadmin.site.register(get_model('address', 'country'), CountryAdmin)\n",
    "output": "from django.test import TestCase\nfrom django.core.exceptions import ValidationError\n\nfrom oscar.core.compat import get_user_model\nfrom oscar.apps.catalogue.reviews import models\nfrom oscar.test.factories import create_product\nfrom oscar.test.factories import UserFactory\n\nUser = get_user_model()\n\n\nclass TestAnAnonymousReview(TestCase):\n\n    def setUp(self):\n        self.product = create_product()\n        self.data = {\n            'product': self.product,\n            'title': 'This product is lovely',\n            'body': 'I really like this cheese',\n            'score': 0,\n            'name': 'JR Hartley',\n            'email': 'hartley@example.com'\n        }\n\n    def review(self, **kwargs):\n        if kwargs:\n            data = self.data.copy()\n            data.update(kwargs)\n        else:\n            data = self.data\n        return models.ProductReview(**data)\n\n    def test_can_be_created(self):\n        review = self.review()\n        review.full_clean()\n\n    def test_requires_a_title(self):\n        review = self.review(title=\"\")\n        self.assertRaises(ValidationError, review.full_clean)\n\n    def test_requires_a_body(self):\n        review = self.review(body=\"\")\n        self.assertRaises(ValidationError, review.full_clean)\n\n    def test_requires_a_name(self):\n        review = self.review(name=\"\")\n        self.assertRaises(ValidationError, review.full_clean)\n\n    def test_requires_an_email_address(self):\n        review = self.review(email=\"\")\n        self.assertRaises(ValidationError, review.full_clean)\n\n    def test_requires_non_whitespace_title(self):\n        review = self.review(title=\"    \")\n        self.assertRaises(ValidationError, review.full_clean)\n\n    def test_starts_with_no_votes(self):\n        review = self.review()\n        review.save()\n        self.assertFalse(review.has_votes)\n        self.assertEqual(0, review.num_up_votes)\n        self.assertEqual(0, review.num_down_votes)\n\n    def test_has_reviewer_name_property(self):\n        review = self.review(name=\"Dave\")\n        self.assertEqual(\"Dave\", review.reviewer_name)\n\n    def test_review_moderate_setting_false(self):\n        with self.settings(OSCAR_MODERATE_REVIEWS=False):\n            review = self.review()\n            self.assertEqual(1, review.status)\n\n    def test_review_moderate_setting_true(self):\n        with self.settings(OSCAR_MODERATE_REVIEWS=True):\n            review = self.review()\n            self.assertEqual(0, review.status)\n\n\nclass TestAUserReview(TestCase):\n\n    def setUp(self):\n        self.product = create_product()\n        self.user = UserFactory(first_name=\"Tom\", last_name=\"Thumb\")\n        self.data = {\n            'product': self.product,\n            'title': 'This product is lovely',\n            'body': 'I really like this cheese',\n            'score': 0,\n            'user': self.user\n        }\n\n    def review(self, **kwargs):\n        if kwargs:\n            data = self.data.copy()\n            data.update(kwargs)\n        else:\n            data = self.data\n        return models.ProductReview(**data)\n\n    def test_can_be_created(self):\n        review = self.review()\n        review.full_clean()\n\n    def test_requires_a_title(self):\n        review = self.review(title=\"\")\n        self.assertRaises(ValidationError, review.full_clean)\n\n    def test_requires_a_body(self):\n        review = self.review(body=\"\")\n        self.assertRaises(ValidationError, review.full_clean)\n\n    def test_has_reviewer_name_property(self):\n        review = self.review()\n        self.assertEqual(\"Tom Thumb\", review.reviewer_name)\n\n    def test_num_approved_reviews(self):\n        review = self.review()\n        review.save()\n        self.assertEqual(self.product.num_approved_reviews, 1)\n        self.assertEqual(self.product.reviews.approved().first(), review)\n\n    def test_review_moderate_setting_false(self):\n        with self.settings(OSCAR_MODERATE_REVIEWS=False):\n            review = self.review()\n            self.assertEqual(1, review.status)\n\n    def test_review_moderate_setting_true(self):\n        with self.settings(OSCAR_MODERATE_REVIEWS=True):\n            review = self.review()\n            self.assertEqual(0, review.status)\n\n\nclass TestVotingOnAReview(TestCase):\n\n    def setUp(self):\n        self.product = create_product()\n        self.user = UserFactory()\n        self.voter = UserFactory()\n        self.review = self.product.reviews.create(\n            title='This is nice',\n            score=3,\n            body=\"This is the body\",\n            user=self.user)\n\n    def test_updates_totals_for_upvote(self):\n        self.review.vote_up(self.voter)\n        self.assertTrue(self.review.has_votes)\n        self.assertEqual(1, self.review.total_votes)\n        self.assertEqual(1, self.review.delta_votes)\n\n    def test_updates_totals_for_downvote(self):\n        self.review.vote_down(self.voter)\n        self.assertTrue(self.review.has_votes)\n        self.assertEqual(1, self.review.total_votes)\n        self.assertEqual(-1, self.review.delta_votes)\n\n    def test_is_permitted_for_normal_user(self):\n        is_allowed, reason = self.review.can_user_vote(self.voter)\n        self.assertTrue(is_allowed, reason)\n\n    def test_is_not_permitted_for_reviewer(self):\n        is_allowed, reason = self.review.can_user_vote(self.user)\n        self.assertFalse(is_allowed, reason)\n\n    def test_is_not_permitted_for_previous_voter(self):\n        self.review.vote_up(self.voter)\n        is_allowed, reason = self.review.can_user_vote(self.voter)\n        self.assertFalse(is_allowed, reason)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django.contrib import admin\n\nfrom oscar.core.loading import get_model\n\n\nclass UserAddressAdmin(admin.ModelAdmin):\n    readonly_fields = ('num_orders_as_billing_address', 'num_orders_as_shipping_address')\n\n\nclass CountryAdmin(admin.ModelAdmin):\n    list_display = [\n        '__str__',\n        'display_order'\n    ]\n    list_filter = [\n        'is_shipping_country'\n    ]\n    search_fields = [\n        'name',\n        'printable_name',\n        'iso_3166_1_a2',\n        'iso_3166_1_a3'\n    ]\n\n\nadmin.site.register(get_model('address', 'useraddress'), UserAddressAdmin)\nadmin.site.register(get_model('address', 'country'), CountryAdmin)\n",
    "output": ""
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django.contrib import admin\n\nfrom oscar.core.loading import get_model\n\n\nclass UserAddressAdmin(admin.ModelAdmin):\n    readonly_fields = ('num_orders_as_billing_address', 'num_orders_as_shipping_address')\n\n\nclass CountryAdmin(admin.ModelAdmin):\n    list_display = [\n        '__str__',\n        'display_order'\n    ]\n    list_filter = [\n        'is_shipping_country'\n    ]\n    search_fields = [\n        'name',\n        'printable_name',\n        'iso_3166_1_a2',\n        'iso_3166_1_a3'\n    ]\n\n\nadmin.site.register(get_model('address', 'useraddress'), UserAddressAdmin)\nadmin.site.register(get_model('address', 'country'), CountryAdmin)\n",
    "output": "from decimal import Decimal as D\nfrom unittest import mock\n\nfrom django.test import TestCase, override_settings\nfrom django.conf import settings\n\nfrom oscar.apps.basket import forms, formsets\nfrom oscar.apps.offer.utils import Applicator\nfrom oscar.core.loading import get_model\nfrom oscar.test import factories\nfrom oscar.test.basket import add_product\nfrom oscar.test.factories import (\n    BenefitFactory, ConditionalOfferFactory, ConditionFactory, RangeFactory)\n\n\nLine = get_model('basket', 'Line')\n\n\nclass TestBasketLineForm(TestCase):\n\n    def setUp(self):\n        self.applicator = Applicator()\n        rng = RangeFactory(includes_all_products=True)\n        self.condition = ConditionFactory(\n            range=rng, type=ConditionFactory._meta.model.VALUE,\n            value=D('100'), proxy_class=None)\n        self.benefit = BenefitFactory(\n            range=rng, type=BenefitFactory._meta.model.FIXED,\n            value=D('10'), max_affected_items=1)\n        self.basket = factories.create_basket()\n        self.line = self.basket.all_lines()[0]\n\n    def mock_availability_return_value(self, is_available, reason=''):\n        policy = self.line.purchase_info.availability\n        policy.is_purchase_permitted = mock.MagicMock(\n            return_value=(is_available, reason))\n\n    def build_form(self, quantity=None):\n        if quantity is None:\n            quantity = self.line.quantity\n        return forms.BasketLineForm(\n            strategy=self.basket.strategy,\n            data={'quantity': quantity},\n            instance=self.line)\n\n    def test_enforces_availability_policy_for_valid_quantities(self):\n        self.mock_availability_return_value(True)\n        form = self.build_form()\n        self.assertTrue(form.is_valid())\n\n    def test_enforces_availability_policy_for_invalid_quantities(self):\n        self.mock_availability_return_value(False, \"Some reason\")\n        form = self.build_form()\n        self.assertFalse(form.is_valid())\n        self.assertEqual(\n            form.errors['quantity'], ['Some reason'])\n\n    def test_skips_availability_policy_for_zero_quantities(self):\n        self.mock_availability_return_value(True)\n        form = self.build_form(quantity=0)\n        self.assertTrue(form.is_valid())\n\n    def test_enforces_max_line_quantity_for_new_product(self):\n        invalid_qty = settings.OSCAR_MAX_BASKET_QUANTITY_THRESHOLD + 1\n        form = self.build_form(quantity=invalid_qty)\n        self.assertFalse(form.is_valid())\n\n    @override_settings(OSCAR_MAX_BASKET_QUANTITY_THRESHOLD=10)\n    def test_enforce_max_line_quantity_for_existing_product(self):\n        self.basket.flush()\n        product = factories.create_product(num_in_stock=20)\n        add_product(self.basket, D('100'), 4, product)\n        self.line = self.basket.all_lines()[0]\n        form = self.build_form(quantity=6)\n        self.assertTrue(form.is_valid())\n        form.save()\n        form = self.build_form(quantity=11)\n        self.assertFalse(form.is_valid())\n\n    def test_line_quantity_max_attribute_per_num_available(self):\n        self.basket.flush()\n        product = factories.create_product(num_in_stock=20)\n        add_product(self.basket, D('100'), 4, product)\n        self.line = self.basket.all_lines()[0]\n        form = self.build_form()\n        self.assertIn('max=\"20\"', str(form['quantity']))\n\n    @override_settings(OSCAR_MAX_BASKET_QUANTITY_THRESHOLD=10)\n    def test_line_quantity_max_attribute_per_basket_threshold(self):\n        self.basket.flush()\n        product = factories.create_product(num_in_stock=20)\n        add_product(self.basket, D('100'), 4, product)\n        self.line = self.basket.all_lines()[0]\n        form = self.build_form()\n        self.assertIn('max=\"6\"', str(form['quantity']))\n\n    def test_basketline_formset_ordering(self):\n        # when we use a unordered queryset in the Basketlineformset, the\n        # discounts will be lost because django will query the database\n        # again to enforce ordered results\n        add_product(self.basket, D('100'), 5)\n        offer = ConditionalOfferFactory(\n            pk=1, condition=self.condition, benefit=self.benefit)\n\n        # now we force an unordered queryset so we can see that our discounts\n        # will disappear due to a new ordering query (see django/forms/model.py)\n        default_line_ordering = Line._meta.ordering\n        Line._meta.ordering = []\n        self.basket._lines = self.basket.lines.all()\n\n        self.applicator.apply_offers(self.basket, [offer])\n        formset = formsets.BasketLineFormSet(\n            strategy=self.basket.strategy,\n            queryset=self.basket.all_lines())\n\n        # the discount is in all_lines():\n        self.assertTrue(self.basket.all_lines()[0].has_discount)\n\n        # but not in the formset\n        self.assertFalse(formset.forms[0].instance.has_discount)\n\n        # Restore the ordering on the line\n        Line._meta.ordering = default_line_ordering\n\n        # clear the cached lines and apply the offer again\n        self.basket._lines = None\n        self.applicator.apply_offers(self.basket, [offer])\n\n        formset = formsets.BasketLineFormSet(\n            strategy=self.basket.strategy,\n            queryset=self.basket.all_lines())\n        self.assertTrue(formset.forms[0].instance.has_discount)\n\n\nclass TestAddToBasketForm(TestCase):\n\n    def test_allows_a_product_quantity_to_be_increased(self):\n        basket = factories.create_basket()\n        product = basket.all_lines()[0].product\n\n        # Add more of the same product\n        data = {'quantity': 1}\n        form = forms.AddToBasketForm(\n            basket=basket, product=product, data=data)\n        self.assertTrue(form.is_valid())\n\n    def test_checks_whether_passed_product_id_matches_a_real_product(self):\n        basket = factories.create_basket()\n        product = basket.all_lines()[0].product\n\n        # Add more of the same product\n        data = {'quantity': -1}\n        form = forms.AddToBasketForm(\n            basket=basket, product=product, data=data)\n        self.assertFalse(form.is_valid())\n\n    def test_checks_if_purchase_is_permitted(self):\n        basket = factories.BasketFactory()\n        product = factories.ProductFactory()\n\n        # Build a 4-level mock monster so we can force the return value of\n        # whether the product is available to buy. This is a serious code smell\n        # and needs to be remedied.\n        info = mock.Mock()\n        info.availability = mock.Mock()\n        info.availability.is_purchase_permitted = mock.Mock(\n            return_value=(False, \"Not on your nelly!\"))\n        basket.strategy.fetch_for_product = mock.Mock(\n            return_value=info)\n\n        data = {'quantity': 1}\n        form = forms.AddToBasketForm(\n            basket=basket, product=product, data=data)\n        self.assertFalse(form.is_valid())\n        self.assertEqual('Not on your nelly!', form.errors['__all__'][0])\n\n    def test_mixed_currency_baskets_are_not_permitted(self):\n        # Ensure basket is one currency\n        basket = mock.Mock()\n        basket.currency = 'GBP'\n        basket.num_items = 1\n\n        # Ensure new product has different currency\n        info = mock.Mock()\n        info.price.currency = 'EUR'\n        basket.strategy.fetch_for_product = mock.Mock(\n            return_value=info)\n\n        product = factories.ProductFactory()\n\n        data = {'quantity': 1}\n        form = forms.AddToBasketForm(\n            basket=basket, product=product, data=data)\n        self.assertFalse(form.is_valid())\n\n    def test_cannot_add_a_product_without_price(self):\n        basket = factories.BasketFactory()\n        product = factories.create_product(price=None)\n\n        data = {'quantity': 1}\n        form = forms.AddToBasketForm(\n            basket=basket, product=product, data=data)\n        self.assertFalse(form.is_valid())\n        self.assertEqual(\n            form.errors['__all__'][0],\n            'This product cannot be added to the basket because a price '\n            'could not be determined for it.',\n        )\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django.contrib import admin\n\nfrom oscar.core.loading import get_model\n\n\nclass UserAddressAdmin(admin.ModelAdmin):\n    readonly_fields = ('num_orders_as_billing_address', 'num_orders_as_shipping_address')\n\n\nclass CountryAdmin(admin.ModelAdmin):\n    list_display = [\n        '__str__',\n        'display_order'\n    ]\n    list_filter = [\n        'is_shipping_country'\n    ]\n    search_fields = [\n        'name',\n        'printable_name',\n        'iso_3166_1_a2',\n        'iso_3166_1_a3'\n    ]\n\n\nadmin.site.register(get_model('address', 'useraddress'), UserAddressAdmin)\nadmin.site.register(get_model('address', 'country'), CountryAdmin)\n",
    "output": "from django.http import HttpResponse\nfrom django.test import TestCase\nfrom django.test.client import RequestFactory\nfrom django.contrib.auth.models import AnonymousUser\n\nfrom oscar.apps.basket import middleware\n\n\nclass TestBasketMiddleware(TestCase):\n\n    @staticmethod\n    def get_response_for_test(request):\n        return HttpResponse()\n\n    def setUp(self):\n        self.middleware = middleware.BasketMiddleware(self.get_response_for_test)\n        self.request = RequestFactory().get('/')\n        self.request.user = AnonymousUser()\n        self.middleware(self.request)\n\n    def test_basket_is_attached_to_request(self):\n        self.assertTrue(hasattr(self.request, 'basket'))\n\n    def test_strategy_is_attached_to_basket(self):\n        self.assertTrue(hasattr(self.request.basket, 'strategy'))\n\n    def test_strategy_is_attached_to_request(self):\n        self.assertTrue(hasattr(self.request, 'strategy'))\n\n    def test_get_cookie_basket_handles_invalid_signatures(self):\n        request_factory = RequestFactory()\n        request_factory.cookies['oscar_open_basket'] = '1:NOTAVALIDHASH'\n        request = request_factory.get('/')\n        request.cookies_to_delete = []\n\n        cookie_basket = self.middleware.get_cookie_basket(\"oscar_open_basket\", request, None)\n\n        self.assertEqual(None, cookie_basket)\n        self.assertIn(\"oscar_open_basket\", request.cookies_to_delete)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django.contrib import admin\n\nfrom oscar.core.loading import get_model\n\n\nclass UserAddressAdmin(admin.ModelAdmin):\n    readonly_fields = ('num_orders_as_billing_address', 'num_orders_as_shipping_address')\n\n\nclass CountryAdmin(admin.ModelAdmin):\n    list_display = [\n        '__str__',\n        'display_order'\n    ]\n    list_filter = [\n        'is_shipping_country'\n    ]\n    search_fields = [\n        'name',\n        'printable_name',\n        'iso_3166_1_a2',\n        'iso_3166_1_a3'\n    ]\n\n\nadmin.site.register(get_model('address', 'useraddress'), UserAddressAdmin)\nadmin.site.register(get_model('address', 'country'), CountryAdmin)\n",
    "output": "# -*- coding: utf-8 -*-\nfrom decimal import Decimal as D\n\nfrom django.test import TestCase\n\nfrom oscar.apps.basket.models import Basket\nfrom oscar.apps.catalogue.models import Option\nfrom oscar.apps.partner import availability, prices, strategy\nfrom oscar.test import factories\nfrom oscar.test.factories import (\n    BasketFactory, BasketLineAttributeFactory, OptionFactory, ProductFactory)\n\n\nclass TestANewBasket(TestCase):\n\n    def setUp(self):\n        self.basket = Basket()\n        self.basket.strategy = strategy.Default()\n\n    def test_has_zero_lines(self):\n        self.assertEqual(0, self.basket.num_lines)\n\n    def test_has_zero_items(self):\n        self.assertEqual(0, self.basket.num_items)\n\n    def test_doesnt_contain_vouchers(self):\n        self.assertFalse(self.basket.contains_a_voucher)\n\n    def test_can_be_edited(self):\n        self.assertTrue(self.basket.can_be_edited)\n\n    def test_is_empty(self):\n        self.assertTrue(self.basket.is_empty)\n\n    def test_is_not_submitted(self):\n        self.assertFalse(self.basket.is_submitted)\n\n    def test_has_no_applied_offers(self):\n        self.assertEqual({}, self.basket.applied_offers())\n\n\nclass TestBasketLine(TestCase):\n\n    def test_description(self):\n        basket = BasketFactory()\n        product = ProductFactory(title=\"A product\")\n        basket.add_product(product)\n\n        line = basket.lines.first()\n        self.assertEqual(line.description, \"A product\")\n\n    def test_description_with_attributes(self):\n        basket = BasketFactory()\n        product = ProductFactory(title=\"A product\")\n        basket.add_product(product)\n\n        line = basket.lines.first()\n        BasketLineAttributeFactory(\n            line=line, value='\\u2603', option__name='with')\n        self.assertEqual(line.description, \"A product (with = '\\u2603')\")\n\n    def test_create_line_reference(self):\n        basket = BasketFactory()\n        product = ProductFactory(title=\"A product\")\n        option = OptionFactory(name=\"product_option\", code=\"product_option\")\n        option_product = ProductFactory(title='Asunci\u00f3n')\n        options = [{'option': option, 'value': option_product}]\n        basket.add_product(product, options=options)\n\n    def test_basket_lines_queryset_is_ordered(self):\n        # This is needed to make sure a formset is not performing the query\n        # again with an order_by clause (losing all calculated discounts)\n        basket = BasketFactory()\n        product = ProductFactory(title=\"A product\")\n        another_product = ProductFactory(title=\"Another product\")\n        basket.add_product(product)\n        basket.add_product(another_product)\n        queryset = basket.all_lines()\n        self.assertTrue(queryset.ordered)\n\n    def test_line_tax_for_zero_tax_strategies(self):\n        basket = Basket()\n        basket.strategy = strategy.Default()\n        product = factories.create_product()\n        # Tax for the default strategy will be 0\n        factories.create_stockrecord(\n            product, price_excl_tax=D('75.00'), num_in_stock=10)\n        basket.add(product, 1)\n\n        self.assertEqual(basket.lines.first().line_tax, D('0'))\n\n    def test_line_tax_for_unknown_tax_strategies(self):\n\n        class UnknownTaxStrategy(strategy.Default):\n            \"\"\" A test strategy where the tax is not known \"\"\"\n\n            def pricing_policy(self, product, stockrecord):\n                return prices.FixedPrice('GBP', stockrecord.price_excl_tax, tax=None)\n\n        basket = Basket()\n        basket.strategy = UnknownTaxStrategy()\n        product = factories.create_product()\n        factories.create_stockrecord(product, num_in_stock=10)\n        basket.add(product, 1)\n\n        self.assertEqual(basket.lines.first().line_tax, None)\n\n\nclass TestAddingAProductToABasket(TestCase):\n\n    def setUp(self):\n        self.basket = Basket()\n        self.basket.strategy = strategy.Default()\n        self.product = factories.create_product()\n        self.record = factories.create_stockrecord(\n            currency='GBP',\n            product=self.product, price_excl_tax=D('10.00'))\n        self.purchase_info = factories.create_purchase_info(self.record)\n        self.basket.add(self.product)\n\n    def test_creates_a_line(self):\n        self.assertEqual(1, self.basket.num_lines)\n\n    def test_sets_line_prices(self):\n        line = self.basket.lines.all()[0]\n        self.assertEqual(line.price_incl_tax, self.purchase_info.price.incl_tax)\n        self.assertEqual(line.price_excl_tax, self.purchase_info.price.excl_tax)\n\n    def test_adding_negative_quantity(self):\n        self.assertEqual(1, self.basket.num_lines)\n        self.basket.add(self.product, quantity=4)\n        self.assertEqual(5, self.basket.line_quantity(self.product, self.record))\n        self.basket.add(self.product, quantity=-10)\n        self.assertEqual(0, self.basket.line_quantity(self.product, self.record))\n\n    def test_means_another_currency_product_cannot_be_added(self):\n        product = factories.create_product()\n        factories.create_stockrecord(\n            currency='USD', product=product, price_excl_tax=D('20.00'))\n        with self.assertRaises(ValueError):\n            self.basket.add(product)\n\n    def test_cannot_add_a_product_without_price(self):\n        product = factories.create_product(price=None)\n        with self.assertRaises(ValueError):\n            self.basket.add(product)\n\n\nclass TestANonEmptyBasket(TestCase):\n\n    def setUp(self):\n        self.basket = Basket()\n        self.basket.strategy = strategy.Default()\n        self.product = factories.create_product()\n        self.record = factories.create_stockrecord(\n            self.product, price_excl_tax=D('10.00'))\n        self.purchase_info = factories.create_purchase_info(self.record)\n        self.basket.add(self.product, 10)\n\n    def test_can_be_flushed(self):\n        self.basket.flush()\n        self.assertEqual(self.basket.num_items, 0)\n\n    def test_returns_correct_product_quantity(self):\n        self.assertEqual(10, self.basket.product_quantity(\n            self.product))\n\n    def test_returns_correct_line_quantity_for_existing_product_and_stockrecord(self):\n        self.assertEqual(10, self.basket.line_quantity(\n            self.product, self.record))\n\n    def test_returns_zero_line_quantity_for_alternative_stockrecord(self):\n        record = factories.create_stockrecord(\n            self.product, price_excl_tax=D('5.00'))\n        self.assertEqual(0, self.basket.line_quantity(\n            self.product, record))\n\n    def test_returns_zero_line_quantity_for_missing_product_and_stockrecord(self):\n        product = factories.create_product()\n        record = factories.create_stockrecord(\n            product, price_excl_tax=D('5.00'))\n        self.assertEqual(0, self.basket.line_quantity(\n            product, record))\n\n    def test_returns_correct_quantity_for_existing_product_and_stockrecord_and_options(self):\n        product = factories.create_product()\n        record = factories.create_stockrecord(\n            product, price_excl_tax=D('5.00'))\n        option = Option.objects.create(name=\"Message\")\n        options = [{\"option\": option, \"value\": \"2\"}]\n\n        self.basket.add(product, options=options)\n        self.assertEqual(0, self.basket.line_quantity(\n            product, record))\n        self.assertEqual(1, self.basket.line_quantity(\n            product, record, options))\n\n    def test_total_sums_product_totals(self):\n        product = factories.create_product()\n        factories.create_stockrecord(\n            product, price_excl_tax=D('5.00'))\n        self.basket.add(product, 1)\n        self.assertEqual(self.basket.total_excl_tax, 105)\n\n    def test_totals_for_free_products(self):\n        basket = Basket()\n        basket.strategy = strategy.Default()\n        # Add a zero-priced product to the basket\n        product = factories.create_product()\n        factories.create_stockrecord(\n            product, price_excl_tax=D('0.00'), num_in_stock=10)\n        basket.add(product, 1)\n\n        self.assertEqual(basket.lines.count(), 1)\n        self.assertEqual(basket.total_excl_tax, 0)\n        self.assertEqual(basket.total_incl_tax, 0)\n\n    def test_basket_prices_calculation_for_unavailable_pricing(self):\n        new_product = factories.create_product()\n        factories.create_stockrecord(\n            new_product, price_excl_tax=D('5.00'))\n        self.basket.add(new_product, 1)\n\n        class UnavailableProductStrategy(strategy.Default):\n            \"\"\" A test strategy that makes a specific product unavailable \"\"\"\n\n            def availability_policy(self, product, stockrecord):\n                if product == new_product:\n                    return availability.Unavailable()\n                return super().availability_policy(product, stockrecord)\n\n            def pricing_policy(self, product, stockrecord):\n                if product == new_product:\n                    return prices.Unavailable()\n                return super().pricing_policy(product, stockrecord)\n\n        self.basket.strategy = UnavailableProductStrategy()\n        line = self.basket.all_lines()[1]\n        self.assertEqual(line.get_warning(), \"'D\\xf9\\uff4d\\u03fb\\u03d2 title' is no longer available\")\n        self.assertIsNone(line.line_price_excl_tax)\n        self.assertIsNone(line.line_price_incl_tax)\n        self.assertIsNone(line.line_price_excl_tax_incl_discounts)\n        self.assertIsNone(line.line_price_incl_tax_incl_discounts)\n        self.assertIsNone(line.line_tax)\n        self.assertEqual(self.basket.total_excl_tax, 100)\n        self.assertEqual(self.basket.total_incl_tax, 100)\n        self.assertEqual(self.basket.total_excl_tax_excl_discounts, 100)\n        self.assertEqual(self.basket.total_incl_tax_excl_discounts, 100)\n\n    def test_max_allowed_quantity(self):\n        self.basket.add_product(self.product, quantity=3)\n\n        # max allowed here is 7 (20-10+3)\n        with self.settings(OSCAR_MAX_BASKET_QUANTITY_THRESHOLD=20):\n            max_allowed, basket_threshold = self.basket.max_allowed_quantity()\n            self.assertEqual(max_allowed, 7)\n            self.assertEqual(basket_threshold, 20)\n\n        # but we can also completely disable the threshold\n        with self.settings(OSCAR_MAX_BASKET_QUANTITY_THRESHOLD=None):\n            max_allowed, basket_threshold = self.basket.max_allowed_quantity()\n            self.assertEqual(max_allowed, None)\n            self.assertEqual(basket_threshold, None)\n\n    def test_is_quantity_allowed(self):\n        with self.settings(OSCAR_MAX_BASKET_QUANTITY_THRESHOLD=20):\n            # 7 or below is possible\n            allowed, message = self.basket.is_quantity_allowed(qty=7)\n            self.assertTrue(allowed)\n            self.assertIsNone(message)\n            # but above it's not\n            allowed, message = self.basket.is_quantity_allowed(qty=11)\n            self.assertFalse(allowed)\n            self.assertIsNotNone(message)\n\n        with self.settings(OSCAR_MAX_BASKET_QUANTITY_THRESHOLD=None):\n            # with the treshold disabled all quantities are possible\n            allowed, message = self.basket.is_quantity_allowed(qty=7)\n            self.assertTrue(allowed)\n            self.assertIsNone(message)\n            allowed, message = self.basket.is_quantity_allowed(qty=5000)\n            self.assertTrue(allowed)\n            self.assertIsNone(message)\n\n\nclass TestMergingTwoBaskets(TestCase):\n\n    def setUp(self):\n        self.product = factories.create_product()\n        self.record = factories.create_stockrecord(\n            self.product, price_excl_tax=D('10.00'))\n        self.purchase_info = factories.create_purchase_info(self.record)\n\n        self.main_basket = Basket()\n        self.main_basket.strategy = strategy.Default()\n        self.main_basket.add(self.product, quantity=2)\n\n        self.merge_basket = Basket()\n        self.merge_basket.strategy = strategy.Default()\n        self.merge_basket.add(self.product, quantity=1)\n\n        self.main_basket.merge(self.merge_basket)\n\n    def test_doesnt_sum_quantities(self):\n        self.assertEqual(1, self.main_basket.num_lines)\n\n    def test_changes_status_of_merge_basket(self):\n        self.assertEqual(Basket.MERGED, self.merge_basket.status)\n\n\nclass TestASubmittedBasket(TestCase):\n\n    def setUp(self):\n        self.basket = Basket()\n        self.basket.strategy = strategy.Default()\n        self.basket.submit()\n\n    def test_has_correct_status(self):\n        self.assertTrue(self.basket.is_submitted)\n\n    def test_can_be_edited(self):\n        self.assertFalse(self.basket.can_be_edited)\n\n\nclass TestMergingAVoucherBasket(TestCase):\n\n    def test_transfers_vouchers_to_new_basket(self):\n        baskets = [factories.BasketFactory(), factories.BasketFactory()]\n        voucher = factories.VoucherFactory()\n        baskets[0].vouchers.add(voucher)\n        baskets[1].merge(baskets[0])\n\n        self.assertEqual(1, baskets[1].vouchers.all().count())\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django.contrib import admin\n\nfrom oscar.core.loading import get_model\n\n\nclass UserAddressAdmin(admin.ModelAdmin):\n    readonly_fields = ('num_orders_as_billing_address', 'num_orders_as_shipping_address')\n\n\nclass CountryAdmin(admin.ModelAdmin):\n    list_display = [\n        '__str__',\n        'display_order'\n    ]\n    list_filter = [\n        'is_shipping_country'\n    ]\n    search_fields = [\n        'name',\n        'printable_name',\n        'iso_3166_1_a2',\n        'iso_3166_1_a3'\n    ]\n\n\nadmin.site.register(get_model('address', 'useraddress'), UserAddressAdmin)\nadmin.site.register(get_model('address', 'country'), CountryAdmin)\n",
    "output": "import datetime\n\nfrom django.test import TestCase\n\nfrom oscar.apps.basket.reports import (\n    OpenBasketReportGenerator, SubmittedBasketReportGenerator)\n\n\nclass TestBasketReports(TestCase):\n\n    def test_open_report_doesnt_error(self):\n        data = {\n            'start_date': datetime.date(2012, 5, 1),\n            'end_date': datetime.date(2012, 5, 17),\n            'formatter': 'CSV'\n        }\n        generator = OpenBasketReportGenerator(**data)\n        generator.generate()\n\n    def test_submitted_report_doesnt_error(self):\n        data = {\n            'start_date': datetime.date(2012, 5, 1),\n            'end_date': datetime.date(2012, 5, 17),\n            'formatter': 'CSV'\n        }\n        generator = SubmittedBasketReportGenerator(**data)\n        generator.generate()\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django.contrib import admin\n\nfrom oscar.core.loading import get_model\n\n\nclass UserAddressAdmin(admin.ModelAdmin):\n    readonly_fields = ('num_orders_as_billing_address', 'num_orders_as_shipping_address')\n\n\nclass CountryAdmin(admin.ModelAdmin):\n    list_display = [\n        '__str__',\n        'display_order'\n    ]\n    list_filter = [\n        'is_shipping_country'\n    ]\n    search_fields = [\n        'name',\n        'printable_name',\n        'iso_3166_1_a2',\n        'iso_3166_1_a3'\n    ]\n\n\nadmin.site.register(get_model('address', 'useraddress'), UserAddressAdmin)\nadmin.site.register(get_model('address', 'country'), CountryAdmin)\n",
    "output": "\nimport pytest\nfrom oscar.test.factories import (\n    BasketFactory, ConditionalOfferFactory, ProductFactory)\n\n\n@pytest.fixture\ndef filled_basket():\n    basket = BasketFactory()\n    product1 = ProductFactory()\n    product2 = ProductFactory()\n    basket.add_product(product1, quantity=10)\n    basket.add_product(product2, quantity=20)\n    return basket\n\n\n@pytest.mark.django_db\nclass TestLineOfferConsumer(object):\n\n    def test_consumed_no_offer(self, filled_basket):\n        for line in filled_basket.all_lines():\n            assert line.consumer.consumed() == 0\n\n    def test_consumed_with_offer(self, filled_basket):\n        offer1 = ConditionalOfferFactory(name='offer1')\n        offer2 = ConditionalOfferFactory(name='offer2')\n        offer1.exclusive = False\n        offer2.exclusive = False\n\n        for line in filled_basket.all_lines():\n            assert line.consumer.consumed(offer1) == 0\n            assert line.consumer.consumed(offer2) == 0\n\n        line1 = filled_basket.all_lines()[0]\n        line2 = filled_basket.all_lines()[1]\n\n        line1.consumer.consume(1, offer1)\n        assert line1.consumer.consumed() == 1\n        assert line1.consumer.consumed(offer1) == 1\n        assert line1.consumer.consumed(offer2) == 0\n\n        line1.consumer.consume(9, offer1)\n        assert line1.consumer.consumed() == line1.quantity\n        assert line1.consumer.consumed(offer1) == line1.quantity\n        assert line1.consumer.consumed(offer2) == 0\n\n        line1.consumer.consume(99, offer1)\n        assert line1.consumer.consumed(offer1) == line1.quantity\n        assert line1.consumer.consumed(offer2) == 0\n\n        line1.consumer.consume(1, offer2)\n        line2.consumer.consume(1, offer2)\n\n        assert line1.consumer.consumed(offer2) == 1\n        assert line2.consumer.consumed(offer2) == 1\n\n    def test_consume(self, filled_basket):\n        line = filled_basket.all_lines()[0]\n        line.consume(1)\n        assert line.quantity_with_discount == 1\n        line.consume(99)\n        assert line.quantity_with_discount == 10\n\n    def test_consumed_with_exclusive_offer(self, filled_basket):\n        offer1 = ConditionalOfferFactory(name='offer1')\n        offer2 = ConditionalOfferFactory(name='offer2')\n        offer3 = ConditionalOfferFactory(name='offer3')\n        offer1.exclusive = True\n        offer2.exclusive = False\n        offer3.exclusive = False\n\n        for line in filled_basket.all_lines():\n            assert line.consumer.consumed(offer1) == 0\n            assert line.consumer.consumed(offer2) == 0\n\n        line1 = filled_basket.all_lines()[0]\n        line2 = filled_basket.all_lines()[1]\n\n        line1.consumer.consume(1, offer1)\n        assert line1.is_available_for_offer_discount(offer2) is True\n\n        line1.consumer.consume(99, offer1)\n        assert line1.is_available_for_offer_discount(offer2) is False\n\n        line2.consumer.consume(1, offer2)\n        assert line2.is_available_for_offer_discount(offer1) is True\n\n        line2.consumer.consume(99, offer2)\n        assert line2.is_available_for_offer_discount(offer1) is False\n        assert line2.is_available_for_offer_discount(offer3) is True\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django.contrib import admin\n\nfrom oscar.core.loading import get_model\n\n\nclass UserAddressAdmin(admin.ModelAdmin):\n    readonly_fields = ('num_orders_as_billing_address', 'num_orders_as_shipping_address')\n\n\nclass CountryAdmin(admin.ModelAdmin):\n    list_display = [\n        '__str__',\n        'display_order'\n    ]\n    list_filter = [\n        'is_shipping_country'\n    ]\n    search_fields = [\n        'name',\n        'printable_name',\n        'iso_3166_1_a2',\n        'iso_3166_1_a3'\n    ]\n\n\nadmin.site.register(get_model('address', 'useraddress'), UserAddressAdmin)\nadmin.site.register(get_model('address', 'country'), CountryAdmin)\n",
    "output": "from django.contrib.messages import get_messages\nfrom django.test import TestCase\nfrom django.urls import reverse\n\nfrom oscar.apps.basket import views\nfrom oscar.test import factories\nfrom tests.fixtures import RequestFactory\n\n\nclass TestVoucherAddView(TestCase):\n    def test_get(self):\n        request = RequestFactory().get('/')\n\n        view = views.VoucherAddView.as_view()\n        response = view(request)\n\n        self.assertEqual(response.status_code, 302)\n\n    def _get_voucher_message(self, request):\n        return '\\n'.join(str(m.message) for m in get_messages(request))\n\n    def test_post_valid(self):\n        voucher = factories.VoucherFactory()\n        self.assertTrue(voucher.is_active())\n\n        data = {\n            'code': voucher.code\n        }\n        request = RequestFactory().post('/', data=data)\n        request.basket.save()\n\n        view = views.VoucherAddView.as_view()\n        response = view(request)\n        self.assertEqual(response.status_code, 302)\n\n        voucher = voucher.__class__.objects.get(pk=voucher.pk)\n        self.assertEqual(voucher.num_basket_additions, 1, msg=self._get_voucher_message(request))\n\n    def test_post_valid_from_set(self):\n        voucherset = factories.VoucherSetFactory()\n        voucher = voucherset.vouchers.first()\n\n        self.assertTrue(voucher.is_active())\n\n        data = {\n            'code': voucher.code\n        }\n        request = RequestFactory().post('/', data=data)\n        request.basket.save()\n\n        view = views.VoucherAddView.as_view()\n        response = view(request)\n        self.assertEqual(response.status_code, 302)\n\n        voucher = voucher.__class__.objects.get(pk=voucher.pk)\n        self.assertEqual(voucher.num_basket_additions, 1, msg=self._get_voucher_message(request))\n\n        self.assertEqual(voucherset.num_basket_additions, 1)\n\n\nclass TestVoucherRemoveView(TestCase):\n    def test_post_valid(self):\n        voucher = factories.VoucherFactory(num_basket_additions=5)\n\n        data = {\n            'code': voucher.code\n        }\n        request = RequestFactory().post('/', data=data)\n        request.basket.save()\n        request.basket.vouchers.add(voucher)\n\n        view = views.VoucherRemoveView.as_view()\n        response = view(request, pk=voucher.pk)\n        self.assertEqual(response.status_code, 302)\n\n        voucher = voucher.__class__.objects.get(pk=voucher.pk)\n        self.assertEqual(voucher.num_basket_additions, 4)\n\n    def test_post_with_missing_voucher(self):\n        \"\"\" If the voucher is missing, verify the view queues a message and redirects. \"\"\"\n        pk = '12345'\n        view = views.VoucherRemoveView.as_view()\n        request = RequestFactory().post('/')\n        request.basket.save()\n        response = view(request, pk=pk)\n\n        self.assertEqual(response.status_code, 302)\n\n        actual = list(get_messages(request))[-1].message\n        expected = \"No voucher found with id '{}'\".format(pk)\n        self.assertEqual(actual, expected)\n\n\nclass TestBasketSummaryView(TestCase):\n    def setUp(self):\n        self.url = reverse('basket:summary')\n        self.country = factories.CountryFactory()\n        self.user = factories.UserFactory()\n\n    def test_default_shipping_address(self):\n        user_address = factories.UserAddressFactory(\n            country=self.country, user=self.user, is_default_for_shipping=True\n        )\n        request = RequestFactory().get(self.url, user=self.user)\n        view = views.BasketView(request=request)\n        self.assertEquals(view.get_default_shipping_address(), user_address)\n\n    def test_default_shipping_address_for_anonymous_user(self):\n        request = RequestFactory().get(self.url)\n        view = views.BasketView(request=request)\n        self.assertIsNone(view.get_default_shipping_address())\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django.contrib import admin\n\nfrom oscar.core.loading import get_model\n\n\nclass UserAddressAdmin(admin.ModelAdmin):\n    readonly_fields = ('num_orders_as_billing_address', 'num_orders_as_shipping_address')\n\n\nclass CountryAdmin(admin.ModelAdmin):\n    list_display = [\n        '__str__',\n        'display_order'\n    ]\n    list_filter = [\n        'is_shipping_country'\n    ]\n    search_fields = [\n        'name',\n        'printable_name',\n        'iso_3166_1_a2',\n        'iso_3166_1_a3'\n    ]\n\n\nadmin.site.register(get_model('address', 'useraddress'), UserAddressAdmin)\nadmin.site.register(get_model('address', 'country'), CountryAdmin)\n",
    "output": ""
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django.contrib import admin\n\nfrom oscar.core.loading import get_model\n\n\nclass UserAddressAdmin(admin.ModelAdmin):\n    readonly_fields = ('num_orders_as_billing_address', 'num_orders_as_shipping_address')\n\n\nclass CountryAdmin(admin.ModelAdmin):\n    list_display = [\n        '__str__',\n        'display_order'\n    ]\n    list_filter = [\n        'is_shipping_country'\n    ]\n    search_fields = [\n        'name',\n        'printable_name',\n        'iso_3166_1_a2',\n        'iso_3166_1_a3'\n    ]\n\n\nadmin.site.register(get_model('address', 'useraddress'), UserAddressAdmin)\nadmin.site.register(get_model('address', 'country'), CountryAdmin)\n",
    "output": "from decimal import Decimal as D\nfrom unittest import mock\n\nfrom django.test import TestCase\n\nfrom oscar.apps.checkout import calculators\nfrom oscar.core import prices\n\n\nclass TestOrderTotalCalculator(TestCase):\n\n    def setUp(self):\n        self.calculator = calculators.OrderTotalCalculator()\n\n    def test_returns_correct_totals_when_tax_is_not_known(self):\n        basket = mock.Mock()\n        basket.total_excl_tax = D('10.00')\n        basket.is_tax_known = False\n\n        shipping_charge = prices.Price(\n            currency=basket.currency, excl_tax=D('5.00'))\n\n        total = self.calculator.calculate(basket, shipping_charge)\n\n        self.assertIsInstance(total, prices.Price)\n        self.assertEqual(D('10.00') + D('5.00'), total.excl_tax)\n        self.assertFalse(total.is_tax_known)\n\n    def test_returns_correct_totals_when_tax_is_known(self):\n        basket = mock.Mock()\n        basket.total_excl_tax = D('10.00')\n        basket.total_incl_tax = D('12.00')\n        basket.is_tax_known = True\n\n        shipping_charge = prices.Price(\n            currency=basket.currency, excl_tax=D('5.00'),\n            tax=D('0.50'))\n\n        total = self.calculator.calculate(basket, shipping_charge)\n\n        self.assertIsInstance(total, prices.Price)\n        self.assertEqual(D('10.00') + D('5.00'), total.excl_tax)\n        self.assertTrue(total.is_tax_known)\n        self.assertEqual(D('12.00') + D('5.50'), total.incl_tax)\n        self.assertEqual(D('2.00') + D('0.50'), total.tax)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django.contrib import admin\n\nfrom oscar.core.loading import get_model\n\n\nclass UserAddressAdmin(admin.ModelAdmin):\n    readonly_fields = ('num_orders_as_billing_address', 'num_orders_as_shipping_address')\n\n\nclass CountryAdmin(admin.ModelAdmin):\n    list_display = [\n        '__str__',\n        'display_order'\n    ]\n    list_filter = [\n        'is_shipping_country'\n    ]\n    search_fields = [\n        'name',\n        'printable_name',\n        'iso_3166_1_a2',\n        'iso_3166_1_a3'\n    ]\n\n\nadmin.site.register(get_model('address', 'useraddress'), UserAddressAdmin)\nadmin.site.register(get_model('address', 'country'), CountryAdmin)\n",
    "output": "# coding=utf-8\nfrom django.test import TestCase\nfrom django.test.utils import override_settings\n\nfrom oscar.apps.address.models import Country\nfrom oscar.apps.checkout.forms import ShippingAddressForm\nfrom oscar.test.factories import CountryFactory\n\n\nclass AnotherShippingAddressForm(ShippingAddressForm):\n    phone_number_fields = {\n        'phone_number': {\n            'required': False,\n            'help_text': '',\n            'max_length': 32,\n            'label': 'Phone number'\n        },\n        'another_phone_number': {\n            'required': False,\n            'help_text': 'Another phone number help text',\n            'max_length': 32,\n            'label': 'Another phone number'\n        },\n    }\n\n\nclass TestShippingAddressForm(TestCase):\n    minimal_data = {\n        'first_name': 'B\u00e4rry',\n        'last_name': 'Chuckle',\n        'line1': '1 King St',\n        'line4': 'Goth\u00e1m',\n        'postcode': 'N1 7RR'\n    }\n\n    def setUp(self):\n        CountryFactory(iso_3166_1_a2='GB', is_shipping_country=True)\n\n    def test_removes_country_field(self):\n        self.assertTrue('country' not in ShippingAddressForm().fields)\n\n    def test_keeps_country_field(self):\n        CountryFactory(iso_3166_1_a2='DE', is_shipping_country=True)\n        self.assertTrue('country' in ShippingAddressForm().fields)\n\n    @override_settings(OSCAR_REQUIRED_ADDRESS_FIELDS=('last_name', 'postcode'))\n    def test_required_fields_validated(self):\n        form = ShippingAddressForm()\n        self.assertTrue(form.fields['last_name'].required)\n        self.assertTrue(form.fields['postcode'].required)\n        self.assertFalse(form.fields['first_name'].required)\n        self.assertFalse(form.fields['line2'].required)\n        self.assertFalse(form.fields['line3'].required)\n        self.assertFalse(form.fields['line4'].required)\n\n    @override_settings(OSCAR_REQUIRED_ADDRESS_FIELDS=('phone_number',))\n    def test_required_phone_number_validated(self):\n        # This needs a separate test because of the logic in PhoneNumberMixin\n        form = ShippingAddressForm()\n        self.assertTrue(form.fields['phone_number'].required)\n\n    # Tests where the country field is hidden\n\n    def test_is_valid_without_phone_number(self):\n        self.assertTrue(ShippingAddressForm(self.minimal_data).is_valid())\n\n    def test_only_accepts_british_local_phone_number(self):\n        data = self.minimal_data.copy()\n        data['phone_number'] = '07 914721389'  # local UK number\n        self.assertTrue(ShippingAddressForm(data).is_valid())\n\n        data['phone_number'] = '0176 968 426 71'  # local German number\n        self.assertFalse(ShippingAddressForm(data).is_valid())\n\n    def test_only_accepts_british_local_phone_numbers(self):\n        data = self.minimal_data.copy()\n        # Both numbers are British local numbers\n        data['phone_number'] = '07 914721389'\n        data['another_phone_number'] = '0344493 0787'  # British Airways\n        self.assertTrue(AnotherShippingAddressForm(data).is_valid())\n\n        # Both numbers are local German numbers\n        data['phone_number'] = '0176 968 426 71'\n        data['another_phone_number'] = '07032 15 49225'  # IBM Germany\n        self.assertFalse(AnotherShippingAddressForm(data).is_valid())\n\n        # One number is British number, another is German number\n        data['phone_number'] = '07 914721389'\n        data['another_phone_number'] = '0176 968 426 71'\n        self.assertFalse(AnotherShippingAddressForm(data).is_valid())\n\n        # As previous case, but numbers are reversed\n        data['phone_number'] = '0176 968 426 71'\n        data['another_phone_number'] = '07 914721389'\n        self.assertFalse(AnotherShippingAddressForm(data).is_valid())\n\n    def test_is_valid_with_international_phone_number(self):\n        data = self.minimal_data.copy()\n        data['phone_number'] = '+49 176 968426 71'\n        form = ShippingAddressForm(data)\n        self.assertTrue(form.is_valid())\n\n    def test_is_valid_with_international_phone_numbers(self):\n        data = self.minimal_data.copy()\n        data['phone_number'] = '+49 176 968426 71'\n        data['another_phone_number'] = '+49-1805-426452'\n        form = AnotherShippingAddressForm(data)\n        self.assertTrue(form.is_valid())\n\n    # Tests where the country field exists\n\n    def test_needs_country_data(self):\n        CountryFactory(iso_3166_1_a2='DE', is_shipping_country=True)\n\n        self.assertFalse(ShippingAddressForm(self.minimal_data).is_valid())\n\n        data = self.minimal_data.copy()\n        data['country'] = Country.objects.get(iso_3166_1_a2='GB').pk\n        self.assertTrue(ShippingAddressForm(data).is_valid())\n\n    def test_only_accepts_local_phone_number_when_country_matches(self):\n        CountryFactory(iso_3166_1_a2='DE', is_shipping_country=True)\n\n        data = self.minimal_data.copy()\n        data['phone_number'] = '07 914721389'  # local UK number\n\n        data['country'] = Country.objects.get(iso_3166_1_a2='DE').pk\n        self.assertFalse(ShippingAddressForm(data).is_valid())\n\n        data['country'] = Country.objects.get(iso_3166_1_a2='GB').pk\n        self.assertTrue(ShippingAddressForm(data).is_valid())\n\n    def test_only_accepts_local_phone_numbers_when_country_matches(self):\n        CountryFactory(iso_3166_1_a2='DE', is_shipping_country=True)\n        data = self.minimal_data.copy()\n        # Local UK numbers\n        data['phone_number'] = '07 914721389'\n        data['another_phone_number'] = '0344493 0787'\n\n        data['country'] = Country.objects.get(iso_3166_1_a2='DE').pk\n        self.assertFalse(ShippingAddressForm(data).is_valid())\n\n        data['country'] = Country.objects.get(iso_3166_1_a2='GB').pk\n        self.assertTrue(ShippingAddressForm(data).is_valid())\n\n    @override_settings(OSCAR_REQUIRED_ADDRESS_FIELDS=('phone_number',))\n    def test_local_phone_number_invalid_without_country(self):\n        # Add another country, so we have two.\n        CountryFactory(iso_3166_1_a2='DE', is_shipping_country=True)\n        data = self.minimal_data.copy()\n        data['phone_number'] = '07 914721389'\n        # User hasn't selected a country. Because there are multiple country\n        # choices we should not accept the local number.\n        form = ShippingAddressForm(data)\n        self.assertFalse(form.is_valid())\n        self.assertIn('phone_number', form.errors)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django.contrib import admin\n\nfrom oscar.core.loading import get_model\n\n\nclass UserAddressAdmin(admin.ModelAdmin):\n    readonly_fields = ('num_orders_as_billing_address', 'num_orders_as_shipping_address')\n\n\nclass CountryAdmin(admin.ModelAdmin):\n    list_display = [\n        '__str__',\n        'display_order'\n    ]\n    list_filter = [\n        'is_shipping_country'\n    ]\n    search_fields = [\n        'name',\n        'printable_name',\n        'iso_3166_1_a2',\n        'iso_3166_1_a3'\n    ]\n\n\nadmin.site.register(get_model('address', 'useraddress'), UserAddressAdmin)\nadmin.site.register(get_model('address', 'country'), CountryAdmin)\n",
    "output": "from decimal import Decimal as D\nfrom unittest import mock\n\nfrom django.http import HttpRequest\nfrom django.test import TestCase\nfrom django.test.utils import override_settings\n\nfrom oscar.apps.checkout.calculators import OrderTotalCalculator\nfrom oscar.apps.checkout.mixins import CheckoutSessionMixin, OrderPlacementMixin\nfrom oscar.apps.checkout.exceptions import FailedPreCondition\nfrom oscar.core.loading import get_model\nfrom oscar.test import factories\nfrom oscar.test.basket import add_product\nfrom oscar.test.utils import RequestFactory\nfrom oscar.apps.shipping.methods import FixedPrice, Free\n\n\nOrder = get_model('order', 'Order')\n\n\nclass TestOrderPlacementMixin(TestCase):\n\n    def test_returns_none_when_no_shipping_address_passed_to_creation_method(self):\n        address = OrderPlacementMixin().create_shipping_address(\n            user=mock.Mock(), shipping_address=None)\n        self.assertEqual(address, None)\n\n    def test_update_address_book(self):\n        basket = factories.create_basket(empty=True)\n        user = factories.UserFactory()\n        add_product(basket, D('12.00'))\n        shipping_method = FixedPrice(D('5.00'), D('5.00'))\n\n        billing_address = factories.BillingAddressFactory(line1='1 Boardwalk Place',\n                                                          line2='Trafalgar Way',\n                                                          line3='Tower Hamlets',\n                                                          line4='London')\n        shipping_address = factories.ShippingAddressFactory(line1='Knightsbridge',\n                                                            line2='159',\n                                                            line4='London')\n        shipping_charge = shipping_method.calculate(basket)\n        order_total = OrderTotalCalculator().calculate(basket, shipping_charge)\n\n        order_submission_data = {'user': user,\n                                 'order_number': '12345',\n                                 'basket': basket,\n                                 'shipping_address': shipping_address,\n                                 'shipping_method': shipping_method,\n                                 'shipping_charge': shipping_charge,\n                                 'billing_address': billing_address,\n                                 'order_total': order_total}\n        OrderPlacementMixin().place_order(**order_submission_data)\n\n        self.assertEqual(user.addresses.filter(hash=billing_address.generate_hash()).count(), 1)\n        self.assertEqual(user.addresses.filter(hash=shipping_address.generate_hash()).count(), 1)\n\n        user_billing_address = user.addresses.get(hash=billing_address.generate_hash())\n        user_shipping_address = user.addresses.get(hash=shipping_address.generate_hash())\n        self.assertEqual(user_billing_address.num_orders_as_billing_address, 1)\n        self.assertEqual(user_shipping_address.num_orders_as_shipping_address, 1)\n\n        order_submission_data['order_number'] = '12346'\n\n        OrderPlacementMixin().place_order(**order_submission_data)\n\n        user_billing_address = user.addresses.get(hash=billing_address.generate_hash())\n        user_shipping_address = user.addresses.get(hash=shipping_address.generate_hash())\n        self.assertEqual(user_billing_address.num_orders_as_billing_address, 2)\n        self.assertEqual(user_shipping_address.num_orders_as_shipping_address, 2)\n\n        order_submission_data.pop('billing_address', None)\n        order_submission_data['order_number'] = '123457'\n        OrderPlacementMixin().place_order(**order_submission_data)\n\n        user_billing_address = user.addresses.get(hash=billing_address.generate_hash())\n        user_shipping_address = user.addresses.get(hash=shipping_address.generate_hash())\n        self.assertEqual(user_billing_address.num_orders_as_billing_address, 2)\n        self.assertEqual(user_shipping_address.num_orders_as_shipping_address, 3)\n\n        shipping_address.line2 = '160'\n        order_submission_data['billing_address'] = billing_address\n        order_submission_data['order_number'] = '123458'\n        OrderPlacementMixin().place_order(**order_submission_data)\n\n        user_billing_address = user.addresses.get(hash=billing_address.generate_hash())\n        user_shipping_address = user.addresses.get(hash=shipping_address.generate_hash())\n        self.assertEqual(user_billing_address.num_orders_as_billing_address, 3)\n        self.assertEqual(user_shipping_address.num_orders_as_shipping_address, 1)\n\n    @override_settings(SITE_ID='')\n    def test_multi_site(self):\n        basket = factories.create_basket(empty=True)\n        site1 = factories.SiteFactory()\n        site2 = factories.SiteFactory()\n        request = HttpRequest()\n        request.META['SERVER_PORT'] = 80\n        request.META['SERVER_NAME'] = site1.domain\n        user = factories.UserFactory()\n        add_product(basket, D('12.00'))\n        shipping_method = Free()\n        shipping_charge = shipping_method.calculate(basket)\n        order_total = OrderTotalCalculator().calculate(basket, shipping_charge)\n\n        billing_address = factories.BillingAddressFactory()\n        shipping_address = factories.ShippingAddressFactory()\n        order_submission_data = {'user': user,\n                                 'order_number': '12345',\n                                 'basket': basket,\n                                 'shipping_method': shipping_method,\n                                 'shipping_charge': shipping_charge,\n                                 'order_total': order_total,\n                                 'billing_address': billing_address,\n                                 'shipping_address': shipping_address,\n                                 'request': request}\n        OrderPlacementMixin().place_order(**order_submission_data)\n        order1 = Order.objects.get(number='12345')\n        self.assertEqual(order1.site, site1)\n\n        add_product(basket, D('12.00'))\n        request.META['SERVER_NAME'] = site2.domain\n        order_submission_data['order_number'] = '12346'\n        order_submission_data['request'] = request\n        OrderPlacementMixin().place_order(**order_submission_data)\n        order2 = Order.objects.get(number='12346')\n        self.assertEqual(order2.site, site2)\n\n    def test_multiple_payment_events(self):\n        basket = factories.create_basket(empty=True)\n        user = factories.UserFactory()\n        add_product(basket, D('100.00'))\n        order_placement = OrderPlacementMixin()\n        order_placement.add_payment_event('Gift Card Payment', D('10'))\n        order_placement.add_payment_event('Credit Card Payment', D('90'))\n        shipping_method = Free()\n        shipping_charge = shipping_method.calculate(basket)\n        order_total = OrderTotalCalculator().calculate(basket, shipping_charge)\n\n        billing_address = factories.BillingAddressFactory()\n        shipping_address = factories.ShippingAddressFactory()\n        order_submission_data = {'user': user,\n                                 'order_number': '12345',\n                                 'basket': basket,\n                                 'shipping_method': shipping_method,\n                                 'shipping_charge': shipping_charge,\n                                 'order_total': order_total,\n                                 'billing_address': billing_address,\n                                 'shipping_address': shipping_address}\n        order_placement.place_order(**order_submission_data)\n        order1 = Order.objects.get(number='12345')\n        self.assertEqual(order1.payment_events.count(), 2)\n        event1 = order1.payment_events.all()[0]\n        event2 = order1.payment_events.all()[1]\n        self.assertEqual(event1.event_type.name, 'Credit Card Payment')\n        self.assertEqual(event1.amount, D('90'))\n        self.assertEqual(event1.lines.count(), 1)\n        self.assertEqual(event2.event_type.name, 'Gift Card Payment')\n        self.assertEqual(event2.amount, D('10'))\n        self.assertEqual(event2.lines.count(), 1)\n\n\nclass TestCheckoutSessionMixin(TestCase):\n\n    def setUp(self):\n        self.request = RequestFactory().get('/')\n        self.product = factories.create_product(num_in_stock=10)\n        self.stock_record = self.product.stockrecords.first()\n\n    def add_product_to_basket(self, product, quantity=1):\n        self.request.basket.add_product(product, quantity=quantity)\n        self.assertEqual(len(self.request.basket.all_lines()), 1)\n        self.assertEqual(self.request.basket.all_lines()[0].product, product)\n\n    def test_check_basket_is_valid_no_stock_available(self):\n        self.add_product_to_basket(self.product)\n        CheckoutSessionMixin().check_basket_is_valid(self.request)\n        self.stock_record.allocate(10)\n        self.stock_record.save()\n        with self.assertRaises(FailedPreCondition):\n            CheckoutSessionMixin().check_basket_is_valid(self.request)\n\n    def test_check_basket_is_valid_stock_exceeded(self):\n        self.add_product_to_basket(self.product)\n        CheckoutSessionMixin().check_basket_is_valid(self.request)\n        self.request.basket.add_product(self.product, quantity=11)\n        with self.assertRaises(FailedPreCondition):\n            CheckoutSessionMixin().check_basket_is_valid(self.request)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django.contrib import admin\n\nfrom oscar.core.loading import get_model\n\n\nclass UserAddressAdmin(admin.ModelAdmin):\n    readonly_fields = ('num_orders_as_billing_address', 'num_orders_as_shipping_address')\n\n\nclass CountryAdmin(admin.ModelAdmin):\n    list_display = [\n        '__str__',\n        'display_order'\n    ]\n    list_filter = [\n        'is_shipping_country'\n    ]\n    search_fields = [\n        'name',\n        'printable_name',\n        'iso_3166_1_a2',\n        'iso_3166_1_a3'\n    ]\n\n\nadmin.site.register(get_model('address', 'useraddress'), UserAddressAdmin)\nadmin.site.register(get_model('address', 'country'), CountryAdmin)\n",
    "output": "from unittest import mock\n\nfrom django.test import TestCase\nfrom django.test.client import RequestFactory\nfrom django.contrib.sessions.middleware import SessionMiddleware\n\nfrom oscar.apps.checkout.utils import CheckoutSessionData\n\n\nclass TestCheckoutSession(TestCase):\n    \"\"\"\n    oscar.apps.checkout.utils.CheckoutSessionData\n    \"\"\"\n\n    def setUp(self):\n        request = RequestFactory().get('/')\n        SessionMiddleware().process_request(request)\n        self.session_data = CheckoutSessionData(request)\n\n    def test_allows_data_to_be_written_and_read_out(self):\n        self.session_data._set('namespace', 'key', 'value')\n        self.assertEqual('value', self.session_data._get('namespace', 'key'))\n\n    def test_allows_set_data_can_be_unset(self):\n        self.session_data._set('namespace', 'key', 'value')\n        self.session_data._unset('namespace', 'key')\n        self.assertIsNone(self.session_data._get('namespace', 'key'))\n\n    def test_stores_guest_email(self):\n        self.session_data.set_guest_email('a@a.com')\n        self.assertEqual('a@a.com', self.session_data.get_guest_email())\n\n    def test_allows_a_namespace_to_be_flushed(self):\n        self.session_data._set('ns', 'a', 1)\n        self.session_data._set('ns', 'b', 2)\n        self.session_data._flush_namespace('ns')\n        self.assertIsNone(self.session_data._get('ns', 'a'))\n        self.assertIsNone(self.session_data._get('ns', 'b'))\n\n    def test_allows_bill_to_user_address(self):\n        address = mock.Mock()\n        address.id = 1\n        self.session_data.bill_to_user_address(address)\n        self.assertEqual(1, self.session_data.billing_user_address_id())\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django.contrib import admin\n\nfrom oscar.core.loading import get_model\n\n\nclass UserAddressAdmin(admin.ModelAdmin):\n    readonly_fields = ('num_orders_as_billing_address', 'num_orders_as_shipping_address')\n\n\nclass CountryAdmin(admin.ModelAdmin):\n    list_display = [\n        '__str__',\n        'display_order'\n    ]\n    list_filter = [\n        'is_shipping_country'\n    ]\n    search_fields = [\n        'name',\n        'printable_name',\n        'iso_3166_1_a2',\n        'iso_3166_1_a3'\n    ]\n\n\nadmin.site.register(get_model('address', 'useraddress'), UserAddressAdmin)\nadmin.site.register(get_model('address', 'country'), CountryAdmin)\n",
    "output": "from django.test import TestCase\nfrom django.test.utils import override_settings\nfrom django.urls import reverse\n\nfrom oscar.test.factories import OrderFactory\n\n\nclass ThankYouViewTestCase(TestCase):\n\n    @override_settings(OSCAR_ALLOW_ANON_CHECKOUT=True)\n    def test_analytics_event_triggered_only_on_first_view(self):\n        order = OrderFactory()\n        session = self.client.session\n        # Put the order ID in the session, mimicking a completed order,\n        # so that we can reach the thank you page.\n        session['checkout_order_id'] = order.pk\n        session.save()\n\n        r1 = self.client.get(reverse('checkout:thank-you'), follow=True)\n        self.assertTrue(r1.context['send_analytics_event'])\n\n        # Request the view a second time\n        r2 = self.client.get(reverse('checkout:thank-you'), follow=True)\n        self.assertFalse(r2.context['send_analytics_event'])\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django.contrib import admin\n\nfrom oscar.core.loading import get_model\n\n\nclass UserAddressAdmin(admin.ModelAdmin):\n    readonly_fields = ('num_orders_as_billing_address', 'num_orders_as_shipping_address')\n\n\nclass CountryAdmin(admin.ModelAdmin):\n    list_display = [\n        '__str__',\n        'display_order'\n    ]\n    list_filter = [\n        'is_shipping_country'\n    ]\n    search_fields = [\n        'name',\n        'printable_name',\n        'iso_3166_1_a2',\n        'iso_3166_1_a3'\n    ]\n\n\nadmin.site.register(get_model('address', 'useraddress'), UserAddressAdmin)\nadmin.site.register(get_model('address', 'country'), CountryAdmin)\n",
    "output": ""
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django.contrib import admin\n\nfrom oscar.core.loading import get_model\n\n\nclass UserAddressAdmin(admin.ModelAdmin):\n    readonly_fields = ('num_orders_as_billing_address', 'num_orders_as_shipping_address')\n\n\nclass CountryAdmin(admin.ModelAdmin):\n    list_display = [\n        '__str__',\n        'display_order'\n    ]\n    list_filter = [\n        'is_shipping_country'\n    ]\n    search_fields = [\n        'name',\n        'printable_name',\n        'iso_3166_1_a2',\n        'iso_3166_1_a3'\n    ]\n\n\nadmin.site.register(get_model('address', 'useraddress'), UserAddressAdmin)\nadmin.site.register(get_model('address', 'country'), CountryAdmin)\n",
    "output": "# coding=utf-8\n\"\"\"\nAutoSlugField taken from django-extensions at\n15d3eb305957cee4768dd86e44df1bdad341a10e\nUses Oscar's slugify function instead of Django's\n\nCopyright (c) 2007 Michael Trier\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\"\"\nfrom django.db import models\nfrom django.test import TestCase\nfrom django.test.utils import override_settings\n\nfrom oscar.core.loading import get_model\n\nSluggedTestModel = get_model('model_tests_app', 'sluggedtestmodel')\nChildSluggedTestModel = get_model('model_tests_app', 'childsluggedtestmodel')\nCustomSluggedTestModel = get_model('model_tests_app', 'CustomSluggedTestModel')\n\n\nclass AutoSlugFieldTest(TestCase):\n    def tearDown(self):\n        super().tearDown()\n\n        SluggedTestModel.objects.all().delete()\n\n    def test_auto_create_slug(self):\n        m = SluggedTestModel(title='foo')\n        m.save()\n        self.assertEqual(m.slug, 'foo')\n\n    def test_auto_create_next_slug(self):\n        m = SluggedTestModel(title='foo')\n        m.save()\n\n        m = SluggedTestModel(title='foo')\n        m.save()\n        self.assertEqual(m.slug, 'foo-2')\n\n    def test_auto_create_slug_with_number(self):\n        m = SluggedTestModel(title='foo 2012')\n        m.save()\n        self.assertEqual(m.slug, 'foo-2012')\n\n    def test_auto_update_slug_with_number(self):\n        m = SluggedTestModel(title='foo 2012')\n        m.save()\n        m.save()\n        self.assertEqual(m.slug, 'foo-2012')\n\n    def test_auto_create_unicode_slug(self):\n        with override_settings(OSCAR_SLUG_ALLOW_UNICODE=True):\n            m = SluggedTestModel(title='Ch\u00e2teau Margaux 1960')\n            m.save()\n            self.assertEqual(m.slug, 'ch\u00e2teau-margaux-1960')\n\n    def test_auto_create_next_unicode_slug(self):\n        with override_settings(OSCAR_SLUG_ALLOW_UNICODE=True):\n            m1 = SluggedTestModel(title='Ch\u00e2teau Margaux 1960')\n            m1.save()\n\n            m2 = SluggedTestModel(title='Ch\u00e2teau Margaux 1960')\n            m2.save()\n\n            self.assertEqual(m2.slug, 'ch\u00e2teau-margaux-1960-2')\n\n    def test_switch_to_unicode_slug(self):\n        m = SluggedTestModel(title='Ch\u00e2teau Margaux 1960')\n        m.save()\n        self.assertEqual(m.slug, 'chateau-margaux-1960')\n        with override_settings(OSCAR_SLUG_ALLOW_UNICODE=True):\n            m = SluggedTestModel(title='Ch\u00e2teau Margaux 1960')\n            m.save()\n            self.assertEqual(m.slug, 'ch\u00e2teau-margaux-1960')\n\n    def test_autoslugfield_allow_unicode_kwargs_precedence(self):\n        from oscar.models.fields import AutoSlugField\n        with override_settings(OSCAR_SLUG_ALLOW_UNICODE=True):\n            autoslug_field = AutoSlugField(populate_from='title', allow_unicode=False)\n            self.assertFalse(autoslug_field.allow_unicode)\n            autoslug_field = AutoSlugField(populate_from='title')\n            self.assertTrue(autoslug_field.allow_unicode)\n\n    def test_update_slug(self):\n        m = SluggedTestModel(title='foo')\n        m.save()\n        self.assertEqual(m.slug, 'foo')\n\n        # update m instance without using `save'\n        SluggedTestModel.objects.filter(pk=m.pk).update(slug='foo-2012')\n        # update m instance with new data from the db\n        m = SluggedTestModel.objects.get(pk=m.pk)\n        self.assertEqual(m.slug, 'foo-2012')\n\n        m.save()\n        self.assertEqual(m.title, 'foo')\n        self.assertEqual(m.slug, 'foo-2012')\n\n        # Check slug is not overwrite\n        m.title = 'bar'\n        m.save()\n        self.assertEqual(m.title, 'bar')\n        self.assertEqual(m.slug, 'foo-2012')\n\n    def test_simple_slug_source(self):\n        m = SluggedTestModel(title='-foo')\n        m.save()\n        self.assertEqual(m.slug, 'foo')\n\n        n = SluggedTestModel(title='-foo')\n        n.save()\n        self.assertEqual(n.slug, 'foo-2')\n\n        n.save()\n        self.assertEqual(n.slug, 'foo-2')\n\n    def test_empty_slug_source(self):\n        # regression test\n\n        m = SluggedTestModel(title='')\n        m.save()\n        self.assertEqual(m.slug, '-2')\n\n        n = SluggedTestModel(title='')\n        n.save()\n        self.assertEqual(n.slug, '-3')\n\n        n.save()\n        self.assertEqual(n.slug, '-3')\n\n    def test_inheritance_creates_next_slug(self):\n        m = SluggedTestModel(title='foo')\n        m.save()\n\n        n = ChildSluggedTestModel(title='foo')\n        n.save()\n        self.assertEqual(n.slug, 'foo-2')\n\n        o = SluggedTestModel(title='foo')\n        o.save()\n        self.assertEqual(o.slug, 'foo-3')\n\n    def test_separator_and_uppercase_options(self):\n        m = CustomSluggedTestModel(title=\"Password reset\")\n        m.save()\n        self.assertEqual(m.slug, 'PASSWORD_RESET')\n\n        m = CustomSluggedTestModel(title=\"Password reset\")\n        m.save()\n        self.assertEqual(m.slug, 'PASSWORD_RESET_2')\n\n    def test_migration(self):\n        \"\"\"\n        Tests making migrations with Django 1.7+'s migration framework\n        \"\"\"\n\n        import oscar\n        from django.db import migrations\n        from django.db.migrations.writer import MigrationWriter\n        from oscar.models.fields import AutoSlugField\n        fields = {\n            'autoslugfield': AutoSlugField(populate_from='otherfield'),\n        }\n\n        migration = type(str(\"Migration\"), (migrations.Migration,), {\n            \"operations\": [\n                migrations.CreateModel(\"MyModel\", tuple(fields.items()),\n                                       {'populate_from': 'otherfield'},\n                                       (models.Model,)),\n            ],\n        })\n        writer = MigrationWriter(migration)\n        output = writer.as_string()\n\n        if isinstance(output, str):\n            output = output.encode('utf-8')\n\n        # We don't test the output formatting - that's too fragile.\n        # Just make sure it runs for now, and that things look alright.\n        context = {\n            'migrations': migrations,\n            'oscar': oscar,\n        }\n        result = self.safe_exec(output, context=context)\n        self.assertIn(\"Migration\", result)\n\n    def safe_exec(self, string, value=None, context=None):\n        loc = {}\n        g = globals()\n        g.update(context)\n        try:\n            exec(string, g, loc)\n        except Exception as e:\n            if value:\n                self.fail(\"Could not exec %r (from value %r): %s\" % (\n                    string.strip(), value, e))\n            else:\n                self.fail(\"Could not exec %r: %s\" % (string.strip(), e))\n        return loc\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django.contrib import admin\n\nfrom oscar.core.loading import get_model\n\n\nclass UserAddressAdmin(admin.ModelAdmin):\n    readonly_fields = ('num_orders_as_billing_address', 'num_orders_as_shipping_address')\n\n\nclass CountryAdmin(admin.ModelAdmin):\n    list_display = [\n        '__str__',\n        'display_order'\n    ]\n    list_filter = [\n        'is_shipping_country'\n    ]\n    search_fields = [\n        'name',\n        'printable_name',\n        'iso_3166_1_a2',\n        'iso_3166_1_a3'\n    ]\n\n\nadmin.site.register(get_model('address', 'useraddress'), UserAddressAdmin)\nadmin.site.register(get_model('address', 'country'), CountryAdmin)\n",
    "output": "# -*- coding: utf-8 -*-\nimport codecs\nimport datetime\nimport io\nimport os\nfrom tempfile import NamedTemporaryFile\nfrom django.utils.encoding import smart_text\n\nfrom django.test import TestCase, override_settings\n\nfrom oscar.core.compat import UnicodeCSVWriter, existing_user_fields\n\n\nclass unicodeobj(object):\n\n    def __init__(self, s):\n        self.s = s\n\n    def __str__(self):\n        return self.s\n\n\nclass TestExistingUserFields(TestCase):\n\n    def test_order(self):\n        fields = existing_user_fields(['email', 'first_name', 'last_name'])\n        self.assertEqual(fields, ['email', 'first_name', 'last_name'])\n\n\nclass TestUnicodeCSVWriter(TestCase):\n\n    def test_can_write_different_values(self):\n        writer = UnicodeCSVWriter(open_file=io.StringIO())\n        s = '\u00fcn\u012fcod\u0113'\n        rows = [[s, unicodeobj(s), 123, datetime.date.today()], ]\n        writer.writerows(rows)\n        self.assertRaises(TypeError, writer.writerows, [object()])\n\n    def test_context_manager(self):\n        tmp_file = NamedTemporaryFile()\n        with UnicodeCSVWriter(filename=tmp_file.name) as writer:\n            s = '\u00fcn\u012fcod\u0113'\n            rows = [[s, unicodeobj(s), 123, datetime.date.today()], ]\n            writer.writerows(rows)\n\n    def test_csv_write_output(self):\n        tmp_file = NamedTemporaryFile(delete=False)\n        with UnicodeCSVWriter(filename=tmp_file.name) as writer:\n            s = '\u00fcn\u012fcod\u0113'\n            row = [s, 123, 'foo-bar']\n            writer.writerows([row])\n\n        with open(tmp_file.name, 'r') as read_file:\n            content = smart_text(read_file.read(), encoding='utf-8').strip()\n            self.assertEqual(content, '\u00fcn\u012fcod\u0113,123,foo-bar')\n\n        # Clean up\n        os.unlink(tmp_file.name)\n\n    @override_settings(OSCAR_CSV_INCLUDE_BOM=True)\n    def test_bom_write_with_open_file(self):\n        csv_file = NamedTemporaryFile(delete=False)\n        with open(csv_file.name, 'w') as open_file:\n            writer = UnicodeCSVWriter(open_file=open_file, encoding=\"utf-8\")\n            s = '\u00fcn\u012fcod\u0113'\n            row = [s, 123, datetime.date.today()]\n            writer.writerows([row])\n\n        with open(csv_file.name, 'rb') as read_file:\n            self.assertTrue(read_file.read().startswith(codecs.BOM_UTF8))\n\n        # Clean up\n        os.unlink(csv_file.name)\n\n    @override_settings(OSCAR_CSV_INCLUDE_BOM=True)\n    def test_bom_write_with_filename(self):\n        csv_file = NamedTemporaryFile(delete=False)\n        with UnicodeCSVWriter(filename=csv_file.name, encoding=\"utf-8\") as writer:\n            s = '\u00fcn\u012fcod\u0113'\n            row = [s, 123, datetime.date.today()]\n            writer.writerows([row])\n\n        with open(csv_file.name, 'rb') as read_file:\n            self.assertTrue(read_file.read().startswith(codecs.BOM_UTF8))\n\n        # Clean up\n        os.unlink(csv_file.name)\n\n    @override_settings(OSCAR_CSV_INCLUDE_BOM=True)\n    def test_bom_not_written_for_other_encodings(self):\n        csv_file = NamedTemporaryFile(delete=False)\n        with UnicodeCSVWriter(filename=csv_file.name, encoding=\"ascii\") as writer:\n            s = 'boring ascii'\n            row = [s, 123, datetime.date.today()]\n            writer.writerows([row])\n\n        with open(csv_file.name, 'rb') as read_file:\n            self.assertFalse(read_file.read().startswith(codecs.BOM_UTF8))\n\n        # Clean up\n        os.unlink(csv_file.name)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django.contrib import admin\n\nfrom oscar.core.loading import get_model\n\n\nclass UserAddressAdmin(admin.ModelAdmin):\n    readonly_fields = ('num_orders_as_billing_address', 'num_orders_as_shipping_address')\n\n\nclass CountryAdmin(admin.ModelAdmin):\n    list_display = [\n        '__str__',\n        'display_order'\n    ]\n    list_filter = [\n        'is_shipping_country'\n    ]\n    search_fields = [\n        'name',\n        'printable_name',\n        'iso_3166_1_a2',\n        'iso_3166_1_a3'\n    ]\n\n\nadmin.site.register(get_model('address', 'useraddress'), UserAddressAdmin)\nadmin.site.register(get_model('address', 'country'), CountryAdmin)\n",
    "output": "import pytest\nfrom django.conf import settings\nfrom django.test import TestCase\n\nfrom oscar.core import customisation\n\nVALID_FOLDER_PATH = 'tests/_site/apps'\n\n\nclass TestUtilities(TestCase):\n\n    def test_subfolder_extraction(self):\n        folders = list(customisation.subfolders('/var/www/eggs'))\n        self.assertEqual(folders, ['/var', '/var/www', '/var/www/eggs'])\n\n\ndef test_raises_exception_for_nonexistant_app_label():\n    with pytest.raises(ValueError):\n        customisation.fork_app('sillytown', 'somefolder')\n\n\ndef test_raises_exception_if_app_has_already_been_forked():\n    # We piggyback on another test which means a custom app is already in\n    # the settings we use for the test suite. We just check that's still\n    # the case here.\n    assert 'tests._site.apps.partner' in settings.INSTALLED_APPS\n    with pytest.raises(ValueError):\n        customisation.fork_app('partner', VALID_FOLDER_PATH)\n\n\ndef test_creates_new_folder(tmpdir):\n    path = tmpdir.mkdir('fork')\n    customisation.fork_app('order', str(path))\n    path.join('order').ensure_dir()\n\n\ndef test_creates_init_file(tmpdir):\n    path = tmpdir.mkdir('fork')\n    customisation.fork_app('order', str(path))\n\n    path.join('order').join('__init__.py').ensure()\n\n\ndef test_handles_dashboard_app(tmpdir):\n    # Dashboard apps are fiddly as they aren't identified by a single app\n    # label.\n    path = tmpdir.mkdir('fork')\n    customisation.fork_app('dashboard.catalogue', str(path))\n    # Check __init__.py created (and supporting folders)\n\n    path.join('dashboard').join('catalogue').join('__init__.py').ensure()\n\n\ndef test_creates_models_and_admin_file(tmpdir):\n    path = tmpdir.mkdir('fork')\n    customisation.fork_app('order', str(path))\n    for module, expected_string in [\n        ('models', 'from oscar.apps.order.models import *'),\n        ('admin', 'from oscar.apps.order.admin import *'),\n        ('config', 'OrderConfig')\n    ]:\n        filepath = path.join('order').join('%s.py' % module)\n        filepath.ensure()\n        contents = filepath.read()\n        assert expected_string in contents\n\n\ndef test_copies_in_migrations_when_needed(tmpdir):\n    path = tmpdir.mkdir('fork')\n    for app, has_models in [('order', True), ('search', False)]:\n        customisation.fork_app(app, str(path))\n\n        native_migration_path = path.join(app).join('migrations')\n        assert has_models == native_migration_path.check()\n\n\ndef test_dashboard_app_config(tmpdir, monkeypatch):\n    path = tmpdir.mkdir('fork')\n    customisation.fork_app('dashboard', str(path))\n\n    path.join('__init__.py').write('')\n    monkeypatch.syspath_prepend(str(tmpdir))\n\n    config_module = __import__(\n        '%s.dashboard.config' % path.basename, fromlist=['DashboardConfig']\n    )\n\n    assert hasattr(config_module, 'DashboardConfig')\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django.contrib import admin\n\nfrom oscar.core.loading import get_model\n\n\nclass UserAddressAdmin(admin.ModelAdmin):\n    readonly_fields = ('num_orders_as_billing_address', 'num_orders_as_shipping_address')\n\n\nclass CountryAdmin(admin.ModelAdmin):\n    list_display = [\n        '__str__',\n        'display_order'\n    ]\n    list_filter = [\n        'is_shipping_country'\n    ]\n    search_fields = [\n        'name',\n        'printable_name',\n        'iso_3166_1_a2',\n        'iso_3166_1_a3'\n    ]\n\n\nadmin.site.register(get_model('address', 'useraddress'), UserAddressAdmin)\nadmin.site.register(get_model('address', 'country'), CountryAdmin)\n",
    "output": "import warnings\n\nfrom django.contrib.auth.models import AnonymousUser, Permission\nfrom django.test import TestCase\n\nfrom oscar.core.decorators import deprecated\nfrom oscar.test import factories\nfrom oscar.views.decorators import check_permissions\n\n\nclass TestPermissionsDecorator(TestCase):\n\n    def test_empty_permissions_passes(self):\n        user = factories.UserFactory.build()\n        self.assertTrue(check_permissions(user, []))\n\n    def test_properties_are_checked(self):\n        staff_user = factories.UserFactory.build(is_staff=True)\n        non_staff_user = factories.UserFactory.build(is_staff=False)\n        self.assertTrue(check_permissions(staff_user, ['is_staff']))\n        self.assertFalse(check_permissions(non_staff_user, ['is_staff']))\n\n    def test_methods_are_checked(self):\n        anonymous_user = AnonymousUser()\n        known_user = factories.UserFactory.build()\n        self.assertTrue(check_permissions(anonymous_user, ['is_anonymous']))\n        self.assertFalse(check_permissions(known_user, ['is_anonymous']))\n\n    def test_permissions_are_checked(self):\n        user_with_perm = factories.UserFactory()\n        user_without_perm = factories.UserFactory()\n        perm = Permission.objects.get(\n            content_type__app_label='address', codename='add_country')\n        user_with_perm.user_permissions.add(perm)\n        self.assertTrue(\n            check_permissions(user_with_perm, ['address.add_country']))\n        self.assertFalse(\n            check_permissions(user_without_perm, ['address.add_country']))\n\n\nclass TestDeprecatedDecorator(TestCase):\n\n    def test_decorate_function(self):\n\n        @deprecated\n        def func():\n            return True\n\n        with warnings.catch_warnings(record=True) as caught:\n            warnings.simplefilter(\"always\")\n            self.assertTrue(func())\n            assert len(caught) == 1\n            assert issubclass(caught[0].category, DeprecationWarning)\n\n    def test_decorate_class(self):\n\n        class Cls(object):\n            val = False\n\n            def __init__(self):\n                self.val = True\n\n        Deprecated = deprecated(Cls)  # noqa\n\n        with warnings.catch_warnings(record=True) as caught:\n            warnings.simplefilter(\"always\")\n            obj = Deprecated()\n            self.assertTrue(obj.val)\n            assert len(caught) == 1\n            assert issubclass(caught[0].category, DeprecationWarning)\n\n    def test_subclass_decorated(self):\n\n        class Cls(object):\n            val = False\n\n            def __init__(self):\n                self.val = True\n\n        Deprecated = deprecated(Cls)  # noqa\n\n        class SubCls(Deprecated):\n            pass\n\n        with warnings.catch_warnings(record=True) as caught:\n            warnings.simplefilter(\"always\")\n            obj = SubCls()\n            self.assertTrue(obj.val)\n            assert len(caught) == 1\n            assert issubclass(caught[0].category, DeprecationWarning)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django.contrib import admin\n\nfrom oscar.core.loading import get_model\n\n\nclass UserAddressAdmin(admin.ModelAdmin):\n    readonly_fields = ('num_orders_as_billing_address', 'num_orders_as_shipping_address')\n\n\nclass CountryAdmin(admin.ModelAdmin):\n    list_display = [\n        '__str__',\n        'display_order'\n    ]\n    list_filter = [\n        'is_shipping_country'\n    ]\n    search_fields = [\n        'name',\n        'printable_name',\n        'iso_3166_1_a2',\n        'iso_3166_1_a3'\n    ]\n\n\nadmin.site.register(get_model('address', 'useraddress'), UserAddressAdmin)\nadmin.site.register(get_model('address', 'country'), CountryAdmin)\n",
    "output": "from os.path import dirname\nimport sys\n\nfrom django.test import override_settings, TestCase\nfrom django.conf import settings\n\nimport oscar\nfrom oscar.core.loading import (\n    get_model, AppNotFoundError, get_classes, get_class, get_class_loader,\n    ClassNotFoundError)\nfrom tests import temporary_python_path\nfrom tests._site.loader import DummyClass\n\n\nclass TestClassLoading(TestCase):\n    \"\"\"\n    Oscar's class loading utilities\n    \"\"\"\n\n    def test_load_oscar_classes_correctly(self):\n        Product, Category = get_classes('catalogue.models', ('Product', 'Category'))\n        self.assertEqual('oscar.apps.catalogue.models', Product.__module__)\n        self.assertEqual('oscar.apps.catalogue.models', Category.__module__)\n\n    def test_load_oscar_class_correctly(self):\n        Product = get_class('catalogue.models', 'Product')\n        self.assertEqual('oscar.apps.catalogue.models', Product.__module__)\n\n    def test_load_oscar_class_from_dashboard_subapp(self):\n        ReportForm = get_class('dashboard.reports.forms', 'ReportForm')\n        self.assertEqual('oscar.apps.dashboard.reports.forms', ReportForm.__module__)\n\n    def test_raise_exception_when_bad_appname_used(self):\n        with self.assertRaises(AppNotFoundError):\n            get_classes('fridge.models', ('Product', 'Category'))\n\n    def test_raise_exception_when_bad_classname_used(self):\n        with self.assertRaises(ClassNotFoundError):\n            get_class('catalogue.models', 'Monkey')\n\n    def test_raise_importerror_if_app_raises_importerror(self):\n        \"\"\"\n        This tests that Oscar doesn't fall back to using the Oscar catalogue\n        app if the overriding app throws an ImportError.\n        \"\"\"\n        apps = list(settings.INSTALLED_APPS)\n        apps[apps.index('oscar.apps.catalogue')] = 'tests._site.import_error_app.catalogue'\n        with override_settings(INSTALLED_APPS=apps):\n            with self.assertRaises(ImportError):\n                get_class('catalogue.app', 'CatalogueApplication')\n\n\nclass ClassLoadingWithLocalOverrideTests(TestCase):\n\n    def setUp(self):\n        self.installed_apps = list(settings.INSTALLED_APPS)\n        self.installed_apps[self.installed_apps.index('oscar.apps.shipping')] = 'tests._site.shipping'\n\n    def test_loading_class_defined_in_local_module(self):\n        with override_settings(INSTALLED_APPS=self.installed_apps):\n            (Free,) = get_classes('shipping.methods', ('Free',))\n            self.assertEqual('tests._site.shipping.methods', Free.__module__)\n\n    def test_loading_class_which_is_not_defined_in_local_module(self):\n        with override_settings(INSTALLED_APPS=self.installed_apps):\n            (FixedPrice,) = get_classes('shipping.methods', ('FixedPrice',))\n            self.assertEqual('oscar.apps.shipping.methods', FixedPrice.__module__)\n\n    def test_loading_class_from_module_not_defined_in_local_app(self):\n        with override_settings(INSTALLED_APPS=self.installed_apps):\n            (Repository,) = get_classes('shipping.repository', ('Repository',))\n            self.assertEqual('oscar.apps.shipping.repository', Repository.__module__)\n\n    def test_loading_classes_defined_in_both_local_and_oscar_modules(self):\n        with override_settings(INSTALLED_APPS=self.installed_apps):\n            (Free, FixedPrice) = get_classes('shipping.methods', ('Free', 'FixedPrice'))\n            self.assertEqual('tests._site.shipping.methods', Free.__module__)\n            self.assertEqual('oscar.apps.shipping.methods', FixedPrice.__module__)\n\n    def test_loading_classes_with_root_app(self):\n        import tests._site.shipping\n        path = dirname(dirname(tests._site.shipping.__file__))\n        with temporary_python_path([path]):\n            self.installed_apps[\n                self.installed_apps.index('tests._site.shipping')] = 'shipping'\n            with override_settings(INSTALLED_APPS=self.installed_apps):\n                (Free,) = get_classes('shipping.methods', ('Free',))\n                self.assertEqual('shipping.methods', Free.__module__)\n\n    def test_overriding_view_is_possible_without_overriding_app(self):\n        from oscar.apps.customer.app import application, CustomerApplication\n        # If test fails, it's helpful to know if it's caused by order of\n        # execution\n        self.assertEqual(CustomerApplication().summary_view.__module__,\n                         'tests._site.apps.customer.views')\n        self.assertEqual(application.summary_view.__module__,\n                         'tests._site.apps.customer.views')\n\n\nclass ClassLoadingWithLocalOverrideWithMultipleSegmentsTests(TestCase):\n\n    def setUp(self):\n        self.installed_apps = list(settings.INSTALLED_APPS)\n        self.installed_apps[self.installed_apps.index('oscar.apps.shipping')] = 'tests._site.apps.shipping'\n\n    def test_loading_class_defined_in_local_module(self):\n        with override_settings(INSTALLED_APPS=self.installed_apps):\n            (Free,) = get_classes('shipping.methods', ('Free',))\n            self.assertEqual('tests._site.apps.shipping.methods', Free.__module__)\n\n\nclass TestGetCoreAppsFunction(TestCase):\n    \"\"\"\n    oscar.get_core_apps function\n    \"\"\"\n\n    def test_returns_core_apps_when_no_overrides_specified(self):\n        apps = oscar.get_core_apps()\n        self.assertEqual(oscar.OSCAR_CORE_APPS, apps)\n\n    def test_uses_non_dashboard_override_when_specified(self):\n        apps = oscar.get_core_apps(overrides=['apps.shipping'])\n        self.assertTrue('apps.shipping' in apps)\n        self.assertTrue('oscar.apps.shipping' not in apps)\n\n    def test_uses_dashboard_override_when_specified(self):\n        apps = oscar.get_core_apps(overrides=['apps.dashboard.catalogue'])\n        self.assertTrue('apps.dashboard.catalogue' in apps)\n        self.assertTrue('oscar.apps.dashboard.catalogue' not in apps)\n        self.assertTrue('oscar.apps.catalogue' in apps)\n\n\nclass TestOverridingCoreApps(TestCase):\n\n    def test_means_the_overriding_model_is_registered_first(self):\n        klass = get_model('partner', 'StockRecord')\n        self.assertEqual(\n            'tests._site.apps.partner.models', klass.__module__)\n\n\nclass TestAppLabelsForModels(TestCase):\n\n    def test_all_oscar_models_have_app_labels(self):\n        from django.apps import apps\n        models = apps.get_models()\n        missing = []\n        for model in models:\n            # Ignore non-Oscar models\n            if 'oscar' not in repr(model):\n                continue\n            # Don't know how to get the actual model's Meta class. But if\n            # the parent doesn't have a Meta class, it's doesn't have an\n            # base in Oscar anyway and is not intended to be overridden\n            abstract_model = model.__base__\n            meta_class = getattr(abstract_model, 'Meta', None)\n            if meta_class is None:\n                continue\n\n            if not hasattr(meta_class, 'app_label'):\n                missing.append(model)\n        if missing:\n            self.fail(\"Those models don't have an app_label set: %s\" % missing)\n\n\nclass TestDynamicLoadingOn3rdPartyApps(TestCase):\n\n    core_app_prefix = 'thirdparty_package.apps'\n\n    def setUp(self):\n        self.installed_apps = list(settings.INSTALLED_APPS)\n        sys.path.append('./tests/_site/')\n\n    def tearDown(self):\n        sys.path.remove('./tests/_site/')\n\n    def test_load_core_3rd_party_class_correctly(self):\n        self.installed_apps.append('thirdparty_package.apps.myapp')\n        with override_settings(INSTALLED_APPS=self.installed_apps):\n            Cow, Goat = get_classes('myapp.models', ('Cow', 'Goat'), self.core_app_prefix)\n            self.assertEqual('thirdparty_package.apps.myapp.models', Cow.__module__)\n            self.assertEqual('thirdparty_package.apps.myapp.models', Goat.__module__)\n\n    def test_load_overriden_3rd_party_class_correctly(self):\n        self.installed_apps.append('apps.myapp')\n        with override_settings(INSTALLED_APPS=self.installed_apps):\n            Cow, Goat = get_classes('myapp.models', ('Cow', 'Goat'), self.core_app_prefix)\n            self.assertEqual('thirdparty_package.apps.myapp.models', Cow.__module__)\n            self.assertEqual('apps.myapp.models', Goat.__module__)\n\n\nclass OverriddenClassLoadingTestCase(TestCase):\n\n    def test_non_override_class_loader(self):\n        from oscar.apps.catalogue.views import ProductDetailView\n        View = get_class('catalogue.views', 'ProductDetailView')\n        self.assertEqual(View, ProductDetailView)\n\n    @override_settings(OSCAR_DYNAMIC_CLASS_LOADER='tests._site.loader.custom_class_loader')\n    def test_override_class_loader(self):\n        # Clear lru cache for the class loader\n        get_class_loader.cache_clear()\n\n        View = get_class('catalogue.views', 'ProductDetailView')\n        self.assertEqual(View, DummyClass)\n\n        # Clear lru cache for the class loader again\n        get_class_loader.cache_clear()\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django.contrib import admin\n\nfrom oscar.core.loading import get_model\n\n\nclass UserAddressAdmin(admin.ModelAdmin):\n    readonly_fields = ('num_orders_as_billing_address', 'num_orders_as_shipping_address')\n\n\nclass CountryAdmin(admin.ModelAdmin):\n    list_display = [\n        '__str__',\n        'display_order'\n    ]\n    list_filter = [\n        'is_shipping_country'\n    ]\n    search_fields = [\n        'name',\n        'printable_name',\n        'iso_3166_1_a2',\n        'iso_3166_1_a3'\n    ]\n\n\nadmin.site.register(get_model('address', 'useraddress'), UserAddressAdmin)\nadmin.site.register(get_model('address', 'country'), CountryAdmin)\n",
    "output": "from django import forms\nfrom django.test import TestCase, override_settings\n\nfrom oscar.apps.address.forms import AbstractAddressForm\nfrom oscar.apps.address.models import UserAddress\nfrom oscar.apps.order.models import ShippingAddress\nfrom oscar.forms.mixins import PhoneNumberMixin\nfrom oscar.test.factories import CountryFactory\n\n\nclass PhoneNumberMixinTestCase(TestCase):\n\n    def test_mixin_adds_phone_number_field(self):\n\n        class TestForm(PhoneNumberMixin, forms.Form):\n            pass\n\n        form = TestForm()\n        self.assertIn('phone_number', form.fields)\n\n    def test_mixin_adds_all_phone_number_fields(self):\n\n        class TestForm(PhoneNumberMixin, forms.Form):\n            phone_number_fields = {\n                'phone_number': {\n                    'required': False,\n                    'help_text': '',\n                    'max_length': 32,\n                    'label': 'Phone number'\n                },\n                'another_phone_number': {\n                    'required': False,\n                    'help_text': 'Another phone number help text',\n                    'max_length': 32,\n                    'label': 'Another phone number'\n                },\n                'one_more_phone_number': {\n                    'required': False,\n                    'help_text': '',\n                    'max_length': 32,\n                    'label': 'One more phone number'\n                },\n            }\n\n        form = TestForm()\n        self.assertIn('phone_number', form.fields)\n        self.assertIn('another_phone_number', form.fields)\n        self.assertIn('one_more_phone_number', form.fields)\n\n        field = form.fields['another_phone_number']\n        self.assertEqual(field.help_text, 'Another phone number help text')\n\n    def test_mixin_retains_existing_field_properties(self):\n\n        class TestForm(PhoneNumberMixin, forms.ModelForm):\n\n            class Meta:\n                model = UserAddress\n                fields = ['country', 'phone_number']\n                # Override default label and help text\n                labels = {'phone_number': 'Special number'}\n                help_texts = {'phone_number': 'Special help text'}\n\n        form = TestForm()\n        field = form.fields['phone_number']\n        self.assertEqual(field.label, 'Special number')\n        self.assertEqual(field.help_text, 'Special help text')\n\n    @override_settings(OSCAR_REQUIRED_ADDRESS_FIELDS=('phone_number',))\n    def test_required_empty_field_raises_validation_error(self):\n\n        class TestForm(PhoneNumberMixin, AbstractAddressForm):\n            phone_number_fields = {\n                'phone_number': {\n                    'required': True,\n                    'help_text': '',\n                    'max_length': 32,\n                    'label': 'Phone number'\n                }\n            }\n\n            class Meta:\n                model = ShippingAddress\n                fields = ['country', 'phone_number', 'postcode']\n\n        CountryFactory(iso_3166_1_a2='GB', is_shipping_country=True)\n        form = TestForm(data={'phone_number': '', 'country': 'GB', 'postcode': 'WW1 2BB'})\n        self.assertFalse(form.is_valid())\n        self.assertEqual(form.errors['phone_number'], ['This field is required.'])\n\n    @override_settings(OSCAR_REQUIRED_ADDRESS_FIELDS=[])\n    def test_optional_empty_field_validates(self):\n\n        class TestForm(PhoneNumberMixin, AbstractAddressForm):\n            phone_number_fields = {\n                'phone_number': {\n                    'required': False,\n                    'help_text': '',\n                    'max_length': 32,\n                    'label': 'Phone number'\n                }\n            }\n\n            class Meta:\n                model = ShippingAddress\n                fields = ['country', 'phone_number', 'postcode']\n\n        CountryFactory(iso_3166_1_a2='GB', is_shipping_country=True)\n        form = TestForm(data={'phone_number': '', 'country': 'GB', 'postcode': 'WW1 2BB'})\n        self.assertTrue(form.is_valid())\n\n    @override_settings(OSCAR_REQUIRED_ADDRESS_FIELDS=[])\n    def test_invalid_number_fails_validation(self):\n\n        class TestForm(PhoneNumberMixin, AbstractAddressForm):\n            phone_number_fields = {\n                'phone_number': {\n                    'required': False,\n                    'help_text': '',\n                    'max_length': 32,\n                    'label': 'Phone number'\n                }\n            }\n\n            class Meta:\n                model = ShippingAddress\n                fields = ['country', 'phone_number', 'postcode']\n\n        CountryFactory(iso_3166_1_a2='GB', is_shipping_country=True)\n        form = TestForm(data={'phone_number': '123456', 'country': 'GB', 'postcode': 'WW1 2BB'})\n        self.assertFalse(form.is_valid())\n        self.assertEqual(form.errors['phone_number'], ['This is not a valid local phone format for UNITED KINGDOM.'])\n\n    @override_settings(OSCAR_REQUIRED_ADDRESS_FIELDS=[])\n    def test_valid_number_passes_validation(self):\n\n        class TestForm(PhoneNumberMixin, AbstractAddressForm):\n            phone_number_fields = {\n                'phone_number': {\n                    'required': False,\n                    'help_text': '',\n                    'max_length': 32,\n                    'label': 'Phone number'\n                }\n            }\n\n            class Meta:\n                model = ShippingAddress\n                fields = ['country', 'phone_number', 'postcode']\n\n        CountryFactory(iso_3166_1_a2='GB', is_shipping_country=True)\n        form = TestForm(data={'phone_number': '02089001234', 'country': 'GB', 'postcode': 'WW1 2BB'})\n        self.assertTrue(form.is_valid())\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django.contrib import admin\n\nfrom oscar.core.loading import get_model\n\n\nclass UserAddressAdmin(admin.ModelAdmin):\n    readonly_fields = ('num_orders_as_billing_address', 'num_orders_as_shipping_address')\n\n\nclass CountryAdmin(admin.ModelAdmin):\n    list_display = [\n        '__str__',\n        'display_order'\n    ]\n    list_filter = [\n        'is_shipping_country'\n    ]\n    search_fields = [\n        'name',\n        'printable_name',\n        'iso_3166_1_a2',\n        'iso_3166_1_a3'\n    ]\n\n\nadmin.site.register(get_model('address', 'useraddress'), UserAddressAdmin)\nadmin.site.register(get_model('address', 'country'), CountryAdmin)\n",
    "output": "from django.core.exceptions import ImproperlyConfigured\nfrom django.test import TestCase\n\nfrom oscar.models.fields import NullCharField\n\n\nclass NullCharFieldTest(TestCase):\n\n    def test_from_db_value_converts_null_to_string(self):\n        field = NullCharField()\n        self.assertEqual('', field.from_db_value(None, expression=None, connection=None, context=None))\n\n    def test_get_prep_value_converts_empty_string_to_null(self):\n        field = NullCharField()\n        self.assertEqual(None, field.get_prep_value(''))\n\n    def test_raises_exception_for_invalid_null_blank_combo(self):\n        with self.assertRaises(ImproperlyConfigured):\n            NullCharField(null=True, blank=False)\n\n        with self.assertRaises(ImproperlyConfigured):\n            NullCharField(null=False, blank=True)\n\n        with self.assertRaises(ImproperlyConfigured):\n            NullCharField(null=False, blank=False)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django.contrib import admin\n\nfrom oscar.core.loading import get_model\n\n\nclass UserAddressAdmin(admin.ModelAdmin):\n    readonly_fields = ('num_orders_as_billing_address', 'num_orders_as_shipping_address')\n\n\nclass CountryAdmin(admin.ModelAdmin):\n    list_display = [\n        '__str__',\n        'display_order'\n    ]\n    list_filter = [\n        'is_shipping_country'\n    ]\n    search_fields = [\n        'name',\n        'printable_name',\n        'iso_3166_1_a2',\n        'iso_3166_1_a3'\n    ]\n\n\nadmin.site.register(get_model('address', 'useraddress'), UserAddressAdmin)\nadmin.site.register(get_model('address', 'country'), CountryAdmin)\n",
    "output": "from decimal import Decimal as D\nfrom itertools import product\nfrom django.test import TestCase\n\nfrom oscar.core.prices import Price\n\n\nclass TestPriceObject(TestCase):\n\n    def test_can_be_instantiated_with_tax_amount(self):\n        price = Price('USD', D('10.00'), tax=D('2.00'))\n        self.assertTrue(price.is_tax_known)\n        self.assertEqual(D('12.00'), price.incl_tax)\n\n    def test_can_have_tax_set_later(self):\n        price = Price('USD', D('10.00'))\n        price.tax = D('2.00')\n        self.assertEqual(D('12.00'), price.incl_tax)\n\n    def test_price_equals_reflexivity(self):\n        for price in (\n            Price(currency='USD', excl_tax=D('10.00')),\n            Price(currency='USD', excl_tax=D('10.00'), tax=D('2.00')),\n            Price(currency='USD', excl_tax=D('10.00'), incl_tax=D('12.00')),\n        ):\n            self.assertEqual(price, price)\n\n    def test_price_equals_formats(self):\n        price1 = Price(currency='USD', excl_tax=D('10.00'), tax=D('2.00'))\n        price2 = Price(currency='USD', excl_tax=D('10.00'), incl_tax=D('12.00'))\n        self.assertEqual(price1, price2)\n\n    def test_price_equals_currency_matters(self):\n        price1 = Price(currency='EUR', excl_tax=D('10.00'), tax=D('2.00'))\n        price2 = Price(currency='USD', excl_tax=D('10.00'), tax=D('2.00'))\n        self.assertNotEqual(price1, price2)\n\n    def test_price_equals_transitivity(self):\n        prices = (\n            Price(currency='EUR', excl_tax=D('10.00'), tax=D('2.00')),\n            Price(currency='USD', excl_tax=D('10.00'), tax=D('2.00')),\n            Price(currency='USD', excl_tax=D('10.00'), incl_tax=D('12.00')),\n            Price(currency='USD', excl_tax=D('10.00'), tax=D('8.00'))\n        )\n        prices_product = product(prices, prices)\n        for price1, price2 in prices_product:\n            self.assertEqual(price1 == price2, price2 == price1)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django.contrib import admin\n\nfrom oscar.core.loading import get_model\n\n\nclass UserAddressAdmin(admin.ModelAdmin):\n    readonly_fields = ('num_orders_as_billing_address', 'num_orders_as_shipping_address')\n\n\nclass CountryAdmin(admin.ModelAdmin):\n    list_display = [\n        '__str__',\n        'display_order'\n    ]\n    list_filter = [\n        'is_shipping_country'\n    ]\n    search_fields = [\n        'name',\n        'printable_name',\n        'iso_3166_1_a2',\n        'iso_3166_1_a3'\n    ]\n\n\nadmin.site.register(get_model('address', 'useraddress'), UserAddressAdmin)\nadmin.site.register(get_model('address', 'country'), CountryAdmin)\n",
    "output": "# coding=utf-8\n\nfrom django.test import TestCase\nfrom django.test.utils import override_settings\n\n\nclass SlugFieldTest(TestCase):\n\n    def test_slugfield_allow_unicode_kwargs_precedence(self):\n        from oscar.models.fields.slugfield import SlugField\n        with override_settings(OSCAR_SLUG_ALLOW_UNICODE=True):\n            slug_field = SlugField(allow_unicode=False)\n            self.assertFalse(slug_field.allow_unicode)\n            slug_field = SlugField()\n            self.assertTrue(slug_field.allow_unicode)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django.contrib import admin\n\nfrom oscar.core.loading import get_model\n\n\nclass UserAddressAdmin(admin.ModelAdmin):\n    readonly_fields = ('num_orders_as_billing_address', 'num_orders_as_shipping_address')\n\n\nclass CountryAdmin(admin.ModelAdmin):\n    list_display = [\n        '__str__',\n        'display_order'\n    ]\n    list_filter = [\n        'is_shipping_country'\n    ]\n    search_fields = [\n        'name',\n        'printable_name',\n        'iso_3166_1_a2',\n        'iso_3166_1_a3'\n    ]\n\n\nadmin.site.register(get_model('address', 'useraddress'), UserAddressAdmin)\nadmin.site.register(get_model('address', 'country'), CountryAdmin)\n",
    "output": "# coding=utf-8\nfrom django.test import TestCase\nfrom django.test.utils import override_settings\n\nfrom oscar.core import utils\n\n\ndef sluggish(value, allow_unicode=False):\n    return value.upper()\n\n\nclass TestSlugify(TestCase):\n\n    def test_default_unicode_to_ascii(self):\n        self.assertEqual('konig-der-straxdfe', utils.slugify('K\u00f6nig der Stra\u00dfe'))\n        self.assertEqual('not-fancy', utils.slugify('Not fancy'))\n        self.assertEqual('u4e01u4e02-u4e03u4e04u4e05', utils.slugify('\u4e01\u4e02 \u4e03\u4e04\u4e05'))\n\n    @override_settings(OSCAR_SLUG_ALLOW_UNICODE=True)\n    def test_allow_unicode(self):\n        self.assertEqual('k\u00f6nig-der-stra\u00dfe', utils.slugify('K\u00f6nig der Stra\u00dfe'))\n        self.assertEqual('\u4e01\u4e02-\u4e03\u4e04\u4e05', utils.slugify('\u4e01\u4e02 \u4e03\u4e04\u4e05'))\n        self.assertEqual('not-fancy', utils.slugify('Not fancy'))\n\n    @override_settings(OSCAR_SLUG_FUNCTION='tests.integration.core.test_utils.sluggish')\n    def test_custom_slugifier(self):\n        self.assertEqual('HAM AND EGGS', utils.slugify('Ham and eggs'))\n\n    @override_settings(OSCAR_SLUG_MAP={'c++': 'cpp'})\n    def test_uses_custom_mappings(self):\n        self.assertEqual('cpp', utils.slugify('c++'))\n\n    @override_settings(OSCAR_SLUG_BLACKLIST=['the'])\n    def test_uses_blacklist(self):\n        self.assertEqual('bible', utils.slugify('The Bible'))\n\n    @override_settings(OSCAR_SLUG_BLACKLIST=['the', 'bible'])\n    def test_uses_blacklist_doesnt_reduce_to_nothing(self):\n        self.assertEqual('bible', utils.slugify('The Bible'))\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django.contrib import admin\n\nfrom oscar.core.loading import get_model\n\n\nclass UserAddressAdmin(admin.ModelAdmin):\n    readonly_fields = ('num_orders_as_billing_address', 'num_orders_as_shipping_address')\n\n\nclass CountryAdmin(admin.ModelAdmin):\n    list_display = [\n        '__str__',\n        'display_order'\n    ]\n    list_filter = [\n        'is_shipping_country'\n    ]\n    search_fields = [\n        'name',\n        'printable_name',\n        'iso_3166_1_a2',\n        'iso_3166_1_a3'\n    ]\n\n\nadmin.site.register(get_model('address', 'useraddress'), UserAddressAdmin)\nadmin.site.register(get_model('address', 'country'), CountryAdmin)\n",
    "output": "from django.core.exceptions import ValidationError\nfrom django.contrib.flatpages.models import FlatPage\nfrom django.test import TestCase, override_settings\nfrom django.utils.translation import activate\n\nfrom oscar.core.validators import ExtendedURLValidator, URLDoesNotExistValidator\n\n\nclass TestExtendedURLValidator(TestCase):\n\n    def setUp(self):\n        self.validator = ExtendedURLValidator()\n\n    def test_validates_local_url(self):\n        try:\n            self.validator('/')\n        except ValidationError:\n            self.fail('ExtendedURLValidator raised ValidationError'\n                      'unexpectedly!')\n\n    def test_validates_local_url_with_query_strings(self):\n        try:\n            self.validator('/?q=test')  # Query strings shouldn't affect validation\n        except ValidationError:\n            self.fail('ExtendedURLValidator raised ValidationError'\n                      'unexpectedly!')\n\n    def test_raises_validation_error_for_missing_urls(self):\n        with self.assertRaises(ValidationError):\n            self.validator('/invalid/')\n\n    def test_validates_urls_missing_preceding_slash(self):\n        try:\n            self.validator('catalogue/')\n        except ValidationError:\n            self.fail('ExtendedURLValidator raised ValidationError'\n                      'unexpectedly!')\n\n    def test_raises_validation_error_for_urls_without_trailing_slash(self):\n        with self.assertRaises(ValidationError):\n            self.validator('/catalogue')  # Missing the / is bad\n\n    def test_validates_flatpages_urls(self):\n        FlatPage.objects.create(title='test page', url='/test/page/')\n        try:\n            self.validator('/test/page/')\n        except ValidationError:\n            self.fail('ExtendedURLValidator raises ValidationError'\n                      'unexpectedly!')\n\n\n@override_settings(\n    LANGUAGES=(\n        ('de', 'German'),\n        ('en-gb', 'British English'),\n    )\n)\nclass TestExtendedURLValidatorForLocalePrefixURLS(TestCase):\n    def setUp(self):\n        self.validator = ExtendedURLValidator()\n\n    def test_validate_same_locals(self):\n        \"\"\"\n        Current locale is default (\"en-gb\"), URL has locale prefix\n        of default and current locale (\"en-gb\").\n        \"\"\"\n        try:\n            self.validator('/en-gb/test/')\n        except ValidationError:\n            self.fail('ExtendedURLValidator raised ValidationError'\n                      'unexpectedly!')\n\n    def test_validate_prefix_locale_is_non_default(self):\n        \"\"\"\n        Current locale is default (\"en-gb\"), URL has locale prefix\n        of non-default locale (\"de\").\n        \"\"\"\n        try:\n            self.validator('/de/test/')\n        except ValidationError:\n            self.fail('ExtendedURLValidator raised ValidationError'\n                      'unexpectedly!')\n\n    def test_validate_current_locale_is_non_default(self):\n        \"\"\"\n        Current locale is non-default (\"de\"), URL has locale prefix\n        of default locale (\"en-gb\").\n        \"\"\"\n        activate('de')\n        try:\n            self.validator('/en-gb/test/')\n        except ValidationError:\n            self.fail('ExtendedURLValidator raised ValidationError'\n                      'unexpectedly!')\n\n    def test_validate_current_and_prefix_locales_are_non_default_and_same(self):\n        \"\"\"\n        Current locale is non-default (\"de\"), URL has locale prefix\n        of non-default locale (\"de\").\n        \"\"\"\n        activate('de')\n        try:\n            self.validator('/de/test/')\n        except ValidationError:\n            self.fail('ExtendedURLValidator raised ValidationError'\n                      'unexpectedly!')\n\n    def test_validate_current_and_prefix_locales_are_non_default_and_different(self):\n        \"\"\"\n        Current locale is non-default (\"it\"), URL has locale prefix\n        of non-default locale (\"de\").\n        \"\"\"\n        activate('it')\n        try:\n            self.validator('/de/test/')\n        except ValidationError:\n            self.fail('ExtendedURLValidator raised ValidationError'\n                      'unexpectedly!')\n\n\nclass TestURLDoesNotExistValidator(TestCase):\n\n    def setUp(self):\n        self.validator = URLDoesNotExistValidator()\n\n    def test_raises_exception_for_local_urls(self):\n        self.assertRaises(ValidationError, self.validator, '/')\n\n    def test_raises_exception_for_flatpages(self):\n        FlatPage.objects.create(title='test page', url='/test/page/')\n        self.assertRaises(ValidationError, self.validator, '/test/page/')\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django.contrib import admin\n\nfrom oscar.core.loading import get_model\n\n\nclass UserAddressAdmin(admin.ModelAdmin):\n    readonly_fields = ('num_orders_as_billing_address', 'num_orders_as_shipping_address')\n\n\nclass CountryAdmin(admin.ModelAdmin):\n    list_display = [\n        '__str__',\n        'display_order'\n    ]\n    list_filter = [\n        'is_shipping_country'\n    ]\n    search_fields = [\n        'name',\n        'printable_name',\n        'iso_3166_1_a2',\n        'iso_3166_1_a3'\n    ]\n\n\nadmin.site.register(get_model('address', 'useraddress'), UserAddressAdmin)\nadmin.site.register(get_model('address', 'country'), CountryAdmin)\n",
    "output": "import pytest\n\nfrom oscar.views import handler403, handler404, handler500\n\n\n@pytest.mark.django_db\ndef test_handler403_response_status(rf):\n    request = rf.get('/')\n    response = handler403(request, exception=None)\n    assert response.status_code == 403\n\n\n@pytest.mark.django_db\ndef test_handler404_response_status(rf):\n    request = rf.get('/')\n    response = handler404(request, exception=None)\n    assert response.status_code == 404\n\n\n@pytest.mark.django_db\ndef test_handler500_response_status(rf):\n    request = rf.get('/')\n    response = handler500(request)\n    assert response.status_code == 500\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django.contrib import admin\n\nfrom oscar.core.loading import get_model\n\n\nclass UserAddressAdmin(admin.ModelAdmin):\n    readonly_fields = ('num_orders_as_billing_address', 'num_orders_as_shipping_address')\n\n\nclass CountryAdmin(admin.ModelAdmin):\n    list_display = [\n        '__str__',\n        'display_order'\n    ]\n    list_filter = [\n        'is_shipping_country'\n    ]\n    search_fields = [\n        'name',\n        'printable_name',\n        'iso_3166_1_a2',\n        'iso_3166_1_a3'\n    ]\n\n\nadmin.site.register(get_model('address', 'useraddress'), UserAddressAdmin)\nadmin.site.register(get_model('address', 'country'), CountryAdmin)\n",
    "output": ""
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django.apps import AppConfig\nfrom django.utils.translation import gettext_lazy as _\n\n\nclass AddressConfig(AppConfig):\n    label = 'address'\n    name = 'oscar.apps.address'\n    verbose_name = _('Address')\n",
    "output": "from django.test import TestCase\n\nfrom oscar.apps.address import models, forms\nfrom oscar.test.factories import UserFactory\n\n\nclass TestUserAddressForm(TestCase):\n\n    def setUp(self):\n        self.user = UserFactory()\n        self.country = models.Country.objects.create(\n            iso_3166_1_a2='GB', name=\"UNITED KINGDOM\")\n\n    def test_merges_addresses_with_same_hash(self):\n        data = {\n            'user': self.user,\n            'first_name': \"Matus\",\n            'last_name': \"Moravcik\",\n            'line1': \"1 Egg Street\",\n            'line4': \"London\",\n            'postcode': \"N12 9RE\",\n            'country': self.country}\n\n        # Create two addresses, which are slightly different\n        models.UserAddress.objects.create(**data)\n        other = data.copy()\n        other['first_name'] = 'Izidor'\n        duplicate = models.UserAddress.objects.create(**other)\n\n        # Edit duplicate to be same as original and check that the two\n        # addresses are merged when the form saves.\n        post_data = data.copy()\n        post_data['country'] = self.country.iso_3166_1_a2\n        form = forms.UserAddressForm(self.user, post_data, instance=duplicate)\n        self.assertFalse(form.is_valid())\n        self.assertTrue(len(form.errors['__all__']) > 0)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django.apps import AppConfig\nfrom django.utils.translation import gettext_lazy as _\n\n\nclass AddressConfig(AppConfig):\n    label = 'address'\n    name = 'oscar.apps.address'\n    verbose_name = _('Address')\n",
    "output": "# -*- coding: utf-8 -*-\nimport pytest\nfrom django.test import TestCase\nfrom django.core import exceptions\n\nfrom oscar.apps.order.models import ShippingAddress\nfrom oscar.core.compat import get_user_model\nfrom oscar.apps.address import models\nfrom oscar.test import factories\n\nfrom tests._site.model_tests_app.models import (\n    UserAddressModelWithCustomBaseFields, UserAddressModelWithCustomHashFields\n)\n\nUser = get_user_model()\n\n\nclass UserAddressModelWithCustomBaseFieldsFactory(factories.UserAddressFactory):\n    class Meta:\n        model = UserAddressModelWithCustomBaseFields\n\n\nclass UserAddressModelWithCustomHashFieldsFactory(factories.UserAddressFactory):\n    class Meta:\n        model = UserAddressModelWithCustomHashFields\n\n\nclass TestUserAddress(TestCase):\n\n    def setUp(self):\n        self.country = factories.CountryFactory.build()\n        self.user = factories.UserFactory()\n\n    def test_uses_title_firstname_and_lastname_in_salutation(self):\n        a = factories.UserAddressFactory.build(\n            country=self.country,\n            title='Dr',\n            first_name='Barry',\n            last_name='Barrington',\n            user=self.user)\n        self.assertEqual(\"Dr Barry Barrington\", a.salutation)\n\n    def test_strips_whitespace_from_salutation(self):\n        a = factories.UserAddressFactory.build(\n            title='',\n            first_name='',\n            last_name='Barrington',\n            country=self.country,\n            user=self.user)\n        self.assertEqual(\"Barrington\", a.salutation)\n\n    def test_has_name_property(self):\n        a = factories.UserAddressFactory.build(\n            country=self.country,\n            first_name='Barry',\n            last_name='Barrington',\n            user=self.user)\n        self.assertEqual(\"Barry Barrington\", a.name)\n\n    def test_has_summary_property(self):\n        c = factories.CountryFactory(name='')\n        a = factories.UserAddressFactory(\n            country=c,\n            title='Dr',\n            first_name='Barry',\n            last_name='Barrington',\n            line1='1 King Road',\n            line4='London',\n            postcode='SW1 9RE')\n        self.assertEqual(\n            \"Dr Barry Barrington, 1 King Road, London, SW1 9RE, UNITED KINGDOM\",\n            a.summary)\n\n    def test_summary_includes_country(self):\n        c = factories.CountryFactory.build(name='UNITED KINGDOM')\n        a = factories.UserAddressFactory.build(\n            country=c,\n            title='Dr',\n            first_name='Barry',\n            last_name='Barrington',\n            line1='1 King Road',\n            line4='London',\n            postcode='SW1 9RE',\n            user=self.user)\n        self.assertEqual(\n            \"Dr Barry Barrington, 1 King Road, London, SW1 9RE, UNITED KINGDOM\",\n            a.summary)\n\n    def test_hash_value(self):\n        a = factories.UserAddressFactory.build(\n            country=self.country,\n            user=self.user)\n        self.assertEqual(a.generate_hash(), 2668616117)\n\n    def test_hash_and_summary_values_on_model_with_custom_base_fields(self):\n        a = UserAddressModelWithCustomBaseFieldsFactory.build(country=self.country, user=self.user)\n        self.assertEqual(a.summary, '1 King Road, London')\n        self.assertEqual(a.generate_hash(), 2668616117)\n\n    def test_hash_and_summary_values_on_model_with_custom_hash_fields(self):\n        a = UserAddressModelWithCustomHashFieldsFactory.build(country=self.country, user=self.user)\n        self.assertEqual(a.summary, 'Dr Barry Barrington, 1 King Road, London, SW1 9RE, UNITED KINGDOM')\n        self.assertEqual(a.generate_hash(), 2153195893)\n\n    def test_can_be_hashed_including_non_ascii(self):\n        a = factories.UserAddressFactory.build(\n            first_name=\"\\u0141ukasz Smith\",\n            last_name='Smith',\n            line1=\"75 Smith Road\",\n            postcode=\"n4 8ty\",\n            country=self.country,\n            user=self.user)\n        hash = a.generate_hash()\n        self.assertTrue(hash is not None)\n\n    def test_strips_whitespace_in_name_property(self):\n        a = factories.UserAddressFactory.build(\n            first_name='',\n            last_name='Barrington',\n            country=self.country,\n            user=self.user)\n        self.assertEqual(\"Barrington\", a.name)\n\n    def test_uses_city_as_an_alias_of_line4(self):\n        a = factories.UserAddressFactory.build(\n            line4='London',\n            country=self.country,\n            user=self.user)\n        self.assertEqual('London', a.city)\n\n    def test_converts_postcode_to_uppercase_when_cleaning(self):\n        address = factories.UserAddressFactory.build(\n            postcode=\"n4 8ty\",\n            country=self.country,\n            user=self.user)\n        address.clean()\n        self.assertEqual(\"N4 8TY\", address.postcode)\n\n    def test_strips_whitespace_when_cleaning(self):\n        a = factories.UserAddressFactory.build(\n            line1=\"  75 Smith Road  \",\n            postcode=\"  n4 8ty\",\n            country=self.country,\n            user=self.user)\n        a.clean()\n        self.assertEqual(\"N4 8TY\", a.postcode)\n        self.assertEqual(\"75 Smith Road\", a.line1)\n\n    def test_active_address_fields_skips_whitespace_only_fields(self):\n        a = factories.UserAddressFactory.build(\n            first_name='   ',\n            last_name='Barrington',\n            line1='  75 Smith Road  ',\n            postcode='  n4 8ty',\n            title='',\n            country=self.country,\n            user=self.user)\n        active_fields = a.active_address_fields()\n        self.assertEqual(\"Barrington\", active_fields[0])\n\n    def test_ignores_whitespace_when_hashing(self):\n        a1 = factories.UserAddressFactory.build(\n            first_name='Terry',\n            last_name='Barrington',\n            country=self.country,\n            user=self.user)\n        a1.clean()\n        a2 = factories.UserAddressFactory.build(\n            first_name='   Terry  ',\n            last_name='     Barrington',\n            country=self.country,\n            user=self.user)\n        a2.clean()\n        self.assertEqual(a1.generate_hash(), a2.generate_hash())\n\n    def test_populate_shipping_address_doesnt_set_id(self):\n        a = factories.UserAddressFactory.build(\n            country=self.country,\n            user=self.user)\n        a.clean()\n        sa = ShippingAddress()\n        a.populate_alternative_model(sa)\n        self.assertIsNone(sa.id)\n\n    def test_populated_shipping_address_has_same_summary_user_address(self):\n        a = factories.UserAddressFactory.build(\n            country=self.country,\n            user=self.user)\n        a.clean()\n        sa = ShippingAddress()\n        a.populate_alternative_model(sa)\n        self.assertEqual(sa.summary, a.summary)\n\n    def test_summary_value(self):\n        a = factories.UserAddressFactory.build(\n            country=self.country,\n            user=self.user)\n        self.assertEqual(a.summary, 'Dr Barry Barrington, 1 King Road, London, SW1 9RE, UNITED KINGDOM')\n\n    def test_summary_is_property(self):\n        a = factories.UserAddressFactory.build(\n            title='',\n            line4='',\n            first_name=\" Terry  \",\n            last_name='Barrington',\n            line1=\"  75 Smith Road  \",\n            postcode=\"  n4 8ty\",\n            country=self.country,\n            user=self.user)\n        a.clean()\n        self.assertEqual(\n            \"Terry Barrington, 75 Smith Road, N4 8TY, UNITED KINGDOM\",\n            a.summary)\n\n\nVALID_POSTCODES = [\n    ('GB', 'N1 9RT'),\n    ('SK', '991 41'),\n    ('CZ', '612 00'),\n    ('CC', '6799'),\n    ('CY', '8240'),\n    ('MC', '98000'),\n    ('SH', 'STHL 1ZZ'),\n    ('JP', '150-2345'),\n    ('PG', '314'),\n    ('HN', '41202'),\n    ('BN', 'BC3615'),\n    ('TW', '104'),\n    ('TW', '10444'),\n    # It works for small cases as well\n    ('GB', 'sw2 1rw'),\n]\n\n\nINVALID_POSTCODES = [\n    ('GB', 'not-a-postcode'),\n    ('DE', '123b4'),\n]\n\n\n@pytest.mark.parametrize('country_value, postcode_value', VALID_POSTCODES)\ndef test_assert_valid_postcode(country_value, postcode_value):\n    country = models.Country(iso_3166_1_a2=country_value)\n    address = models.UserAddress(country=country, postcode=postcode_value)\n    address.clean()\n\n\n@pytest.mark.parametrize('country_value, postcode_value', INVALID_POSTCODES)\ndef test_assert_invalid_postcode(country_value, postcode_value):\n    country = models.Country(iso_3166_1_a2=country_value)\n    address = models.UserAddress(country=country, postcode=postcode_value)\n\n    with pytest.raises(exceptions.ValidationError):\n        address.clean()\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django.apps import AppConfig\nfrom django.utils.translation import gettext_lazy as _\n\n\nclass AddressConfig(AppConfig):\n    label = 'address'\n    name = 'oscar.apps.address'\n    verbose_name = _('Address')\n",
    "output": ""
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django.apps import AppConfig\nfrom django.utils.translation import gettext_lazy as _\n\n\nclass AddressConfig(AppConfig):\n    label = 'address'\n    name = 'oscar.apps.address'\n    verbose_name = _('Address')\n",
    "output": "from datetime import datetime, date\n\nfrom django.test import TestCase\nfrom django.core.exceptions import ValidationError\nfrom django.core.files.uploadedfile import SimpleUploadedFile\n\nfrom oscar.test import factories\n\n\nclass TestBooleanAttributes(TestCase):\n\n    def setUp(self):\n        self.attr = factories.ProductAttributeFactory(type=\"boolean\")\n\n    def test_validate_boolean_values(self):\n        self.assertIsNone(self.attr.validate_value(True))\n\n    def test_validate_invalid_boolean_values(self):\n        with self.assertRaises(ValidationError):\n            self.attr.validate_value(1)\n\n\nclass TestMultiOptionAttributes(TestCase):\n\n    def setUp(self):\n        self.option_group = factories.AttributeOptionGroupFactory()\n        self.attr = factories.ProductAttributeFactory(\n            type='multi_option',\n            name='Sizes',\n            code='sizes',\n            option_group=self.option_group,\n        )\n\n        # Add some options to the group\n        self.options = factories.AttributeOptionFactory.create_batch(\n            3, group=self.option_group)\n\n    def test_validate_multi_option_values(self):\n        self.assertIsNone(self.attr.validate_value([\n            self.options[0], self.options[1]]))\n\n    def test_validate_invalid_multi_option_values(self):\n        with self.assertRaises(ValidationError):\n            # value must be an iterable\n            self.attr.validate_value('foobar')\n\n        with self.assertRaises(ValidationError):\n            # Items must all be AttributeOption objects\n            self.attr.validate_value([self.options[0], 'notanOption'])\n\n    def test_save_multi_option_value(self):\n        product = factories.ProductFactory()\n        # We'll save two out of the three available options\n        self.attr.save_value(product, [self.options[0], self.options[2]])\n        product.refresh_from_db()\n        self.assertEqual(list(product.attr.sizes), [self.options[0], self.options[2]])\n\n    def test_delete_multi_option_value(self):\n        product = factories.ProductFactory()\n        self.attr.save_value(product, [self.options[0], self.options[1]])\n        # Now delete these values\n        self.attr.save_value(product, None)\n        product.refresh_from_db()\n        self.assertFalse(hasattr(product.attr, 'sizes'))\n\n    def test_multi_option_value_as_text(self):\n        product = factories.ProductFactory()\n        self.attr.save_value(product, self.options)\n        attr_val = product.attribute_values.get(attribute=self.attr)\n        self.assertEqual(attr_val.value_as_text, \", \".join(o.option for o in self.options))\n\n\nclass TestDatetimeAttributes(TestCase):\n\n    def setUp(self):\n        self.attr = factories.ProductAttributeFactory(type=\"datetime\")\n\n    def test_validate_datetime_values(self):\n        self.assertIsNone(self.attr.validate_value(datetime.now()))\n\n    def test_validate_invalid_datetime_values(self):\n        with self.assertRaises(ValidationError):\n            self.attr.validate_value(1)\n\n\nclass TestDateAttributes(TestCase):\n\n    def setUp(self):\n        self.attr = factories.ProductAttributeFactory(type=\"date\")\n\n    def test_validate_datetime_values(self):\n        self.assertIsNone(self.attr.validate_value(datetime.now()))\n\n    def test_validate_date_values(self):\n        self.assertIsNone(self.attr.validate_value(date.today()))\n\n    def test_validate_invalid_date_values(self):\n        with self.assertRaises(ValidationError):\n            self.attr.validate_value(1)\n\n\nclass TestIntegerAttributes(TestCase):\n\n    def setUp(self):\n        self.attr = factories.ProductAttributeFactory(type=\"integer\")\n\n    def test_validate_integer_values(self):\n        self.assertIsNone(self.attr.validate_value(1))\n\n    def test_validate_str_integer_values(self):\n        self.assertIsNone(self.attr.validate_value('1'))\n\n    def test_validate_invalid_integer_values(self):\n        with self.assertRaises(ValidationError):\n            self.attr.validate_value('notanInteger')\n\n\nclass TestFloatAttributes(TestCase):\n\n    def setUp(self):\n        self.attr = factories.ProductAttributeFactory(type=\"float\")\n\n    def test_validate_integer_values(self):\n        self.assertIsNone(self.attr.validate_value(1))\n\n    def test_validate_float_values(self):\n        self.assertIsNone(self.attr.validate_value(1.2))\n\n    def test_validate_str_float_values(self):\n        self.assertIsNone(self.attr.validate_value('1.2'))\n\n    def test_validate_invalid_float_values(self):\n        with self.assertRaises(ValidationError):\n            self.attr.validate_value('notaFloat')\n\n\nclass TestTextAttributes(TestCase):\n\n    def setUp(self):\n        self.attr = factories.ProductAttributeFactory(type=\"text\")\n\n    def test_validate_string_and_unicode_values(self):\n        self.assertIsNone(self.attr.validate_value('String'))\n\n    def test_validate_invalid_float_values(self):\n        with self.assertRaises(ValidationError):\n            self.attr.validate_value(1)\n\n\nclass TestFileAttributes(TestCase):\n    def setUp(self):\n        self.attr = factories.ProductAttributeFactory(type=\"file\")\n\n    def test_validate_file_values(self):\n        file_field = SimpleUploadedFile('test_file.txt', b'Test')\n        self.assertIsNone(self.attr.validate_value(file_field))\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django.apps import AppConfig\nfrom django.utils.translation import gettext_lazy as _\n\n\nclass AddressConfig(AppConfig):\n    label = 'address'\n    name = 'oscar.apps.address'\n    verbose_name = _('Address')\n",
    "output": "# -*- coding: utf-8 -*-\nfrom django.core.cache import cache\nfrom django.test import TestCase\nfrom django.test.utils import override_settings\n\nfrom oscar.apps.catalogue.models import Category\nfrom oscar.apps.catalogue.categories import create_from_breadcrumbs\nfrom oscar.templatetags.category_tags import get_annotated_list\n\n\nclass TestCategory(TestCase):\n\n    def setUp(self):\n        self.products = Category.add_root(name=\"Pr\u00f6ducts\")\n        self.books = self.products.add_child(name=\"B\u00fccher\")\n\n    def tearDown(self):\n        cache.clear()\n\n    def test_includes_parents_name_in_full_name(self):\n        self.assertTrue(self.products.name in self.books.full_name)\n\n    def test_has_children_method(self):\n        self.assertTrue(self.products.has_children())\n\n    def test_slugs_were_autogenerated(self):\n        self.assertTrue(self.products.slug)\n        self.assertTrue(self.books.slug)\n\n    def test_supplied_slug_is_not_altered(self):\n        more_books = self.products.add_child(\n            name=self.books.name, slug=self.books.slug)\n        self.assertEqual(more_books.slug, self.books.slug)\n\n    @override_settings(OSCAR_SLUG_ALLOW_UNICODE=True)\n    def test_unicode_slug(self):\n        root_category = Category.add_root(name=\"Vins fran\u00e7ais\")\n        child_category = root_category.add_child(name=\"Ch\u00e2teau d'Yquem\")\n        self.assertEqual(root_category.slug, 'vins-fran\u00e7ais')\n        self.assertEqual(\n            root_category.get_absolute_url(), '/catalogue/category/vins-fran%C3%A7ais_{}/'.format(root_category.pk)\n        )\n        self.assertEqual(child_category.slug, 'ch\u00e2teau-dyquem')\n        self.assertEqual(\n            child_category.get_absolute_url(),\n            '/catalogue/category/vins-fran%C3%A7ais/ch%C3%A2teau-dyquem_{}/'.format(child_category.pk)\n        )\n\n    @override_settings(OSCAR_SLUG_ALLOW_UNICODE=True)\n    def test_url_caching(self):\n        category = self.products.add_child(name=\"Fromages fran\u00e7ais\")\n        absolute_url = category.get_absolute_url()\n        url = cache.get(category.get_url_cache_key())\n        self.assertEqual(url, '/catalogue/category/products/fromages-fran%C3%A7ais_{}/'.format(category.pk))\n        self.assertEqual(absolute_url, '/catalogue/category/products/fromages-fran%C3%A7ais_{}/'.format(category.pk))\n\n\nclass TestMovingACategory(TestCase):\n\n    def setUp(self):\n        breadcrumbs = (\n            'Books > Fiction > Horror > Teen',\n            'Books > Fiction > Horror > Gothic',\n            'Books > Fiction > Comedy',\n            'Books > Non-fiction > Biography',\n            'Books > Non-fiction > Programming',\n            'Books > Children',\n        )\n        for trail in breadcrumbs:\n            create_from_breadcrumbs(trail)\n\n        horror = Category.objects.get(name=\"Horror\")\n        programming = Category.objects.get(name=\"Programming\")\n        horror.move(programming)\n\n        # Reload horror instance to pick up changes\n        self.horror = Category.objects.get(name=\"Horror\")\n\n    def test_updates_instance_name(self):\n        self.assertEqual('Books > Non-fiction > Horror', self.horror.full_name)\n\n    def test_updates_subtree_names(self):\n        teen = Category.objects.get(name=\"Teen\")\n        self.assertEqual('Books > Non-fiction > Horror > Teen',\n                         teen.full_name)\n        gothic = Category.objects.get(name=\"Gothic\")\n        self.assertEqual('Books > Non-fiction > Horror > Gothic',\n                         gothic.full_name)\n\n\nclass TestCategoryFactory(TestCase):\n\n    def test_can_create_single_level_category(self):\n        trail = 'Books'\n        category = create_from_breadcrumbs(trail)\n        self.assertIsNotNone(category)\n        self.assertEqual(category.name, 'Books')\n        self.assertEqual(category.slug, 'books')\n\n    def test_can_create_parent_and_child_categories(self):\n        trail = 'Books > Science-Fiction'\n        category = create_from_breadcrumbs(trail)\n\n        self.assertIsNotNone(category)\n        self.assertEqual(category.name, 'Science-Fiction')\n        self.assertEqual(category.get_depth(), 2)\n        self.assertEqual(category.get_parent().name, 'Books')\n        self.assertEqual(2, Category.objects.count())\n        self.assertEqual(category.full_slug, 'books/science-fiction')\n\n    def test_can_create_multiple_categories(self):\n        trail = 'Books > Science-Fiction > Star Trek'\n        create_from_breadcrumbs(trail)\n        trail = 'Books > Factual > Popular Science'\n        category = create_from_breadcrumbs(trail)\n\n        self.assertIsNotNone(category)\n        self.assertEqual(category.name, 'Popular Science')\n        self.assertEqual(category.get_depth(), 3)\n        self.assertEqual(category.get_parent().name, 'Factual')\n        self.assertEqual(5, Category.objects.count())\n        self.assertEqual(category.full_slug, 'books/factual/popular-science', )\n\n    def test_can_use_alternative_separator(self):\n        trail = 'Food|Cheese|Blue'\n        create_from_breadcrumbs(trail, separator='|')\n        self.assertEqual(3, len(Category.objects.all()))\n\n    def test_updating_subtree_slugs_when_moving_category_to_new_parent(self):\n        trail = 'A > B > C'\n        create_from_breadcrumbs(trail)\n        trail = 'A > B > D'\n        create_from_breadcrumbs(trail)\n        trail = 'A > E > F'\n        create_from_breadcrumbs(trail)\n        trail = 'A > E > G'\n        create_from_breadcrumbs(trail)\n\n        trail = 'T'\n        target = create_from_breadcrumbs(trail)\n        category = Category.objects.get(name='A')\n\n        category.move(target, pos='first-child')\n\n        c1 = Category.objects.get(name='A')\n        self.assertEqual(c1.full_slug, 't/a')\n        self.assertEqual(c1.full_name, 'T > A')\n\n        child = Category.objects.get(name='F')\n        self.assertEqual(child.full_slug, 't/a/e/f')\n        self.assertEqual(child.full_name, 'T > A > E > F')\n\n        child = Category.objects.get(name='D')\n        self.assertEqual(child.full_slug, 't/a/b/d')\n        self.assertEqual(child.full_name, 'T > A > B > D')\n\n    def test_updating_subtree_when_moving_category_to_new_sibling(self):\n        trail = 'A > B > C'\n        create_from_breadcrumbs(trail)\n        trail = 'A > B > D'\n        create_from_breadcrumbs(trail)\n        trail = 'A > E > F'\n        create_from_breadcrumbs(trail)\n        trail = 'A > E > G'\n        create_from_breadcrumbs(trail)\n\n        category = Category.objects.get(name='E')\n        target = Category.objects.get(name='A')\n\n        category.move(target, pos='right')\n\n        child = Category.objects.get(name='E')\n        self.assertEqual(child.full_slug, 'e')\n        self.assertEqual(child.full_name, 'E')\n\n        child = Category.objects.get(name='F')\n        self.assertEqual(child.full_slug, 'e/f')\n        self.assertEqual(child.full_name, 'E > F')\n\n\nclass TestCategoryTemplateTags(TestCase):\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.template = \"\"\"\n          {% if tree_categories %}\n              <ul>\n              {% for tree_category, info in tree_categories %}\n                  <li>\n                  {% if tree_category.pk == category.pk %}\n                      <strong>{{ tree_category.name }}</strong>\n                  {% else %}\n                      <a href=\"{{ tree_category.get_absolute_url }}\">\n                          {{ tree_category.name }}</a>\n                  {% endif %}\n                  {% if info.has_children %}<ul>{% else %}</li>{% endif %}\n                  {% for n in info.num_to_close %}\n                      </ul></li>\n                  {% endfor %}\n              {% endfor %}\n              </ul>\n          {% endif %}\n        \"\"\"\n\n    def setUp(self):\n        breadcrumbs = (\n            'Books > Fiction > Horror > Teen',\n            'Books > Fiction > Horror > Gothic',\n            'Books > Fiction > Comedy',\n            'Books > Non-fiction > Biography',\n            'Books > Non-fiction > Programming',\n            'Books > Children',\n        )\n        for trail in breadcrumbs:\n            create_from_breadcrumbs(trail)\n\n    def get_category_names(self, depth=None, parent=None):\n        \"\"\"\n        For the tests, we are only interested in the category names returned\n        from the template tag. This helper calls the template tag and\n        returns a list of the included categories.\n        \"\"\"\n        annotated_list = get_annotated_list(depth, parent)\n        names = [category.name for category, __ in annotated_list]\n        names_set = set(names)\n        # We return a set to ease testing, but need to be sure we're not\n        # losing any duplicates through that conversion.\n        self.assertEqual(len(names_set), len(names))\n        return names_set\n\n    def test_all_categories(self):\n        expected_categories = {\n            'Books', 'Fiction', 'Horror', 'Teen', 'Gothic', 'Comedy',\n            'Non-fiction', 'Biography', 'Programming', 'Children'}\n        actual_categories = self.get_category_names()\n        self.assertEqual(expected_categories, actual_categories)\n\n    def test_categories_depth(self):\n        expected_categories = {'Books'}\n        actual_categories = self.get_category_names(depth=1)\n        self.assertEqual(expected_categories, actual_categories)\n\n    def test_categories_parent(self):\n        parent = Category.objects.get(name=\"Fiction\")\n        actual_categories = self.get_category_names(parent=parent)\n        expected_categories = {'Horror', 'Teen', 'Gothic', 'Comedy'}\n        self.assertEqual(expected_categories, actual_categories)\n\n    def test_categories_depth_parent(self):\n        parent = Category.objects.get(name=\"Fiction\")\n        actual_categories = self.get_category_names(depth=1, parent=parent)\n        expected_categories = {'Horror', 'Comedy'}\n        self.assertEqual(expected_categories, actual_categories)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django.apps import AppConfig\nfrom django.utils.translation import gettext_lazy as _\n\n\nclass AddressConfig(AppConfig):\n    label = 'address'\n    name = 'oscar.apps.address'\n    verbose_name = _('Address')\n",
    "output": "import pytest\nfrom django.core.exceptions import ValidationError\n\nfrom oscar.apps.catalogue import models\n\n\ndef test_product_attributes_can_contain_underscores():\n    attr = models.ProductAttribute(name=\"A\", code=\"a_b\")\n    attr.full_clean()\n\n\ndef test_product_attributes_cant_contain_hyphens():\n    attr = models.ProductAttribute(name=\"A\", code=\"a-b\")\n    with pytest.raises(ValidationError):\n        attr.full_clean()\n\n\ndef test_product_attributes_cant_be_python_keywords():\n    attr = models.ProductAttribute(name=\"A\", code=\"import\")\n    with pytest.raises(ValidationError):\n        attr.full_clean()\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django.apps import AppConfig\nfrom django.utils.translation import gettext_lazy as _\n\n\nclass AddressConfig(AppConfig):\n    label = 'address'\n    name = 'oscar.apps.address'\n    verbose_name = _('Address')\n",
    "output": "from django.test import TestCase\n\nfrom oscar.test import factories\nfrom oscar.core.loading import get_model\n\n\nProduct = get_model('catalogue', 'Product')\n\n\nclass ProductOptionTests(TestCase):\n    def setUp(self):\n        self.product_class = factories.ProductClassFactory()\n        self.product = factories.create_product(product_class=self.product_class)\n        self.option = factories.OptionFactory()\n\n    def test_product_has_options_per_product_class(self):\n        self.product_class.options.add(self.option)\n        self.assertTrue(self.product.has_options)\n\n    def test_product_has_options_per_product(self):\n        self.product.product_options.add(self.option)\n        self.assertTrue(self.product.has_options)\n\n    def test_queryset_per_product_class(self):\n        self.product_class.options.add(self.option)\n        qs = Product.browsable.base_queryset().filter(id=self.product.id)\n        product = qs.first()\n        self.assertTrue(product.has_options)\n        self.assertEquals(product.num_product_class_options, 1)\n\n    def test_queryset_per_product(self):\n        self.product.product_options.add(self.option)\n        qs = Product.browsable.base_queryset().filter(id=self.product.id)\n        product = qs.first()\n        self.assertTrue(product.has_options)\n        self.assertEquals(product.num_product_options, 1)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django.apps import AppConfig\nfrom django.utils.translation import gettext_lazy as _\n\n\nclass AddressConfig(AppConfig):\n    label = 'address'\n    name = 'oscar.apps.address'\n    verbose_name = _('Address')\n",
    "output": "# coding=utf-8\nfrom django.db import IntegrityError\nfrom django.test import TestCase\nfrom django.core.exceptions import ValidationError\n\nfrom oscar.apps.catalogue.models import (Product, ProductClass,\n                                         ProductAttribute,\n                                         AttributeOption,\n                                         ProductRecommendation)\nfrom oscar.test import factories\n\n\nclass ProductTests(TestCase):\n\n    def setUp(self):\n        self.product_class, _ = ProductClass.objects.get_or_create(\n            name='Clothing')\n\n\nclass ProductCreationTests(ProductTests):\n\n    def setUp(self):\n        super().setUp()\n        ProductAttribute.objects.create(product_class=self.product_class,\n                                        name='Number of pages',\n                                        code='num_pages',\n                                        type='integer')\n        Product.ENABLE_ATTRIBUTE_BINDING = True\n\n    def tearDown(self):\n        Product.ENABLE_ATTRIBUTE_BINDING = False\n\n    def test_create_products_with_attributes(self):\n        product = Product(upc='1234',\n                          product_class=self.product_class,\n                          title='testing')\n        product.attr.num_pages = 100\n        product.save()\n\n    def test_none_upc_is_represented_as_empty_string(self):\n        product = Product(product_class=self.product_class,\n                          title='testing', upc=None)\n        product.save()\n        product.refresh_from_db()\n        self.assertEqual(product.upc, '')\n\n    def test_upc_uniqueness_enforced(self):\n        Product.objects.create(product_class=self.product_class,\n                               title='testing', upc='bah')\n        self.assertRaises(IntegrityError, Product.objects.create,\n                          product_class=self.product_class,\n                          title='testing', upc='bah')\n\n    def test_allow_two_products_without_upc(self):\n        for x in range(2):\n            Product.objects.create(product_class=self.product_class,\n                                   title='testing', upc=None)\n\n\nclass TopLevelProductTests(ProductTests):\n\n    def test_top_level_products_must_have_titles(self):\n        product = Product(product_class=self.product_class)\n        self.assertRaises(ValidationError, product.clean)\n\n    def test_top_level_products_must_have_product_class(self):\n        product = Product(title=\"Kopfh\u00f6rer\")\n        self.assertRaises(ValidationError, product.clean)\n\n    def test_top_level_products_are_part_of_browsable_set(self):\n        product = Product.objects.create(\n            product_class=self.product_class, title=\"Kopfh\u00f6rer\")\n        self.assertEqual(set([product]), set(Product.browsable.all()))\n\n\nclass ChildProductTests(ProductTests):\n\n    def setUp(self):\n        super().setUp()\n        self.parent = Product.objects.create(\n            title=\"Parent product\",\n            product_class=self.product_class,\n            structure=Product.PARENT,\n            is_discountable=False)\n\n    def test_child_products_dont_need_titles(self):\n        Product.objects.create(\n            parent=self.parent, structure=Product.CHILD)\n\n    def test_child_products_dont_need_a_product_class(self):\n        Product.objects.create(parent=self.parent, structure=Product.CHILD)\n\n    def test_child_products_inherit_fields(self):\n        p = Product.objects.create(\n            parent=self.parent,\n            structure=Product.CHILD,\n            is_discountable=True)\n        self.assertEqual(\"Parent product\", p.get_title())\n        self.assertEqual(\"Clothing\", p.get_product_class().name)\n        self.assertEqual(False, p.get_is_discountable())\n\n    def test_child_products_are_not_part_of_browsable_set(self):\n        Product.objects.create(\n            product_class=self.product_class, parent=self.parent,\n            structure=Product.CHILD)\n        self.assertEqual(set([self.parent]), set(Product.browsable.all()))\n\n\nclass TestAChildProduct(TestCase):\n\n    def setUp(self):\n        clothing = ProductClass.objects.create(\n            name='Clothing', requires_shipping=True)\n        self.parent = clothing.products.create(\n            title=\"Parent\", structure=Product.PARENT)\n        self.child = self.parent.children.create(structure=Product.CHILD)\n\n    def test_delegates_requires_shipping_logic(self):\n        self.assertTrue(self.child.is_shipping_required)\n\n\nclass ProductAttributeCreationTests(TestCase):\n\n    def test_validating_option_attribute(self):\n        option_group = factories.AttributeOptionGroupFactory()\n        option_1 = factories.AttributeOptionFactory(group=option_group)\n        option_2 = factories.AttributeOptionFactory(group=option_group)\n        pa = factories.ProductAttribute(\n            type='option', option_group=option_group)\n\n        self.assertRaises(ValidationError, pa.validate_value, 'invalid')\n        pa.validate_value(option_1)\n        pa.validate_value(option_2)\n\n        invalid_option = AttributeOption(option='invalid option')\n        self.assertRaises(\n            ValidationError, pa.validate_value, invalid_option)\n\n    def test_entity_attributes(self):\n        unrelated_object = factories.PartnerFactory()\n        attribute = factories.ProductAttributeFactory(type='entity')\n\n        attribute_value = factories.ProductAttributeValueFactory(\n            attribute=attribute, value_entity=unrelated_object)\n\n        self.assertEqual(attribute_value.value, unrelated_object)\n\n\nclass ProductRecommendationTests(ProductTests):\n\n    def setUp(self):\n        super().setUp()\n        self.primary_product = Product.objects.create(\n            upc='1234', product_class=self.product_class, title='Primary Product'\n        )\n\n    def test_recommended_products_ordering(self):\n        secondary_products = []\n        for i in range(5):\n            secondary_products.append(Product.objects.create(\n                upc='secondary%s' % i, product_class=self.product_class, title='Secondary Product #%s' % i\n            ))\n\n        ProductRecommendation.objects.create(\n            primary=self.primary_product, recommendation=secondary_products[3], ranking=5)\n        ProductRecommendation.objects.create(\n            primary=self.primary_product, recommendation=secondary_products[1], ranking=2)\n        ProductRecommendation.objects.create(\n            primary=self.primary_product, recommendation=secondary_products[2], ranking=4)\n        ProductRecommendation.objects.create(\n            primary=self.primary_product, recommendation=secondary_products[4], ranking=1)\n        ProductRecommendation.objects.create(\n            primary=self.primary_product, recommendation=secondary_products[0], ranking=3)\n        recommended_products = [\n            secondary_products[3], secondary_products[2], secondary_products[0],\n            secondary_products[1], secondary_products[4]\n        ]\n        self.assertEqual(self.primary_product.sorted_recommended_products, recommended_products)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django.apps import AppConfig\nfrom django.utils.translation import gettext_lazy as _\n\n\nclass AddressConfig(AppConfig):\n    label = 'address'\n    name = 'oscar.apps.address'\n    verbose_name = _('Address')\n",
    "output": "from django.test import TestCase\n\nfrom oscar.apps.catalogue import models\n\n\nclass TestProductClassModel(TestCase):\n\n    def test_slug_is_auto_created(self):\n        books = models.ProductClass.objects.create(\n            name=\"Book\",\n        )\n        self.assertEqual('book', books.slug)\n\n    def test_has_attribute_for_whether_shipping_is_required(self):\n        models.ProductClass.objects.create(\n            name=\"Download\",\n            requires_shipping=False,\n        )\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django.apps import AppConfig\nfrom django.utils.translation import gettext_lazy as _\n\n\nclass AddressConfig(AppConfig):\n    label = 'address'\n    name = 'oscar.apps.address'\n    verbose_name = _('Address')\n",
    "output": "import os\nimport tempfile\nfrom unittest import mock\n\nfrom django.contrib.staticfiles.testing import StaticLiveServerTestCase\nfrom django.test import TestCase, override_settings\n\nfrom oscar.apps.catalogue.abstract_models import MissingProductImage\nfrom oscar.test import factories\n\n\nclass TestProductImages(TestCase):\n\n    def test_images_are_in_consecutive_order(self):\n        product = factories.create_product()\n        for i in range(4):\n            factories.create_product_image(product=product, display_order=i)\n\n        product.images.all()[2].delete()\n\n        for idx, im in enumerate(product.images.all()):\n            self.assertEqual(im.display_order, idx)\n\n    def test_variant_images(self):\n        parent = factories.ProductFactory(structure='parent')\n        variant = factories.create_product(parent=parent)\n        factories.create_product_image(product=variant, caption='Variant Image')\n        all_images = variant.get_all_images()\n        self.assertEquals(all_images.count(), 1)\n        product_image = all_images.first()\n        self.assertEquals(product_image.caption, 'Variant Image')\n\n    def test_variant_images_fallback_to_parent(self):\n        parent = factories.ProductFactory(structure='parent')\n        variant = factories.create_product(parent=parent)\n        factories.create_product_image(product=parent, caption='Parent Product Image')\n        all_images = variant.get_all_images()\n        self.assertEquals(all_images.count(), 1)\n        product_image = all_images.first()\n        self.assertEquals(product_image.caption, 'Parent Product Image')\n\n\nclass TestMissingProductImage(StaticLiveServerTestCase):\n\n    TEMP_MEDIA_ROOT = tempfile.mkdtemp()\n\n    @override_settings(MEDIA_ROOT=TEMP_MEDIA_ROOT)\n    @mock.patch('oscar.apps.catalogue.abstract_models.find')\n    def test_symlink_creates_directories(self, mock_find):\n        # Create a fake empty file to symlink\n        img = tempfile.NamedTemporaryFile(delete=False)\n        img.close()\n\n        mock_find.return_value = img.name\n        # Initialise the class with a nested path\n        path = 'image/path.jpg'\n        MissingProductImage(path)\n        # Check that the directory exists\n        image_path = os.path.join(self.TEMP_MEDIA_ROOT, path)\n        self.assertTrue(os.path.exists(image_path))\n\n        # Clean up\n        for f in [image_path, img.name]:\n            os.unlink(f)\n        for d in [os.path.join(self.TEMP_MEDIA_ROOT, 'image'), self.TEMP_MEDIA_ROOT]:\n            os.rmdir(d)\n\n    @mock.patch('oscar.apps.catalogue.abstract_models.MissingProductImage.symlink_missing_image')\n    def test_no_symlink_when_no_media_root(self, mock_symlink):\n        MissingProductImage()\n        self.assertEqual(mock_symlink.call_count, 0)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django.apps import AppConfig\nfrom django.utils.translation import gettext_lazy as _\n\n\nclass AddressConfig(AppConfig):\n    label = 'address'\n    name = 'oscar.apps.address'\n    verbose_name = _('Address')\n",
    "output": "from django.test import TestCase\nfrom django.test.utils import override_settings\n\nfrom oscar.apps.catalogue.search_handlers import (\n    get_product_search_handler_class,\n)\n\n\nclass TestSearchHandler(object):\n    pass\n\n\nclass TestProductSearchHandlerSetting(TestCase):\n    def test_product_search_handler_setting(self):\n        \"\"\"\n        Test that the `OSCAR_PRODUCT_SEARCH_HANDLER` setting, when set,\n        dictates the return value of the `get_product_search_handler_class`\n        function.\n        \"\"\"\n        handler_override = 'tests.integration.catalogue.test_product_search_handler_setting.TestSearchHandler'\n        with override_settings(OSCAR_PRODUCT_SEARCH_HANDLER=handler_override):\n            handler_class = get_product_search_handler_class()\n\n        self.assertEqual(handler_class, TestSearchHandler)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django.apps import AppConfig\nfrom django.utils.translation import gettext_lazy as _\n\n\nclass AddressConfig(AppConfig):\n    label = 'address'\n    name = 'oscar.apps.address'\n    verbose_name = _('Address')\n",
    "output": ""
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django.apps import AppConfig\nfrom django.utils.translation import gettext_lazy as _\n\n\nclass AddressConfig(AppConfig):\n    label = 'address'\n    name = 'oscar.apps.address'\n    verbose_name = _('Address')\n",
    "output": "from django.test import TestCase\n\nfrom oscar.apps.catalogue.reviews import forms\nfrom oscar.test.factories import UserFactory, create_product\n\n\nclass TestReviewForm(TestCase):\n\n    def test_cleans_title(self):\n        product = create_product()\n        reviewer = UserFactory()\n        data = {\n            'title': '  This product is lovely',\n            'body': 'I really like this cheese',\n            'score': 0,\n            'name': 'JR Hartley',\n            'email': 'hartley@example.com'\n        }\n        form = forms.ProductReviewForm(\n            product=product, user=reviewer, data=data)\n\n        assert form.is_valid()\n\n        review = form.save()\n        assert review.title == \"This product is lovely\"\n\n    def test_validates_empty_data_correctly(self):\n        form = forms.ProductReviewForm(product=None, user=None, data={})\n        assert form.is_valid() is False\n\n    def test_validates_correctly(self):\n        data = {\n            'title': 'This product is lovely',\n            'body': 'I really like this cheese',\n            'score': 0,\n            'name': 'JR Hartley',\n            'email': 'hartley@example.com'\n        }\n        form = forms.ProductReviewForm(product=None, user=None, data=data)\n        assert form.is_valid()\n\n\nclass TestVoteForm(TestCase):\n\n    def setUp(self):\n        self.product = create_product()\n        self.reviewer = UserFactory()\n        self.voter = UserFactory()\n        self.review = self.product.reviews.create(\n            title='This is nice',\n            score=3,\n            body=\"This is the body\",\n            user=self.reviewer)\n\n    def test_allows_real_users_to_vote(self):\n        form = forms.VoteForm(self.review, self.voter, data={'delta': 1})\n        self.assertTrue(form.is_valid())\n\n    def test_prevents_users_from_voting_more_than_once(self):\n        self.review.vote_up(self.voter)\n        form = forms.VoteForm(self.review, self.voter, data={'delta': 1})\n        self.assertFalse(form.is_valid())\n        self.assertTrue(len(form.errors['__all__']) > 0)\n\n    def test_prevents_users_voting_on_their_own_reviews(self):\n        form = forms.VoteForm(self.review, self.reviewer, data={'delta': 1})\n        self.assertFalse(form.is_valid())\n        self.assertTrue(len(form.errors['__all__']) > 0)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django.apps import AppConfig\nfrom django.utils.translation import gettext_lazy as _\n\n\nclass AddressConfig(AppConfig):\n    label = 'address'\n    name = 'oscar.apps.address'\n    verbose_name = _('Address')\n",
    "output": "from django.test import TestCase\nfrom django.core.exceptions import ValidationError\n\nfrom oscar.core.compat import get_user_model\nfrom oscar.apps.catalogue.reviews import models\nfrom oscar.test.factories import create_product\nfrom oscar.test.factories import UserFactory\n\nUser = get_user_model()\n\n\nclass TestAnAnonymousReview(TestCase):\n\n    def setUp(self):\n        self.product = create_product()\n        self.data = {\n            'product': self.product,\n            'title': 'This product is lovely',\n            'body': 'I really like this cheese',\n            'score': 0,\n            'name': 'JR Hartley',\n            'email': 'hartley@example.com'\n        }\n\n    def review(self, **kwargs):\n        if kwargs:\n            data = self.data.copy()\n            data.update(kwargs)\n        else:\n            data = self.data\n        return models.ProductReview(**data)\n\n    def test_can_be_created(self):\n        review = self.review()\n        review.full_clean()\n\n    def test_requires_a_title(self):\n        review = self.review(title=\"\")\n        self.assertRaises(ValidationError, review.full_clean)\n\n    def test_requires_a_body(self):\n        review = self.review(body=\"\")\n        self.assertRaises(ValidationError, review.full_clean)\n\n    def test_requires_a_name(self):\n        review = self.review(name=\"\")\n        self.assertRaises(ValidationError, review.full_clean)\n\n    def test_requires_an_email_address(self):\n        review = self.review(email=\"\")\n        self.assertRaises(ValidationError, review.full_clean)\n\n    def test_requires_non_whitespace_title(self):\n        review = self.review(title=\"    \")\n        self.assertRaises(ValidationError, review.full_clean)\n\n    def test_starts_with_no_votes(self):\n        review = self.review()\n        review.save()\n        self.assertFalse(review.has_votes)\n        self.assertEqual(0, review.num_up_votes)\n        self.assertEqual(0, review.num_down_votes)\n\n    def test_has_reviewer_name_property(self):\n        review = self.review(name=\"Dave\")\n        self.assertEqual(\"Dave\", review.reviewer_name)\n\n    def test_review_moderate_setting_false(self):\n        with self.settings(OSCAR_MODERATE_REVIEWS=False):\n            review = self.review()\n            self.assertEqual(1, review.status)\n\n    def test_review_moderate_setting_true(self):\n        with self.settings(OSCAR_MODERATE_REVIEWS=True):\n            review = self.review()\n            self.assertEqual(0, review.status)\n\n\nclass TestAUserReview(TestCase):\n\n    def setUp(self):\n        self.product = create_product()\n        self.user = UserFactory(first_name=\"Tom\", last_name=\"Thumb\")\n        self.data = {\n            'product': self.product,\n            'title': 'This product is lovely',\n            'body': 'I really like this cheese',\n            'score': 0,\n            'user': self.user\n        }\n\n    def review(self, **kwargs):\n        if kwargs:\n            data = self.data.copy()\n            data.update(kwargs)\n        else:\n            data = self.data\n        return models.ProductReview(**data)\n\n    def test_can_be_created(self):\n        review = self.review()\n        review.full_clean()\n\n    def test_requires_a_title(self):\n        review = self.review(title=\"\")\n        self.assertRaises(ValidationError, review.full_clean)\n\n    def test_requires_a_body(self):\n        review = self.review(body=\"\")\n        self.assertRaises(ValidationError, review.full_clean)\n\n    def test_has_reviewer_name_property(self):\n        review = self.review()\n        self.assertEqual(\"Tom Thumb\", review.reviewer_name)\n\n    def test_num_approved_reviews(self):\n        review = self.review()\n        review.save()\n        self.assertEqual(self.product.num_approved_reviews, 1)\n        self.assertEqual(self.product.reviews.approved().first(), review)\n\n    def test_review_moderate_setting_false(self):\n        with self.settings(OSCAR_MODERATE_REVIEWS=False):\n            review = self.review()\n            self.assertEqual(1, review.status)\n\n    def test_review_moderate_setting_true(self):\n        with self.settings(OSCAR_MODERATE_REVIEWS=True):\n            review = self.review()\n            self.assertEqual(0, review.status)\n\n\nclass TestVotingOnAReview(TestCase):\n\n    def setUp(self):\n        self.product = create_product()\n        self.user = UserFactory()\n        self.voter = UserFactory()\n        self.review = self.product.reviews.create(\n            title='This is nice',\n            score=3,\n            body=\"This is the body\",\n            user=self.user)\n\n    def test_updates_totals_for_upvote(self):\n        self.review.vote_up(self.voter)\n        self.assertTrue(self.review.has_votes)\n        self.assertEqual(1, self.review.total_votes)\n        self.assertEqual(1, self.review.delta_votes)\n\n    def test_updates_totals_for_downvote(self):\n        self.review.vote_down(self.voter)\n        self.assertTrue(self.review.has_votes)\n        self.assertEqual(1, self.review.total_votes)\n        self.assertEqual(-1, self.review.delta_votes)\n\n    def test_is_permitted_for_normal_user(self):\n        is_allowed, reason = self.review.can_user_vote(self.voter)\n        self.assertTrue(is_allowed, reason)\n\n    def test_is_not_permitted_for_reviewer(self):\n        is_allowed, reason = self.review.can_user_vote(self.user)\n        self.assertFalse(is_allowed, reason)\n\n    def test_is_not_permitted_for_previous_voter(self):\n        self.review.vote_up(self.voter)\n        is_allowed, reason = self.review.can_user_vote(self.voter)\n        self.assertFalse(is_allowed, reason)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django.apps import AppConfig\nfrom django.utils.translation import gettext_lazy as _\n\n\nclass AddressConfig(AppConfig):\n    label = 'address'\n    name = 'oscar.apps.address'\n    verbose_name = _('Address')\n",
    "output": ""
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django.apps import AppConfig\nfrom django.utils.translation import gettext_lazy as _\n\n\nclass AddressConfig(AppConfig):\n    label = 'address'\n    name = 'oscar.apps.address'\n    verbose_name = _('Address')\n",
    "output": "from decimal import Decimal as D\nfrom unittest import mock\n\nfrom django.test import TestCase, override_settings\nfrom django.conf import settings\n\nfrom oscar.apps.basket import forms, formsets\nfrom oscar.apps.offer.utils import Applicator\nfrom oscar.core.loading import get_model\nfrom oscar.test import factories\nfrom oscar.test.basket import add_product\nfrom oscar.test.factories import (\n    BenefitFactory, ConditionalOfferFactory, ConditionFactory, RangeFactory)\n\n\nLine = get_model('basket', 'Line')\n\n\nclass TestBasketLineForm(TestCase):\n\n    def setUp(self):\n        self.applicator = Applicator()\n        rng = RangeFactory(includes_all_products=True)\n        self.condition = ConditionFactory(\n            range=rng, type=ConditionFactory._meta.model.VALUE,\n            value=D('100'), proxy_class=None)\n        self.benefit = BenefitFactory(\n            range=rng, type=BenefitFactory._meta.model.FIXED,\n            value=D('10'), max_affected_items=1)\n        self.basket = factories.create_basket()\n        self.line = self.basket.all_lines()[0]\n\n    def mock_availability_return_value(self, is_available, reason=''):\n        policy = self.line.purchase_info.availability\n        policy.is_purchase_permitted = mock.MagicMock(\n            return_value=(is_available, reason))\n\n    def build_form(self, quantity=None):\n        if quantity is None:\n            quantity = self.line.quantity\n        return forms.BasketLineForm(\n            strategy=self.basket.strategy,\n            data={'quantity': quantity},\n            instance=self.line)\n\n    def test_enforces_availability_policy_for_valid_quantities(self):\n        self.mock_availability_return_value(True)\n        form = self.build_form()\n        self.assertTrue(form.is_valid())\n\n    def test_enforces_availability_policy_for_invalid_quantities(self):\n        self.mock_availability_return_value(False, \"Some reason\")\n        form = self.build_form()\n        self.assertFalse(form.is_valid())\n        self.assertEqual(\n            form.errors['quantity'], ['Some reason'])\n\n    def test_skips_availability_policy_for_zero_quantities(self):\n        self.mock_availability_return_value(True)\n        form = self.build_form(quantity=0)\n        self.assertTrue(form.is_valid())\n\n    def test_enforces_max_line_quantity_for_new_product(self):\n        invalid_qty = settings.OSCAR_MAX_BASKET_QUANTITY_THRESHOLD + 1\n        form = self.build_form(quantity=invalid_qty)\n        self.assertFalse(form.is_valid())\n\n    @override_settings(OSCAR_MAX_BASKET_QUANTITY_THRESHOLD=10)\n    def test_enforce_max_line_quantity_for_existing_product(self):\n        self.basket.flush()\n        product = factories.create_product(num_in_stock=20)\n        add_product(self.basket, D('100'), 4, product)\n        self.line = self.basket.all_lines()[0]\n        form = self.build_form(quantity=6)\n        self.assertTrue(form.is_valid())\n        form.save()\n        form = self.build_form(quantity=11)\n        self.assertFalse(form.is_valid())\n\n    def test_line_quantity_max_attribute_per_num_available(self):\n        self.basket.flush()\n        product = factories.create_product(num_in_stock=20)\n        add_product(self.basket, D('100'), 4, product)\n        self.line = self.basket.all_lines()[0]\n        form = self.build_form()\n        self.assertIn('max=\"20\"', str(form['quantity']))\n\n    @override_settings(OSCAR_MAX_BASKET_QUANTITY_THRESHOLD=10)\n    def test_line_quantity_max_attribute_per_basket_threshold(self):\n        self.basket.flush()\n        product = factories.create_product(num_in_stock=20)\n        add_product(self.basket, D('100'), 4, product)\n        self.line = self.basket.all_lines()[0]\n        form = self.build_form()\n        self.assertIn('max=\"6\"', str(form['quantity']))\n\n    def test_basketline_formset_ordering(self):\n        # when we use a unordered queryset in the Basketlineformset, the\n        # discounts will be lost because django will query the database\n        # again to enforce ordered results\n        add_product(self.basket, D('100'), 5)\n        offer = ConditionalOfferFactory(\n            pk=1, condition=self.condition, benefit=self.benefit)\n\n        # now we force an unordered queryset so we can see that our discounts\n        # will disappear due to a new ordering query (see django/forms/model.py)\n        default_line_ordering = Line._meta.ordering\n        Line._meta.ordering = []\n        self.basket._lines = self.basket.lines.all()\n\n        self.applicator.apply_offers(self.basket, [offer])\n        formset = formsets.BasketLineFormSet(\n            strategy=self.basket.strategy,\n            queryset=self.basket.all_lines())\n\n        # the discount is in all_lines():\n        self.assertTrue(self.basket.all_lines()[0].has_discount)\n\n        # but not in the formset\n        self.assertFalse(formset.forms[0].instance.has_discount)\n\n        # Restore the ordering on the line\n        Line._meta.ordering = default_line_ordering\n\n        # clear the cached lines and apply the offer again\n        self.basket._lines = None\n        self.applicator.apply_offers(self.basket, [offer])\n\n        formset = formsets.BasketLineFormSet(\n            strategy=self.basket.strategy,\n            queryset=self.basket.all_lines())\n        self.assertTrue(formset.forms[0].instance.has_discount)\n\n\nclass TestAddToBasketForm(TestCase):\n\n    def test_allows_a_product_quantity_to_be_increased(self):\n        basket = factories.create_basket()\n        product = basket.all_lines()[0].product\n\n        # Add more of the same product\n        data = {'quantity': 1}\n        form = forms.AddToBasketForm(\n            basket=basket, product=product, data=data)\n        self.assertTrue(form.is_valid())\n\n    def test_checks_whether_passed_product_id_matches_a_real_product(self):\n        basket = factories.create_basket()\n        product = basket.all_lines()[0].product\n\n        # Add more of the same product\n        data = {'quantity': -1}\n        form = forms.AddToBasketForm(\n            basket=basket, product=product, data=data)\n        self.assertFalse(form.is_valid())\n\n    def test_checks_if_purchase_is_permitted(self):\n        basket = factories.BasketFactory()\n        product = factories.ProductFactory()\n\n        # Build a 4-level mock monster so we can force the return value of\n        # whether the product is available to buy. This is a serious code smell\n        # and needs to be remedied.\n        info = mock.Mock()\n        info.availability = mock.Mock()\n        info.availability.is_purchase_permitted = mock.Mock(\n            return_value=(False, \"Not on your nelly!\"))\n        basket.strategy.fetch_for_product = mock.Mock(\n            return_value=info)\n\n        data = {'quantity': 1}\n        form = forms.AddToBasketForm(\n            basket=basket, product=product, data=data)\n        self.assertFalse(form.is_valid())\n        self.assertEqual('Not on your nelly!', form.errors['__all__'][0])\n\n    def test_mixed_currency_baskets_are_not_permitted(self):\n        # Ensure basket is one currency\n        basket = mock.Mock()\n        basket.currency = 'GBP'\n        basket.num_items = 1\n\n        # Ensure new product has different currency\n        info = mock.Mock()\n        info.price.currency = 'EUR'\n        basket.strategy.fetch_for_product = mock.Mock(\n            return_value=info)\n\n        product = factories.ProductFactory()\n\n        data = {'quantity': 1}\n        form = forms.AddToBasketForm(\n            basket=basket, product=product, data=data)\n        self.assertFalse(form.is_valid())\n\n    def test_cannot_add_a_product_without_price(self):\n        basket = factories.BasketFactory()\n        product = factories.create_product(price=None)\n\n        data = {'quantity': 1}\n        form = forms.AddToBasketForm(\n            basket=basket, product=product, data=data)\n        self.assertFalse(form.is_valid())\n        self.assertEqual(\n            form.errors['__all__'][0],\n            'This product cannot be added to the basket because a price '\n            'could not be determined for it.',\n        )\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django.apps import AppConfig\nfrom django.utils.translation import gettext_lazy as _\n\n\nclass AddressConfig(AppConfig):\n    label = 'address'\n    name = 'oscar.apps.address'\n    verbose_name = _('Address')\n",
    "output": "from django.http import HttpResponse\nfrom django.test import TestCase\nfrom django.test.client import RequestFactory\nfrom django.contrib.auth.models import AnonymousUser\n\nfrom oscar.apps.basket import middleware\n\n\nclass TestBasketMiddleware(TestCase):\n\n    @staticmethod\n    def get_response_for_test(request):\n        return HttpResponse()\n\n    def setUp(self):\n        self.middleware = middleware.BasketMiddleware(self.get_response_for_test)\n        self.request = RequestFactory().get('/')\n        self.request.user = AnonymousUser()\n        self.middleware(self.request)\n\n    def test_basket_is_attached_to_request(self):\n        self.assertTrue(hasattr(self.request, 'basket'))\n\n    def test_strategy_is_attached_to_basket(self):\n        self.assertTrue(hasattr(self.request.basket, 'strategy'))\n\n    def test_strategy_is_attached_to_request(self):\n        self.assertTrue(hasattr(self.request, 'strategy'))\n\n    def test_get_cookie_basket_handles_invalid_signatures(self):\n        request_factory = RequestFactory()\n        request_factory.cookies['oscar_open_basket'] = '1:NOTAVALIDHASH'\n        request = request_factory.get('/')\n        request.cookies_to_delete = []\n\n        cookie_basket = self.middleware.get_cookie_basket(\"oscar_open_basket\", request, None)\n\n        self.assertEqual(None, cookie_basket)\n        self.assertIn(\"oscar_open_basket\", request.cookies_to_delete)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django.apps import AppConfig\nfrom django.utils.translation import gettext_lazy as _\n\n\nclass AddressConfig(AppConfig):\n    label = 'address'\n    name = 'oscar.apps.address'\n    verbose_name = _('Address')\n",
    "output": "# -*- coding: utf-8 -*-\nfrom decimal import Decimal as D\n\nfrom django.test import TestCase\n\nfrom oscar.apps.basket.models import Basket\nfrom oscar.apps.catalogue.models import Option\nfrom oscar.apps.partner import availability, prices, strategy\nfrom oscar.test import factories\nfrom oscar.test.factories import (\n    BasketFactory, BasketLineAttributeFactory, OptionFactory, ProductFactory)\n\n\nclass TestANewBasket(TestCase):\n\n    def setUp(self):\n        self.basket = Basket()\n        self.basket.strategy = strategy.Default()\n\n    def test_has_zero_lines(self):\n        self.assertEqual(0, self.basket.num_lines)\n\n    def test_has_zero_items(self):\n        self.assertEqual(0, self.basket.num_items)\n\n    def test_doesnt_contain_vouchers(self):\n        self.assertFalse(self.basket.contains_a_voucher)\n\n    def test_can_be_edited(self):\n        self.assertTrue(self.basket.can_be_edited)\n\n    def test_is_empty(self):\n        self.assertTrue(self.basket.is_empty)\n\n    def test_is_not_submitted(self):\n        self.assertFalse(self.basket.is_submitted)\n\n    def test_has_no_applied_offers(self):\n        self.assertEqual({}, self.basket.applied_offers())\n\n\nclass TestBasketLine(TestCase):\n\n    def test_description(self):\n        basket = BasketFactory()\n        product = ProductFactory(title=\"A product\")\n        basket.add_product(product)\n\n        line = basket.lines.first()\n        self.assertEqual(line.description, \"A product\")\n\n    def test_description_with_attributes(self):\n        basket = BasketFactory()\n        product = ProductFactory(title=\"A product\")\n        basket.add_product(product)\n\n        line = basket.lines.first()\n        BasketLineAttributeFactory(\n            line=line, value='\\u2603', option__name='with')\n        self.assertEqual(line.description, \"A product (with = '\\u2603')\")\n\n    def test_create_line_reference(self):\n        basket = BasketFactory()\n        product = ProductFactory(title=\"A product\")\n        option = OptionFactory(name=\"product_option\", code=\"product_option\")\n        option_product = ProductFactory(title='Asunci\u00f3n')\n        options = [{'option': option, 'value': option_product}]\n        basket.add_product(product, options=options)\n\n    def test_basket_lines_queryset_is_ordered(self):\n        # This is needed to make sure a formset is not performing the query\n        # again with an order_by clause (losing all calculated discounts)\n        basket = BasketFactory()\n        product = ProductFactory(title=\"A product\")\n        another_product = ProductFactory(title=\"Another product\")\n        basket.add_product(product)\n        basket.add_product(another_product)\n        queryset = basket.all_lines()\n        self.assertTrue(queryset.ordered)\n\n    def test_line_tax_for_zero_tax_strategies(self):\n        basket = Basket()\n        basket.strategy = strategy.Default()\n        product = factories.create_product()\n        # Tax for the default strategy will be 0\n        factories.create_stockrecord(\n            product, price_excl_tax=D('75.00'), num_in_stock=10)\n        basket.add(product, 1)\n\n        self.assertEqual(basket.lines.first().line_tax, D('0'))\n\n    def test_line_tax_for_unknown_tax_strategies(self):\n\n        class UnknownTaxStrategy(strategy.Default):\n            \"\"\" A test strategy where the tax is not known \"\"\"\n\n            def pricing_policy(self, product, stockrecord):\n                return prices.FixedPrice('GBP', stockrecord.price_excl_tax, tax=None)\n\n        basket = Basket()\n        basket.strategy = UnknownTaxStrategy()\n        product = factories.create_product()\n        factories.create_stockrecord(product, num_in_stock=10)\n        basket.add(product, 1)\n\n        self.assertEqual(basket.lines.first().line_tax, None)\n\n\nclass TestAddingAProductToABasket(TestCase):\n\n    def setUp(self):\n        self.basket = Basket()\n        self.basket.strategy = strategy.Default()\n        self.product = factories.create_product()\n        self.record = factories.create_stockrecord(\n            currency='GBP',\n            product=self.product, price_excl_tax=D('10.00'))\n        self.purchase_info = factories.create_purchase_info(self.record)\n        self.basket.add(self.product)\n\n    def test_creates_a_line(self):\n        self.assertEqual(1, self.basket.num_lines)\n\n    def test_sets_line_prices(self):\n        line = self.basket.lines.all()[0]\n        self.assertEqual(line.price_incl_tax, self.purchase_info.price.incl_tax)\n        self.assertEqual(line.price_excl_tax, self.purchase_info.price.excl_tax)\n\n    def test_adding_negative_quantity(self):\n        self.assertEqual(1, self.basket.num_lines)\n        self.basket.add(self.product, quantity=4)\n        self.assertEqual(5, self.basket.line_quantity(self.product, self.record))\n        self.basket.add(self.product, quantity=-10)\n        self.assertEqual(0, self.basket.line_quantity(self.product, self.record))\n\n    def test_means_another_currency_product_cannot_be_added(self):\n        product = factories.create_product()\n        factories.create_stockrecord(\n            currency='USD', product=product, price_excl_tax=D('20.00'))\n        with self.assertRaises(ValueError):\n            self.basket.add(product)\n\n    def test_cannot_add_a_product_without_price(self):\n        product = factories.create_product(price=None)\n        with self.assertRaises(ValueError):\n            self.basket.add(product)\n\n\nclass TestANonEmptyBasket(TestCase):\n\n    def setUp(self):\n        self.basket = Basket()\n        self.basket.strategy = strategy.Default()\n        self.product = factories.create_product()\n        self.record = factories.create_stockrecord(\n            self.product, price_excl_tax=D('10.00'))\n        self.purchase_info = factories.create_purchase_info(self.record)\n        self.basket.add(self.product, 10)\n\n    def test_can_be_flushed(self):\n        self.basket.flush()\n        self.assertEqual(self.basket.num_items, 0)\n\n    def test_returns_correct_product_quantity(self):\n        self.assertEqual(10, self.basket.product_quantity(\n            self.product))\n\n    def test_returns_correct_line_quantity_for_existing_product_and_stockrecord(self):\n        self.assertEqual(10, self.basket.line_quantity(\n            self.product, self.record))\n\n    def test_returns_zero_line_quantity_for_alternative_stockrecord(self):\n        record = factories.create_stockrecord(\n            self.product, price_excl_tax=D('5.00'))\n        self.assertEqual(0, self.basket.line_quantity(\n            self.product, record))\n\n    def test_returns_zero_line_quantity_for_missing_product_and_stockrecord(self):\n        product = factories.create_product()\n        record = factories.create_stockrecord(\n            product, price_excl_tax=D('5.00'))\n        self.assertEqual(0, self.basket.line_quantity(\n            product, record))\n\n    def test_returns_correct_quantity_for_existing_product_and_stockrecord_and_options(self):\n        product = factories.create_product()\n        record = factories.create_stockrecord(\n            product, price_excl_tax=D('5.00'))\n        option = Option.objects.create(name=\"Message\")\n        options = [{\"option\": option, \"value\": \"2\"}]\n\n        self.basket.add(product, options=options)\n        self.assertEqual(0, self.basket.line_quantity(\n            product, record))\n        self.assertEqual(1, self.basket.line_quantity(\n            product, record, options))\n\n    def test_total_sums_product_totals(self):\n        product = factories.create_product()\n        factories.create_stockrecord(\n            product, price_excl_tax=D('5.00'))\n        self.basket.add(product, 1)\n        self.assertEqual(self.basket.total_excl_tax, 105)\n\n    def test_totals_for_free_products(self):\n        basket = Basket()\n        basket.strategy = strategy.Default()\n        # Add a zero-priced product to the basket\n        product = factories.create_product()\n        factories.create_stockrecord(\n            product, price_excl_tax=D('0.00'), num_in_stock=10)\n        basket.add(product, 1)\n\n        self.assertEqual(basket.lines.count(), 1)\n        self.assertEqual(basket.total_excl_tax, 0)\n        self.assertEqual(basket.total_incl_tax, 0)\n\n    def test_basket_prices_calculation_for_unavailable_pricing(self):\n        new_product = factories.create_product()\n        factories.create_stockrecord(\n            new_product, price_excl_tax=D('5.00'))\n        self.basket.add(new_product, 1)\n\n        class UnavailableProductStrategy(strategy.Default):\n            \"\"\" A test strategy that makes a specific product unavailable \"\"\"\n\n            def availability_policy(self, product, stockrecord):\n                if product == new_product:\n                    return availability.Unavailable()\n                return super().availability_policy(product, stockrecord)\n\n            def pricing_policy(self, product, stockrecord):\n                if product == new_product:\n                    return prices.Unavailable()\n                return super().pricing_policy(product, stockrecord)\n\n        self.basket.strategy = UnavailableProductStrategy()\n        line = self.basket.all_lines()[1]\n        self.assertEqual(line.get_warning(), \"'D\\xf9\\uff4d\\u03fb\\u03d2 title' is no longer available\")\n        self.assertIsNone(line.line_price_excl_tax)\n        self.assertIsNone(line.line_price_incl_tax)\n        self.assertIsNone(line.line_price_excl_tax_incl_discounts)\n        self.assertIsNone(line.line_price_incl_tax_incl_discounts)\n        self.assertIsNone(line.line_tax)\n        self.assertEqual(self.basket.total_excl_tax, 100)\n        self.assertEqual(self.basket.total_incl_tax, 100)\n        self.assertEqual(self.basket.total_excl_tax_excl_discounts, 100)\n        self.assertEqual(self.basket.total_incl_tax_excl_discounts, 100)\n\n    def test_max_allowed_quantity(self):\n        self.basket.add_product(self.product, quantity=3)\n\n        # max allowed here is 7 (20-10+3)\n        with self.settings(OSCAR_MAX_BASKET_QUANTITY_THRESHOLD=20):\n            max_allowed, basket_threshold = self.basket.max_allowed_quantity()\n            self.assertEqual(max_allowed, 7)\n            self.assertEqual(basket_threshold, 20)\n\n        # but we can also completely disable the threshold\n        with self.settings(OSCAR_MAX_BASKET_QUANTITY_THRESHOLD=None):\n            max_allowed, basket_threshold = self.basket.max_allowed_quantity()\n            self.assertEqual(max_allowed, None)\n            self.assertEqual(basket_threshold, None)\n\n    def test_is_quantity_allowed(self):\n        with self.settings(OSCAR_MAX_BASKET_QUANTITY_THRESHOLD=20):\n            # 7 or below is possible\n            allowed, message = self.basket.is_quantity_allowed(qty=7)\n            self.assertTrue(allowed)\n            self.assertIsNone(message)\n            # but above it's not\n            allowed, message = self.basket.is_quantity_allowed(qty=11)\n            self.assertFalse(allowed)\n            self.assertIsNotNone(message)\n\n        with self.settings(OSCAR_MAX_BASKET_QUANTITY_THRESHOLD=None):\n            # with the treshold disabled all quantities are possible\n            allowed, message = self.basket.is_quantity_allowed(qty=7)\n            self.assertTrue(allowed)\n            self.assertIsNone(message)\n            allowed, message = self.basket.is_quantity_allowed(qty=5000)\n            self.assertTrue(allowed)\n            self.assertIsNone(message)\n\n\nclass TestMergingTwoBaskets(TestCase):\n\n    def setUp(self):\n        self.product = factories.create_product()\n        self.record = factories.create_stockrecord(\n            self.product, price_excl_tax=D('10.00'))\n        self.purchase_info = factories.create_purchase_info(self.record)\n\n        self.main_basket = Basket()\n        self.main_basket.strategy = strategy.Default()\n        self.main_basket.add(self.product, quantity=2)\n\n        self.merge_basket = Basket()\n        self.merge_basket.strategy = strategy.Default()\n        self.merge_basket.add(self.product, quantity=1)\n\n        self.main_basket.merge(self.merge_basket)\n\n    def test_doesnt_sum_quantities(self):\n        self.assertEqual(1, self.main_basket.num_lines)\n\n    def test_changes_status_of_merge_basket(self):\n        self.assertEqual(Basket.MERGED, self.merge_basket.status)\n\n\nclass TestASubmittedBasket(TestCase):\n\n    def setUp(self):\n        self.basket = Basket()\n        self.basket.strategy = strategy.Default()\n        self.basket.submit()\n\n    def test_has_correct_status(self):\n        self.assertTrue(self.basket.is_submitted)\n\n    def test_can_be_edited(self):\n        self.assertFalse(self.basket.can_be_edited)\n\n\nclass TestMergingAVoucherBasket(TestCase):\n\n    def test_transfers_vouchers_to_new_basket(self):\n        baskets = [factories.BasketFactory(), factories.BasketFactory()]\n        voucher = factories.VoucherFactory()\n        baskets[0].vouchers.add(voucher)\n        baskets[1].merge(baskets[0])\n\n        self.assertEqual(1, baskets[1].vouchers.all().count())\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django.apps import AppConfig\nfrom django.utils.translation import gettext_lazy as _\n\n\nclass AddressConfig(AppConfig):\n    label = 'address'\n    name = 'oscar.apps.address'\n    verbose_name = _('Address')\n",
    "output": "import datetime\n\nfrom django.test import TestCase\n\nfrom oscar.apps.basket.reports import (\n    OpenBasketReportGenerator, SubmittedBasketReportGenerator)\n\n\nclass TestBasketReports(TestCase):\n\n    def test_open_report_doesnt_error(self):\n        data = {\n            'start_date': datetime.date(2012, 5, 1),\n            'end_date': datetime.date(2012, 5, 17),\n            'formatter': 'CSV'\n        }\n        generator = OpenBasketReportGenerator(**data)\n        generator.generate()\n\n    def test_submitted_report_doesnt_error(self):\n        data = {\n            'start_date': datetime.date(2012, 5, 1),\n            'end_date': datetime.date(2012, 5, 17),\n            'formatter': 'CSV'\n        }\n        generator = SubmittedBasketReportGenerator(**data)\n        generator.generate()\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django.apps import AppConfig\nfrom django.utils.translation import gettext_lazy as _\n\n\nclass AddressConfig(AppConfig):\n    label = 'address'\n    name = 'oscar.apps.address'\n    verbose_name = _('Address')\n",
    "output": "\nimport pytest\nfrom oscar.test.factories import (\n    BasketFactory, ConditionalOfferFactory, ProductFactory)\n\n\n@pytest.fixture\ndef filled_basket():\n    basket = BasketFactory()\n    product1 = ProductFactory()\n    product2 = ProductFactory()\n    basket.add_product(product1, quantity=10)\n    basket.add_product(product2, quantity=20)\n    return basket\n\n\n@pytest.mark.django_db\nclass TestLineOfferConsumer(object):\n\n    def test_consumed_no_offer(self, filled_basket):\n        for line in filled_basket.all_lines():\n            assert line.consumer.consumed() == 0\n\n    def test_consumed_with_offer(self, filled_basket):\n        offer1 = ConditionalOfferFactory(name='offer1')\n        offer2 = ConditionalOfferFactory(name='offer2')\n        offer1.exclusive = False\n        offer2.exclusive = False\n\n        for line in filled_basket.all_lines():\n            assert line.consumer.consumed(offer1) == 0\n            assert line.consumer.consumed(offer2) == 0\n\n        line1 = filled_basket.all_lines()[0]\n        line2 = filled_basket.all_lines()[1]\n\n        line1.consumer.consume(1, offer1)\n        assert line1.consumer.consumed() == 1\n        assert line1.consumer.consumed(offer1) == 1\n        assert line1.consumer.consumed(offer2) == 0\n\n        line1.consumer.consume(9, offer1)\n        assert line1.consumer.consumed() == line1.quantity\n        assert line1.consumer.consumed(offer1) == line1.quantity\n        assert line1.consumer.consumed(offer2) == 0\n\n        line1.consumer.consume(99, offer1)\n        assert line1.consumer.consumed(offer1) == line1.quantity\n        assert line1.consumer.consumed(offer2) == 0\n\n        line1.consumer.consume(1, offer2)\n        line2.consumer.consume(1, offer2)\n\n        assert line1.consumer.consumed(offer2) == 1\n        assert line2.consumer.consumed(offer2) == 1\n\n    def test_consume(self, filled_basket):\n        line = filled_basket.all_lines()[0]\n        line.consume(1)\n        assert line.quantity_with_discount == 1\n        line.consume(99)\n        assert line.quantity_with_discount == 10\n\n    def test_consumed_with_exclusive_offer(self, filled_basket):\n        offer1 = ConditionalOfferFactory(name='offer1')\n        offer2 = ConditionalOfferFactory(name='offer2')\n        offer3 = ConditionalOfferFactory(name='offer3')\n        offer1.exclusive = True\n        offer2.exclusive = False\n        offer3.exclusive = False\n\n        for line in filled_basket.all_lines():\n            assert line.consumer.consumed(offer1) == 0\n            assert line.consumer.consumed(offer2) == 0\n\n        line1 = filled_basket.all_lines()[0]\n        line2 = filled_basket.all_lines()[1]\n\n        line1.consumer.consume(1, offer1)\n        assert line1.is_available_for_offer_discount(offer2) is True\n\n        line1.consumer.consume(99, offer1)\n        assert line1.is_available_for_offer_discount(offer2) is False\n\n        line2.consumer.consume(1, offer2)\n        assert line2.is_available_for_offer_discount(offer1) is True\n\n        line2.consumer.consume(99, offer2)\n        assert line2.is_available_for_offer_discount(offer1) is False\n        assert line2.is_available_for_offer_discount(offer3) is True\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django.apps import AppConfig\nfrom django.utils.translation import gettext_lazy as _\n\n\nclass AddressConfig(AppConfig):\n    label = 'address'\n    name = 'oscar.apps.address'\n    verbose_name = _('Address')\n",
    "output": "from django.contrib.messages import get_messages\nfrom django.test import TestCase\nfrom django.urls import reverse\n\nfrom oscar.apps.basket import views\nfrom oscar.test import factories\nfrom tests.fixtures import RequestFactory\n\n\nclass TestVoucherAddView(TestCase):\n    def test_get(self):\n        request = RequestFactory().get('/')\n\n        view = views.VoucherAddView.as_view()\n        response = view(request)\n\n        self.assertEqual(response.status_code, 302)\n\n    def _get_voucher_message(self, request):\n        return '\\n'.join(str(m.message) for m in get_messages(request))\n\n    def test_post_valid(self):\n        voucher = factories.VoucherFactory()\n        self.assertTrue(voucher.is_active())\n\n        data = {\n            'code': voucher.code\n        }\n        request = RequestFactory().post('/', data=data)\n        request.basket.save()\n\n        view = views.VoucherAddView.as_view()\n        response = view(request)\n        self.assertEqual(response.status_code, 302)\n\n        voucher = voucher.__class__.objects.get(pk=voucher.pk)\n        self.assertEqual(voucher.num_basket_additions, 1, msg=self._get_voucher_message(request))\n\n    def test_post_valid_from_set(self):\n        voucherset = factories.VoucherSetFactory()\n        voucher = voucherset.vouchers.first()\n\n        self.assertTrue(voucher.is_active())\n\n        data = {\n            'code': voucher.code\n        }\n        request = RequestFactory().post('/', data=data)\n        request.basket.save()\n\n        view = views.VoucherAddView.as_view()\n        response = view(request)\n        self.assertEqual(response.status_code, 302)\n\n        voucher = voucher.__class__.objects.get(pk=voucher.pk)\n        self.assertEqual(voucher.num_basket_additions, 1, msg=self._get_voucher_message(request))\n\n        self.assertEqual(voucherset.num_basket_additions, 1)\n\n\nclass TestVoucherRemoveView(TestCase):\n    def test_post_valid(self):\n        voucher = factories.VoucherFactory(num_basket_additions=5)\n\n        data = {\n            'code': voucher.code\n        }\n        request = RequestFactory().post('/', data=data)\n        request.basket.save()\n        request.basket.vouchers.add(voucher)\n\n        view = views.VoucherRemoveView.as_view()\n        response = view(request, pk=voucher.pk)\n        self.assertEqual(response.status_code, 302)\n\n        voucher = voucher.__class__.objects.get(pk=voucher.pk)\n        self.assertEqual(voucher.num_basket_additions, 4)\n\n    def test_post_with_missing_voucher(self):\n        \"\"\" If the voucher is missing, verify the view queues a message and redirects. \"\"\"\n        pk = '12345'\n        view = views.VoucherRemoveView.as_view()\n        request = RequestFactory().post('/')\n        request.basket.save()\n        response = view(request, pk=pk)\n\n        self.assertEqual(response.status_code, 302)\n\n        actual = list(get_messages(request))[-1].message\n        expected = \"No voucher found with id '{}'\".format(pk)\n        self.assertEqual(actual, expected)\n\n\nclass TestBasketSummaryView(TestCase):\n    def setUp(self):\n        self.url = reverse('basket:summary')\n        self.country = factories.CountryFactory()\n        self.user = factories.UserFactory()\n\n    def test_default_shipping_address(self):\n        user_address = factories.UserAddressFactory(\n            country=self.country, user=self.user, is_default_for_shipping=True\n        )\n        request = RequestFactory().get(self.url, user=self.user)\n        view = views.BasketView(request=request)\n        self.assertEquals(view.get_default_shipping_address(), user_address)\n\n    def test_default_shipping_address_for_anonymous_user(self):\n        request = RequestFactory().get(self.url)\n        view = views.BasketView(request=request)\n        self.assertIsNone(view.get_default_shipping_address())\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django.apps import AppConfig\nfrom django.utils.translation import gettext_lazy as _\n\n\nclass AddressConfig(AppConfig):\n    label = 'address'\n    name = 'oscar.apps.address'\n    verbose_name = _('Address')\n",
    "output": ""
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django.apps import AppConfig\nfrom django.utils.translation import gettext_lazy as _\n\n\nclass AddressConfig(AppConfig):\n    label = 'address'\n    name = 'oscar.apps.address'\n    verbose_name = _('Address')\n",
    "output": "from decimal import Decimal as D\nfrom unittest import mock\n\nfrom django.test import TestCase\n\nfrom oscar.apps.checkout import calculators\nfrom oscar.core import prices\n\n\nclass TestOrderTotalCalculator(TestCase):\n\n    def setUp(self):\n        self.calculator = calculators.OrderTotalCalculator()\n\n    def test_returns_correct_totals_when_tax_is_not_known(self):\n        basket = mock.Mock()\n        basket.total_excl_tax = D('10.00')\n        basket.is_tax_known = False\n\n        shipping_charge = prices.Price(\n            currency=basket.currency, excl_tax=D('5.00'))\n\n        total = self.calculator.calculate(basket, shipping_charge)\n\n        self.assertIsInstance(total, prices.Price)\n        self.assertEqual(D('10.00') + D('5.00'), total.excl_tax)\n        self.assertFalse(total.is_tax_known)\n\n    def test_returns_correct_totals_when_tax_is_known(self):\n        basket = mock.Mock()\n        basket.total_excl_tax = D('10.00')\n        basket.total_incl_tax = D('12.00')\n        basket.is_tax_known = True\n\n        shipping_charge = prices.Price(\n            currency=basket.currency, excl_tax=D('5.00'),\n            tax=D('0.50'))\n\n        total = self.calculator.calculate(basket, shipping_charge)\n\n        self.assertIsInstance(total, prices.Price)\n        self.assertEqual(D('10.00') + D('5.00'), total.excl_tax)\n        self.assertTrue(total.is_tax_known)\n        self.assertEqual(D('12.00') + D('5.50'), total.incl_tax)\n        self.assertEqual(D('2.00') + D('0.50'), total.tax)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django.apps import AppConfig\nfrom django.utils.translation import gettext_lazy as _\n\n\nclass AddressConfig(AppConfig):\n    label = 'address'\n    name = 'oscar.apps.address'\n    verbose_name = _('Address')\n",
    "output": "# coding=utf-8\nfrom django.test import TestCase\nfrom django.test.utils import override_settings\n\nfrom oscar.apps.address.models import Country\nfrom oscar.apps.checkout.forms import ShippingAddressForm\nfrom oscar.test.factories import CountryFactory\n\n\nclass AnotherShippingAddressForm(ShippingAddressForm):\n    phone_number_fields = {\n        'phone_number': {\n            'required': False,\n            'help_text': '',\n            'max_length': 32,\n            'label': 'Phone number'\n        },\n        'another_phone_number': {\n            'required': False,\n            'help_text': 'Another phone number help text',\n            'max_length': 32,\n            'label': 'Another phone number'\n        },\n    }\n\n\nclass TestShippingAddressForm(TestCase):\n    minimal_data = {\n        'first_name': 'B\u00e4rry',\n        'last_name': 'Chuckle',\n        'line1': '1 King St',\n        'line4': 'Goth\u00e1m',\n        'postcode': 'N1 7RR'\n    }\n\n    def setUp(self):\n        CountryFactory(iso_3166_1_a2='GB', is_shipping_country=True)\n\n    def test_removes_country_field(self):\n        self.assertTrue('country' not in ShippingAddressForm().fields)\n\n    def test_keeps_country_field(self):\n        CountryFactory(iso_3166_1_a2='DE', is_shipping_country=True)\n        self.assertTrue('country' in ShippingAddressForm().fields)\n\n    @override_settings(OSCAR_REQUIRED_ADDRESS_FIELDS=('last_name', 'postcode'))\n    def test_required_fields_validated(self):\n        form = ShippingAddressForm()\n        self.assertTrue(form.fields['last_name'].required)\n        self.assertTrue(form.fields['postcode'].required)\n        self.assertFalse(form.fields['first_name'].required)\n        self.assertFalse(form.fields['line2'].required)\n        self.assertFalse(form.fields['line3'].required)\n        self.assertFalse(form.fields['line4'].required)\n\n    @override_settings(OSCAR_REQUIRED_ADDRESS_FIELDS=('phone_number',))\n    def test_required_phone_number_validated(self):\n        # This needs a separate test because of the logic in PhoneNumberMixin\n        form = ShippingAddressForm()\n        self.assertTrue(form.fields['phone_number'].required)\n\n    # Tests where the country field is hidden\n\n    def test_is_valid_without_phone_number(self):\n        self.assertTrue(ShippingAddressForm(self.minimal_data).is_valid())\n\n    def test_only_accepts_british_local_phone_number(self):\n        data = self.minimal_data.copy()\n        data['phone_number'] = '07 914721389'  # local UK number\n        self.assertTrue(ShippingAddressForm(data).is_valid())\n\n        data['phone_number'] = '0176 968 426 71'  # local German number\n        self.assertFalse(ShippingAddressForm(data).is_valid())\n\n    def test_only_accepts_british_local_phone_numbers(self):\n        data = self.minimal_data.copy()\n        # Both numbers are British local numbers\n        data['phone_number'] = '07 914721389'\n        data['another_phone_number'] = '0344493 0787'  # British Airways\n        self.assertTrue(AnotherShippingAddressForm(data).is_valid())\n\n        # Both numbers are local German numbers\n        data['phone_number'] = '0176 968 426 71'\n        data['another_phone_number'] = '07032 15 49225'  # IBM Germany\n        self.assertFalse(AnotherShippingAddressForm(data).is_valid())\n\n        # One number is British number, another is German number\n        data['phone_number'] = '07 914721389'\n        data['another_phone_number'] = '0176 968 426 71'\n        self.assertFalse(AnotherShippingAddressForm(data).is_valid())\n\n        # As previous case, but numbers are reversed\n        data['phone_number'] = '0176 968 426 71'\n        data['another_phone_number'] = '07 914721389'\n        self.assertFalse(AnotherShippingAddressForm(data).is_valid())\n\n    def test_is_valid_with_international_phone_number(self):\n        data = self.minimal_data.copy()\n        data['phone_number'] = '+49 176 968426 71'\n        form = ShippingAddressForm(data)\n        self.assertTrue(form.is_valid())\n\n    def test_is_valid_with_international_phone_numbers(self):\n        data = self.minimal_data.copy()\n        data['phone_number'] = '+49 176 968426 71'\n        data['another_phone_number'] = '+49-1805-426452'\n        form = AnotherShippingAddressForm(data)\n        self.assertTrue(form.is_valid())\n\n    # Tests where the country field exists\n\n    def test_needs_country_data(self):\n        CountryFactory(iso_3166_1_a2='DE', is_shipping_country=True)\n\n        self.assertFalse(ShippingAddressForm(self.minimal_data).is_valid())\n\n        data = self.minimal_data.copy()\n        data['country'] = Country.objects.get(iso_3166_1_a2='GB').pk\n        self.assertTrue(ShippingAddressForm(data).is_valid())\n\n    def test_only_accepts_local_phone_number_when_country_matches(self):\n        CountryFactory(iso_3166_1_a2='DE', is_shipping_country=True)\n\n        data = self.minimal_data.copy()\n        data['phone_number'] = '07 914721389'  # local UK number\n\n        data['country'] = Country.objects.get(iso_3166_1_a2='DE').pk\n        self.assertFalse(ShippingAddressForm(data).is_valid())\n\n        data['country'] = Country.objects.get(iso_3166_1_a2='GB').pk\n        self.assertTrue(ShippingAddressForm(data).is_valid())\n\n    def test_only_accepts_local_phone_numbers_when_country_matches(self):\n        CountryFactory(iso_3166_1_a2='DE', is_shipping_country=True)\n        data = self.minimal_data.copy()\n        # Local UK numbers\n        data['phone_number'] = '07 914721389'\n        data['another_phone_number'] = '0344493 0787'\n\n        data['country'] = Country.objects.get(iso_3166_1_a2='DE').pk\n        self.assertFalse(ShippingAddressForm(data).is_valid())\n\n        data['country'] = Country.objects.get(iso_3166_1_a2='GB').pk\n        self.assertTrue(ShippingAddressForm(data).is_valid())\n\n    @override_settings(OSCAR_REQUIRED_ADDRESS_FIELDS=('phone_number',))\n    def test_local_phone_number_invalid_without_country(self):\n        # Add another country, so we have two.\n        CountryFactory(iso_3166_1_a2='DE', is_shipping_country=True)\n        data = self.minimal_data.copy()\n        data['phone_number'] = '07 914721389'\n        # User hasn't selected a country. Because there are multiple country\n        # choices we should not accept the local number.\n        form = ShippingAddressForm(data)\n        self.assertFalse(form.is_valid())\n        self.assertIn('phone_number', form.errors)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django.apps import AppConfig\nfrom django.utils.translation import gettext_lazy as _\n\n\nclass AddressConfig(AppConfig):\n    label = 'address'\n    name = 'oscar.apps.address'\n    verbose_name = _('Address')\n",
    "output": "from decimal import Decimal as D\nfrom unittest import mock\n\nfrom django.http import HttpRequest\nfrom django.test import TestCase\nfrom django.test.utils import override_settings\n\nfrom oscar.apps.checkout.calculators import OrderTotalCalculator\nfrom oscar.apps.checkout.mixins import CheckoutSessionMixin, OrderPlacementMixin\nfrom oscar.apps.checkout.exceptions import FailedPreCondition\nfrom oscar.core.loading import get_model\nfrom oscar.test import factories\nfrom oscar.test.basket import add_product\nfrom oscar.test.utils import RequestFactory\nfrom oscar.apps.shipping.methods import FixedPrice, Free\n\n\nOrder = get_model('order', 'Order')\n\n\nclass TestOrderPlacementMixin(TestCase):\n\n    def test_returns_none_when_no_shipping_address_passed_to_creation_method(self):\n        address = OrderPlacementMixin().create_shipping_address(\n            user=mock.Mock(), shipping_address=None)\n        self.assertEqual(address, None)\n\n    def test_update_address_book(self):\n        basket = factories.create_basket(empty=True)\n        user = factories.UserFactory()\n        add_product(basket, D('12.00'))\n        shipping_method = FixedPrice(D('5.00'), D('5.00'))\n\n        billing_address = factories.BillingAddressFactory(line1='1 Boardwalk Place',\n                                                          line2='Trafalgar Way',\n                                                          line3='Tower Hamlets',\n                                                          line4='London')\n        shipping_address = factories.ShippingAddressFactory(line1='Knightsbridge',\n                                                            line2='159',\n                                                            line4='London')\n        shipping_charge = shipping_method.calculate(basket)\n        order_total = OrderTotalCalculator().calculate(basket, shipping_charge)\n\n        order_submission_data = {'user': user,\n                                 'order_number': '12345',\n                                 'basket': basket,\n                                 'shipping_address': shipping_address,\n                                 'shipping_method': shipping_method,\n                                 'shipping_charge': shipping_charge,\n                                 'billing_address': billing_address,\n                                 'order_total': order_total}\n        OrderPlacementMixin().place_order(**order_submission_data)\n\n        self.assertEqual(user.addresses.filter(hash=billing_address.generate_hash()).count(), 1)\n        self.assertEqual(user.addresses.filter(hash=shipping_address.generate_hash()).count(), 1)\n\n        user_billing_address = user.addresses.get(hash=billing_address.generate_hash())\n        user_shipping_address = user.addresses.get(hash=shipping_address.generate_hash())\n        self.assertEqual(user_billing_address.num_orders_as_billing_address, 1)\n        self.assertEqual(user_shipping_address.num_orders_as_shipping_address, 1)\n\n        order_submission_data['order_number'] = '12346'\n\n        OrderPlacementMixin().place_order(**order_submission_data)\n\n        user_billing_address = user.addresses.get(hash=billing_address.generate_hash())\n        user_shipping_address = user.addresses.get(hash=shipping_address.generate_hash())\n        self.assertEqual(user_billing_address.num_orders_as_billing_address, 2)\n        self.assertEqual(user_shipping_address.num_orders_as_shipping_address, 2)\n\n        order_submission_data.pop('billing_address', None)\n        order_submission_data['order_number'] = '123457'\n        OrderPlacementMixin().place_order(**order_submission_data)\n\n        user_billing_address = user.addresses.get(hash=billing_address.generate_hash())\n        user_shipping_address = user.addresses.get(hash=shipping_address.generate_hash())\n        self.assertEqual(user_billing_address.num_orders_as_billing_address, 2)\n        self.assertEqual(user_shipping_address.num_orders_as_shipping_address, 3)\n\n        shipping_address.line2 = '160'\n        order_submission_data['billing_address'] = billing_address\n        order_submission_data['order_number'] = '123458'\n        OrderPlacementMixin().place_order(**order_submission_data)\n\n        user_billing_address = user.addresses.get(hash=billing_address.generate_hash())\n        user_shipping_address = user.addresses.get(hash=shipping_address.generate_hash())\n        self.assertEqual(user_billing_address.num_orders_as_billing_address, 3)\n        self.assertEqual(user_shipping_address.num_orders_as_shipping_address, 1)\n\n    @override_settings(SITE_ID='')\n    def test_multi_site(self):\n        basket = factories.create_basket(empty=True)\n        site1 = factories.SiteFactory()\n        site2 = factories.SiteFactory()\n        request = HttpRequest()\n        request.META['SERVER_PORT'] = 80\n        request.META['SERVER_NAME'] = site1.domain\n        user = factories.UserFactory()\n        add_product(basket, D('12.00'))\n        shipping_method = Free()\n        shipping_charge = shipping_method.calculate(basket)\n        order_total = OrderTotalCalculator().calculate(basket, shipping_charge)\n\n        billing_address = factories.BillingAddressFactory()\n        shipping_address = factories.ShippingAddressFactory()\n        order_submission_data = {'user': user,\n                                 'order_number': '12345',\n                                 'basket': basket,\n                                 'shipping_method': shipping_method,\n                                 'shipping_charge': shipping_charge,\n                                 'order_total': order_total,\n                                 'billing_address': billing_address,\n                                 'shipping_address': shipping_address,\n                                 'request': request}\n        OrderPlacementMixin().place_order(**order_submission_data)\n        order1 = Order.objects.get(number='12345')\n        self.assertEqual(order1.site, site1)\n\n        add_product(basket, D('12.00'))\n        request.META['SERVER_NAME'] = site2.domain\n        order_submission_data['order_number'] = '12346'\n        order_submission_data['request'] = request\n        OrderPlacementMixin().place_order(**order_submission_data)\n        order2 = Order.objects.get(number='12346')\n        self.assertEqual(order2.site, site2)\n\n    def test_multiple_payment_events(self):\n        basket = factories.create_basket(empty=True)\n        user = factories.UserFactory()\n        add_product(basket, D('100.00'))\n        order_placement = OrderPlacementMixin()\n        order_placement.add_payment_event('Gift Card Payment', D('10'))\n        order_placement.add_payment_event('Credit Card Payment', D('90'))\n        shipping_method = Free()\n        shipping_charge = shipping_method.calculate(basket)\n        order_total = OrderTotalCalculator().calculate(basket, shipping_charge)\n\n        billing_address = factories.BillingAddressFactory()\n        shipping_address = factories.ShippingAddressFactory()\n        order_submission_data = {'user': user,\n                                 'order_number': '12345',\n                                 'basket': basket,\n                                 'shipping_method': shipping_method,\n                                 'shipping_charge': shipping_charge,\n                                 'order_total': order_total,\n                                 'billing_address': billing_address,\n                                 'shipping_address': shipping_address}\n        order_placement.place_order(**order_submission_data)\n        order1 = Order.objects.get(number='12345')\n        self.assertEqual(order1.payment_events.count(), 2)\n        event1 = order1.payment_events.all()[0]\n        event2 = order1.payment_events.all()[1]\n        self.assertEqual(event1.event_type.name, 'Credit Card Payment')\n        self.assertEqual(event1.amount, D('90'))\n        self.assertEqual(event1.lines.count(), 1)\n        self.assertEqual(event2.event_type.name, 'Gift Card Payment')\n        self.assertEqual(event2.amount, D('10'))\n        self.assertEqual(event2.lines.count(), 1)\n\n\nclass TestCheckoutSessionMixin(TestCase):\n\n    def setUp(self):\n        self.request = RequestFactory().get('/')\n        self.product = factories.create_product(num_in_stock=10)\n        self.stock_record = self.product.stockrecords.first()\n\n    def add_product_to_basket(self, product, quantity=1):\n        self.request.basket.add_product(product, quantity=quantity)\n        self.assertEqual(len(self.request.basket.all_lines()), 1)\n        self.assertEqual(self.request.basket.all_lines()[0].product, product)\n\n    def test_check_basket_is_valid_no_stock_available(self):\n        self.add_product_to_basket(self.product)\n        CheckoutSessionMixin().check_basket_is_valid(self.request)\n        self.stock_record.allocate(10)\n        self.stock_record.save()\n        with self.assertRaises(FailedPreCondition):\n            CheckoutSessionMixin().check_basket_is_valid(self.request)\n\n    def test_check_basket_is_valid_stock_exceeded(self):\n        self.add_product_to_basket(self.product)\n        CheckoutSessionMixin().check_basket_is_valid(self.request)\n        self.request.basket.add_product(self.product, quantity=11)\n        with self.assertRaises(FailedPreCondition):\n            CheckoutSessionMixin().check_basket_is_valid(self.request)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django.apps import AppConfig\nfrom django.utils.translation import gettext_lazy as _\n\n\nclass AddressConfig(AppConfig):\n    label = 'address'\n    name = 'oscar.apps.address'\n    verbose_name = _('Address')\n",
    "output": "from unittest import mock\n\nfrom django.test import TestCase\nfrom django.test.client import RequestFactory\nfrom django.contrib.sessions.middleware import SessionMiddleware\n\nfrom oscar.apps.checkout.utils import CheckoutSessionData\n\n\nclass TestCheckoutSession(TestCase):\n    \"\"\"\n    oscar.apps.checkout.utils.CheckoutSessionData\n    \"\"\"\n\n    def setUp(self):\n        request = RequestFactory().get('/')\n        SessionMiddleware().process_request(request)\n        self.session_data = CheckoutSessionData(request)\n\n    def test_allows_data_to_be_written_and_read_out(self):\n        self.session_data._set('namespace', 'key', 'value')\n        self.assertEqual('value', self.session_data._get('namespace', 'key'))\n\n    def test_allows_set_data_can_be_unset(self):\n        self.session_data._set('namespace', 'key', 'value')\n        self.session_data._unset('namespace', 'key')\n        self.assertIsNone(self.session_data._get('namespace', 'key'))\n\n    def test_stores_guest_email(self):\n        self.session_data.set_guest_email('a@a.com')\n        self.assertEqual('a@a.com', self.session_data.get_guest_email())\n\n    def test_allows_a_namespace_to_be_flushed(self):\n        self.session_data._set('ns', 'a', 1)\n        self.session_data._set('ns', 'b', 2)\n        self.session_data._flush_namespace('ns')\n        self.assertIsNone(self.session_data._get('ns', 'a'))\n        self.assertIsNone(self.session_data._get('ns', 'b'))\n\n    def test_allows_bill_to_user_address(self):\n        address = mock.Mock()\n        address.id = 1\n        self.session_data.bill_to_user_address(address)\n        self.assertEqual(1, self.session_data.billing_user_address_id())\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django.apps import AppConfig\nfrom django.utils.translation import gettext_lazy as _\n\n\nclass AddressConfig(AppConfig):\n    label = 'address'\n    name = 'oscar.apps.address'\n    verbose_name = _('Address')\n",
    "output": "from django.test import TestCase\nfrom django.test.utils import override_settings\nfrom django.urls import reverse\n\nfrom oscar.test.factories import OrderFactory\n\n\nclass ThankYouViewTestCase(TestCase):\n\n    @override_settings(OSCAR_ALLOW_ANON_CHECKOUT=True)\n    def test_analytics_event_triggered_only_on_first_view(self):\n        order = OrderFactory()\n        session = self.client.session\n        # Put the order ID in the session, mimicking a completed order,\n        # so that we can reach the thank you page.\n        session['checkout_order_id'] = order.pk\n        session.save()\n\n        r1 = self.client.get(reverse('checkout:thank-you'), follow=True)\n        self.assertTrue(r1.context['send_analytics_event'])\n\n        # Request the view a second time\n        r2 = self.client.get(reverse('checkout:thank-you'), follow=True)\n        self.assertFalse(r2.context['send_analytics_event'])\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django.apps import AppConfig\nfrom django.utils.translation import gettext_lazy as _\n\n\nclass AddressConfig(AppConfig):\n    label = 'address'\n    name = 'oscar.apps.address'\n    verbose_name = _('Address')\n",
    "output": ""
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django.apps import AppConfig\nfrom django.utils.translation import gettext_lazy as _\n\n\nclass AddressConfig(AppConfig):\n    label = 'address'\n    name = 'oscar.apps.address'\n    verbose_name = _('Address')\n",
    "output": "# coding=utf-8\n\"\"\"\nAutoSlugField taken from django-extensions at\n15d3eb305957cee4768dd86e44df1bdad341a10e\nUses Oscar's slugify function instead of Django's\n\nCopyright (c) 2007 Michael Trier\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\"\"\nfrom django.db import models\nfrom django.test import TestCase\nfrom django.test.utils import override_settings\n\nfrom oscar.core.loading import get_model\n\nSluggedTestModel = get_model('model_tests_app', 'sluggedtestmodel')\nChildSluggedTestModel = get_model('model_tests_app', 'childsluggedtestmodel')\nCustomSluggedTestModel = get_model('model_tests_app', 'CustomSluggedTestModel')\n\n\nclass AutoSlugFieldTest(TestCase):\n    def tearDown(self):\n        super().tearDown()\n\n        SluggedTestModel.objects.all().delete()\n\n    def test_auto_create_slug(self):\n        m = SluggedTestModel(title='foo')\n        m.save()\n        self.assertEqual(m.slug, 'foo')\n\n    def test_auto_create_next_slug(self):\n        m = SluggedTestModel(title='foo')\n        m.save()\n\n        m = SluggedTestModel(title='foo')\n        m.save()\n        self.assertEqual(m.slug, 'foo-2')\n\n    def test_auto_create_slug_with_number(self):\n        m = SluggedTestModel(title='foo 2012')\n        m.save()\n        self.assertEqual(m.slug, 'foo-2012')\n\n    def test_auto_update_slug_with_number(self):\n        m = SluggedTestModel(title='foo 2012')\n        m.save()\n        m.save()\n        self.assertEqual(m.slug, 'foo-2012')\n\n    def test_auto_create_unicode_slug(self):\n        with override_settings(OSCAR_SLUG_ALLOW_UNICODE=True):\n            m = SluggedTestModel(title='Ch\u00e2teau Margaux 1960')\n            m.save()\n            self.assertEqual(m.slug, 'ch\u00e2teau-margaux-1960')\n\n    def test_auto_create_next_unicode_slug(self):\n        with override_settings(OSCAR_SLUG_ALLOW_UNICODE=True):\n            m1 = SluggedTestModel(title='Ch\u00e2teau Margaux 1960')\n            m1.save()\n\n            m2 = SluggedTestModel(title='Ch\u00e2teau Margaux 1960')\n            m2.save()\n\n            self.assertEqual(m2.slug, 'ch\u00e2teau-margaux-1960-2')\n\n    def test_switch_to_unicode_slug(self):\n        m = SluggedTestModel(title='Ch\u00e2teau Margaux 1960')\n        m.save()\n        self.assertEqual(m.slug, 'chateau-margaux-1960')\n        with override_settings(OSCAR_SLUG_ALLOW_UNICODE=True):\n            m = SluggedTestModel(title='Ch\u00e2teau Margaux 1960')\n            m.save()\n            self.assertEqual(m.slug, 'ch\u00e2teau-margaux-1960')\n\n    def test_autoslugfield_allow_unicode_kwargs_precedence(self):\n        from oscar.models.fields import AutoSlugField\n        with override_settings(OSCAR_SLUG_ALLOW_UNICODE=True):\n            autoslug_field = AutoSlugField(populate_from='title', allow_unicode=False)\n            self.assertFalse(autoslug_field.allow_unicode)\n            autoslug_field = AutoSlugField(populate_from='title')\n            self.assertTrue(autoslug_field.allow_unicode)\n\n    def test_update_slug(self):\n        m = SluggedTestModel(title='foo')\n        m.save()\n        self.assertEqual(m.slug, 'foo')\n\n        # update m instance without using `save'\n        SluggedTestModel.objects.filter(pk=m.pk).update(slug='foo-2012')\n        # update m instance with new data from the db\n        m = SluggedTestModel.objects.get(pk=m.pk)\n        self.assertEqual(m.slug, 'foo-2012')\n\n        m.save()\n        self.assertEqual(m.title, 'foo')\n        self.assertEqual(m.slug, 'foo-2012')\n\n        # Check slug is not overwrite\n        m.title = 'bar'\n        m.save()\n        self.assertEqual(m.title, 'bar')\n        self.assertEqual(m.slug, 'foo-2012')\n\n    def test_simple_slug_source(self):\n        m = SluggedTestModel(title='-foo')\n        m.save()\n        self.assertEqual(m.slug, 'foo')\n\n        n = SluggedTestModel(title='-foo')\n        n.save()\n        self.assertEqual(n.slug, 'foo-2')\n\n        n.save()\n        self.assertEqual(n.slug, 'foo-2')\n\n    def test_empty_slug_source(self):\n        # regression test\n\n        m = SluggedTestModel(title='')\n        m.save()\n        self.assertEqual(m.slug, '-2')\n\n        n = SluggedTestModel(title='')\n        n.save()\n        self.assertEqual(n.slug, '-3')\n\n        n.save()\n        self.assertEqual(n.slug, '-3')\n\n    def test_inheritance_creates_next_slug(self):\n        m = SluggedTestModel(title='foo')\n        m.save()\n\n        n = ChildSluggedTestModel(title='foo')\n        n.save()\n        self.assertEqual(n.slug, 'foo-2')\n\n        o = SluggedTestModel(title='foo')\n        o.save()\n        self.assertEqual(o.slug, 'foo-3')\n\n    def test_separator_and_uppercase_options(self):\n        m = CustomSluggedTestModel(title=\"Password reset\")\n        m.save()\n        self.assertEqual(m.slug, 'PASSWORD_RESET')\n\n        m = CustomSluggedTestModel(title=\"Password reset\")\n        m.save()\n        self.assertEqual(m.slug, 'PASSWORD_RESET_2')\n\n    def test_migration(self):\n        \"\"\"\n        Tests making migrations with Django 1.7+'s migration framework\n        \"\"\"\n\n        import oscar\n        from django.db import migrations\n        from django.db.migrations.writer import MigrationWriter\n        from oscar.models.fields import AutoSlugField\n        fields = {\n            'autoslugfield': AutoSlugField(populate_from='otherfield'),\n        }\n\n        migration = type(str(\"Migration\"), (migrations.Migration,), {\n            \"operations\": [\n                migrations.CreateModel(\"MyModel\", tuple(fields.items()),\n                                       {'populate_from': 'otherfield'},\n                                       (models.Model,)),\n            ],\n        })\n        writer = MigrationWriter(migration)\n        output = writer.as_string()\n\n        if isinstance(output, str):\n            output = output.encode('utf-8')\n\n        # We don't test the output formatting - that's too fragile.\n        # Just make sure it runs for now, and that things look alright.\n        context = {\n            'migrations': migrations,\n            'oscar': oscar,\n        }\n        result = self.safe_exec(output, context=context)\n        self.assertIn(\"Migration\", result)\n\n    def safe_exec(self, string, value=None, context=None):\n        loc = {}\n        g = globals()\n        g.update(context)\n        try:\n            exec(string, g, loc)\n        except Exception as e:\n            if value:\n                self.fail(\"Could not exec %r (from value %r): %s\" % (\n                    string.strip(), value, e))\n            else:\n                self.fail(\"Could not exec %r: %s\" % (string.strip(), e))\n        return loc\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django.apps import AppConfig\nfrom django.utils.translation import gettext_lazy as _\n\n\nclass AddressConfig(AppConfig):\n    label = 'address'\n    name = 'oscar.apps.address'\n    verbose_name = _('Address')\n",
    "output": "# -*- coding: utf-8 -*-\nimport codecs\nimport datetime\nimport io\nimport os\nfrom tempfile import NamedTemporaryFile\nfrom django.utils.encoding import smart_text\n\nfrom django.test import TestCase, override_settings\n\nfrom oscar.core.compat import UnicodeCSVWriter, existing_user_fields\n\n\nclass unicodeobj(object):\n\n    def __init__(self, s):\n        self.s = s\n\n    def __str__(self):\n        return self.s\n\n\nclass TestExistingUserFields(TestCase):\n\n    def test_order(self):\n        fields = existing_user_fields(['email', 'first_name', 'last_name'])\n        self.assertEqual(fields, ['email', 'first_name', 'last_name'])\n\n\nclass TestUnicodeCSVWriter(TestCase):\n\n    def test_can_write_different_values(self):\n        writer = UnicodeCSVWriter(open_file=io.StringIO())\n        s = '\u00fcn\u012fcod\u0113'\n        rows = [[s, unicodeobj(s), 123, datetime.date.today()], ]\n        writer.writerows(rows)\n        self.assertRaises(TypeError, writer.writerows, [object()])\n\n    def test_context_manager(self):\n        tmp_file = NamedTemporaryFile()\n        with UnicodeCSVWriter(filename=tmp_file.name) as writer:\n            s = '\u00fcn\u012fcod\u0113'\n            rows = [[s, unicodeobj(s), 123, datetime.date.today()], ]\n            writer.writerows(rows)\n\n    def test_csv_write_output(self):\n        tmp_file = NamedTemporaryFile(delete=False)\n        with UnicodeCSVWriter(filename=tmp_file.name) as writer:\n            s = '\u00fcn\u012fcod\u0113'\n            row = [s, 123, 'foo-bar']\n            writer.writerows([row])\n\n        with open(tmp_file.name, 'r') as read_file:\n            content = smart_text(read_file.read(), encoding='utf-8').strip()\n            self.assertEqual(content, '\u00fcn\u012fcod\u0113,123,foo-bar')\n\n        # Clean up\n        os.unlink(tmp_file.name)\n\n    @override_settings(OSCAR_CSV_INCLUDE_BOM=True)\n    def test_bom_write_with_open_file(self):\n        csv_file = NamedTemporaryFile(delete=False)\n        with open(csv_file.name, 'w') as open_file:\n            writer = UnicodeCSVWriter(open_file=open_file, encoding=\"utf-8\")\n            s = '\u00fcn\u012fcod\u0113'\n            row = [s, 123, datetime.date.today()]\n            writer.writerows([row])\n\n        with open(csv_file.name, 'rb') as read_file:\n            self.assertTrue(read_file.read().startswith(codecs.BOM_UTF8))\n\n        # Clean up\n        os.unlink(csv_file.name)\n\n    @override_settings(OSCAR_CSV_INCLUDE_BOM=True)\n    def test_bom_write_with_filename(self):\n        csv_file = NamedTemporaryFile(delete=False)\n        with UnicodeCSVWriter(filename=csv_file.name, encoding=\"utf-8\") as writer:\n            s = '\u00fcn\u012fcod\u0113'\n            row = [s, 123, datetime.date.today()]\n            writer.writerows([row])\n\n        with open(csv_file.name, 'rb') as read_file:\n            self.assertTrue(read_file.read().startswith(codecs.BOM_UTF8))\n\n        # Clean up\n        os.unlink(csv_file.name)\n\n    @override_settings(OSCAR_CSV_INCLUDE_BOM=True)\n    def test_bom_not_written_for_other_encodings(self):\n        csv_file = NamedTemporaryFile(delete=False)\n        with UnicodeCSVWriter(filename=csv_file.name, encoding=\"ascii\") as writer:\n            s = 'boring ascii'\n            row = [s, 123, datetime.date.today()]\n            writer.writerows([row])\n\n        with open(csv_file.name, 'rb') as read_file:\n            self.assertFalse(read_file.read().startswith(codecs.BOM_UTF8))\n\n        # Clean up\n        os.unlink(csv_file.name)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django.apps import AppConfig\nfrom django.utils.translation import gettext_lazy as _\n\n\nclass AddressConfig(AppConfig):\n    label = 'address'\n    name = 'oscar.apps.address'\n    verbose_name = _('Address')\n",
    "output": "import pytest\nfrom django.conf import settings\nfrom django.test import TestCase\n\nfrom oscar.core import customisation\n\nVALID_FOLDER_PATH = 'tests/_site/apps'\n\n\nclass TestUtilities(TestCase):\n\n    def test_subfolder_extraction(self):\n        folders = list(customisation.subfolders('/var/www/eggs'))\n        self.assertEqual(folders, ['/var', '/var/www', '/var/www/eggs'])\n\n\ndef test_raises_exception_for_nonexistant_app_label():\n    with pytest.raises(ValueError):\n        customisation.fork_app('sillytown', 'somefolder')\n\n\ndef test_raises_exception_if_app_has_already_been_forked():\n    # We piggyback on another test which means a custom app is already in\n    # the settings we use for the test suite. We just check that's still\n    # the case here.\n    assert 'tests._site.apps.partner' in settings.INSTALLED_APPS\n    with pytest.raises(ValueError):\n        customisation.fork_app('partner', VALID_FOLDER_PATH)\n\n\ndef test_creates_new_folder(tmpdir):\n    path = tmpdir.mkdir('fork')\n    customisation.fork_app('order', str(path))\n    path.join('order').ensure_dir()\n\n\ndef test_creates_init_file(tmpdir):\n    path = tmpdir.mkdir('fork')\n    customisation.fork_app('order', str(path))\n\n    path.join('order').join('__init__.py').ensure()\n\n\ndef test_handles_dashboard_app(tmpdir):\n    # Dashboard apps are fiddly as they aren't identified by a single app\n    # label.\n    path = tmpdir.mkdir('fork')\n    customisation.fork_app('dashboard.catalogue', str(path))\n    # Check __init__.py created (and supporting folders)\n\n    path.join('dashboard').join('catalogue').join('__init__.py').ensure()\n\n\ndef test_creates_models_and_admin_file(tmpdir):\n    path = tmpdir.mkdir('fork')\n    customisation.fork_app('order', str(path))\n    for module, expected_string in [\n        ('models', 'from oscar.apps.order.models import *'),\n        ('admin', 'from oscar.apps.order.admin import *'),\n        ('config', 'OrderConfig')\n    ]:\n        filepath = path.join('order').join('%s.py' % module)\n        filepath.ensure()\n        contents = filepath.read()\n        assert expected_string in contents\n\n\ndef test_copies_in_migrations_when_needed(tmpdir):\n    path = tmpdir.mkdir('fork')\n    for app, has_models in [('order', True), ('search', False)]:\n        customisation.fork_app(app, str(path))\n\n        native_migration_path = path.join(app).join('migrations')\n        assert has_models == native_migration_path.check()\n\n\ndef test_dashboard_app_config(tmpdir, monkeypatch):\n    path = tmpdir.mkdir('fork')\n    customisation.fork_app('dashboard', str(path))\n\n    path.join('__init__.py').write('')\n    monkeypatch.syspath_prepend(str(tmpdir))\n\n    config_module = __import__(\n        '%s.dashboard.config' % path.basename, fromlist=['DashboardConfig']\n    )\n\n    assert hasattr(config_module, 'DashboardConfig')\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django.apps import AppConfig\nfrom django.utils.translation import gettext_lazy as _\n\n\nclass AddressConfig(AppConfig):\n    label = 'address'\n    name = 'oscar.apps.address'\n    verbose_name = _('Address')\n",
    "output": "import warnings\n\nfrom django.contrib.auth.models import AnonymousUser, Permission\nfrom django.test import TestCase\n\nfrom oscar.core.decorators import deprecated\nfrom oscar.test import factories\nfrom oscar.views.decorators import check_permissions\n\n\nclass TestPermissionsDecorator(TestCase):\n\n    def test_empty_permissions_passes(self):\n        user = factories.UserFactory.build()\n        self.assertTrue(check_permissions(user, []))\n\n    def test_properties_are_checked(self):\n        staff_user = factories.UserFactory.build(is_staff=True)\n        non_staff_user = factories.UserFactory.build(is_staff=False)\n        self.assertTrue(check_permissions(staff_user, ['is_staff']))\n        self.assertFalse(check_permissions(non_staff_user, ['is_staff']))\n\n    def test_methods_are_checked(self):\n        anonymous_user = AnonymousUser()\n        known_user = factories.UserFactory.build()\n        self.assertTrue(check_permissions(anonymous_user, ['is_anonymous']))\n        self.assertFalse(check_permissions(known_user, ['is_anonymous']))\n\n    def test_permissions_are_checked(self):\n        user_with_perm = factories.UserFactory()\n        user_without_perm = factories.UserFactory()\n        perm = Permission.objects.get(\n            content_type__app_label='address', codename='add_country')\n        user_with_perm.user_permissions.add(perm)\n        self.assertTrue(\n            check_permissions(user_with_perm, ['address.add_country']))\n        self.assertFalse(\n            check_permissions(user_without_perm, ['address.add_country']))\n\n\nclass TestDeprecatedDecorator(TestCase):\n\n    def test_decorate_function(self):\n\n        @deprecated\n        def func():\n            return True\n\n        with warnings.catch_warnings(record=True) as caught:\n            warnings.simplefilter(\"always\")\n            self.assertTrue(func())\n            assert len(caught) == 1\n            assert issubclass(caught[0].category, DeprecationWarning)\n\n    def test_decorate_class(self):\n\n        class Cls(object):\n            val = False\n\n            def __init__(self):\n                self.val = True\n\n        Deprecated = deprecated(Cls)  # noqa\n\n        with warnings.catch_warnings(record=True) as caught:\n            warnings.simplefilter(\"always\")\n            obj = Deprecated()\n            self.assertTrue(obj.val)\n            assert len(caught) == 1\n            assert issubclass(caught[0].category, DeprecationWarning)\n\n    def test_subclass_decorated(self):\n\n        class Cls(object):\n            val = False\n\n            def __init__(self):\n                self.val = True\n\n        Deprecated = deprecated(Cls)  # noqa\n\n        class SubCls(Deprecated):\n            pass\n\n        with warnings.catch_warnings(record=True) as caught:\n            warnings.simplefilter(\"always\")\n            obj = SubCls()\n            self.assertTrue(obj.val)\n            assert len(caught) == 1\n            assert issubclass(caught[0].category, DeprecationWarning)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django.apps import AppConfig\nfrom django.utils.translation import gettext_lazy as _\n\n\nclass AddressConfig(AppConfig):\n    label = 'address'\n    name = 'oscar.apps.address'\n    verbose_name = _('Address')\n",
    "output": "from os.path import dirname\nimport sys\n\nfrom django.test import override_settings, TestCase\nfrom django.conf import settings\n\nimport oscar\nfrom oscar.core.loading import (\n    get_model, AppNotFoundError, get_classes, get_class, get_class_loader,\n    ClassNotFoundError)\nfrom tests import temporary_python_path\nfrom tests._site.loader import DummyClass\n\n\nclass TestClassLoading(TestCase):\n    \"\"\"\n    Oscar's class loading utilities\n    \"\"\"\n\n    def test_load_oscar_classes_correctly(self):\n        Product, Category = get_classes('catalogue.models', ('Product', 'Category'))\n        self.assertEqual('oscar.apps.catalogue.models', Product.__module__)\n        self.assertEqual('oscar.apps.catalogue.models', Category.__module__)\n\n    def test_load_oscar_class_correctly(self):\n        Product = get_class('catalogue.models', 'Product')\n        self.assertEqual('oscar.apps.catalogue.models', Product.__module__)\n\n    def test_load_oscar_class_from_dashboard_subapp(self):\n        ReportForm = get_class('dashboard.reports.forms', 'ReportForm')\n        self.assertEqual('oscar.apps.dashboard.reports.forms', ReportForm.__module__)\n\n    def test_raise_exception_when_bad_appname_used(self):\n        with self.assertRaises(AppNotFoundError):\n            get_classes('fridge.models', ('Product', 'Category'))\n\n    def test_raise_exception_when_bad_classname_used(self):\n        with self.assertRaises(ClassNotFoundError):\n            get_class('catalogue.models', 'Monkey')\n\n    def test_raise_importerror_if_app_raises_importerror(self):\n        \"\"\"\n        This tests that Oscar doesn't fall back to using the Oscar catalogue\n        app if the overriding app throws an ImportError.\n        \"\"\"\n        apps = list(settings.INSTALLED_APPS)\n        apps[apps.index('oscar.apps.catalogue')] = 'tests._site.import_error_app.catalogue'\n        with override_settings(INSTALLED_APPS=apps):\n            with self.assertRaises(ImportError):\n                get_class('catalogue.app', 'CatalogueApplication')\n\n\nclass ClassLoadingWithLocalOverrideTests(TestCase):\n\n    def setUp(self):\n        self.installed_apps = list(settings.INSTALLED_APPS)\n        self.installed_apps[self.installed_apps.index('oscar.apps.shipping')] = 'tests._site.shipping'\n\n    def test_loading_class_defined_in_local_module(self):\n        with override_settings(INSTALLED_APPS=self.installed_apps):\n            (Free,) = get_classes('shipping.methods', ('Free',))\n            self.assertEqual('tests._site.shipping.methods', Free.__module__)\n\n    def test_loading_class_which_is_not_defined_in_local_module(self):\n        with override_settings(INSTALLED_APPS=self.installed_apps):\n            (FixedPrice,) = get_classes('shipping.methods', ('FixedPrice',))\n            self.assertEqual('oscar.apps.shipping.methods', FixedPrice.__module__)\n\n    def test_loading_class_from_module_not_defined_in_local_app(self):\n        with override_settings(INSTALLED_APPS=self.installed_apps):\n            (Repository,) = get_classes('shipping.repository', ('Repository',))\n            self.assertEqual('oscar.apps.shipping.repository', Repository.__module__)\n\n    def test_loading_classes_defined_in_both_local_and_oscar_modules(self):\n        with override_settings(INSTALLED_APPS=self.installed_apps):\n            (Free, FixedPrice) = get_classes('shipping.methods', ('Free', 'FixedPrice'))\n            self.assertEqual('tests._site.shipping.methods', Free.__module__)\n            self.assertEqual('oscar.apps.shipping.methods', FixedPrice.__module__)\n\n    def test_loading_classes_with_root_app(self):\n        import tests._site.shipping\n        path = dirname(dirname(tests._site.shipping.__file__))\n        with temporary_python_path([path]):\n            self.installed_apps[\n                self.installed_apps.index('tests._site.shipping')] = 'shipping'\n            with override_settings(INSTALLED_APPS=self.installed_apps):\n                (Free,) = get_classes('shipping.methods', ('Free',))\n                self.assertEqual('shipping.methods', Free.__module__)\n\n    def test_overriding_view_is_possible_without_overriding_app(self):\n        from oscar.apps.customer.app import application, CustomerApplication\n        # If test fails, it's helpful to know if it's caused by order of\n        # execution\n        self.assertEqual(CustomerApplication().summary_view.__module__,\n                         'tests._site.apps.customer.views')\n        self.assertEqual(application.summary_view.__module__,\n                         'tests._site.apps.customer.views')\n\n\nclass ClassLoadingWithLocalOverrideWithMultipleSegmentsTests(TestCase):\n\n    def setUp(self):\n        self.installed_apps = list(settings.INSTALLED_APPS)\n        self.installed_apps[self.installed_apps.index('oscar.apps.shipping')] = 'tests._site.apps.shipping'\n\n    def test_loading_class_defined_in_local_module(self):\n        with override_settings(INSTALLED_APPS=self.installed_apps):\n            (Free,) = get_classes('shipping.methods', ('Free',))\n            self.assertEqual('tests._site.apps.shipping.methods', Free.__module__)\n\n\nclass TestGetCoreAppsFunction(TestCase):\n    \"\"\"\n    oscar.get_core_apps function\n    \"\"\"\n\n    def test_returns_core_apps_when_no_overrides_specified(self):\n        apps = oscar.get_core_apps()\n        self.assertEqual(oscar.OSCAR_CORE_APPS, apps)\n\n    def test_uses_non_dashboard_override_when_specified(self):\n        apps = oscar.get_core_apps(overrides=['apps.shipping'])\n        self.assertTrue('apps.shipping' in apps)\n        self.assertTrue('oscar.apps.shipping' not in apps)\n\n    def test_uses_dashboard_override_when_specified(self):\n        apps = oscar.get_core_apps(overrides=['apps.dashboard.catalogue'])\n        self.assertTrue('apps.dashboard.catalogue' in apps)\n        self.assertTrue('oscar.apps.dashboard.catalogue' not in apps)\n        self.assertTrue('oscar.apps.catalogue' in apps)\n\n\nclass TestOverridingCoreApps(TestCase):\n\n    def test_means_the_overriding_model_is_registered_first(self):\n        klass = get_model('partner', 'StockRecord')\n        self.assertEqual(\n            'tests._site.apps.partner.models', klass.__module__)\n\n\nclass TestAppLabelsForModels(TestCase):\n\n    def test_all_oscar_models_have_app_labels(self):\n        from django.apps import apps\n        models = apps.get_models()\n        missing = []\n        for model in models:\n            # Ignore non-Oscar models\n            if 'oscar' not in repr(model):\n                continue\n            # Don't know how to get the actual model's Meta class. But if\n            # the parent doesn't have a Meta class, it's doesn't have an\n            # base in Oscar anyway and is not intended to be overridden\n            abstract_model = model.__base__\n            meta_class = getattr(abstract_model, 'Meta', None)\n            if meta_class is None:\n                continue\n\n            if not hasattr(meta_class, 'app_label'):\n                missing.append(model)\n        if missing:\n            self.fail(\"Those models don't have an app_label set: %s\" % missing)\n\n\nclass TestDynamicLoadingOn3rdPartyApps(TestCase):\n\n    core_app_prefix = 'thirdparty_package.apps'\n\n    def setUp(self):\n        self.installed_apps = list(settings.INSTALLED_APPS)\n        sys.path.append('./tests/_site/')\n\n    def tearDown(self):\n        sys.path.remove('./tests/_site/')\n\n    def test_load_core_3rd_party_class_correctly(self):\n        self.installed_apps.append('thirdparty_package.apps.myapp')\n        with override_settings(INSTALLED_APPS=self.installed_apps):\n            Cow, Goat = get_classes('myapp.models', ('Cow', 'Goat'), self.core_app_prefix)\n            self.assertEqual('thirdparty_package.apps.myapp.models', Cow.__module__)\n            self.assertEqual('thirdparty_package.apps.myapp.models', Goat.__module__)\n\n    def test_load_overriden_3rd_party_class_correctly(self):\n        self.installed_apps.append('apps.myapp')\n        with override_settings(INSTALLED_APPS=self.installed_apps):\n            Cow, Goat = get_classes('myapp.models', ('Cow', 'Goat'), self.core_app_prefix)\n            self.assertEqual('thirdparty_package.apps.myapp.models', Cow.__module__)\n            self.assertEqual('apps.myapp.models', Goat.__module__)\n\n\nclass OverriddenClassLoadingTestCase(TestCase):\n\n    def test_non_override_class_loader(self):\n        from oscar.apps.catalogue.views import ProductDetailView\n        View = get_class('catalogue.views', 'ProductDetailView')\n        self.assertEqual(View, ProductDetailView)\n\n    @override_settings(OSCAR_DYNAMIC_CLASS_LOADER='tests._site.loader.custom_class_loader')\n    def test_override_class_loader(self):\n        # Clear lru cache for the class loader\n        get_class_loader.cache_clear()\n\n        View = get_class('catalogue.views', 'ProductDetailView')\n        self.assertEqual(View, DummyClass)\n\n        # Clear lru cache for the class loader again\n        get_class_loader.cache_clear()\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django.apps import AppConfig\nfrom django.utils.translation import gettext_lazy as _\n\n\nclass AddressConfig(AppConfig):\n    label = 'address'\n    name = 'oscar.apps.address'\n    verbose_name = _('Address')\n",
    "output": "from django import forms\nfrom django.test import TestCase, override_settings\n\nfrom oscar.apps.address.forms import AbstractAddressForm\nfrom oscar.apps.address.models import UserAddress\nfrom oscar.apps.order.models import ShippingAddress\nfrom oscar.forms.mixins import PhoneNumberMixin\nfrom oscar.test.factories import CountryFactory\n\n\nclass PhoneNumberMixinTestCase(TestCase):\n\n    def test_mixin_adds_phone_number_field(self):\n\n        class TestForm(PhoneNumberMixin, forms.Form):\n            pass\n\n        form = TestForm()\n        self.assertIn('phone_number', form.fields)\n\n    def test_mixin_adds_all_phone_number_fields(self):\n\n        class TestForm(PhoneNumberMixin, forms.Form):\n            phone_number_fields = {\n                'phone_number': {\n                    'required': False,\n                    'help_text': '',\n                    'max_length': 32,\n                    'label': 'Phone number'\n                },\n                'another_phone_number': {\n                    'required': False,\n                    'help_text': 'Another phone number help text',\n                    'max_length': 32,\n                    'label': 'Another phone number'\n                },\n                'one_more_phone_number': {\n                    'required': False,\n                    'help_text': '',\n                    'max_length': 32,\n                    'label': 'One more phone number'\n                },\n            }\n\n        form = TestForm()\n        self.assertIn('phone_number', form.fields)\n        self.assertIn('another_phone_number', form.fields)\n        self.assertIn('one_more_phone_number', form.fields)\n\n        field = form.fields['another_phone_number']\n        self.assertEqual(field.help_text, 'Another phone number help text')\n\n    def test_mixin_retains_existing_field_properties(self):\n\n        class TestForm(PhoneNumberMixin, forms.ModelForm):\n\n            class Meta:\n                model = UserAddress\n                fields = ['country', 'phone_number']\n                # Override default label and help text\n                labels = {'phone_number': 'Special number'}\n                help_texts = {'phone_number': 'Special help text'}\n\n        form = TestForm()\n        field = form.fields['phone_number']\n        self.assertEqual(field.label, 'Special number')\n        self.assertEqual(field.help_text, 'Special help text')\n\n    @override_settings(OSCAR_REQUIRED_ADDRESS_FIELDS=('phone_number',))\n    def test_required_empty_field_raises_validation_error(self):\n\n        class TestForm(PhoneNumberMixin, AbstractAddressForm):\n            phone_number_fields = {\n                'phone_number': {\n                    'required': True,\n                    'help_text': '',\n                    'max_length': 32,\n                    'label': 'Phone number'\n                }\n            }\n\n            class Meta:\n                model = ShippingAddress\n                fields = ['country', 'phone_number', 'postcode']\n\n        CountryFactory(iso_3166_1_a2='GB', is_shipping_country=True)\n        form = TestForm(data={'phone_number': '', 'country': 'GB', 'postcode': 'WW1 2BB'})\n        self.assertFalse(form.is_valid())\n        self.assertEqual(form.errors['phone_number'], ['This field is required.'])\n\n    @override_settings(OSCAR_REQUIRED_ADDRESS_FIELDS=[])\n    def test_optional_empty_field_validates(self):\n\n        class TestForm(PhoneNumberMixin, AbstractAddressForm):\n            phone_number_fields = {\n                'phone_number': {\n                    'required': False,\n                    'help_text': '',\n                    'max_length': 32,\n                    'label': 'Phone number'\n                }\n            }\n\n            class Meta:\n                model = ShippingAddress\n                fields = ['country', 'phone_number', 'postcode']\n\n        CountryFactory(iso_3166_1_a2='GB', is_shipping_country=True)\n        form = TestForm(data={'phone_number': '', 'country': 'GB', 'postcode': 'WW1 2BB'})\n        self.assertTrue(form.is_valid())\n\n    @override_settings(OSCAR_REQUIRED_ADDRESS_FIELDS=[])\n    def test_invalid_number_fails_validation(self):\n\n        class TestForm(PhoneNumberMixin, AbstractAddressForm):\n            phone_number_fields = {\n                'phone_number': {\n                    'required': False,\n                    'help_text': '',\n                    'max_length': 32,\n                    'label': 'Phone number'\n                }\n            }\n\n            class Meta:\n                model = ShippingAddress\n                fields = ['country', 'phone_number', 'postcode']\n\n        CountryFactory(iso_3166_1_a2='GB', is_shipping_country=True)\n        form = TestForm(data={'phone_number': '123456', 'country': 'GB', 'postcode': 'WW1 2BB'})\n        self.assertFalse(form.is_valid())\n        self.assertEqual(form.errors['phone_number'], ['This is not a valid local phone format for UNITED KINGDOM.'])\n\n    @override_settings(OSCAR_REQUIRED_ADDRESS_FIELDS=[])\n    def test_valid_number_passes_validation(self):\n\n        class TestForm(PhoneNumberMixin, AbstractAddressForm):\n            phone_number_fields = {\n                'phone_number': {\n                    'required': False,\n                    'help_text': '',\n                    'max_length': 32,\n                    'label': 'Phone number'\n                }\n            }\n\n            class Meta:\n                model = ShippingAddress\n                fields = ['country', 'phone_number', 'postcode']\n\n        CountryFactory(iso_3166_1_a2='GB', is_shipping_country=True)\n        form = TestForm(data={'phone_number': '02089001234', 'country': 'GB', 'postcode': 'WW1 2BB'})\n        self.assertTrue(form.is_valid())\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django.apps import AppConfig\nfrom django.utils.translation import gettext_lazy as _\n\n\nclass AddressConfig(AppConfig):\n    label = 'address'\n    name = 'oscar.apps.address'\n    verbose_name = _('Address')\n",
    "output": "from django.core.exceptions import ImproperlyConfigured\nfrom django.test import TestCase\n\nfrom oscar.models.fields import NullCharField\n\n\nclass NullCharFieldTest(TestCase):\n\n    def test_from_db_value_converts_null_to_string(self):\n        field = NullCharField()\n        self.assertEqual('', field.from_db_value(None, expression=None, connection=None, context=None))\n\n    def test_get_prep_value_converts_empty_string_to_null(self):\n        field = NullCharField()\n        self.assertEqual(None, field.get_prep_value(''))\n\n    def test_raises_exception_for_invalid_null_blank_combo(self):\n        with self.assertRaises(ImproperlyConfigured):\n            NullCharField(null=True, blank=False)\n\n        with self.assertRaises(ImproperlyConfigured):\n            NullCharField(null=False, blank=True)\n\n        with self.assertRaises(ImproperlyConfigured):\n            NullCharField(null=False, blank=False)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django.apps import AppConfig\nfrom django.utils.translation import gettext_lazy as _\n\n\nclass AddressConfig(AppConfig):\n    label = 'address'\n    name = 'oscar.apps.address'\n    verbose_name = _('Address')\n",
    "output": "from decimal import Decimal as D\nfrom itertools import product\nfrom django.test import TestCase\n\nfrom oscar.core.prices import Price\n\n\nclass TestPriceObject(TestCase):\n\n    def test_can_be_instantiated_with_tax_amount(self):\n        price = Price('USD', D('10.00'), tax=D('2.00'))\n        self.assertTrue(price.is_tax_known)\n        self.assertEqual(D('12.00'), price.incl_tax)\n\n    def test_can_have_tax_set_later(self):\n        price = Price('USD', D('10.00'))\n        price.tax = D('2.00')\n        self.assertEqual(D('12.00'), price.incl_tax)\n\n    def test_price_equals_reflexivity(self):\n        for price in (\n            Price(currency='USD', excl_tax=D('10.00')),\n            Price(currency='USD', excl_tax=D('10.00'), tax=D('2.00')),\n            Price(currency='USD', excl_tax=D('10.00'), incl_tax=D('12.00')),\n        ):\n            self.assertEqual(price, price)\n\n    def test_price_equals_formats(self):\n        price1 = Price(currency='USD', excl_tax=D('10.00'), tax=D('2.00'))\n        price2 = Price(currency='USD', excl_tax=D('10.00'), incl_tax=D('12.00'))\n        self.assertEqual(price1, price2)\n\n    def test_price_equals_currency_matters(self):\n        price1 = Price(currency='EUR', excl_tax=D('10.00'), tax=D('2.00'))\n        price2 = Price(currency='USD', excl_tax=D('10.00'), tax=D('2.00'))\n        self.assertNotEqual(price1, price2)\n\n    def test_price_equals_transitivity(self):\n        prices = (\n            Price(currency='EUR', excl_tax=D('10.00'), tax=D('2.00')),\n            Price(currency='USD', excl_tax=D('10.00'), tax=D('2.00')),\n            Price(currency='USD', excl_tax=D('10.00'), incl_tax=D('12.00')),\n            Price(currency='USD', excl_tax=D('10.00'), tax=D('8.00'))\n        )\n        prices_product = product(prices, prices)\n        for price1, price2 in prices_product:\n            self.assertEqual(price1 == price2, price2 == price1)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django.apps import AppConfig\nfrom django.utils.translation import gettext_lazy as _\n\n\nclass AddressConfig(AppConfig):\n    label = 'address'\n    name = 'oscar.apps.address'\n    verbose_name = _('Address')\n",
    "output": "# coding=utf-8\n\nfrom django.test import TestCase\nfrom django.test.utils import override_settings\n\n\nclass SlugFieldTest(TestCase):\n\n    def test_slugfield_allow_unicode_kwargs_precedence(self):\n        from oscar.models.fields.slugfield import SlugField\n        with override_settings(OSCAR_SLUG_ALLOW_UNICODE=True):\n            slug_field = SlugField(allow_unicode=False)\n            self.assertFalse(slug_field.allow_unicode)\n            slug_field = SlugField()\n            self.assertTrue(slug_field.allow_unicode)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django.apps import AppConfig\nfrom django.utils.translation import gettext_lazy as _\n\n\nclass AddressConfig(AppConfig):\n    label = 'address'\n    name = 'oscar.apps.address'\n    verbose_name = _('Address')\n",
    "output": "# coding=utf-8\nfrom django.test import TestCase\nfrom django.test.utils import override_settings\n\nfrom oscar.core import utils\n\n\ndef sluggish(value, allow_unicode=False):\n    return value.upper()\n\n\nclass TestSlugify(TestCase):\n\n    def test_default_unicode_to_ascii(self):\n        self.assertEqual('konig-der-straxdfe', utils.slugify('K\u00f6nig der Stra\u00dfe'))\n        self.assertEqual('not-fancy', utils.slugify('Not fancy'))\n        self.assertEqual('u4e01u4e02-u4e03u4e04u4e05', utils.slugify('\u4e01\u4e02 \u4e03\u4e04\u4e05'))\n\n    @override_settings(OSCAR_SLUG_ALLOW_UNICODE=True)\n    def test_allow_unicode(self):\n        self.assertEqual('k\u00f6nig-der-stra\u00dfe', utils.slugify('K\u00f6nig der Stra\u00dfe'))\n        self.assertEqual('\u4e01\u4e02-\u4e03\u4e04\u4e05', utils.slugify('\u4e01\u4e02 \u4e03\u4e04\u4e05'))\n        self.assertEqual('not-fancy', utils.slugify('Not fancy'))\n\n    @override_settings(OSCAR_SLUG_FUNCTION='tests.integration.core.test_utils.sluggish')\n    def test_custom_slugifier(self):\n        self.assertEqual('HAM AND EGGS', utils.slugify('Ham and eggs'))\n\n    @override_settings(OSCAR_SLUG_MAP={'c++': 'cpp'})\n    def test_uses_custom_mappings(self):\n        self.assertEqual('cpp', utils.slugify('c++'))\n\n    @override_settings(OSCAR_SLUG_BLACKLIST=['the'])\n    def test_uses_blacklist(self):\n        self.assertEqual('bible', utils.slugify('The Bible'))\n\n    @override_settings(OSCAR_SLUG_BLACKLIST=['the', 'bible'])\n    def test_uses_blacklist_doesnt_reduce_to_nothing(self):\n        self.assertEqual('bible', utils.slugify('The Bible'))\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django.apps import AppConfig\nfrom django.utils.translation import gettext_lazy as _\n\n\nclass AddressConfig(AppConfig):\n    label = 'address'\n    name = 'oscar.apps.address'\n    verbose_name = _('Address')\n",
    "output": "from django.core.exceptions import ValidationError\nfrom django.contrib.flatpages.models import FlatPage\nfrom django.test import TestCase, override_settings\nfrom django.utils.translation import activate\n\nfrom oscar.core.validators import ExtendedURLValidator, URLDoesNotExistValidator\n\n\nclass TestExtendedURLValidator(TestCase):\n\n    def setUp(self):\n        self.validator = ExtendedURLValidator()\n\n    def test_validates_local_url(self):\n        try:\n            self.validator('/')\n        except ValidationError:\n            self.fail('ExtendedURLValidator raised ValidationError'\n                      'unexpectedly!')\n\n    def test_validates_local_url_with_query_strings(self):\n        try:\n            self.validator('/?q=test')  # Query strings shouldn't affect validation\n        except ValidationError:\n            self.fail('ExtendedURLValidator raised ValidationError'\n                      'unexpectedly!')\n\n    def test_raises_validation_error_for_missing_urls(self):\n        with self.assertRaises(ValidationError):\n            self.validator('/invalid/')\n\n    def test_validates_urls_missing_preceding_slash(self):\n        try:\n            self.validator('catalogue/')\n        except ValidationError:\n            self.fail('ExtendedURLValidator raised ValidationError'\n                      'unexpectedly!')\n\n    def test_raises_validation_error_for_urls_without_trailing_slash(self):\n        with self.assertRaises(ValidationError):\n            self.validator('/catalogue')  # Missing the / is bad\n\n    def test_validates_flatpages_urls(self):\n        FlatPage.objects.create(title='test page', url='/test/page/')\n        try:\n            self.validator('/test/page/')\n        except ValidationError:\n            self.fail('ExtendedURLValidator raises ValidationError'\n                      'unexpectedly!')\n\n\n@override_settings(\n    LANGUAGES=(\n        ('de', 'German'),\n        ('en-gb', 'British English'),\n    )\n)\nclass TestExtendedURLValidatorForLocalePrefixURLS(TestCase):\n    def setUp(self):\n        self.validator = ExtendedURLValidator()\n\n    def test_validate_same_locals(self):\n        \"\"\"\n        Current locale is default (\"en-gb\"), URL has locale prefix\n        of default and current locale (\"en-gb\").\n        \"\"\"\n        try:\n            self.validator('/en-gb/test/')\n        except ValidationError:\n            self.fail('ExtendedURLValidator raised ValidationError'\n                      'unexpectedly!')\n\n    def test_validate_prefix_locale_is_non_default(self):\n        \"\"\"\n        Current locale is default (\"en-gb\"), URL has locale prefix\n        of non-default locale (\"de\").\n        \"\"\"\n        try:\n            self.validator('/de/test/')\n        except ValidationError:\n            self.fail('ExtendedURLValidator raised ValidationError'\n                      'unexpectedly!')\n\n    def test_validate_current_locale_is_non_default(self):\n        \"\"\"\n        Current locale is non-default (\"de\"), URL has locale prefix\n        of default locale (\"en-gb\").\n        \"\"\"\n        activate('de')\n        try:\n            self.validator('/en-gb/test/')\n        except ValidationError:\n            self.fail('ExtendedURLValidator raised ValidationError'\n                      'unexpectedly!')\n\n    def test_validate_current_and_prefix_locales_are_non_default_and_same(self):\n        \"\"\"\n        Current locale is non-default (\"de\"), URL has locale prefix\n        of non-default locale (\"de\").\n        \"\"\"\n        activate('de')\n        try:\n            self.validator('/de/test/')\n        except ValidationError:\n            self.fail('ExtendedURLValidator raised ValidationError'\n                      'unexpectedly!')\n\n    def test_validate_current_and_prefix_locales_are_non_default_and_different(self):\n        \"\"\"\n        Current locale is non-default (\"it\"), URL has locale prefix\n        of non-default locale (\"de\").\n        \"\"\"\n        activate('it')\n        try:\n            self.validator('/de/test/')\n        except ValidationError:\n            self.fail('ExtendedURLValidator raised ValidationError'\n                      'unexpectedly!')\n\n\nclass TestURLDoesNotExistValidator(TestCase):\n\n    def setUp(self):\n        self.validator = URLDoesNotExistValidator()\n\n    def test_raises_exception_for_local_urls(self):\n        self.assertRaises(ValidationError, self.validator, '/')\n\n    def test_raises_exception_for_flatpages(self):\n        FlatPage.objects.create(title='test page', url='/test/page/')\n        self.assertRaises(ValidationError, self.validator, '/test/page/')\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django.apps import AppConfig\nfrom django.utils.translation import gettext_lazy as _\n\n\nclass AddressConfig(AppConfig):\n    label = 'address'\n    name = 'oscar.apps.address'\n    verbose_name = _('Address')\n",
    "output": "import pytest\n\nfrom oscar.views import handler403, handler404, handler500\n\n\n@pytest.mark.django_db\ndef test_handler403_response_status(rf):\n    request = rf.get('/')\n    response = handler403(request, exception=None)\n    assert response.status_code == 403\n\n\n@pytest.mark.django_db\ndef test_handler404_response_status(rf):\n    request = rf.get('/')\n    response = handler404(request, exception=None)\n    assert response.status_code == 404\n\n\n@pytest.mark.django_db\ndef test_handler500_response_status(rf):\n    request = rf.get('/')\n    response = handler500(request)\n    assert response.status_code == 500\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django.apps import AppConfig\nfrom django.utils.translation import gettext_lazy as _\n\n\nclass AddressConfig(AppConfig):\n    label = 'address'\n    name = 'oscar.apps.address'\n    verbose_name = _('Address')\n",
    "output": ""
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django import forms\nfrom django.conf import settings\n\nfrom oscar.core.loading import get_model\nfrom oscar.forms.mixins import PhoneNumberMixin\n\nUserAddress = get_model('address', 'useraddress')\n\n\nclass AbstractAddressForm(forms.ModelForm):\n\n    def __init__(self, *args, **kwargs):\n        \"\"\"\n        Set fields in OSCAR_REQUIRED_ADDRESS_FIELDS as required.\n        \"\"\"\n        super().__init__(*args, **kwargs)\n        field_names = (set(self.fields) &\n                       set(settings.OSCAR_REQUIRED_ADDRESS_FIELDS))\n        for field_name in field_names:\n            self.fields[field_name].required = True\n\n\nclass UserAddressForm(PhoneNumberMixin, AbstractAddressForm):\n\n    class Meta:\n        model = UserAddress\n        fields = [\n            'title', 'first_name', 'last_name',\n            'line1', 'line2', 'line3', 'line4',\n            'state', 'postcode', 'country',\n            'phone_number', 'notes',\n        ]\n\n    def __init__(self, user, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.instance.user = user\n",
    "output": "from django.test import TestCase\n\nfrom oscar.apps.address import models, forms\nfrom oscar.test.factories import UserFactory\n\n\nclass TestUserAddressForm(TestCase):\n\n    def setUp(self):\n        self.user = UserFactory()\n        self.country = models.Country.objects.create(\n            iso_3166_1_a2='GB', name=\"UNITED KINGDOM\")\n\n    def test_merges_addresses_with_same_hash(self):\n        data = {\n            'user': self.user,\n            'first_name': \"Matus\",\n            'last_name': \"Moravcik\",\n            'line1': \"1 Egg Street\",\n            'line4': \"London\",\n            'postcode': \"N12 9RE\",\n            'country': self.country}\n\n        # Create two addresses, which are slightly different\n        models.UserAddress.objects.create(**data)\n        other = data.copy()\n        other['first_name'] = 'Izidor'\n        duplicate = models.UserAddress.objects.create(**other)\n\n        # Edit duplicate to be same as original and check that the two\n        # addresses are merged when the form saves.\n        post_data = data.copy()\n        post_data['country'] = self.country.iso_3166_1_a2\n        form = forms.UserAddressForm(self.user, post_data, instance=duplicate)\n        self.assertFalse(form.is_valid())\n        self.assertTrue(len(form.errors['__all__']) > 0)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django import forms\nfrom django.conf import settings\n\nfrom oscar.core.loading import get_model\nfrom oscar.forms.mixins import PhoneNumberMixin\n\nUserAddress = get_model('address', 'useraddress')\n\n\nclass AbstractAddressForm(forms.ModelForm):\n\n    def __init__(self, *args, **kwargs):\n        \"\"\"\n        Set fields in OSCAR_REQUIRED_ADDRESS_FIELDS as required.\n        \"\"\"\n        super().__init__(*args, **kwargs)\n        field_names = (set(self.fields) &\n                       set(settings.OSCAR_REQUIRED_ADDRESS_FIELDS))\n        for field_name in field_names:\n            self.fields[field_name].required = True\n\n\nclass UserAddressForm(PhoneNumberMixin, AbstractAddressForm):\n\n    class Meta:\n        model = UserAddress\n        fields = [\n            'title', 'first_name', 'last_name',\n            'line1', 'line2', 'line3', 'line4',\n            'state', 'postcode', 'country',\n            'phone_number', 'notes',\n        ]\n\n    def __init__(self, user, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.instance.user = user\n",
    "output": "# -*- coding: utf-8 -*-\nimport pytest\nfrom django.test import TestCase\nfrom django.core import exceptions\n\nfrom oscar.apps.order.models import ShippingAddress\nfrom oscar.core.compat import get_user_model\nfrom oscar.apps.address import models\nfrom oscar.test import factories\n\nfrom tests._site.model_tests_app.models import (\n    UserAddressModelWithCustomBaseFields, UserAddressModelWithCustomHashFields\n)\n\nUser = get_user_model()\n\n\nclass UserAddressModelWithCustomBaseFieldsFactory(factories.UserAddressFactory):\n    class Meta:\n        model = UserAddressModelWithCustomBaseFields\n\n\nclass UserAddressModelWithCustomHashFieldsFactory(factories.UserAddressFactory):\n    class Meta:\n        model = UserAddressModelWithCustomHashFields\n\n\nclass TestUserAddress(TestCase):\n\n    def setUp(self):\n        self.country = factories.CountryFactory.build()\n        self.user = factories.UserFactory()\n\n    def test_uses_title_firstname_and_lastname_in_salutation(self):\n        a = factories.UserAddressFactory.build(\n            country=self.country,\n            title='Dr',\n            first_name='Barry',\n            last_name='Barrington',\n            user=self.user)\n        self.assertEqual(\"Dr Barry Barrington\", a.salutation)\n\n    def test_strips_whitespace_from_salutation(self):\n        a = factories.UserAddressFactory.build(\n            title='',\n            first_name='',\n            last_name='Barrington',\n            country=self.country,\n            user=self.user)\n        self.assertEqual(\"Barrington\", a.salutation)\n\n    def test_has_name_property(self):\n        a = factories.UserAddressFactory.build(\n            country=self.country,\n            first_name='Barry',\n            last_name='Barrington',\n            user=self.user)\n        self.assertEqual(\"Barry Barrington\", a.name)\n\n    def test_has_summary_property(self):\n        c = factories.CountryFactory(name='')\n        a = factories.UserAddressFactory(\n            country=c,\n            title='Dr',\n            first_name='Barry',\n            last_name='Barrington',\n            line1='1 King Road',\n            line4='London',\n            postcode='SW1 9RE')\n        self.assertEqual(\n            \"Dr Barry Barrington, 1 King Road, London, SW1 9RE, UNITED KINGDOM\",\n            a.summary)\n\n    def test_summary_includes_country(self):\n        c = factories.CountryFactory.build(name='UNITED KINGDOM')\n        a = factories.UserAddressFactory.build(\n            country=c,\n            title='Dr',\n            first_name='Barry',\n            last_name='Barrington',\n            line1='1 King Road',\n            line4='London',\n            postcode='SW1 9RE',\n            user=self.user)\n        self.assertEqual(\n            \"Dr Barry Barrington, 1 King Road, London, SW1 9RE, UNITED KINGDOM\",\n            a.summary)\n\n    def test_hash_value(self):\n        a = factories.UserAddressFactory.build(\n            country=self.country,\n            user=self.user)\n        self.assertEqual(a.generate_hash(), 2668616117)\n\n    def test_hash_and_summary_values_on_model_with_custom_base_fields(self):\n        a = UserAddressModelWithCustomBaseFieldsFactory.build(country=self.country, user=self.user)\n        self.assertEqual(a.summary, '1 King Road, London')\n        self.assertEqual(a.generate_hash(), 2668616117)\n\n    def test_hash_and_summary_values_on_model_with_custom_hash_fields(self):\n        a = UserAddressModelWithCustomHashFieldsFactory.build(country=self.country, user=self.user)\n        self.assertEqual(a.summary, 'Dr Barry Barrington, 1 King Road, London, SW1 9RE, UNITED KINGDOM')\n        self.assertEqual(a.generate_hash(), 2153195893)\n\n    def test_can_be_hashed_including_non_ascii(self):\n        a = factories.UserAddressFactory.build(\n            first_name=\"\\u0141ukasz Smith\",\n            last_name='Smith',\n            line1=\"75 Smith Road\",\n            postcode=\"n4 8ty\",\n            country=self.country,\n            user=self.user)\n        hash = a.generate_hash()\n        self.assertTrue(hash is not None)\n\n    def test_strips_whitespace_in_name_property(self):\n        a = factories.UserAddressFactory.build(\n            first_name='',\n            last_name='Barrington',\n            country=self.country,\n            user=self.user)\n        self.assertEqual(\"Barrington\", a.name)\n\n    def test_uses_city_as_an_alias_of_line4(self):\n        a = factories.UserAddressFactory.build(\n            line4='London',\n            country=self.country,\n            user=self.user)\n        self.assertEqual('London', a.city)\n\n    def test_converts_postcode_to_uppercase_when_cleaning(self):\n        address = factories.UserAddressFactory.build(\n            postcode=\"n4 8ty\",\n            country=self.country,\n            user=self.user)\n        address.clean()\n        self.assertEqual(\"N4 8TY\", address.postcode)\n\n    def test_strips_whitespace_when_cleaning(self):\n        a = factories.UserAddressFactory.build(\n            line1=\"  75 Smith Road  \",\n            postcode=\"  n4 8ty\",\n            country=self.country,\n            user=self.user)\n        a.clean()\n        self.assertEqual(\"N4 8TY\", a.postcode)\n        self.assertEqual(\"75 Smith Road\", a.line1)\n\n    def test_active_address_fields_skips_whitespace_only_fields(self):\n        a = factories.UserAddressFactory.build(\n            first_name='   ',\n            last_name='Barrington',\n            line1='  75 Smith Road  ',\n            postcode='  n4 8ty',\n            title='',\n            country=self.country,\n            user=self.user)\n        active_fields = a.active_address_fields()\n        self.assertEqual(\"Barrington\", active_fields[0])\n\n    def test_ignores_whitespace_when_hashing(self):\n        a1 = factories.UserAddressFactory.build(\n            first_name='Terry',\n            last_name='Barrington',\n            country=self.country,\n            user=self.user)\n        a1.clean()\n        a2 = factories.UserAddressFactory.build(\n            first_name='   Terry  ',\n            last_name='     Barrington',\n            country=self.country,\n            user=self.user)\n        a2.clean()\n        self.assertEqual(a1.generate_hash(), a2.generate_hash())\n\n    def test_populate_shipping_address_doesnt_set_id(self):\n        a = factories.UserAddressFactory.build(\n            country=self.country,\n            user=self.user)\n        a.clean()\n        sa = ShippingAddress()\n        a.populate_alternative_model(sa)\n        self.assertIsNone(sa.id)\n\n    def test_populated_shipping_address_has_same_summary_user_address(self):\n        a = factories.UserAddressFactory.build(\n            country=self.country,\n            user=self.user)\n        a.clean()\n        sa = ShippingAddress()\n        a.populate_alternative_model(sa)\n        self.assertEqual(sa.summary, a.summary)\n\n    def test_summary_value(self):\n        a = factories.UserAddressFactory.build(\n            country=self.country,\n            user=self.user)\n        self.assertEqual(a.summary, 'Dr Barry Barrington, 1 King Road, London, SW1 9RE, UNITED KINGDOM')\n\n    def test_summary_is_property(self):\n        a = factories.UserAddressFactory.build(\n            title='',\n            line4='',\n            first_name=\" Terry  \",\n            last_name='Barrington',\n            line1=\"  75 Smith Road  \",\n            postcode=\"  n4 8ty\",\n            country=self.country,\n            user=self.user)\n        a.clean()\n        self.assertEqual(\n            \"Terry Barrington, 75 Smith Road, N4 8TY, UNITED KINGDOM\",\n            a.summary)\n\n\nVALID_POSTCODES = [\n    ('GB', 'N1 9RT'),\n    ('SK', '991 41'),\n    ('CZ', '612 00'),\n    ('CC', '6799'),\n    ('CY', '8240'),\n    ('MC', '98000'),\n    ('SH', 'STHL 1ZZ'),\n    ('JP', '150-2345'),\n    ('PG', '314'),\n    ('HN', '41202'),\n    ('BN', 'BC3615'),\n    ('TW', '104'),\n    ('TW', '10444'),\n    # It works for small cases as well\n    ('GB', 'sw2 1rw'),\n]\n\n\nINVALID_POSTCODES = [\n    ('GB', 'not-a-postcode'),\n    ('DE', '123b4'),\n]\n\n\n@pytest.mark.parametrize('country_value, postcode_value', VALID_POSTCODES)\ndef test_assert_valid_postcode(country_value, postcode_value):\n    country = models.Country(iso_3166_1_a2=country_value)\n    address = models.UserAddress(country=country, postcode=postcode_value)\n    address.clean()\n\n\n@pytest.mark.parametrize('country_value, postcode_value', INVALID_POSTCODES)\ndef test_assert_invalid_postcode(country_value, postcode_value):\n    country = models.Country(iso_3166_1_a2=country_value)\n    address = models.UserAddress(country=country, postcode=postcode_value)\n\n    with pytest.raises(exceptions.ValidationError):\n        address.clean()\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django import forms\nfrom django.conf import settings\n\nfrom oscar.core.loading import get_model\nfrom oscar.forms.mixins import PhoneNumberMixin\n\nUserAddress = get_model('address', 'useraddress')\n\n\nclass AbstractAddressForm(forms.ModelForm):\n\n    def __init__(self, *args, **kwargs):\n        \"\"\"\n        Set fields in OSCAR_REQUIRED_ADDRESS_FIELDS as required.\n        \"\"\"\n        super().__init__(*args, **kwargs)\n        field_names = (set(self.fields) &\n                       set(settings.OSCAR_REQUIRED_ADDRESS_FIELDS))\n        for field_name in field_names:\n            self.fields[field_name].required = True\n\n\nclass UserAddressForm(PhoneNumberMixin, AbstractAddressForm):\n\n    class Meta:\n        model = UserAddress\n        fields = [\n            'title', 'first_name', 'last_name',\n            'line1', 'line2', 'line3', 'line4',\n            'state', 'postcode', 'country',\n            'phone_number', 'notes',\n        ]\n\n    def __init__(self, user, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.instance.user = user\n",
    "output": ""
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django import forms\nfrom django.conf import settings\n\nfrom oscar.core.loading import get_model\nfrom oscar.forms.mixins import PhoneNumberMixin\n\nUserAddress = get_model('address', 'useraddress')\n\n\nclass AbstractAddressForm(forms.ModelForm):\n\n    def __init__(self, *args, **kwargs):\n        \"\"\"\n        Set fields in OSCAR_REQUIRED_ADDRESS_FIELDS as required.\n        \"\"\"\n        super().__init__(*args, **kwargs)\n        field_names = (set(self.fields) &\n                       set(settings.OSCAR_REQUIRED_ADDRESS_FIELDS))\n        for field_name in field_names:\n            self.fields[field_name].required = True\n\n\nclass UserAddressForm(PhoneNumberMixin, AbstractAddressForm):\n\n    class Meta:\n        model = UserAddress\n        fields = [\n            'title', 'first_name', 'last_name',\n            'line1', 'line2', 'line3', 'line4',\n            'state', 'postcode', 'country',\n            'phone_number', 'notes',\n        ]\n\n    def __init__(self, user, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.instance.user = user\n",
    "output": "from datetime import datetime, date\n\nfrom django.test import TestCase\nfrom django.core.exceptions import ValidationError\nfrom django.core.files.uploadedfile import SimpleUploadedFile\n\nfrom oscar.test import factories\n\n\nclass TestBooleanAttributes(TestCase):\n\n    def setUp(self):\n        self.attr = factories.ProductAttributeFactory(type=\"boolean\")\n\n    def test_validate_boolean_values(self):\n        self.assertIsNone(self.attr.validate_value(True))\n\n    def test_validate_invalid_boolean_values(self):\n        with self.assertRaises(ValidationError):\n            self.attr.validate_value(1)\n\n\nclass TestMultiOptionAttributes(TestCase):\n\n    def setUp(self):\n        self.option_group = factories.AttributeOptionGroupFactory()\n        self.attr = factories.ProductAttributeFactory(\n            type='multi_option',\n            name='Sizes',\n            code='sizes',\n            option_group=self.option_group,\n        )\n\n        # Add some options to the group\n        self.options = factories.AttributeOptionFactory.create_batch(\n            3, group=self.option_group)\n\n    def test_validate_multi_option_values(self):\n        self.assertIsNone(self.attr.validate_value([\n            self.options[0], self.options[1]]))\n\n    def test_validate_invalid_multi_option_values(self):\n        with self.assertRaises(ValidationError):\n            # value must be an iterable\n            self.attr.validate_value('foobar')\n\n        with self.assertRaises(ValidationError):\n            # Items must all be AttributeOption objects\n            self.attr.validate_value([self.options[0], 'notanOption'])\n\n    def test_save_multi_option_value(self):\n        product = factories.ProductFactory()\n        # We'll save two out of the three available options\n        self.attr.save_value(product, [self.options[0], self.options[2]])\n        product.refresh_from_db()\n        self.assertEqual(list(product.attr.sizes), [self.options[0], self.options[2]])\n\n    def test_delete_multi_option_value(self):\n        product = factories.ProductFactory()\n        self.attr.save_value(product, [self.options[0], self.options[1]])\n        # Now delete these values\n        self.attr.save_value(product, None)\n        product.refresh_from_db()\n        self.assertFalse(hasattr(product.attr, 'sizes'))\n\n    def test_multi_option_value_as_text(self):\n        product = factories.ProductFactory()\n        self.attr.save_value(product, self.options)\n        attr_val = product.attribute_values.get(attribute=self.attr)\n        self.assertEqual(attr_val.value_as_text, \", \".join(o.option for o in self.options))\n\n\nclass TestDatetimeAttributes(TestCase):\n\n    def setUp(self):\n        self.attr = factories.ProductAttributeFactory(type=\"datetime\")\n\n    def test_validate_datetime_values(self):\n        self.assertIsNone(self.attr.validate_value(datetime.now()))\n\n    def test_validate_invalid_datetime_values(self):\n        with self.assertRaises(ValidationError):\n            self.attr.validate_value(1)\n\n\nclass TestDateAttributes(TestCase):\n\n    def setUp(self):\n        self.attr = factories.ProductAttributeFactory(type=\"date\")\n\n    def test_validate_datetime_values(self):\n        self.assertIsNone(self.attr.validate_value(datetime.now()))\n\n    def test_validate_date_values(self):\n        self.assertIsNone(self.attr.validate_value(date.today()))\n\n    def test_validate_invalid_date_values(self):\n        with self.assertRaises(ValidationError):\n            self.attr.validate_value(1)\n\n\nclass TestIntegerAttributes(TestCase):\n\n    def setUp(self):\n        self.attr = factories.ProductAttributeFactory(type=\"integer\")\n\n    def test_validate_integer_values(self):\n        self.assertIsNone(self.attr.validate_value(1))\n\n    def test_validate_str_integer_values(self):\n        self.assertIsNone(self.attr.validate_value('1'))\n\n    def test_validate_invalid_integer_values(self):\n        with self.assertRaises(ValidationError):\n            self.attr.validate_value('notanInteger')\n\n\nclass TestFloatAttributes(TestCase):\n\n    def setUp(self):\n        self.attr = factories.ProductAttributeFactory(type=\"float\")\n\n    def test_validate_integer_values(self):\n        self.assertIsNone(self.attr.validate_value(1))\n\n    def test_validate_float_values(self):\n        self.assertIsNone(self.attr.validate_value(1.2))\n\n    def test_validate_str_float_values(self):\n        self.assertIsNone(self.attr.validate_value('1.2'))\n\n    def test_validate_invalid_float_values(self):\n        with self.assertRaises(ValidationError):\n            self.attr.validate_value('notaFloat')\n\n\nclass TestTextAttributes(TestCase):\n\n    def setUp(self):\n        self.attr = factories.ProductAttributeFactory(type=\"text\")\n\n    def test_validate_string_and_unicode_values(self):\n        self.assertIsNone(self.attr.validate_value('String'))\n\n    def test_validate_invalid_float_values(self):\n        with self.assertRaises(ValidationError):\n            self.attr.validate_value(1)\n\n\nclass TestFileAttributes(TestCase):\n    def setUp(self):\n        self.attr = factories.ProductAttributeFactory(type=\"file\")\n\n    def test_validate_file_values(self):\n        file_field = SimpleUploadedFile('test_file.txt', b'Test')\n        self.assertIsNone(self.attr.validate_value(file_field))\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django import forms\nfrom django.conf import settings\n\nfrom oscar.core.loading import get_model\nfrom oscar.forms.mixins import PhoneNumberMixin\n\nUserAddress = get_model('address', 'useraddress')\n\n\nclass AbstractAddressForm(forms.ModelForm):\n\n    def __init__(self, *args, **kwargs):\n        \"\"\"\n        Set fields in OSCAR_REQUIRED_ADDRESS_FIELDS as required.\n        \"\"\"\n        super().__init__(*args, **kwargs)\n        field_names = (set(self.fields) &\n                       set(settings.OSCAR_REQUIRED_ADDRESS_FIELDS))\n        for field_name in field_names:\n            self.fields[field_name].required = True\n\n\nclass UserAddressForm(PhoneNumberMixin, AbstractAddressForm):\n\n    class Meta:\n        model = UserAddress\n        fields = [\n            'title', 'first_name', 'last_name',\n            'line1', 'line2', 'line3', 'line4',\n            'state', 'postcode', 'country',\n            'phone_number', 'notes',\n        ]\n\n    def __init__(self, user, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.instance.user = user\n",
    "output": "# -*- coding: utf-8 -*-\nfrom django.core.cache import cache\nfrom django.test import TestCase\nfrom django.test.utils import override_settings\n\nfrom oscar.apps.catalogue.models import Category\nfrom oscar.apps.catalogue.categories import create_from_breadcrumbs\nfrom oscar.templatetags.category_tags import get_annotated_list\n\n\nclass TestCategory(TestCase):\n\n    def setUp(self):\n        self.products = Category.add_root(name=\"Pr\u00f6ducts\")\n        self.books = self.products.add_child(name=\"B\u00fccher\")\n\n    def tearDown(self):\n        cache.clear()\n\n    def test_includes_parents_name_in_full_name(self):\n        self.assertTrue(self.products.name in self.books.full_name)\n\n    def test_has_children_method(self):\n        self.assertTrue(self.products.has_children())\n\n    def test_slugs_were_autogenerated(self):\n        self.assertTrue(self.products.slug)\n        self.assertTrue(self.books.slug)\n\n    def test_supplied_slug_is_not_altered(self):\n        more_books = self.products.add_child(\n            name=self.books.name, slug=self.books.slug)\n        self.assertEqual(more_books.slug, self.books.slug)\n\n    @override_settings(OSCAR_SLUG_ALLOW_UNICODE=True)\n    def test_unicode_slug(self):\n        root_category = Category.add_root(name=\"Vins fran\u00e7ais\")\n        child_category = root_category.add_child(name=\"Ch\u00e2teau d'Yquem\")\n        self.assertEqual(root_category.slug, 'vins-fran\u00e7ais')\n        self.assertEqual(\n            root_category.get_absolute_url(), '/catalogue/category/vins-fran%C3%A7ais_{}/'.format(root_category.pk)\n        )\n        self.assertEqual(child_category.slug, 'ch\u00e2teau-dyquem')\n        self.assertEqual(\n            child_category.get_absolute_url(),\n            '/catalogue/category/vins-fran%C3%A7ais/ch%C3%A2teau-dyquem_{}/'.format(child_category.pk)\n        )\n\n    @override_settings(OSCAR_SLUG_ALLOW_UNICODE=True)\n    def test_url_caching(self):\n        category = self.products.add_child(name=\"Fromages fran\u00e7ais\")\n        absolute_url = category.get_absolute_url()\n        url = cache.get(category.get_url_cache_key())\n        self.assertEqual(url, '/catalogue/category/products/fromages-fran%C3%A7ais_{}/'.format(category.pk))\n        self.assertEqual(absolute_url, '/catalogue/category/products/fromages-fran%C3%A7ais_{}/'.format(category.pk))\n\n\nclass TestMovingACategory(TestCase):\n\n    def setUp(self):\n        breadcrumbs = (\n            'Books > Fiction > Horror > Teen',\n            'Books > Fiction > Horror > Gothic',\n            'Books > Fiction > Comedy',\n            'Books > Non-fiction > Biography',\n            'Books > Non-fiction > Programming',\n            'Books > Children',\n        )\n        for trail in breadcrumbs:\n            create_from_breadcrumbs(trail)\n\n        horror = Category.objects.get(name=\"Horror\")\n        programming = Category.objects.get(name=\"Programming\")\n        horror.move(programming)\n\n        # Reload horror instance to pick up changes\n        self.horror = Category.objects.get(name=\"Horror\")\n\n    def test_updates_instance_name(self):\n        self.assertEqual('Books > Non-fiction > Horror', self.horror.full_name)\n\n    def test_updates_subtree_names(self):\n        teen = Category.objects.get(name=\"Teen\")\n        self.assertEqual('Books > Non-fiction > Horror > Teen',\n                         teen.full_name)\n        gothic = Category.objects.get(name=\"Gothic\")\n        self.assertEqual('Books > Non-fiction > Horror > Gothic',\n                         gothic.full_name)\n\n\nclass TestCategoryFactory(TestCase):\n\n    def test_can_create_single_level_category(self):\n        trail = 'Books'\n        category = create_from_breadcrumbs(trail)\n        self.assertIsNotNone(category)\n        self.assertEqual(category.name, 'Books')\n        self.assertEqual(category.slug, 'books')\n\n    def test_can_create_parent_and_child_categories(self):\n        trail = 'Books > Science-Fiction'\n        category = create_from_breadcrumbs(trail)\n\n        self.assertIsNotNone(category)\n        self.assertEqual(category.name, 'Science-Fiction')\n        self.assertEqual(category.get_depth(), 2)\n        self.assertEqual(category.get_parent().name, 'Books')\n        self.assertEqual(2, Category.objects.count())\n        self.assertEqual(category.full_slug, 'books/science-fiction')\n\n    def test_can_create_multiple_categories(self):\n        trail = 'Books > Science-Fiction > Star Trek'\n        create_from_breadcrumbs(trail)\n        trail = 'Books > Factual > Popular Science'\n        category = create_from_breadcrumbs(trail)\n\n        self.assertIsNotNone(category)\n        self.assertEqual(category.name, 'Popular Science')\n        self.assertEqual(category.get_depth(), 3)\n        self.assertEqual(category.get_parent().name, 'Factual')\n        self.assertEqual(5, Category.objects.count())\n        self.assertEqual(category.full_slug, 'books/factual/popular-science', )\n\n    def test_can_use_alternative_separator(self):\n        trail = 'Food|Cheese|Blue'\n        create_from_breadcrumbs(trail, separator='|')\n        self.assertEqual(3, len(Category.objects.all()))\n\n    def test_updating_subtree_slugs_when_moving_category_to_new_parent(self):\n        trail = 'A > B > C'\n        create_from_breadcrumbs(trail)\n        trail = 'A > B > D'\n        create_from_breadcrumbs(trail)\n        trail = 'A > E > F'\n        create_from_breadcrumbs(trail)\n        trail = 'A > E > G'\n        create_from_breadcrumbs(trail)\n\n        trail = 'T'\n        target = create_from_breadcrumbs(trail)\n        category = Category.objects.get(name='A')\n\n        category.move(target, pos='first-child')\n\n        c1 = Category.objects.get(name='A')\n        self.assertEqual(c1.full_slug, 't/a')\n        self.assertEqual(c1.full_name, 'T > A')\n\n        child = Category.objects.get(name='F')\n        self.assertEqual(child.full_slug, 't/a/e/f')\n        self.assertEqual(child.full_name, 'T > A > E > F')\n\n        child = Category.objects.get(name='D')\n        self.assertEqual(child.full_slug, 't/a/b/d')\n        self.assertEqual(child.full_name, 'T > A > B > D')\n\n    def test_updating_subtree_when_moving_category_to_new_sibling(self):\n        trail = 'A > B > C'\n        create_from_breadcrumbs(trail)\n        trail = 'A > B > D'\n        create_from_breadcrumbs(trail)\n        trail = 'A > E > F'\n        create_from_breadcrumbs(trail)\n        trail = 'A > E > G'\n        create_from_breadcrumbs(trail)\n\n        category = Category.objects.get(name='E')\n        target = Category.objects.get(name='A')\n\n        category.move(target, pos='right')\n\n        child = Category.objects.get(name='E')\n        self.assertEqual(child.full_slug, 'e')\n        self.assertEqual(child.full_name, 'E')\n\n        child = Category.objects.get(name='F')\n        self.assertEqual(child.full_slug, 'e/f')\n        self.assertEqual(child.full_name, 'E > F')\n\n\nclass TestCategoryTemplateTags(TestCase):\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.template = \"\"\"\n          {% if tree_categories %}\n              <ul>\n              {% for tree_category, info in tree_categories %}\n                  <li>\n                  {% if tree_category.pk == category.pk %}\n                      <strong>{{ tree_category.name }}</strong>\n                  {% else %}\n                      <a href=\"{{ tree_category.get_absolute_url }}\">\n                          {{ tree_category.name }}</a>\n                  {% endif %}\n                  {% if info.has_children %}<ul>{% else %}</li>{% endif %}\n                  {% for n in info.num_to_close %}\n                      </ul></li>\n                  {% endfor %}\n              {% endfor %}\n              </ul>\n          {% endif %}\n        \"\"\"\n\n    def setUp(self):\n        breadcrumbs = (\n            'Books > Fiction > Horror > Teen',\n            'Books > Fiction > Horror > Gothic',\n            'Books > Fiction > Comedy',\n            'Books > Non-fiction > Biography',\n            'Books > Non-fiction > Programming',\n            'Books > Children',\n        )\n        for trail in breadcrumbs:\n            create_from_breadcrumbs(trail)\n\n    def get_category_names(self, depth=None, parent=None):\n        \"\"\"\n        For the tests, we are only interested in the category names returned\n        from the template tag. This helper calls the template tag and\n        returns a list of the included categories.\n        \"\"\"\n        annotated_list = get_annotated_list(depth, parent)\n        names = [category.name for category, __ in annotated_list]\n        names_set = set(names)\n        # We return a set to ease testing, but need to be sure we're not\n        # losing any duplicates through that conversion.\n        self.assertEqual(len(names_set), len(names))\n        return names_set\n\n    def test_all_categories(self):\n        expected_categories = {\n            'Books', 'Fiction', 'Horror', 'Teen', 'Gothic', 'Comedy',\n            'Non-fiction', 'Biography', 'Programming', 'Children'}\n        actual_categories = self.get_category_names()\n        self.assertEqual(expected_categories, actual_categories)\n\n    def test_categories_depth(self):\n        expected_categories = {'Books'}\n        actual_categories = self.get_category_names(depth=1)\n        self.assertEqual(expected_categories, actual_categories)\n\n    def test_categories_parent(self):\n        parent = Category.objects.get(name=\"Fiction\")\n        actual_categories = self.get_category_names(parent=parent)\n        expected_categories = {'Horror', 'Teen', 'Gothic', 'Comedy'}\n        self.assertEqual(expected_categories, actual_categories)\n\n    def test_categories_depth_parent(self):\n        parent = Category.objects.get(name=\"Fiction\")\n        actual_categories = self.get_category_names(depth=1, parent=parent)\n        expected_categories = {'Horror', 'Comedy'}\n        self.assertEqual(expected_categories, actual_categories)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django import forms\nfrom django.conf import settings\n\nfrom oscar.core.loading import get_model\nfrom oscar.forms.mixins import PhoneNumberMixin\n\nUserAddress = get_model('address', 'useraddress')\n\n\nclass AbstractAddressForm(forms.ModelForm):\n\n    def __init__(self, *args, **kwargs):\n        \"\"\"\n        Set fields in OSCAR_REQUIRED_ADDRESS_FIELDS as required.\n        \"\"\"\n        super().__init__(*args, **kwargs)\n        field_names = (set(self.fields) &\n                       set(settings.OSCAR_REQUIRED_ADDRESS_FIELDS))\n        for field_name in field_names:\n            self.fields[field_name].required = True\n\n\nclass UserAddressForm(PhoneNumberMixin, AbstractAddressForm):\n\n    class Meta:\n        model = UserAddress\n        fields = [\n            'title', 'first_name', 'last_name',\n            'line1', 'line2', 'line3', 'line4',\n            'state', 'postcode', 'country',\n            'phone_number', 'notes',\n        ]\n\n    def __init__(self, user, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.instance.user = user\n",
    "output": "import pytest\nfrom django.core.exceptions import ValidationError\n\nfrom oscar.apps.catalogue import models\n\n\ndef test_product_attributes_can_contain_underscores():\n    attr = models.ProductAttribute(name=\"A\", code=\"a_b\")\n    attr.full_clean()\n\n\ndef test_product_attributes_cant_contain_hyphens():\n    attr = models.ProductAttribute(name=\"A\", code=\"a-b\")\n    with pytest.raises(ValidationError):\n        attr.full_clean()\n\n\ndef test_product_attributes_cant_be_python_keywords():\n    attr = models.ProductAttribute(name=\"A\", code=\"import\")\n    with pytest.raises(ValidationError):\n        attr.full_clean()\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django import forms\nfrom django.conf import settings\n\nfrom oscar.core.loading import get_model\nfrom oscar.forms.mixins import PhoneNumberMixin\n\nUserAddress = get_model('address', 'useraddress')\n\n\nclass AbstractAddressForm(forms.ModelForm):\n\n    def __init__(self, *args, **kwargs):\n        \"\"\"\n        Set fields in OSCAR_REQUIRED_ADDRESS_FIELDS as required.\n        \"\"\"\n        super().__init__(*args, **kwargs)\n        field_names = (set(self.fields) &\n                       set(settings.OSCAR_REQUIRED_ADDRESS_FIELDS))\n        for field_name in field_names:\n            self.fields[field_name].required = True\n\n\nclass UserAddressForm(PhoneNumberMixin, AbstractAddressForm):\n\n    class Meta:\n        model = UserAddress\n        fields = [\n            'title', 'first_name', 'last_name',\n            'line1', 'line2', 'line3', 'line4',\n            'state', 'postcode', 'country',\n            'phone_number', 'notes',\n        ]\n\n    def __init__(self, user, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.instance.user = user\n",
    "output": "from django.test import TestCase\n\nfrom oscar.test import factories\nfrom oscar.core.loading import get_model\n\n\nProduct = get_model('catalogue', 'Product')\n\n\nclass ProductOptionTests(TestCase):\n    def setUp(self):\n        self.product_class = factories.ProductClassFactory()\n        self.product = factories.create_product(product_class=self.product_class)\n        self.option = factories.OptionFactory()\n\n    def test_product_has_options_per_product_class(self):\n        self.product_class.options.add(self.option)\n        self.assertTrue(self.product.has_options)\n\n    def test_product_has_options_per_product(self):\n        self.product.product_options.add(self.option)\n        self.assertTrue(self.product.has_options)\n\n    def test_queryset_per_product_class(self):\n        self.product_class.options.add(self.option)\n        qs = Product.browsable.base_queryset().filter(id=self.product.id)\n        product = qs.first()\n        self.assertTrue(product.has_options)\n        self.assertEquals(product.num_product_class_options, 1)\n\n    def test_queryset_per_product(self):\n        self.product.product_options.add(self.option)\n        qs = Product.browsable.base_queryset().filter(id=self.product.id)\n        product = qs.first()\n        self.assertTrue(product.has_options)\n        self.assertEquals(product.num_product_options, 1)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django import forms\nfrom django.conf import settings\n\nfrom oscar.core.loading import get_model\nfrom oscar.forms.mixins import PhoneNumberMixin\n\nUserAddress = get_model('address', 'useraddress')\n\n\nclass AbstractAddressForm(forms.ModelForm):\n\n    def __init__(self, *args, **kwargs):\n        \"\"\"\n        Set fields in OSCAR_REQUIRED_ADDRESS_FIELDS as required.\n        \"\"\"\n        super().__init__(*args, **kwargs)\n        field_names = (set(self.fields) &\n                       set(settings.OSCAR_REQUIRED_ADDRESS_FIELDS))\n        for field_name in field_names:\n            self.fields[field_name].required = True\n\n\nclass UserAddressForm(PhoneNumberMixin, AbstractAddressForm):\n\n    class Meta:\n        model = UserAddress\n        fields = [\n            'title', 'first_name', 'last_name',\n            'line1', 'line2', 'line3', 'line4',\n            'state', 'postcode', 'country',\n            'phone_number', 'notes',\n        ]\n\n    def __init__(self, user, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.instance.user = user\n",
    "output": "# coding=utf-8\nfrom django.db import IntegrityError\nfrom django.test import TestCase\nfrom django.core.exceptions import ValidationError\n\nfrom oscar.apps.catalogue.models import (Product, ProductClass,\n                                         ProductAttribute,\n                                         AttributeOption,\n                                         ProductRecommendation)\nfrom oscar.test import factories\n\n\nclass ProductTests(TestCase):\n\n    def setUp(self):\n        self.product_class, _ = ProductClass.objects.get_or_create(\n            name='Clothing')\n\n\nclass ProductCreationTests(ProductTests):\n\n    def setUp(self):\n        super().setUp()\n        ProductAttribute.objects.create(product_class=self.product_class,\n                                        name='Number of pages',\n                                        code='num_pages',\n                                        type='integer')\n        Product.ENABLE_ATTRIBUTE_BINDING = True\n\n    def tearDown(self):\n        Product.ENABLE_ATTRIBUTE_BINDING = False\n\n    def test_create_products_with_attributes(self):\n        product = Product(upc='1234',\n                          product_class=self.product_class,\n                          title='testing')\n        product.attr.num_pages = 100\n        product.save()\n\n    def test_none_upc_is_represented_as_empty_string(self):\n        product = Product(product_class=self.product_class,\n                          title='testing', upc=None)\n        product.save()\n        product.refresh_from_db()\n        self.assertEqual(product.upc, '')\n\n    def test_upc_uniqueness_enforced(self):\n        Product.objects.create(product_class=self.product_class,\n                               title='testing', upc='bah')\n        self.assertRaises(IntegrityError, Product.objects.create,\n                          product_class=self.product_class,\n                          title='testing', upc='bah')\n\n    def test_allow_two_products_without_upc(self):\n        for x in range(2):\n            Product.objects.create(product_class=self.product_class,\n                                   title='testing', upc=None)\n\n\nclass TopLevelProductTests(ProductTests):\n\n    def test_top_level_products_must_have_titles(self):\n        product = Product(product_class=self.product_class)\n        self.assertRaises(ValidationError, product.clean)\n\n    def test_top_level_products_must_have_product_class(self):\n        product = Product(title=\"Kopfh\u00f6rer\")\n        self.assertRaises(ValidationError, product.clean)\n\n    def test_top_level_products_are_part_of_browsable_set(self):\n        product = Product.objects.create(\n            product_class=self.product_class, title=\"Kopfh\u00f6rer\")\n        self.assertEqual(set([product]), set(Product.browsable.all()))\n\n\nclass ChildProductTests(ProductTests):\n\n    def setUp(self):\n        super().setUp()\n        self.parent = Product.objects.create(\n            title=\"Parent product\",\n            product_class=self.product_class,\n            structure=Product.PARENT,\n            is_discountable=False)\n\n    def test_child_products_dont_need_titles(self):\n        Product.objects.create(\n            parent=self.parent, structure=Product.CHILD)\n\n    def test_child_products_dont_need_a_product_class(self):\n        Product.objects.create(parent=self.parent, structure=Product.CHILD)\n\n    def test_child_products_inherit_fields(self):\n        p = Product.objects.create(\n            parent=self.parent,\n            structure=Product.CHILD,\n            is_discountable=True)\n        self.assertEqual(\"Parent product\", p.get_title())\n        self.assertEqual(\"Clothing\", p.get_product_class().name)\n        self.assertEqual(False, p.get_is_discountable())\n\n    def test_child_products_are_not_part_of_browsable_set(self):\n        Product.objects.create(\n            product_class=self.product_class, parent=self.parent,\n            structure=Product.CHILD)\n        self.assertEqual(set([self.parent]), set(Product.browsable.all()))\n\n\nclass TestAChildProduct(TestCase):\n\n    def setUp(self):\n        clothing = ProductClass.objects.create(\n            name='Clothing', requires_shipping=True)\n        self.parent = clothing.products.create(\n            title=\"Parent\", structure=Product.PARENT)\n        self.child = self.parent.children.create(structure=Product.CHILD)\n\n    def test_delegates_requires_shipping_logic(self):\n        self.assertTrue(self.child.is_shipping_required)\n\n\nclass ProductAttributeCreationTests(TestCase):\n\n    def test_validating_option_attribute(self):\n        option_group = factories.AttributeOptionGroupFactory()\n        option_1 = factories.AttributeOptionFactory(group=option_group)\n        option_2 = factories.AttributeOptionFactory(group=option_group)\n        pa = factories.ProductAttribute(\n            type='option', option_group=option_group)\n\n        self.assertRaises(ValidationError, pa.validate_value, 'invalid')\n        pa.validate_value(option_1)\n        pa.validate_value(option_2)\n\n        invalid_option = AttributeOption(option='invalid option')\n        self.assertRaises(\n            ValidationError, pa.validate_value, invalid_option)\n\n    def test_entity_attributes(self):\n        unrelated_object = factories.PartnerFactory()\n        attribute = factories.ProductAttributeFactory(type='entity')\n\n        attribute_value = factories.ProductAttributeValueFactory(\n            attribute=attribute, value_entity=unrelated_object)\n\n        self.assertEqual(attribute_value.value, unrelated_object)\n\n\nclass ProductRecommendationTests(ProductTests):\n\n    def setUp(self):\n        super().setUp()\n        self.primary_product = Product.objects.create(\n            upc='1234', product_class=self.product_class, title='Primary Product'\n        )\n\n    def test_recommended_products_ordering(self):\n        secondary_products = []\n        for i in range(5):\n            secondary_products.append(Product.objects.create(\n                upc='secondary%s' % i, product_class=self.product_class, title='Secondary Product #%s' % i\n            ))\n\n        ProductRecommendation.objects.create(\n            primary=self.primary_product, recommendation=secondary_products[3], ranking=5)\n        ProductRecommendation.objects.create(\n            primary=self.primary_product, recommendation=secondary_products[1], ranking=2)\n        ProductRecommendation.objects.create(\n            primary=self.primary_product, recommendation=secondary_products[2], ranking=4)\n        ProductRecommendation.objects.create(\n            primary=self.primary_product, recommendation=secondary_products[4], ranking=1)\n        ProductRecommendation.objects.create(\n            primary=self.primary_product, recommendation=secondary_products[0], ranking=3)\n        recommended_products = [\n            secondary_products[3], secondary_products[2], secondary_products[0],\n            secondary_products[1], secondary_products[4]\n        ]\n        self.assertEqual(self.primary_product.sorted_recommended_products, recommended_products)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django import forms\nfrom django.conf import settings\n\nfrom oscar.core.loading import get_model\nfrom oscar.forms.mixins import PhoneNumberMixin\n\nUserAddress = get_model('address', 'useraddress')\n\n\nclass AbstractAddressForm(forms.ModelForm):\n\n    def __init__(self, *args, **kwargs):\n        \"\"\"\n        Set fields in OSCAR_REQUIRED_ADDRESS_FIELDS as required.\n        \"\"\"\n        super().__init__(*args, **kwargs)\n        field_names = (set(self.fields) &\n                       set(settings.OSCAR_REQUIRED_ADDRESS_FIELDS))\n        for field_name in field_names:\n            self.fields[field_name].required = True\n\n\nclass UserAddressForm(PhoneNumberMixin, AbstractAddressForm):\n\n    class Meta:\n        model = UserAddress\n        fields = [\n            'title', 'first_name', 'last_name',\n            'line1', 'line2', 'line3', 'line4',\n            'state', 'postcode', 'country',\n            'phone_number', 'notes',\n        ]\n\n    def __init__(self, user, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.instance.user = user\n",
    "output": "from django.test import TestCase\n\nfrom oscar.apps.catalogue import models\n\n\nclass TestProductClassModel(TestCase):\n\n    def test_slug_is_auto_created(self):\n        books = models.ProductClass.objects.create(\n            name=\"Book\",\n        )\n        self.assertEqual('book', books.slug)\n\n    def test_has_attribute_for_whether_shipping_is_required(self):\n        models.ProductClass.objects.create(\n            name=\"Download\",\n            requires_shipping=False,\n        )\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django import forms\nfrom django.conf import settings\n\nfrom oscar.core.loading import get_model\nfrom oscar.forms.mixins import PhoneNumberMixin\n\nUserAddress = get_model('address', 'useraddress')\n\n\nclass AbstractAddressForm(forms.ModelForm):\n\n    def __init__(self, *args, **kwargs):\n        \"\"\"\n        Set fields in OSCAR_REQUIRED_ADDRESS_FIELDS as required.\n        \"\"\"\n        super().__init__(*args, **kwargs)\n        field_names = (set(self.fields) &\n                       set(settings.OSCAR_REQUIRED_ADDRESS_FIELDS))\n        for field_name in field_names:\n            self.fields[field_name].required = True\n\n\nclass UserAddressForm(PhoneNumberMixin, AbstractAddressForm):\n\n    class Meta:\n        model = UserAddress\n        fields = [\n            'title', 'first_name', 'last_name',\n            'line1', 'line2', 'line3', 'line4',\n            'state', 'postcode', 'country',\n            'phone_number', 'notes',\n        ]\n\n    def __init__(self, user, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.instance.user = user\n",
    "output": "import os\nimport tempfile\nfrom unittest import mock\n\nfrom django.contrib.staticfiles.testing import StaticLiveServerTestCase\nfrom django.test import TestCase, override_settings\n\nfrom oscar.apps.catalogue.abstract_models import MissingProductImage\nfrom oscar.test import factories\n\n\nclass TestProductImages(TestCase):\n\n    def test_images_are_in_consecutive_order(self):\n        product = factories.create_product()\n        for i in range(4):\n            factories.create_product_image(product=product, display_order=i)\n\n        product.images.all()[2].delete()\n\n        for idx, im in enumerate(product.images.all()):\n            self.assertEqual(im.display_order, idx)\n\n    def test_variant_images(self):\n        parent = factories.ProductFactory(structure='parent')\n        variant = factories.create_product(parent=parent)\n        factories.create_product_image(product=variant, caption='Variant Image')\n        all_images = variant.get_all_images()\n        self.assertEquals(all_images.count(), 1)\n        product_image = all_images.first()\n        self.assertEquals(product_image.caption, 'Variant Image')\n\n    def test_variant_images_fallback_to_parent(self):\n        parent = factories.ProductFactory(structure='parent')\n        variant = factories.create_product(parent=parent)\n        factories.create_product_image(product=parent, caption='Parent Product Image')\n        all_images = variant.get_all_images()\n        self.assertEquals(all_images.count(), 1)\n        product_image = all_images.first()\n        self.assertEquals(product_image.caption, 'Parent Product Image')\n\n\nclass TestMissingProductImage(StaticLiveServerTestCase):\n\n    TEMP_MEDIA_ROOT = tempfile.mkdtemp()\n\n    @override_settings(MEDIA_ROOT=TEMP_MEDIA_ROOT)\n    @mock.patch('oscar.apps.catalogue.abstract_models.find')\n    def test_symlink_creates_directories(self, mock_find):\n        # Create a fake empty file to symlink\n        img = tempfile.NamedTemporaryFile(delete=False)\n        img.close()\n\n        mock_find.return_value = img.name\n        # Initialise the class with a nested path\n        path = 'image/path.jpg'\n        MissingProductImage(path)\n        # Check that the directory exists\n        image_path = os.path.join(self.TEMP_MEDIA_ROOT, path)\n        self.assertTrue(os.path.exists(image_path))\n\n        # Clean up\n        for f in [image_path, img.name]:\n            os.unlink(f)\n        for d in [os.path.join(self.TEMP_MEDIA_ROOT, 'image'), self.TEMP_MEDIA_ROOT]:\n            os.rmdir(d)\n\n    @mock.patch('oscar.apps.catalogue.abstract_models.MissingProductImage.symlink_missing_image')\n    def test_no_symlink_when_no_media_root(self, mock_symlink):\n        MissingProductImage()\n        self.assertEqual(mock_symlink.call_count, 0)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django import forms\nfrom django.conf import settings\n\nfrom oscar.core.loading import get_model\nfrom oscar.forms.mixins import PhoneNumberMixin\n\nUserAddress = get_model('address', 'useraddress')\n\n\nclass AbstractAddressForm(forms.ModelForm):\n\n    def __init__(self, *args, **kwargs):\n        \"\"\"\n        Set fields in OSCAR_REQUIRED_ADDRESS_FIELDS as required.\n        \"\"\"\n        super().__init__(*args, **kwargs)\n        field_names = (set(self.fields) &\n                       set(settings.OSCAR_REQUIRED_ADDRESS_FIELDS))\n        for field_name in field_names:\n            self.fields[field_name].required = True\n\n\nclass UserAddressForm(PhoneNumberMixin, AbstractAddressForm):\n\n    class Meta:\n        model = UserAddress\n        fields = [\n            'title', 'first_name', 'last_name',\n            'line1', 'line2', 'line3', 'line4',\n            'state', 'postcode', 'country',\n            'phone_number', 'notes',\n        ]\n\n    def __init__(self, user, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.instance.user = user\n",
    "output": "from django.test import TestCase\nfrom django.test.utils import override_settings\n\nfrom oscar.apps.catalogue.search_handlers import (\n    get_product_search_handler_class,\n)\n\n\nclass TestSearchHandler(object):\n    pass\n\n\nclass TestProductSearchHandlerSetting(TestCase):\n    def test_product_search_handler_setting(self):\n        \"\"\"\n        Test that the `OSCAR_PRODUCT_SEARCH_HANDLER` setting, when set,\n        dictates the return value of the `get_product_search_handler_class`\n        function.\n        \"\"\"\n        handler_override = 'tests.integration.catalogue.test_product_search_handler_setting.TestSearchHandler'\n        with override_settings(OSCAR_PRODUCT_SEARCH_HANDLER=handler_override):\n            handler_class = get_product_search_handler_class()\n\n        self.assertEqual(handler_class, TestSearchHandler)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django import forms\nfrom django.conf import settings\n\nfrom oscar.core.loading import get_model\nfrom oscar.forms.mixins import PhoneNumberMixin\n\nUserAddress = get_model('address', 'useraddress')\n\n\nclass AbstractAddressForm(forms.ModelForm):\n\n    def __init__(self, *args, **kwargs):\n        \"\"\"\n        Set fields in OSCAR_REQUIRED_ADDRESS_FIELDS as required.\n        \"\"\"\n        super().__init__(*args, **kwargs)\n        field_names = (set(self.fields) &\n                       set(settings.OSCAR_REQUIRED_ADDRESS_FIELDS))\n        for field_name in field_names:\n            self.fields[field_name].required = True\n\n\nclass UserAddressForm(PhoneNumberMixin, AbstractAddressForm):\n\n    class Meta:\n        model = UserAddress\n        fields = [\n            'title', 'first_name', 'last_name',\n            'line1', 'line2', 'line3', 'line4',\n            'state', 'postcode', 'country',\n            'phone_number', 'notes',\n        ]\n\n    def __init__(self, user, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.instance.user = user\n",
    "output": ""
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django import forms\nfrom django.conf import settings\n\nfrom oscar.core.loading import get_model\nfrom oscar.forms.mixins import PhoneNumberMixin\n\nUserAddress = get_model('address', 'useraddress')\n\n\nclass AbstractAddressForm(forms.ModelForm):\n\n    def __init__(self, *args, **kwargs):\n        \"\"\"\n        Set fields in OSCAR_REQUIRED_ADDRESS_FIELDS as required.\n        \"\"\"\n        super().__init__(*args, **kwargs)\n        field_names = (set(self.fields) &\n                       set(settings.OSCAR_REQUIRED_ADDRESS_FIELDS))\n        for field_name in field_names:\n            self.fields[field_name].required = True\n\n\nclass UserAddressForm(PhoneNumberMixin, AbstractAddressForm):\n\n    class Meta:\n        model = UserAddress\n        fields = [\n            'title', 'first_name', 'last_name',\n            'line1', 'line2', 'line3', 'line4',\n            'state', 'postcode', 'country',\n            'phone_number', 'notes',\n        ]\n\n    def __init__(self, user, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.instance.user = user\n",
    "output": "from django.test import TestCase\n\nfrom oscar.apps.catalogue.reviews import forms\nfrom oscar.test.factories import UserFactory, create_product\n\n\nclass TestReviewForm(TestCase):\n\n    def test_cleans_title(self):\n        product = create_product()\n        reviewer = UserFactory()\n        data = {\n            'title': '  This product is lovely',\n            'body': 'I really like this cheese',\n            'score': 0,\n            'name': 'JR Hartley',\n            'email': 'hartley@example.com'\n        }\n        form = forms.ProductReviewForm(\n            product=product, user=reviewer, data=data)\n\n        assert form.is_valid()\n\n        review = form.save()\n        assert review.title == \"This product is lovely\"\n\n    def test_validates_empty_data_correctly(self):\n        form = forms.ProductReviewForm(product=None, user=None, data={})\n        assert form.is_valid() is False\n\n    def test_validates_correctly(self):\n        data = {\n            'title': 'This product is lovely',\n            'body': 'I really like this cheese',\n            'score': 0,\n            'name': 'JR Hartley',\n            'email': 'hartley@example.com'\n        }\n        form = forms.ProductReviewForm(product=None, user=None, data=data)\n        assert form.is_valid()\n\n\nclass TestVoteForm(TestCase):\n\n    def setUp(self):\n        self.product = create_product()\n        self.reviewer = UserFactory()\n        self.voter = UserFactory()\n        self.review = self.product.reviews.create(\n            title='This is nice',\n            score=3,\n            body=\"This is the body\",\n            user=self.reviewer)\n\n    def test_allows_real_users_to_vote(self):\n        form = forms.VoteForm(self.review, self.voter, data={'delta': 1})\n        self.assertTrue(form.is_valid())\n\n    def test_prevents_users_from_voting_more_than_once(self):\n        self.review.vote_up(self.voter)\n        form = forms.VoteForm(self.review, self.voter, data={'delta': 1})\n        self.assertFalse(form.is_valid())\n        self.assertTrue(len(form.errors['__all__']) > 0)\n\n    def test_prevents_users_voting_on_their_own_reviews(self):\n        form = forms.VoteForm(self.review, self.reviewer, data={'delta': 1})\n        self.assertFalse(form.is_valid())\n        self.assertTrue(len(form.errors['__all__']) > 0)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django import forms\nfrom django.conf import settings\n\nfrom oscar.core.loading import get_model\nfrom oscar.forms.mixins import PhoneNumberMixin\n\nUserAddress = get_model('address', 'useraddress')\n\n\nclass AbstractAddressForm(forms.ModelForm):\n\n    def __init__(self, *args, **kwargs):\n        \"\"\"\n        Set fields in OSCAR_REQUIRED_ADDRESS_FIELDS as required.\n        \"\"\"\n        super().__init__(*args, **kwargs)\n        field_names = (set(self.fields) &\n                       set(settings.OSCAR_REQUIRED_ADDRESS_FIELDS))\n        for field_name in field_names:\n            self.fields[field_name].required = True\n\n\nclass UserAddressForm(PhoneNumberMixin, AbstractAddressForm):\n\n    class Meta:\n        model = UserAddress\n        fields = [\n            'title', 'first_name', 'last_name',\n            'line1', 'line2', 'line3', 'line4',\n            'state', 'postcode', 'country',\n            'phone_number', 'notes',\n        ]\n\n    def __init__(self, user, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.instance.user = user\n",
    "output": "from django.test import TestCase\nfrom django.core.exceptions import ValidationError\n\nfrom oscar.core.compat import get_user_model\nfrom oscar.apps.catalogue.reviews import models\nfrom oscar.test.factories import create_product\nfrom oscar.test.factories import UserFactory\n\nUser = get_user_model()\n\n\nclass TestAnAnonymousReview(TestCase):\n\n    def setUp(self):\n        self.product = create_product()\n        self.data = {\n            'product': self.product,\n            'title': 'This product is lovely',\n            'body': 'I really like this cheese',\n            'score': 0,\n            'name': 'JR Hartley',\n            'email': 'hartley@example.com'\n        }\n\n    def review(self, **kwargs):\n        if kwargs:\n            data = self.data.copy()\n            data.update(kwargs)\n        else:\n            data = self.data\n        return models.ProductReview(**data)\n\n    def test_can_be_created(self):\n        review = self.review()\n        review.full_clean()\n\n    def test_requires_a_title(self):\n        review = self.review(title=\"\")\n        self.assertRaises(ValidationError, review.full_clean)\n\n    def test_requires_a_body(self):\n        review = self.review(body=\"\")\n        self.assertRaises(ValidationError, review.full_clean)\n\n    def test_requires_a_name(self):\n        review = self.review(name=\"\")\n        self.assertRaises(ValidationError, review.full_clean)\n\n    def test_requires_an_email_address(self):\n        review = self.review(email=\"\")\n        self.assertRaises(ValidationError, review.full_clean)\n\n    def test_requires_non_whitespace_title(self):\n        review = self.review(title=\"    \")\n        self.assertRaises(ValidationError, review.full_clean)\n\n    def test_starts_with_no_votes(self):\n        review = self.review()\n        review.save()\n        self.assertFalse(review.has_votes)\n        self.assertEqual(0, review.num_up_votes)\n        self.assertEqual(0, review.num_down_votes)\n\n    def test_has_reviewer_name_property(self):\n        review = self.review(name=\"Dave\")\n        self.assertEqual(\"Dave\", review.reviewer_name)\n\n    def test_review_moderate_setting_false(self):\n        with self.settings(OSCAR_MODERATE_REVIEWS=False):\n            review = self.review()\n            self.assertEqual(1, review.status)\n\n    def test_review_moderate_setting_true(self):\n        with self.settings(OSCAR_MODERATE_REVIEWS=True):\n            review = self.review()\n            self.assertEqual(0, review.status)\n\n\nclass TestAUserReview(TestCase):\n\n    def setUp(self):\n        self.product = create_product()\n        self.user = UserFactory(first_name=\"Tom\", last_name=\"Thumb\")\n        self.data = {\n            'product': self.product,\n            'title': 'This product is lovely',\n            'body': 'I really like this cheese',\n            'score': 0,\n            'user': self.user\n        }\n\n    def review(self, **kwargs):\n        if kwargs:\n            data = self.data.copy()\n            data.update(kwargs)\n        else:\n            data = self.data\n        return models.ProductReview(**data)\n\n    def test_can_be_created(self):\n        review = self.review()\n        review.full_clean()\n\n    def test_requires_a_title(self):\n        review = self.review(title=\"\")\n        self.assertRaises(ValidationError, review.full_clean)\n\n    def test_requires_a_body(self):\n        review = self.review(body=\"\")\n        self.assertRaises(ValidationError, review.full_clean)\n\n    def test_has_reviewer_name_property(self):\n        review = self.review()\n        self.assertEqual(\"Tom Thumb\", review.reviewer_name)\n\n    def test_num_approved_reviews(self):\n        review = self.review()\n        review.save()\n        self.assertEqual(self.product.num_approved_reviews, 1)\n        self.assertEqual(self.product.reviews.approved().first(), review)\n\n    def test_review_moderate_setting_false(self):\n        with self.settings(OSCAR_MODERATE_REVIEWS=False):\n            review = self.review()\n            self.assertEqual(1, review.status)\n\n    def test_review_moderate_setting_true(self):\n        with self.settings(OSCAR_MODERATE_REVIEWS=True):\n            review = self.review()\n            self.assertEqual(0, review.status)\n\n\nclass TestVotingOnAReview(TestCase):\n\n    def setUp(self):\n        self.product = create_product()\n        self.user = UserFactory()\n        self.voter = UserFactory()\n        self.review = self.product.reviews.create(\n            title='This is nice',\n            score=3,\n            body=\"This is the body\",\n            user=self.user)\n\n    def test_updates_totals_for_upvote(self):\n        self.review.vote_up(self.voter)\n        self.assertTrue(self.review.has_votes)\n        self.assertEqual(1, self.review.total_votes)\n        self.assertEqual(1, self.review.delta_votes)\n\n    def test_updates_totals_for_downvote(self):\n        self.review.vote_down(self.voter)\n        self.assertTrue(self.review.has_votes)\n        self.assertEqual(1, self.review.total_votes)\n        self.assertEqual(-1, self.review.delta_votes)\n\n    def test_is_permitted_for_normal_user(self):\n        is_allowed, reason = self.review.can_user_vote(self.voter)\n        self.assertTrue(is_allowed, reason)\n\n    def test_is_not_permitted_for_reviewer(self):\n        is_allowed, reason = self.review.can_user_vote(self.user)\n        self.assertFalse(is_allowed, reason)\n\n    def test_is_not_permitted_for_previous_voter(self):\n        self.review.vote_up(self.voter)\n        is_allowed, reason = self.review.can_user_vote(self.voter)\n        self.assertFalse(is_allowed, reason)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django import forms\nfrom django.conf import settings\n\nfrom oscar.core.loading import get_model\nfrom oscar.forms.mixins import PhoneNumberMixin\n\nUserAddress = get_model('address', 'useraddress')\n\n\nclass AbstractAddressForm(forms.ModelForm):\n\n    def __init__(self, *args, **kwargs):\n        \"\"\"\n        Set fields in OSCAR_REQUIRED_ADDRESS_FIELDS as required.\n        \"\"\"\n        super().__init__(*args, **kwargs)\n        field_names = (set(self.fields) &\n                       set(settings.OSCAR_REQUIRED_ADDRESS_FIELDS))\n        for field_name in field_names:\n            self.fields[field_name].required = True\n\n\nclass UserAddressForm(PhoneNumberMixin, AbstractAddressForm):\n\n    class Meta:\n        model = UserAddress\n        fields = [\n            'title', 'first_name', 'last_name',\n            'line1', 'line2', 'line3', 'line4',\n            'state', 'postcode', 'country',\n            'phone_number', 'notes',\n        ]\n\n    def __init__(self, user, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.instance.user = user\n",
    "output": ""
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django import forms\nfrom django.conf import settings\n\nfrom oscar.core.loading import get_model\nfrom oscar.forms.mixins import PhoneNumberMixin\n\nUserAddress = get_model('address', 'useraddress')\n\n\nclass AbstractAddressForm(forms.ModelForm):\n\n    def __init__(self, *args, **kwargs):\n        \"\"\"\n        Set fields in OSCAR_REQUIRED_ADDRESS_FIELDS as required.\n        \"\"\"\n        super().__init__(*args, **kwargs)\n        field_names = (set(self.fields) &\n                       set(settings.OSCAR_REQUIRED_ADDRESS_FIELDS))\n        for field_name in field_names:\n            self.fields[field_name].required = True\n\n\nclass UserAddressForm(PhoneNumberMixin, AbstractAddressForm):\n\n    class Meta:\n        model = UserAddress\n        fields = [\n            'title', 'first_name', 'last_name',\n            'line1', 'line2', 'line3', 'line4',\n            'state', 'postcode', 'country',\n            'phone_number', 'notes',\n        ]\n\n    def __init__(self, user, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.instance.user = user\n",
    "output": "from decimal import Decimal as D\nfrom unittest import mock\n\nfrom django.test import TestCase, override_settings\nfrom django.conf import settings\n\nfrom oscar.apps.basket import forms, formsets\nfrom oscar.apps.offer.utils import Applicator\nfrom oscar.core.loading import get_model\nfrom oscar.test import factories\nfrom oscar.test.basket import add_product\nfrom oscar.test.factories import (\n    BenefitFactory, ConditionalOfferFactory, ConditionFactory, RangeFactory)\n\n\nLine = get_model('basket', 'Line')\n\n\nclass TestBasketLineForm(TestCase):\n\n    def setUp(self):\n        self.applicator = Applicator()\n        rng = RangeFactory(includes_all_products=True)\n        self.condition = ConditionFactory(\n            range=rng, type=ConditionFactory._meta.model.VALUE,\n            value=D('100'), proxy_class=None)\n        self.benefit = BenefitFactory(\n            range=rng, type=BenefitFactory._meta.model.FIXED,\n            value=D('10'), max_affected_items=1)\n        self.basket = factories.create_basket()\n        self.line = self.basket.all_lines()[0]\n\n    def mock_availability_return_value(self, is_available, reason=''):\n        policy = self.line.purchase_info.availability\n        policy.is_purchase_permitted = mock.MagicMock(\n            return_value=(is_available, reason))\n\n    def build_form(self, quantity=None):\n        if quantity is None:\n            quantity = self.line.quantity\n        return forms.BasketLineForm(\n            strategy=self.basket.strategy,\n            data={'quantity': quantity},\n            instance=self.line)\n\n    def test_enforces_availability_policy_for_valid_quantities(self):\n        self.mock_availability_return_value(True)\n        form = self.build_form()\n        self.assertTrue(form.is_valid())\n\n    def test_enforces_availability_policy_for_invalid_quantities(self):\n        self.mock_availability_return_value(False, \"Some reason\")\n        form = self.build_form()\n        self.assertFalse(form.is_valid())\n        self.assertEqual(\n            form.errors['quantity'], ['Some reason'])\n\n    def test_skips_availability_policy_for_zero_quantities(self):\n        self.mock_availability_return_value(True)\n        form = self.build_form(quantity=0)\n        self.assertTrue(form.is_valid())\n\n    def test_enforces_max_line_quantity_for_new_product(self):\n        invalid_qty = settings.OSCAR_MAX_BASKET_QUANTITY_THRESHOLD + 1\n        form = self.build_form(quantity=invalid_qty)\n        self.assertFalse(form.is_valid())\n\n    @override_settings(OSCAR_MAX_BASKET_QUANTITY_THRESHOLD=10)\n    def test_enforce_max_line_quantity_for_existing_product(self):\n        self.basket.flush()\n        product = factories.create_product(num_in_stock=20)\n        add_product(self.basket, D('100'), 4, product)\n        self.line = self.basket.all_lines()[0]\n        form = self.build_form(quantity=6)\n        self.assertTrue(form.is_valid())\n        form.save()\n        form = self.build_form(quantity=11)\n        self.assertFalse(form.is_valid())\n\n    def test_line_quantity_max_attribute_per_num_available(self):\n        self.basket.flush()\n        product = factories.create_product(num_in_stock=20)\n        add_product(self.basket, D('100'), 4, product)\n        self.line = self.basket.all_lines()[0]\n        form = self.build_form()\n        self.assertIn('max=\"20\"', str(form['quantity']))\n\n    @override_settings(OSCAR_MAX_BASKET_QUANTITY_THRESHOLD=10)\n    def test_line_quantity_max_attribute_per_basket_threshold(self):\n        self.basket.flush()\n        product = factories.create_product(num_in_stock=20)\n        add_product(self.basket, D('100'), 4, product)\n        self.line = self.basket.all_lines()[0]\n        form = self.build_form()\n        self.assertIn('max=\"6\"', str(form['quantity']))\n\n    def test_basketline_formset_ordering(self):\n        # when we use a unordered queryset in the Basketlineformset, the\n        # discounts will be lost because django will query the database\n        # again to enforce ordered results\n        add_product(self.basket, D('100'), 5)\n        offer = ConditionalOfferFactory(\n            pk=1, condition=self.condition, benefit=self.benefit)\n\n        # now we force an unordered queryset so we can see that our discounts\n        # will disappear due to a new ordering query (see django/forms/model.py)\n        default_line_ordering = Line._meta.ordering\n        Line._meta.ordering = []\n        self.basket._lines = self.basket.lines.all()\n\n        self.applicator.apply_offers(self.basket, [offer])\n        formset = formsets.BasketLineFormSet(\n            strategy=self.basket.strategy,\n            queryset=self.basket.all_lines())\n\n        # the discount is in all_lines():\n        self.assertTrue(self.basket.all_lines()[0].has_discount)\n\n        # but not in the formset\n        self.assertFalse(formset.forms[0].instance.has_discount)\n\n        # Restore the ordering on the line\n        Line._meta.ordering = default_line_ordering\n\n        # clear the cached lines and apply the offer again\n        self.basket._lines = None\n        self.applicator.apply_offers(self.basket, [offer])\n\n        formset = formsets.BasketLineFormSet(\n            strategy=self.basket.strategy,\n            queryset=self.basket.all_lines())\n        self.assertTrue(formset.forms[0].instance.has_discount)\n\n\nclass TestAddToBasketForm(TestCase):\n\n    def test_allows_a_product_quantity_to_be_increased(self):\n        basket = factories.create_basket()\n        product = basket.all_lines()[0].product\n\n        # Add more of the same product\n        data = {'quantity': 1}\n        form = forms.AddToBasketForm(\n            basket=basket, product=product, data=data)\n        self.assertTrue(form.is_valid())\n\n    def test_checks_whether_passed_product_id_matches_a_real_product(self):\n        basket = factories.create_basket()\n        product = basket.all_lines()[0].product\n\n        # Add more of the same product\n        data = {'quantity': -1}\n        form = forms.AddToBasketForm(\n            basket=basket, product=product, data=data)\n        self.assertFalse(form.is_valid())\n\n    def test_checks_if_purchase_is_permitted(self):\n        basket = factories.BasketFactory()\n        product = factories.ProductFactory()\n\n        # Build a 4-level mock monster so we can force the return value of\n        # whether the product is available to buy. This is a serious code smell\n        # and needs to be remedied.\n        info = mock.Mock()\n        info.availability = mock.Mock()\n        info.availability.is_purchase_permitted = mock.Mock(\n            return_value=(False, \"Not on your nelly!\"))\n        basket.strategy.fetch_for_product = mock.Mock(\n            return_value=info)\n\n        data = {'quantity': 1}\n        form = forms.AddToBasketForm(\n            basket=basket, product=product, data=data)\n        self.assertFalse(form.is_valid())\n        self.assertEqual('Not on your nelly!', form.errors['__all__'][0])\n\n    def test_mixed_currency_baskets_are_not_permitted(self):\n        # Ensure basket is one currency\n        basket = mock.Mock()\n        basket.currency = 'GBP'\n        basket.num_items = 1\n\n        # Ensure new product has different currency\n        info = mock.Mock()\n        info.price.currency = 'EUR'\n        basket.strategy.fetch_for_product = mock.Mock(\n            return_value=info)\n\n        product = factories.ProductFactory()\n\n        data = {'quantity': 1}\n        form = forms.AddToBasketForm(\n            basket=basket, product=product, data=data)\n        self.assertFalse(form.is_valid())\n\n    def test_cannot_add_a_product_without_price(self):\n        basket = factories.BasketFactory()\n        product = factories.create_product(price=None)\n\n        data = {'quantity': 1}\n        form = forms.AddToBasketForm(\n            basket=basket, product=product, data=data)\n        self.assertFalse(form.is_valid())\n        self.assertEqual(\n            form.errors['__all__'][0],\n            'This product cannot be added to the basket because a price '\n            'could not be determined for it.',\n        )\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django import forms\nfrom django.conf import settings\n\nfrom oscar.core.loading import get_model\nfrom oscar.forms.mixins import PhoneNumberMixin\n\nUserAddress = get_model('address', 'useraddress')\n\n\nclass AbstractAddressForm(forms.ModelForm):\n\n    def __init__(self, *args, **kwargs):\n        \"\"\"\n        Set fields in OSCAR_REQUIRED_ADDRESS_FIELDS as required.\n        \"\"\"\n        super().__init__(*args, **kwargs)\n        field_names = (set(self.fields) &\n                       set(settings.OSCAR_REQUIRED_ADDRESS_FIELDS))\n        for field_name in field_names:\n            self.fields[field_name].required = True\n\n\nclass UserAddressForm(PhoneNumberMixin, AbstractAddressForm):\n\n    class Meta:\n        model = UserAddress\n        fields = [\n            'title', 'first_name', 'last_name',\n            'line1', 'line2', 'line3', 'line4',\n            'state', 'postcode', 'country',\n            'phone_number', 'notes',\n        ]\n\n    def __init__(self, user, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.instance.user = user\n",
    "output": "from django.http import HttpResponse\nfrom django.test import TestCase\nfrom django.test.client import RequestFactory\nfrom django.contrib.auth.models import AnonymousUser\n\nfrom oscar.apps.basket import middleware\n\n\nclass TestBasketMiddleware(TestCase):\n\n    @staticmethod\n    def get_response_for_test(request):\n        return HttpResponse()\n\n    def setUp(self):\n        self.middleware = middleware.BasketMiddleware(self.get_response_for_test)\n        self.request = RequestFactory().get('/')\n        self.request.user = AnonymousUser()\n        self.middleware(self.request)\n\n    def test_basket_is_attached_to_request(self):\n        self.assertTrue(hasattr(self.request, 'basket'))\n\n    def test_strategy_is_attached_to_basket(self):\n        self.assertTrue(hasattr(self.request.basket, 'strategy'))\n\n    def test_strategy_is_attached_to_request(self):\n        self.assertTrue(hasattr(self.request, 'strategy'))\n\n    def test_get_cookie_basket_handles_invalid_signatures(self):\n        request_factory = RequestFactory()\n        request_factory.cookies['oscar_open_basket'] = '1:NOTAVALIDHASH'\n        request = request_factory.get('/')\n        request.cookies_to_delete = []\n\n        cookie_basket = self.middleware.get_cookie_basket(\"oscar_open_basket\", request, None)\n\n        self.assertEqual(None, cookie_basket)\n        self.assertIn(\"oscar_open_basket\", request.cookies_to_delete)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django import forms\nfrom django.conf import settings\n\nfrom oscar.core.loading import get_model\nfrom oscar.forms.mixins import PhoneNumberMixin\n\nUserAddress = get_model('address', 'useraddress')\n\n\nclass AbstractAddressForm(forms.ModelForm):\n\n    def __init__(self, *args, **kwargs):\n        \"\"\"\n        Set fields in OSCAR_REQUIRED_ADDRESS_FIELDS as required.\n        \"\"\"\n        super().__init__(*args, **kwargs)\n        field_names = (set(self.fields) &\n                       set(settings.OSCAR_REQUIRED_ADDRESS_FIELDS))\n        for field_name in field_names:\n            self.fields[field_name].required = True\n\n\nclass UserAddressForm(PhoneNumberMixin, AbstractAddressForm):\n\n    class Meta:\n        model = UserAddress\n        fields = [\n            'title', 'first_name', 'last_name',\n            'line1', 'line2', 'line3', 'line4',\n            'state', 'postcode', 'country',\n            'phone_number', 'notes',\n        ]\n\n    def __init__(self, user, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.instance.user = user\n",
    "output": "# -*- coding: utf-8 -*-\nfrom decimal import Decimal as D\n\nfrom django.test import TestCase\n\nfrom oscar.apps.basket.models import Basket\nfrom oscar.apps.catalogue.models import Option\nfrom oscar.apps.partner import availability, prices, strategy\nfrom oscar.test import factories\nfrom oscar.test.factories import (\n    BasketFactory, BasketLineAttributeFactory, OptionFactory, ProductFactory)\n\n\nclass TestANewBasket(TestCase):\n\n    def setUp(self):\n        self.basket = Basket()\n        self.basket.strategy = strategy.Default()\n\n    def test_has_zero_lines(self):\n        self.assertEqual(0, self.basket.num_lines)\n\n    def test_has_zero_items(self):\n        self.assertEqual(0, self.basket.num_items)\n\n    def test_doesnt_contain_vouchers(self):\n        self.assertFalse(self.basket.contains_a_voucher)\n\n    def test_can_be_edited(self):\n        self.assertTrue(self.basket.can_be_edited)\n\n    def test_is_empty(self):\n        self.assertTrue(self.basket.is_empty)\n\n    def test_is_not_submitted(self):\n        self.assertFalse(self.basket.is_submitted)\n\n    def test_has_no_applied_offers(self):\n        self.assertEqual({}, self.basket.applied_offers())\n\n\nclass TestBasketLine(TestCase):\n\n    def test_description(self):\n        basket = BasketFactory()\n        product = ProductFactory(title=\"A product\")\n        basket.add_product(product)\n\n        line = basket.lines.first()\n        self.assertEqual(line.description, \"A product\")\n\n    def test_description_with_attributes(self):\n        basket = BasketFactory()\n        product = ProductFactory(title=\"A product\")\n        basket.add_product(product)\n\n        line = basket.lines.first()\n        BasketLineAttributeFactory(\n            line=line, value='\\u2603', option__name='with')\n        self.assertEqual(line.description, \"A product (with = '\\u2603')\")\n\n    def test_create_line_reference(self):\n        basket = BasketFactory()\n        product = ProductFactory(title=\"A product\")\n        option = OptionFactory(name=\"product_option\", code=\"product_option\")\n        option_product = ProductFactory(title='Asunci\u00f3n')\n        options = [{'option': option, 'value': option_product}]\n        basket.add_product(product, options=options)\n\n    def test_basket_lines_queryset_is_ordered(self):\n        # This is needed to make sure a formset is not performing the query\n        # again with an order_by clause (losing all calculated discounts)\n        basket = BasketFactory()\n        product = ProductFactory(title=\"A product\")\n        another_product = ProductFactory(title=\"Another product\")\n        basket.add_product(product)\n        basket.add_product(another_product)\n        queryset = basket.all_lines()\n        self.assertTrue(queryset.ordered)\n\n    def test_line_tax_for_zero_tax_strategies(self):\n        basket = Basket()\n        basket.strategy = strategy.Default()\n        product = factories.create_product()\n        # Tax for the default strategy will be 0\n        factories.create_stockrecord(\n            product, price_excl_tax=D('75.00'), num_in_stock=10)\n        basket.add(product, 1)\n\n        self.assertEqual(basket.lines.first().line_tax, D('0'))\n\n    def test_line_tax_for_unknown_tax_strategies(self):\n\n        class UnknownTaxStrategy(strategy.Default):\n            \"\"\" A test strategy where the tax is not known \"\"\"\n\n            def pricing_policy(self, product, stockrecord):\n                return prices.FixedPrice('GBP', stockrecord.price_excl_tax, tax=None)\n\n        basket = Basket()\n        basket.strategy = UnknownTaxStrategy()\n        product = factories.create_product()\n        factories.create_stockrecord(product, num_in_stock=10)\n        basket.add(product, 1)\n\n        self.assertEqual(basket.lines.first().line_tax, None)\n\n\nclass TestAddingAProductToABasket(TestCase):\n\n    def setUp(self):\n        self.basket = Basket()\n        self.basket.strategy = strategy.Default()\n        self.product = factories.create_product()\n        self.record = factories.create_stockrecord(\n            currency='GBP',\n            product=self.product, price_excl_tax=D('10.00'))\n        self.purchase_info = factories.create_purchase_info(self.record)\n        self.basket.add(self.product)\n\n    def test_creates_a_line(self):\n        self.assertEqual(1, self.basket.num_lines)\n\n    def test_sets_line_prices(self):\n        line = self.basket.lines.all()[0]\n        self.assertEqual(line.price_incl_tax, self.purchase_info.price.incl_tax)\n        self.assertEqual(line.price_excl_tax, self.purchase_info.price.excl_tax)\n\n    def test_adding_negative_quantity(self):\n        self.assertEqual(1, self.basket.num_lines)\n        self.basket.add(self.product, quantity=4)\n        self.assertEqual(5, self.basket.line_quantity(self.product, self.record))\n        self.basket.add(self.product, quantity=-10)\n        self.assertEqual(0, self.basket.line_quantity(self.product, self.record))\n\n    def test_means_another_currency_product_cannot_be_added(self):\n        product = factories.create_product()\n        factories.create_stockrecord(\n            currency='USD', product=product, price_excl_tax=D('20.00'))\n        with self.assertRaises(ValueError):\n            self.basket.add(product)\n\n    def test_cannot_add_a_product_without_price(self):\n        product = factories.create_product(price=None)\n        with self.assertRaises(ValueError):\n            self.basket.add(product)\n\n\nclass TestANonEmptyBasket(TestCase):\n\n    def setUp(self):\n        self.basket = Basket()\n        self.basket.strategy = strategy.Default()\n        self.product = factories.create_product()\n        self.record = factories.create_stockrecord(\n            self.product, price_excl_tax=D('10.00'))\n        self.purchase_info = factories.create_purchase_info(self.record)\n        self.basket.add(self.product, 10)\n\n    def test_can_be_flushed(self):\n        self.basket.flush()\n        self.assertEqual(self.basket.num_items, 0)\n\n    def test_returns_correct_product_quantity(self):\n        self.assertEqual(10, self.basket.product_quantity(\n            self.product))\n\n    def test_returns_correct_line_quantity_for_existing_product_and_stockrecord(self):\n        self.assertEqual(10, self.basket.line_quantity(\n            self.product, self.record))\n\n    def test_returns_zero_line_quantity_for_alternative_stockrecord(self):\n        record = factories.create_stockrecord(\n            self.product, price_excl_tax=D('5.00'))\n        self.assertEqual(0, self.basket.line_quantity(\n            self.product, record))\n\n    def test_returns_zero_line_quantity_for_missing_product_and_stockrecord(self):\n        product = factories.create_product()\n        record = factories.create_stockrecord(\n            product, price_excl_tax=D('5.00'))\n        self.assertEqual(0, self.basket.line_quantity(\n            product, record))\n\n    def test_returns_correct_quantity_for_existing_product_and_stockrecord_and_options(self):\n        product = factories.create_product()\n        record = factories.create_stockrecord(\n            product, price_excl_tax=D('5.00'))\n        option = Option.objects.create(name=\"Message\")\n        options = [{\"option\": option, \"value\": \"2\"}]\n\n        self.basket.add(product, options=options)\n        self.assertEqual(0, self.basket.line_quantity(\n            product, record))\n        self.assertEqual(1, self.basket.line_quantity(\n            product, record, options))\n\n    def test_total_sums_product_totals(self):\n        product = factories.create_product()\n        factories.create_stockrecord(\n            product, price_excl_tax=D('5.00'))\n        self.basket.add(product, 1)\n        self.assertEqual(self.basket.total_excl_tax, 105)\n\n    def test_totals_for_free_products(self):\n        basket = Basket()\n        basket.strategy = strategy.Default()\n        # Add a zero-priced product to the basket\n        product = factories.create_product()\n        factories.create_stockrecord(\n            product, price_excl_tax=D('0.00'), num_in_stock=10)\n        basket.add(product, 1)\n\n        self.assertEqual(basket.lines.count(), 1)\n        self.assertEqual(basket.total_excl_tax, 0)\n        self.assertEqual(basket.total_incl_tax, 0)\n\n    def test_basket_prices_calculation_for_unavailable_pricing(self):\n        new_product = factories.create_product()\n        factories.create_stockrecord(\n            new_product, price_excl_tax=D('5.00'))\n        self.basket.add(new_product, 1)\n\n        class UnavailableProductStrategy(strategy.Default):\n            \"\"\" A test strategy that makes a specific product unavailable \"\"\"\n\n            def availability_policy(self, product, stockrecord):\n                if product == new_product:\n                    return availability.Unavailable()\n                return super().availability_policy(product, stockrecord)\n\n            def pricing_policy(self, product, stockrecord):\n                if product == new_product:\n                    return prices.Unavailable()\n                return super().pricing_policy(product, stockrecord)\n\n        self.basket.strategy = UnavailableProductStrategy()\n        line = self.basket.all_lines()[1]\n        self.assertEqual(line.get_warning(), \"'D\\xf9\\uff4d\\u03fb\\u03d2 title' is no longer available\")\n        self.assertIsNone(line.line_price_excl_tax)\n        self.assertIsNone(line.line_price_incl_tax)\n        self.assertIsNone(line.line_price_excl_tax_incl_discounts)\n        self.assertIsNone(line.line_price_incl_tax_incl_discounts)\n        self.assertIsNone(line.line_tax)\n        self.assertEqual(self.basket.total_excl_tax, 100)\n        self.assertEqual(self.basket.total_incl_tax, 100)\n        self.assertEqual(self.basket.total_excl_tax_excl_discounts, 100)\n        self.assertEqual(self.basket.total_incl_tax_excl_discounts, 100)\n\n    def test_max_allowed_quantity(self):\n        self.basket.add_product(self.product, quantity=3)\n\n        # max allowed here is 7 (20-10+3)\n        with self.settings(OSCAR_MAX_BASKET_QUANTITY_THRESHOLD=20):\n            max_allowed, basket_threshold = self.basket.max_allowed_quantity()\n            self.assertEqual(max_allowed, 7)\n            self.assertEqual(basket_threshold, 20)\n\n        # but we can also completely disable the threshold\n        with self.settings(OSCAR_MAX_BASKET_QUANTITY_THRESHOLD=None):\n            max_allowed, basket_threshold = self.basket.max_allowed_quantity()\n            self.assertEqual(max_allowed, None)\n            self.assertEqual(basket_threshold, None)\n\n    def test_is_quantity_allowed(self):\n        with self.settings(OSCAR_MAX_BASKET_QUANTITY_THRESHOLD=20):\n            # 7 or below is possible\n            allowed, message = self.basket.is_quantity_allowed(qty=7)\n            self.assertTrue(allowed)\n            self.assertIsNone(message)\n            # but above it's not\n            allowed, message = self.basket.is_quantity_allowed(qty=11)\n            self.assertFalse(allowed)\n            self.assertIsNotNone(message)\n\n        with self.settings(OSCAR_MAX_BASKET_QUANTITY_THRESHOLD=None):\n            # with the treshold disabled all quantities are possible\n            allowed, message = self.basket.is_quantity_allowed(qty=7)\n            self.assertTrue(allowed)\n            self.assertIsNone(message)\n            allowed, message = self.basket.is_quantity_allowed(qty=5000)\n            self.assertTrue(allowed)\n            self.assertIsNone(message)\n\n\nclass TestMergingTwoBaskets(TestCase):\n\n    def setUp(self):\n        self.product = factories.create_product()\n        self.record = factories.create_stockrecord(\n            self.product, price_excl_tax=D('10.00'))\n        self.purchase_info = factories.create_purchase_info(self.record)\n\n        self.main_basket = Basket()\n        self.main_basket.strategy = strategy.Default()\n        self.main_basket.add(self.product, quantity=2)\n\n        self.merge_basket = Basket()\n        self.merge_basket.strategy = strategy.Default()\n        self.merge_basket.add(self.product, quantity=1)\n\n        self.main_basket.merge(self.merge_basket)\n\n    def test_doesnt_sum_quantities(self):\n        self.assertEqual(1, self.main_basket.num_lines)\n\n    def test_changes_status_of_merge_basket(self):\n        self.assertEqual(Basket.MERGED, self.merge_basket.status)\n\n\nclass TestASubmittedBasket(TestCase):\n\n    def setUp(self):\n        self.basket = Basket()\n        self.basket.strategy = strategy.Default()\n        self.basket.submit()\n\n    def test_has_correct_status(self):\n        self.assertTrue(self.basket.is_submitted)\n\n    def test_can_be_edited(self):\n        self.assertFalse(self.basket.can_be_edited)\n\n\nclass TestMergingAVoucherBasket(TestCase):\n\n    def test_transfers_vouchers_to_new_basket(self):\n        baskets = [factories.BasketFactory(), factories.BasketFactory()]\n        voucher = factories.VoucherFactory()\n        baskets[0].vouchers.add(voucher)\n        baskets[1].merge(baskets[0])\n\n        self.assertEqual(1, baskets[1].vouchers.all().count())\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django import forms\nfrom django.conf import settings\n\nfrom oscar.core.loading import get_model\nfrom oscar.forms.mixins import PhoneNumberMixin\n\nUserAddress = get_model('address', 'useraddress')\n\n\nclass AbstractAddressForm(forms.ModelForm):\n\n    def __init__(self, *args, **kwargs):\n        \"\"\"\n        Set fields in OSCAR_REQUIRED_ADDRESS_FIELDS as required.\n        \"\"\"\n        super().__init__(*args, **kwargs)\n        field_names = (set(self.fields) &\n                       set(settings.OSCAR_REQUIRED_ADDRESS_FIELDS))\n        for field_name in field_names:\n            self.fields[field_name].required = True\n\n\nclass UserAddressForm(PhoneNumberMixin, AbstractAddressForm):\n\n    class Meta:\n        model = UserAddress\n        fields = [\n            'title', 'first_name', 'last_name',\n            'line1', 'line2', 'line3', 'line4',\n            'state', 'postcode', 'country',\n            'phone_number', 'notes',\n        ]\n\n    def __init__(self, user, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.instance.user = user\n",
    "output": "import datetime\n\nfrom django.test import TestCase\n\nfrom oscar.apps.basket.reports import (\n    OpenBasketReportGenerator, SubmittedBasketReportGenerator)\n\n\nclass TestBasketReports(TestCase):\n\n    def test_open_report_doesnt_error(self):\n        data = {\n            'start_date': datetime.date(2012, 5, 1),\n            'end_date': datetime.date(2012, 5, 17),\n            'formatter': 'CSV'\n        }\n        generator = OpenBasketReportGenerator(**data)\n        generator.generate()\n\n    def test_submitted_report_doesnt_error(self):\n        data = {\n            'start_date': datetime.date(2012, 5, 1),\n            'end_date': datetime.date(2012, 5, 17),\n            'formatter': 'CSV'\n        }\n        generator = SubmittedBasketReportGenerator(**data)\n        generator.generate()\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django import forms\nfrom django.conf import settings\n\nfrom oscar.core.loading import get_model\nfrom oscar.forms.mixins import PhoneNumberMixin\n\nUserAddress = get_model('address', 'useraddress')\n\n\nclass AbstractAddressForm(forms.ModelForm):\n\n    def __init__(self, *args, **kwargs):\n        \"\"\"\n        Set fields in OSCAR_REQUIRED_ADDRESS_FIELDS as required.\n        \"\"\"\n        super().__init__(*args, **kwargs)\n        field_names = (set(self.fields) &\n                       set(settings.OSCAR_REQUIRED_ADDRESS_FIELDS))\n        for field_name in field_names:\n            self.fields[field_name].required = True\n\n\nclass UserAddressForm(PhoneNumberMixin, AbstractAddressForm):\n\n    class Meta:\n        model = UserAddress\n        fields = [\n            'title', 'first_name', 'last_name',\n            'line1', 'line2', 'line3', 'line4',\n            'state', 'postcode', 'country',\n            'phone_number', 'notes',\n        ]\n\n    def __init__(self, user, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.instance.user = user\n",
    "output": "\nimport pytest\nfrom oscar.test.factories import (\n    BasketFactory, ConditionalOfferFactory, ProductFactory)\n\n\n@pytest.fixture\ndef filled_basket():\n    basket = BasketFactory()\n    product1 = ProductFactory()\n    product2 = ProductFactory()\n    basket.add_product(product1, quantity=10)\n    basket.add_product(product2, quantity=20)\n    return basket\n\n\n@pytest.mark.django_db\nclass TestLineOfferConsumer(object):\n\n    def test_consumed_no_offer(self, filled_basket):\n        for line in filled_basket.all_lines():\n            assert line.consumer.consumed() == 0\n\n    def test_consumed_with_offer(self, filled_basket):\n        offer1 = ConditionalOfferFactory(name='offer1')\n        offer2 = ConditionalOfferFactory(name='offer2')\n        offer1.exclusive = False\n        offer2.exclusive = False\n\n        for line in filled_basket.all_lines():\n            assert line.consumer.consumed(offer1) == 0\n            assert line.consumer.consumed(offer2) == 0\n\n        line1 = filled_basket.all_lines()[0]\n        line2 = filled_basket.all_lines()[1]\n\n        line1.consumer.consume(1, offer1)\n        assert line1.consumer.consumed() == 1\n        assert line1.consumer.consumed(offer1) == 1\n        assert line1.consumer.consumed(offer2) == 0\n\n        line1.consumer.consume(9, offer1)\n        assert line1.consumer.consumed() == line1.quantity\n        assert line1.consumer.consumed(offer1) == line1.quantity\n        assert line1.consumer.consumed(offer2) == 0\n\n        line1.consumer.consume(99, offer1)\n        assert line1.consumer.consumed(offer1) == line1.quantity\n        assert line1.consumer.consumed(offer2) == 0\n\n        line1.consumer.consume(1, offer2)\n        line2.consumer.consume(1, offer2)\n\n        assert line1.consumer.consumed(offer2) == 1\n        assert line2.consumer.consumed(offer2) == 1\n\n    def test_consume(self, filled_basket):\n        line = filled_basket.all_lines()[0]\n        line.consume(1)\n        assert line.quantity_with_discount == 1\n        line.consume(99)\n        assert line.quantity_with_discount == 10\n\n    def test_consumed_with_exclusive_offer(self, filled_basket):\n        offer1 = ConditionalOfferFactory(name='offer1')\n        offer2 = ConditionalOfferFactory(name='offer2')\n        offer3 = ConditionalOfferFactory(name='offer3')\n        offer1.exclusive = True\n        offer2.exclusive = False\n        offer3.exclusive = False\n\n        for line in filled_basket.all_lines():\n            assert line.consumer.consumed(offer1) == 0\n            assert line.consumer.consumed(offer2) == 0\n\n        line1 = filled_basket.all_lines()[0]\n        line2 = filled_basket.all_lines()[1]\n\n        line1.consumer.consume(1, offer1)\n        assert line1.is_available_for_offer_discount(offer2) is True\n\n        line1.consumer.consume(99, offer1)\n        assert line1.is_available_for_offer_discount(offer2) is False\n\n        line2.consumer.consume(1, offer2)\n        assert line2.is_available_for_offer_discount(offer1) is True\n\n        line2.consumer.consume(99, offer2)\n        assert line2.is_available_for_offer_discount(offer1) is False\n        assert line2.is_available_for_offer_discount(offer3) is True\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django import forms\nfrom django.conf import settings\n\nfrom oscar.core.loading import get_model\nfrom oscar.forms.mixins import PhoneNumberMixin\n\nUserAddress = get_model('address', 'useraddress')\n\n\nclass AbstractAddressForm(forms.ModelForm):\n\n    def __init__(self, *args, **kwargs):\n        \"\"\"\n        Set fields in OSCAR_REQUIRED_ADDRESS_FIELDS as required.\n        \"\"\"\n        super().__init__(*args, **kwargs)\n        field_names = (set(self.fields) &\n                       set(settings.OSCAR_REQUIRED_ADDRESS_FIELDS))\n        for field_name in field_names:\n            self.fields[field_name].required = True\n\n\nclass UserAddressForm(PhoneNumberMixin, AbstractAddressForm):\n\n    class Meta:\n        model = UserAddress\n        fields = [\n            'title', 'first_name', 'last_name',\n            'line1', 'line2', 'line3', 'line4',\n            'state', 'postcode', 'country',\n            'phone_number', 'notes',\n        ]\n\n    def __init__(self, user, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.instance.user = user\n",
    "output": "from django.contrib.messages import get_messages\nfrom django.test import TestCase\nfrom django.urls import reverse\n\nfrom oscar.apps.basket import views\nfrom oscar.test import factories\nfrom tests.fixtures import RequestFactory\n\n\nclass TestVoucherAddView(TestCase):\n    def test_get(self):\n        request = RequestFactory().get('/')\n\n        view = views.VoucherAddView.as_view()\n        response = view(request)\n\n        self.assertEqual(response.status_code, 302)\n\n    def _get_voucher_message(self, request):\n        return '\\n'.join(str(m.message) for m in get_messages(request))\n\n    def test_post_valid(self):\n        voucher = factories.VoucherFactory()\n        self.assertTrue(voucher.is_active())\n\n        data = {\n            'code': voucher.code\n        }\n        request = RequestFactory().post('/', data=data)\n        request.basket.save()\n\n        view = views.VoucherAddView.as_view()\n        response = view(request)\n        self.assertEqual(response.status_code, 302)\n\n        voucher = voucher.__class__.objects.get(pk=voucher.pk)\n        self.assertEqual(voucher.num_basket_additions, 1, msg=self._get_voucher_message(request))\n\n    def test_post_valid_from_set(self):\n        voucherset = factories.VoucherSetFactory()\n        voucher = voucherset.vouchers.first()\n\n        self.assertTrue(voucher.is_active())\n\n        data = {\n            'code': voucher.code\n        }\n        request = RequestFactory().post('/', data=data)\n        request.basket.save()\n\n        view = views.VoucherAddView.as_view()\n        response = view(request)\n        self.assertEqual(response.status_code, 302)\n\n        voucher = voucher.__class__.objects.get(pk=voucher.pk)\n        self.assertEqual(voucher.num_basket_additions, 1, msg=self._get_voucher_message(request))\n\n        self.assertEqual(voucherset.num_basket_additions, 1)\n\n\nclass TestVoucherRemoveView(TestCase):\n    def test_post_valid(self):\n        voucher = factories.VoucherFactory(num_basket_additions=5)\n\n        data = {\n            'code': voucher.code\n        }\n        request = RequestFactory().post('/', data=data)\n        request.basket.save()\n        request.basket.vouchers.add(voucher)\n\n        view = views.VoucherRemoveView.as_view()\n        response = view(request, pk=voucher.pk)\n        self.assertEqual(response.status_code, 302)\n\n        voucher = voucher.__class__.objects.get(pk=voucher.pk)\n        self.assertEqual(voucher.num_basket_additions, 4)\n\n    def test_post_with_missing_voucher(self):\n        \"\"\" If the voucher is missing, verify the view queues a message and redirects. \"\"\"\n        pk = '12345'\n        view = views.VoucherRemoveView.as_view()\n        request = RequestFactory().post('/')\n        request.basket.save()\n        response = view(request, pk=pk)\n\n        self.assertEqual(response.status_code, 302)\n\n        actual = list(get_messages(request))[-1].message\n        expected = \"No voucher found with id '{}'\".format(pk)\n        self.assertEqual(actual, expected)\n\n\nclass TestBasketSummaryView(TestCase):\n    def setUp(self):\n        self.url = reverse('basket:summary')\n        self.country = factories.CountryFactory()\n        self.user = factories.UserFactory()\n\n    def test_default_shipping_address(self):\n        user_address = factories.UserAddressFactory(\n            country=self.country, user=self.user, is_default_for_shipping=True\n        )\n        request = RequestFactory().get(self.url, user=self.user)\n        view = views.BasketView(request=request)\n        self.assertEquals(view.get_default_shipping_address(), user_address)\n\n    def test_default_shipping_address_for_anonymous_user(self):\n        request = RequestFactory().get(self.url)\n        view = views.BasketView(request=request)\n        self.assertIsNone(view.get_default_shipping_address())\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django import forms\nfrom django.conf import settings\n\nfrom oscar.core.loading import get_model\nfrom oscar.forms.mixins import PhoneNumberMixin\n\nUserAddress = get_model('address', 'useraddress')\n\n\nclass AbstractAddressForm(forms.ModelForm):\n\n    def __init__(self, *args, **kwargs):\n        \"\"\"\n        Set fields in OSCAR_REQUIRED_ADDRESS_FIELDS as required.\n        \"\"\"\n        super().__init__(*args, **kwargs)\n        field_names = (set(self.fields) &\n                       set(settings.OSCAR_REQUIRED_ADDRESS_FIELDS))\n        for field_name in field_names:\n            self.fields[field_name].required = True\n\n\nclass UserAddressForm(PhoneNumberMixin, AbstractAddressForm):\n\n    class Meta:\n        model = UserAddress\n        fields = [\n            'title', 'first_name', 'last_name',\n            'line1', 'line2', 'line3', 'line4',\n            'state', 'postcode', 'country',\n            'phone_number', 'notes',\n        ]\n\n    def __init__(self, user, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.instance.user = user\n",
    "output": ""
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django import forms\nfrom django.conf import settings\n\nfrom oscar.core.loading import get_model\nfrom oscar.forms.mixins import PhoneNumberMixin\n\nUserAddress = get_model('address', 'useraddress')\n\n\nclass AbstractAddressForm(forms.ModelForm):\n\n    def __init__(self, *args, **kwargs):\n        \"\"\"\n        Set fields in OSCAR_REQUIRED_ADDRESS_FIELDS as required.\n        \"\"\"\n        super().__init__(*args, **kwargs)\n        field_names = (set(self.fields) &\n                       set(settings.OSCAR_REQUIRED_ADDRESS_FIELDS))\n        for field_name in field_names:\n            self.fields[field_name].required = True\n\n\nclass UserAddressForm(PhoneNumberMixin, AbstractAddressForm):\n\n    class Meta:\n        model = UserAddress\n        fields = [\n            'title', 'first_name', 'last_name',\n            'line1', 'line2', 'line3', 'line4',\n            'state', 'postcode', 'country',\n            'phone_number', 'notes',\n        ]\n\n    def __init__(self, user, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.instance.user = user\n",
    "output": "from decimal import Decimal as D\nfrom unittest import mock\n\nfrom django.test import TestCase\n\nfrom oscar.apps.checkout import calculators\nfrom oscar.core import prices\n\n\nclass TestOrderTotalCalculator(TestCase):\n\n    def setUp(self):\n        self.calculator = calculators.OrderTotalCalculator()\n\n    def test_returns_correct_totals_when_tax_is_not_known(self):\n        basket = mock.Mock()\n        basket.total_excl_tax = D('10.00')\n        basket.is_tax_known = False\n\n        shipping_charge = prices.Price(\n            currency=basket.currency, excl_tax=D('5.00'))\n\n        total = self.calculator.calculate(basket, shipping_charge)\n\n        self.assertIsInstance(total, prices.Price)\n        self.assertEqual(D('10.00') + D('5.00'), total.excl_tax)\n        self.assertFalse(total.is_tax_known)\n\n    def test_returns_correct_totals_when_tax_is_known(self):\n        basket = mock.Mock()\n        basket.total_excl_tax = D('10.00')\n        basket.total_incl_tax = D('12.00')\n        basket.is_tax_known = True\n\n        shipping_charge = prices.Price(\n            currency=basket.currency, excl_tax=D('5.00'),\n            tax=D('0.50'))\n\n        total = self.calculator.calculate(basket, shipping_charge)\n\n        self.assertIsInstance(total, prices.Price)\n        self.assertEqual(D('10.00') + D('5.00'), total.excl_tax)\n        self.assertTrue(total.is_tax_known)\n        self.assertEqual(D('12.00') + D('5.50'), total.incl_tax)\n        self.assertEqual(D('2.00') + D('0.50'), total.tax)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django import forms\nfrom django.conf import settings\n\nfrom oscar.core.loading import get_model\nfrom oscar.forms.mixins import PhoneNumberMixin\n\nUserAddress = get_model('address', 'useraddress')\n\n\nclass AbstractAddressForm(forms.ModelForm):\n\n    def __init__(self, *args, **kwargs):\n        \"\"\"\n        Set fields in OSCAR_REQUIRED_ADDRESS_FIELDS as required.\n        \"\"\"\n        super().__init__(*args, **kwargs)\n        field_names = (set(self.fields) &\n                       set(settings.OSCAR_REQUIRED_ADDRESS_FIELDS))\n        for field_name in field_names:\n            self.fields[field_name].required = True\n\n\nclass UserAddressForm(PhoneNumberMixin, AbstractAddressForm):\n\n    class Meta:\n        model = UserAddress\n        fields = [\n            'title', 'first_name', 'last_name',\n            'line1', 'line2', 'line3', 'line4',\n            'state', 'postcode', 'country',\n            'phone_number', 'notes',\n        ]\n\n    def __init__(self, user, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.instance.user = user\n",
    "output": "# coding=utf-8\nfrom django.test import TestCase\nfrom django.test.utils import override_settings\n\nfrom oscar.apps.address.models import Country\nfrom oscar.apps.checkout.forms import ShippingAddressForm\nfrom oscar.test.factories import CountryFactory\n\n\nclass AnotherShippingAddressForm(ShippingAddressForm):\n    phone_number_fields = {\n        'phone_number': {\n            'required': False,\n            'help_text': '',\n            'max_length': 32,\n            'label': 'Phone number'\n        },\n        'another_phone_number': {\n            'required': False,\n            'help_text': 'Another phone number help text',\n            'max_length': 32,\n            'label': 'Another phone number'\n        },\n    }\n\n\nclass TestShippingAddressForm(TestCase):\n    minimal_data = {\n        'first_name': 'B\u00e4rry',\n        'last_name': 'Chuckle',\n        'line1': '1 King St',\n        'line4': 'Goth\u00e1m',\n        'postcode': 'N1 7RR'\n    }\n\n    def setUp(self):\n        CountryFactory(iso_3166_1_a2='GB', is_shipping_country=True)\n\n    def test_removes_country_field(self):\n        self.assertTrue('country' not in ShippingAddressForm().fields)\n\n    def test_keeps_country_field(self):\n        CountryFactory(iso_3166_1_a2='DE', is_shipping_country=True)\n        self.assertTrue('country' in ShippingAddressForm().fields)\n\n    @override_settings(OSCAR_REQUIRED_ADDRESS_FIELDS=('last_name', 'postcode'))\n    def test_required_fields_validated(self):\n        form = ShippingAddressForm()\n        self.assertTrue(form.fields['last_name'].required)\n        self.assertTrue(form.fields['postcode'].required)\n        self.assertFalse(form.fields['first_name'].required)\n        self.assertFalse(form.fields['line2'].required)\n        self.assertFalse(form.fields['line3'].required)\n        self.assertFalse(form.fields['line4'].required)\n\n    @override_settings(OSCAR_REQUIRED_ADDRESS_FIELDS=('phone_number',))\n    def test_required_phone_number_validated(self):\n        # This needs a separate test because of the logic in PhoneNumberMixin\n        form = ShippingAddressForm()\n        self.assertTrue(form.fields['phone_number'].required)\n\n    # Tests where the country field is hidden\n\n    def test_is_valid_without_phone_number(self):\n        self.assertTrue(ShippingAddressForm(self.minimal_data).is_valid())\n\n    def test_only_accepts_british_local_phone_number(self):\n        data = self.minimal_data.copy()\n        data['phone_number'] = '07 914721389'  # local UK number\n        self.assertTrue(ShippingAddressForm(data).is_valid())\n\n        data['phone_number'] = '0176 968 426 71'  # local German number\n        self.assertFalse(ShippingAddressForm(data).is_valid())\n\n    def test_only_accepts_british_local_phone_numbers(self):\n        data = self.minimal_data.copy()\n        # Both numbers are British local numbers\n        data['phone_number'] = '07 914721389'\n        data['another_phone_number'] = '0344493 0787'  # British Airways\n        self.assertTrue(AnotherShippingAddressForm(data).is_valid())\n\n        # Both numbers are local German numbers\n        data['phone_number'] = '0176 968 426 71'\n        data['another_phone_number'] = '07032 15 49225'  # IBM Germany\n        self.assertFalse(AnotherShippingAddressForm(data).is_valid())\n\n        # One number is British number, another is German number\n        data['phone_number'] = '07 914721389'\n        data['another_phone_number'] = '0176 968 426 71'\n        self.assertFalse(AnotherShippingAddressForm(data).is_valid())\n\n        # As previous case, but numbers are reversed\n        data['phone_number'] = '0176 968 426 71'\n        data['another_phone_number'] = '07 914721389'\n        self.assertFalse(AnotherShippingAddressForm(data).is_valid())\n\n    def test_is_valid_with_international_phone_number(self):\n        data = self.minimal_data.copy()\n        data['phone_number'] = '+49 176 968426 71'\n        form = ShippingAddressForm(data)\n        self.assertTrue(form.is_valid())\n\n    def test_is_valid_with_international_phone_numbers(self):\n        data = self.minimal_data.copy()\n        data['phone_number'] = '+49 176 968426 71'\n        data['another_phone_number'] = '+49-1805-426452'\n        form = AnotherShippingAddressForm(data)\n        self.assertTrue(form.is_valid())\n\n    # Tests where the country field exists\n\n    def test_needs_country_data(self):\n        CountryFactory(iso_3166_1_a2='DE', is_shipping_country=True)\n\n        self.assertFalse(ShippingAddressForm(self.minimal_data).is_valid())\n\n        data = self.minimal_data.copy()\n        data['country'] = Country.objects.get(iso_3166_1_a2='GB').pk\n        self.assertTrue(ShippingAddressForm(data).is_valid())\n\n    def test_only_accepts_local_phone_number_when_country_matches(self):\n        CountryFactory(iso_3166_1_a2='DE', is_shipping_country=True)\n\n        data = self.minimal_data.copy()\n        data['phone_number'] = '07 914721389'  # local UK number\n\n        data['country'] = Country.objects.get(iso_3166_1_a2='DE').pk\n        self.assertFalse(ShippingAddressForm(data).is_valid())\n\n        data['country'] = Country.objects.get(iso_3166_1_a2='GB').pk\n        self.assertTrue(ShippingAddressForm(data).is_valid())\n\n    def test_only_accepts_local_phone_numbers_when_country_matches(self):\n        CountryFactory(iso_3166_1_a2='DE', is_shipping_country=True)\n        data = self.minimal_data.copy()\n        # Local UK numbers\n        data['phone_number'] = '07 914721389'\n        data['another_phone_number'] = '0344493 0787'\n\n        data['country'] = Country.objects.get(iso_3166_1_a2='DE').pk\n        self.assertFalse(ShippingAddressForm(data).is_valid())\n\n        data['country'] = Country.objects.get(iso_3166_1_a2='GB').pk\n        self.assertTrue(ShippingAddressForm(data).is_valid())\n\n    @override_settings(OSCAR_REQUIRED_ADDRESS_FIELDS=('phone_number',))\n    def test_local_phone_number_invalid_without_country(self):\n        # Add another country, so we have two.\n        CountryFactory(iso_3166_1_a2='DE', is_shipping_country=True)\n        data = self.minimal_data.copy()\n        data['phone_number'] = '07 914721389'\n        # User hasn't selected a country. Because there are multiple country\n        # choices we should not accept the local number.\n        form = ShippingAddressForm(data)\n        self.assertFalse(form.is_valid())\n        self.assertIn('phone_number', form.errors)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django import forms\nfrom django.conf import settings\n\nfrom oscar.core.loading import get_model\nfrom oscar.forms.mixins import PhoneNumberMixin\n\nUserAddress = get_model('address', 'useraddress')\n\n\nclass AbstractAddressForm(forms.ModelForm):\n\n    def __init__(self, *args, **kwargs):\n        \"\"\"\n        Set fields in OSCAR_REQUIRED_ADDRESS_FIELDS as required.\n        \"\"\"\n        super().__init__(*args, **kwargs)\n        field_names = (set(self.fields) &\n                       set(settings.OSCAR_REQUIRED_ADDRESS_FIELDS))\n        for field_name in field_names:\n            self.fields[field_name].required = True\n\n\nclass UserAddressForm(PhoneNumberMixin, AbstractAddressForm):\n\n    class Meta:\n        model = UserAddress\n        fields = [\n            'title', 'first_name', 'last_name',\n            'line1', 'line2', 'line3', 'line4',\n            'state', 'postcode', 'country',\n            'phone_number', 'notes',\n        ]\n\n    def __init__(self, user, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.instance.user = user\n",
    "output": "from decimal import Decimal as D\nfrom unittest import mock\n\nfrom django.http import HttpRequest\nfrom django.test import TestCase\nfrom django.test.utils import override_settings\n\nfrom oscar.apps.checkout.calculators import OrderTotalCalculator\nfrom oscar.apps.checkout.mixins import CheckoutSessionMixin, OrderPlacementMixin\nfrom oscar.apps.checkout.exceptions import FailedPreCondition\nfrom oscar.core.loading import get_model\nfrom oscar.test import factories\nfrom oscar.test.basket import add_product\nfrom oscar.test.utils import RequestFactory\nfrom oscar.apps.shipping.methods import FixedPrice, Free\n\n\nOrder = get_model('order', 'Order')\n\n\nclass TestOrderPlacementMixin(TestCase):\n\n    def test_returns_none_when_no_shipping_address_passed_to_creation_method(self):\n        address = OrderPlacementMixin().create_shipping_address(\n            user=mock.Mock(), shipping_address=None)\n        self.assertEqual(address, None)\n\n    def test_update_address_book(self):\n        basket = factories.create_basket(empty=True)\n        user = factories.UserFactory()\n        add_product(basket, D('12.00'))\n        shipping_method = FixedPrice(D('5.00'), D('5.00'))\n\n        billing_address = factories.BillingAddressFactory(line1='1 Boardwalk Place',\n                                                          line2='Trafalgar Way',\n                                                          line3='Tower Hamlets',\n                                                          line4='London')\n        shipping_address = factories.ShippingAddressFactory(line1='Knightsbridge',\n                                                            line2='159',\n                                                            line4='London')\n        shipping_charge = shipping_method.calculate(basket)\n        order_total = OrderTotalCalculator().calculate(basket, shipping_charge)\n\n        order_submission_data = {'user': user,\n                                 'order_number': '12345',\n                                 'basket': basket,\n                                 'shipping_address': shipping_address,\n                                 'shipping_method': shipping_method,\n                                 'shipping_charge': shipping_charge,\n                                 'billing_address': billing_address,\n                                 'order_total': order_total}\n        OrderPlacementMixin().place_order(**order_submission_data)\n\n        self.assertEqual(user.addresses.filter(hash=billing_address.generate_hash()).count(), 1)\n        self.assertEqual(user.addresses.filter(hash=shipping_address.generate_hash()).count(), 1)\n\n        user_billing_address = user.addresses.get(hash=billing_address.generate_hash())\n        user_shipping_address = user.addresses.get(hash=shipping_address.generate_hash())\n        self.assertEqual(user_billing_address.num_orders_as_billing_address, 1)\n        self.assertEqual(user_shipping_address.num_orders_as_shipping_address, 1)\n\n        order_submission_data['order_number'] = '12346'\n\n        OrderPlacementMixin().place_order(**order_submission_data)\n\n        user_billing_address = user.addresses.get(hash=billing_address.generate_hash())\n        user_shipping_address = user.addresses.get(hash=shipping_address.generate_hash())\n        self.assertEqual(user_billing_address.num_orders_as_billing_address, 2)\n        self.assertEqual(user_shipping_address.num_orders_as_shipping_address, 2)\n\n        order_submission_data.pop('billing_address', None)\n        order_submission_data['order_number'] = '123457'\n        OrderPlacementMixin().place_order(**order_submission_data)\n\n        user_billing_address = user.addresses.get(hash=billing_address.generate_hash())\n        user_shipping_address = user.addresses.get(hash=shipping_address.generate_hash())\n        self.assertEqual(user_billing_address.num_orders_as_billing_address, 2)\n        self.assertEqual(user_shipping_address.num_orders_as_shipping_address, 3)\n\n        shipping_address.line2 = '160'\n        order_submission_data['billing_address'] = billing_address\n        order_submission_data['order_number'] = '123458'\n        OrderPlacementMixin().place_order(**order_submission_data)\n\n        user_billing_address = user.addresses.get(hash=billing_address.generate_hash())\n        user_shipping_address = user.addresses.get(hash=shipping_address.generate_hash())\n        self.assertEqual(user_billing_address.num_orders_as_billing_address, 3)\n        self.assertEqual(user_shipping_address.num_orders_as_shipping_address, 1)\n\n    @override_settings(SITE_ID='')\n    def test_multi_site(self):\n        basket = factories.create_basket(empty=True)\n        site1 = factories.SiteFactory()\n        site2 = factories.SiteFactory()\n        request = HttpRequest()\n        request.META['SERVER_PORT'] = 80\n        request.META['SERVER_NAME'] = site1.domain\n        user = factories.UserFactory()\n        add_product(basket, D('12.00'))\n        shipping_method = Free()\n        shipping_charge = shipping_method.calculate(basket)\n        order_total = OrderTotalCalculator().calculate(basket, shipping_charge)\n\n        billing_address = factories.BillingAddressFactory()\n        shipping_address = factories.ShippingAddressFactory()\n        order_submission_data = {'user': user,\n                                 'order_number': '12345',\n                                 'basket': basket,\n                                 'shipping_method': shipping_method,\n                                 'shipping_charge': shipping_charge,\n                                 'order_total': order_total,\n                                 'billing_address': billing_address,\n                                 'shipping_address': shipping_address,\n                                 'request': request}\n        OrderPlacementMixin().place_order(**order_submission_data)\n        order1 = Order.objects.get(number='12345')\n        self.assertEqual(order1.site, site1)\n\n        add_product(basket, D('12.00'))\n        request.META['SERVER_NAME'] = site2.domain\n        order_submission_data['order_number'] = '12346'\n        order_submission_data['request'] = request\n        OrderPlacementMixin().place_order(**order_submission_data)\n        order2 = Order.objects.get(number='12346')\n        self.assertEqual(order2.site, site2)\n\n    def test_multiple_payment_events(self):\n        basket = factories.create_basket(empty=True)\n        user = factories.UserFactory()\n        add_product(basket, D('100.00'))\n        order_placement = OrderPlacementMixin()\n        order_placement.add_payment_event('Gift Card Payment', D('10'))\n        order_placement.add_payment_event('Credit Card Payment', D('90'))\n        shipping_method = Free()\n        shipping_charge = shipping_method.calculate(basket)\n        order_total = OrderTotalCalculator().calculate(basket, shipping_charge)\n\n        billing_address = factories.BillingAddressFactory()\n        shipping_address = factories.ShippingAddressFactory()\n        order_submission_data = {'user': user,\n                                 'order_number': '12345',\n                                 'basket': basket,\n                                 'shipping_method': shipping_method,\n                                 'shipping_charge': shipping_charge,\n                                 'order_total': order_total,\n                                 'billing_address': billing_address,\n                                 'shipping_address': shipping_address}\n        order_placement.place_order(**order_submission_data)\n        order1 = Order.objects.get(number='12345')\n        self.assertEqual(order1.payment_events.count(), 2)\n        event1 = order1.payment_events.all()[0]\n        event2 = order1.payment_events.all()[1]\n        self.assertEqual(event1.event_type.name, 'Credit Card Payment')\n        self.assertEqual(event1.amount, D('90'))\n        self.assertEqual(event1.lines.count(), 1)\n        self.assertEqual(event2.event_type.name, 'Gift Card Payment')\n        self.assertEqual(event2.amount, D('10'))\n        self.assertEqual(event2.lines.count(), 1)\n\n\nclass TestCheckoutSessionMixin(TestCase):\n\n    def setUp(self):\n        self.request = RequestFactory().get('/')\n        self.product = factories.create_product(num_in_stock=10)\n        self.stock_record = self.product.stockrecords.first()\n\n    def add_product_to_basket(self, product, quantity=1):\n        self.request.basket.add_product(product, quantity=quantity)\n        self.assertEqual(len(self.request.basket.all_lines()), 1)\n        self.assertEqual(self.request.basket.all_lines()[0].product, product)\n\n    def test_check_basket_is_valid_no_stock_available(self):\n        self.add_product_to_basket(self.product)\n        CheckoutSessionMixin().check_basket_is_valid(self.request)\n        self.stock_record.allocate(10)\n        self.stock_record.save()\n        with self.assertRaises(FailedPreCondition):\n            CheckoutSessionMixin().check_basket_is_valid(self.request)\n\n    def test_check_basket_is_valid_stock_exceeded(self):\n        self.add_product_to_basket(self.product)\n        CheckoutSessionMixin().check_basket_is_valid(self.request)\n        self.request.basket.add_product(self.product, quantity=11)\n        with self.assertRaises(FailedPreCondition):\n            CheckoutSessionMixin().check_basket_is_valid(self.request)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django import forms\nfrom django.conf import settings\n\nfrom oscar.core.loading import get_model\nfrom oscar.forms.mixins import PhoneNumberMixin\n\nUserAddress = get_model('address', 'useraddress')\n\n\nclass AbstractAddressForm(forms.ModelForm):\n\n    def __init__(self, *args, **kwargs):\n        \"\"\"\n        Set fields in OSCAR_REQUIRED_ADDRESS_FIELDS as required.\n        \"\"\"\n        super().__init__(*args, **kwargs)\n        field_names = (set(self.fields) &\n                       set(settings.OSCAR_REQUIRED_ADDRESS_FIELDS))\n        for field_name in field_names:\n            self.fields[field_name].required = True\n\n\nclass UserAddressForm(PhoneNumberMixin, AbstractAddressForm):\n\n    class Meta:\n        model = UserAddress\n        fields = [\n            'title', 'first_name', 'last_name',\n            'line1', 'line2', 'line3', 'line4',\n            'state', 'postcode', 'country',\n            'phone_number', 'notes',\n        ]\n\n    def __init__(self, user, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.instance.user = user\n",
    "output": "from unittest import mock\n\nfrom django.test import TestCase\nfrom django.test.client import RequestFactory\nfrom django.contrib.sessions.middleware import SessionMiddleware\n\nfrom oscar.apps.checkout.utils import CheckoutSessionData\n\n\nclass TestCheckoutSession(TestCase):\n    \"\"\"\n    oscar.apps.checkout.utils.CheckoutSessionData\n    \"\"\"\n\n    def setUp(self):\n        request = RequestFactory().get('/')\n        SessionMiddleware().process_request(request)\n        self.session_data = CheckoutSessionData(request)\n\n    def test_allows_data_to_be_written_and_read_out(self):\n        self.session_data._set('namespace', 'key', 'value')\n        self.assertEqual('value', self.session_data._get('namespace', 'key'))\n\n    def test_allows_set_data_can_be_unset(self):\n        self.session_data._set('namespace', 'key', 'value')\n        self.session_data._unset('namespace', 'key')\n        self.assertIsNone(self.session_data._get('namespace', 'key'))\n\n    def test_stores_guest_email(self):\n        self.session_data.set_guest_email('a@a.com')\n        self.assertEqual('a@a.com', self.session_data.get_guest_email())\n\n    def test_allows_a_namespace_to_be_flushed(self):\n        self.session_data._set('ns', 'a', 1)\n        self.session_data._set('ns', 'b', 2)\n        self.session_data._flush_namespace('ns')\n        self.assertIsNone(self.session_data._get('ns', 'a'))\n        self.assertIsNone(self.session_data._get('ns', 'b'))\n\n    def test_allows_bill_to_user_address(self):\n        address = mock.Mock()\n        address.id = 1\n        self.session_data.bill_to_user_address(address)\n        self.assertEqual(1, self.session_data.billing_user_address_id())\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django import forms\nfrom django.conf import settings\n\nfrom oscar.core.loading import get_model\nfrom oscar.forms.mixins import PhoneNumberMixin\n\nUserAddress = get_model('address', 'useraddress')\n\n\nclass AbstractAddressForm(forms.ModelForm):\n\n    def __init__(self, *args, **kwargs):\n        \"\"\"\n        Set fields in OSCAR_REQUIRED_ADDRESS_FIELDS as required.\n        \"\"\"\n        super().__init__(*args, **kwargs)\n        field_names = (set(self.fields) &\n                       set(settings.OSCAR_REQUIRED_ADDRESS_FIELDS))\n        for field_name in field_names:\n            self.fields[field_name].required = True\n\n\nclass UserAddressForm(PhoneNumberMixin, AbstractAddressForm):\n\n    class Meta:\n        model = UserAddress\n        fields = [\n            'title', 'first_name', 'last_name',\n            'line1', 'line2', 'line3', 'line4',\n            'state', 'postcode', 'country',\n            'phone_number', 'notes',\n        ]\n\n    def __init__(self, user, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.instance.user = user\n",
    "output": "from django.test import TestCase\nfrom django.test.utils import override_settings\nfrom django.urls import reverse\n\nfrom oscar.test.factories import OrderFactory\n\n\nclass ThankYouViewTestCase(TestCase):\n\n    @override_settings(OSCAR_ALLOW_ANON_CHECKOUT=True)\n    def test_analytics_event_triggered_only_on_first_view(self):\n        order = OrderFactory()\n        session = self.client.session\n        # Put the order ID in the session, mimicking a completed order,\n        # so that we can reach the thank you page.\n        session['checkout_order_id'] = order.pk\n        session.save()\n\n        r1 = self.client.get(reverse('checkout:thank-you'), follow=True)\n        self.assertTrue(r1.context['send_analytics_event'])\n\n        # Request the view a second time\n        r2 = self.client.get(reverse('checkout:thank-you'), follow=True)\n        self.assertFalse(r2.context['send_analytics_event'])\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django import forms\nfrom django.conf import settings\n\nfrom oscar.core.loading import get_model\nfrom oscar.forms.mixins import PhoneNumberMixin\n\nUserAddress = get_model('address', 'useraddress')\n\n\nclass AbstractAddressForm(forms.ModelForm):\n\n    def __init__(self, *args, **kwargs):\n        \"\"\"\n        Set fields in OSCAR_REQUIRED_ADDRESS_FIELDS as required.\n        \"\"\"\n        super().__init__(*args, **kwargs)\n        field_names = (set(self.fields) &\n                       set(settings.OSCAR_REQUIRED_ADDRESS_FIELDS))\n        for field_name in field_names:\n            self.fields[field_name].required = True\n\n\nclass UserAddressForm(PhoneNumberMixin, AbstractAddressForm):\n\n    class Meta:\n        model = UserAddress\n        fields = [\n            'title', 'first_name', 'last_name',\n            'line1', 'line2', 'line3', 'line4',\n            'state', 'postcode', 'country',\n            'phone_number', 'notes',\n        ]\n\n    def __init__(self, user, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.instance.user = user\n",
    "output": ""
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django import forms\nfrom django.conf import settings\n\nfrom oscar.core.loading import get_model\nfrom oscar.forms.mixins import PhoneNumberMixin\n\nUserAddress = get_model('address', 'useraddress')\n\n\nclass AbstractAddressForm(forms.ModelForm):\n\n    def __init__(self, *args, **kwargs):\n        \"\"\"\n        Set fields in OSCAR_REQUIRED_ADDRESS_FIELDS as required.\n        \"\"\"\n        super().__init__(*args, **kwargs)\n        field_names = (set(self.fields) &\n                       set(settings.OSCAR_REQUIRED_ADDRESS_FIELDS))\n        for field_name in field_names:\n            self.fields[field_name].required = True\n\n\nclass UserAddressForm(PhoneNumberMixin, AbstractAddressForm):\n\n    class Meta:\n        model = UserAddress\n        fields = [\n            'title', 'first_name', 'last_name',\n            'line1', 'line2', 'line3', 'line4',\n            'state', 'postcode', 'country',\n            'phone_number', 'notes',\n        ]\n\n    def __init__(self, user, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.instance.user = user\n",
    "output": "# coding=utf-8\n\"\"\"\nAutoSlugField taken from django-extensions at\n15d3eb305957cee4768dd86e44df1bdad341a10e\nUses Oscar's slugify function instead of Django's\n\nCopyright (c) 2007 Michael Trier\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\"\"\nfrom django.db import models\nfrom django.test import TestCase\nfrom django.test.utils import override_settings\n\nfrom oscar.core.loading import get_model\n\nSluggedTestModel = get_model('model_tests_app', 'sluggedtestmodel')\nChildSluggedTestModel = get_model('model_tests_app', 'childsluggedtestmodel')\nCustomSluggedTestModel = get_model('model_tests_app', 'CustomSluggedTestModel')\n\n\nclass AutoSlugFieldTest(TestCase):\n    def tearDown(self):\n        super().tearDown()\n\n        SluggedTestModel.objects.all().delete()\n\n    def test_auto_create_slug(self):\n        m = SluggedTestModel(title='foo')\n        m.save()\n        self.assertEqual(m.slug, 'foo')\n\n    def test_auto_create_next_slug(self):\n        m = SluggedTestModel(title='foo')\n        m.save()\n\n        m = SluggedTestModel(title='foo')\n        m.save()\n        self.assertEqual(m.slug, 'foo-2')\n\n    def test_auto_create_slug_with_number(self):\n        m = SluggedTestModel(title='foo 2012')\n        m.save()\n        self.assertEqual(m.slug, 'foo-2012')\n\n    def test_auto_update_slug_with_number(self):\n        m = SluggedTestModel(title='foo 2012')\n        m.save()\n        m.save()\n        self.assertEqual(m.slug, 'foo-2012')\n\n    def test_auto_create_unicode_slug(self):\n        with override_settings(OSCAR_SLUG_ALLOW_UNICODE=True):\n            m = SluggedTestModel(title='Ch\u00e2teau Margaux 1960')\n            m.save()\n            self.assertEqual(m.slug, 'ch\u00e2teau-margaux-1960')\n\n    def test_auto_create_next_unicode_slug(self):\n        with override_settings(OSCAR_SLUG_ALLOW_UNICODE=True):\n            m1 = SluggedTestModel(title='Ch\u00e2teau Margaux 1960')\n            m1.save()\n\n            m2 = SluggedTestModel(title='Ch\u00e2teau Margaux 1960')\n            m2.save()\n\n            self.assertEqual(m2.slug, 'ch\u00e2teau-margaux-1960-2')\n\n    def test_switch_to_unicode_slug(self):\n        m = SluggedTestModel(title='Ch\u00e2teau Margaux 1960')\n        m.save()\n        self.assertEqual(m.slug, 'chateau-margaux-1960')\n        with override_settings(OSCAR_SLUG_ALLOW_UNICODE=True):\n            m = SluggedTestModel(title='Ch\u00e2teau Margaux 1960')\n            m.save()\n            self.assertEqual(m.slug, 'ch\u00e2teau-margaux-1960')\n\n    def test_autoslugfield_allow_unicode_kwargs_precedence(self):\n        from oscar.models.fields import AutoSlugField\n        with override_settings(OSCAR_SLUG_ALLOW_UNICODE=True):\n            autoslug_field = AutoSlugField(populate_from='title', allow_unicode=False)\n            self.assertFalse(autoslug_field.allow_unicode)\n            autoslug_field = AutoSlugField(populate_from='title')\n            self.assertTrue(autoslug_field.allow_unicode)\n\n    def test_update_slug(self):\n        m = SluggedTestModel(title='foo')\n        m.save()\n        self.assertEqual(m.slug, 'foo')\n\n        # update m instance without using `save'\n        SluggedTestModel.objects.filter(pk=m.pk).update(slug='foo-2012')\n        # update m instance with new data from the db\n        m = SluggedTestModel.objects.get(pk=m.pk)\n        self.assertEqual(m.slug, 'foo-2012')\n\n        m.save()\n        self.assertEqual(m.title, 'foo')\n        self.assertEqual(m.slug, 'foo-2012')\n\n        # Check slug is not overwrite\n        m.title = 'bar'\n        m.save()\n        self.assertEqual(m.title, 'bar')\n        self.assertEqual(m.slug, 'foo-2012')\n\n    def test_simple_slug_source(self):\n        m = SluggedTestModel(title='-foo')\n        m.save()\n        self.assertEqual(m.slug, 'foo')\n\n        n = SluggedTestModel(title='-foo')\n        n.save()\n        self.assertEqual(n.slug, 'foo-2')\n\n        n.save()\n        self.assertEqual(n.slug, 'foo-2')\n\n    def test_empty_slug_source(self):\n        # regression test\n\n        m = SluggedTestModel(title='')\n        m.save()\n        self.assertEqual(m.slug, '-2')\n\n        n = SluggedTestModel(title='')\n        n.save()\n        self.assertEqual(n.slug, '-3')\n\n        n.save()\n        self.assertEqual(n.slug, '-3')\n\n    def test_inheritance_creates_next_slug(self):\n        m = SluggedTestModel(title='foo')\n        m.save()\n\n        n = ChildSluggedTestModel(title='foo')\n        n.save()\n        self.assertEqual(n.slug, 'foo-2')\n\n        o = SluggedTestModel(title='foo')\n        o.save()\n        self.assertEqual(o.slug, 'foo-3')\n\n    def test_separator_and_uppercase_options(self):\n        m = CustomSluggedTestModel(title=\"Password reset\")\n        m.save()\n        self.assertEqual(m.slug, 'PASSWORD_RESET')\n\n        m = CustomSluggedTestModel(title=\"Password reset\")\n        m.save()\n        self.assertEqual(m.slug, 'PASSWORD_RESET_2')\n\n    def test_migration(self):\n        \"\"\"\n        Tests making migrations with Django 1.7+'s migration framework\n        \"\"\"\n\n        import oscar\n        from django.db import migrations\n        from django.db.migrations.writer import MigrationWriter\n        from oscar.models.fields import AutoSlugField\n        fields = {\n            'autoslugfield': AutoSlugField(populate_from='otherfield'),\n        }\n\n        migration = type(str(\"Migration\"), (migrations.Migration,), {\n            \"operations\": [\n                migrations.CreateModel(\"MyModel\", tuple(fields.items()),\n                                       {'populate_from': 'otherfield'},\n                                       (models.Model,)),\n            ],\n        })\n        writer = MigrationWriter(migration)\n        output = writer.as_string()\n\n        if isinstance(output, str):\n            output = output.encode('utf-8')\n\n        # We don't test the output formatting - that's too fragile.\n        # Just make sure it runs for now, and that things look alright.\n        context = {\n            'migrations': migrations,\n            'oscar': oscar,\n        }\n        result = self.safe_exec(output, context=context)\n        self.assertIn(\"Migration\", result)\n\n    def safe_exec(self, string, value=None, context=None):\n        loc = {}\n        g = globals()\n        g.update(context)\n        try:\n            exec(string, g, loc)\n        except Exception as e:\n            if value:\n                self.fail(\"Could not exec %r (from value %r): %s\" % (\n                    string.strip(), value, e))\n            else:\n                self.fail(\"Could not exec %r: %s\" % (string.strip(), e))\n        return loc\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django import forms\nfrom django.conf import settings\n\nfrom oscar.core.loading import get_model\nfrom oscar.forms.mixins import PhoneNumberMixin\n\nUserAddress = get_model('address', 'useraddress')\n\n\nclass AbstractAddressForm(forms.ModelForm):\n\n    def __init__(self, *args, **kwargs):\n        \"\"\"\n        Set fields in OSCAR_REQUIRED_ADDRESS_FIELDS as required.\n        \"\"\"\n        super().__init__(*args, **kwargs)\n        field_names = (set(self.fields) &\n                       set(settings.OSCAR_REQUIRED_ADDRESS_FIELDS))\n        for field_name in field_names:\n            self.fields[field_name].required = True\n\n\nclass UserAddressForm(PhoneNumberMixin, AbstractAddressForm):\n\n    class Meta:\n        model = UserAddress\n        fields = [\n            'title', 'first_name', 'last_name',\n            'line1', 'line2', 'line3', 'line4',\n            'state', 'postcode', 'country',\n            'phone_number', 'notes',\n        ]\n\n    def __init__(self, user, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.instance.user = user\n",
    "output": "# -*- coding: utf-8 -*-\nimport codecs\nimport datetime\nimport io\nimport os\nfrom tempfile import NamedTemporaryFile\nfrom django.utils.encoding import smart_text\n\nfrom django.test import TestCase, override_settings\n\nfrom oscar.core.compat import UnicodeCSVWriter, existing_user_fields\n\n\nclass unicodeobj(object):\n\n    def __init__(self, s):\n        self.s = s\n\n    def __str__(self):\n        return self.s\n\n\nclass TestExistingUserFields(TestCase):\n\n    def test_order(self):\n        fields = existing_user_fields(['email', 'first_name', 'last_name'])\n        self.assertEqual(fields, ['email', 'first_name', 'last_name'])\n\n\nclass TestUnicodeCSVWriter(TestCase):\n\n    def test_can_write_different_values(self):\n        writer = UnicodeCSVWriter(open_file=io.StringIO())\n        s = '\u00fcn\u012fcod\u0113'\n        rows = [[s, unicodeobj(s), 123, datetime.date.today()], ]\n        writer.writerows(rows)\n        self.assertRaises(TypeError, writer.writerows, [object()])\n\n    def test_context_manager(self):\n        tmp_file = NamedTemporaryFile()\n        with UnicodeCSVWriter(filename=tmp_file.name) as writer:\n            s = '\u00fcn\u012fcod\u0113'\n            rows = [[s, unicodeobj(s), 123, datetime.date.today()], ]\n            writer.writerows(rows)\n\n    def test_csv_write_output(self):\n        tmp_file = NamedTemporaryFile(delete=False)\n        with UnicodeCSVWriter(filename=tmp_file.name) as writer:\n            s = '\u00fcn\u012fcod\u0113'\n            row = [s, 123, 'foo-bar']\n            writer.writerows([row])\n\n        with open(tmp_file.name, 'r') as read_file:\n            content = smart_text(read_file.read(), encoding='utf-8').strip()\n            self.assertEqual(content, '\u00fcn\u012fcod\u0113,123,foo-bar')\n\n        # Clean up\n        os.unlink(tmp_file.name)\n\n    @override_settings(OSCAR_CSV_INCLUDE_BOM=True)\n    def test_bom_write_with_open_file(self):\n        csv_file = NamedTemporaryFile(delete=False)\n        with open(csv_file.name, 'w') as open_file:\n            writer = UnicodeCSVWriter(open_file=open_file, encoding=\"utf-8\")\n            s = '\u00fcn\u012fcod\u0113'\n            row = [s, 123, datetime.date.today()]\n            writer.writerows([row])\n\n        with open(csv_file.name, 'rb') as read_file:\n            self.assertTrue(read_file.read().startswith(codecs.BOM_UTF8))\n\n        # Clean up\n        os.unlink(csv_file.name)\n\n    @override_settings(OSCAR_CSV_INCLUDE_BOM=True)\n    def test_bom_write_with_filename(self):\n        csv_file = NamedTemporaryFile(delete=False)\n        with UnicodeCSVWriter(filename=csv_file.name, encoding=\"utf-8\") as writer:\n            s = '\u00fcn\u012fcod\u0113'\n            row = [s, 123, datetime.date.today()]\n            writer.writerows([row])\n\n        with open(csv_file.name, 'rb') as read_file:\n            self.assertTrue(read_file.read().startswith(codecs.BOM_UTF8))\n\n        # Clean up\n        os.unlink(csv_file.name)\n\n    @override_settings(OSCAR_CSV_INCLUDE_BOM=True)\n    def test_bom_not_written_for_other_encodings(self):\n        csv_file = NamedTemporaryFile(delete=False)\n        with UnicodeCSVWriter(filename=csv_file.name, encoding=\"ascii\") as writer:\n            s = 'boring ascii'\n            row = [s, 123, datetime.date.today()]\n            writer.writerows([row])\n\n        with open(csv_file.name, 'rb') as read_file:\n            self.assertFalse(read_file.read().startswith(codecs.BOM_UTF8))\n\n        # Clean up\n        os.unlink(csv_file.name)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django import forms\nfrom django.conf import settings\n\nfrom oscar.core.loading import get_model\nfrom oscar.forms.mixins import PhoneNumberMixin\n\nUserAddress = get_model('address', 'useraddress')\n\n\nclass AbstractAddressForm(forms.ModelForm):\n\n    def __init__(self, *args, **kwargs):\n        \"\"\"\n        Set fields in OSCAR_REQUIRED_ADDRESS_FIELDS as required.\n        \"\"\"\n        super().__init__(*args, **kwargs)\n        field_names = (set(self.fields) &\n                       set(settings.OSCAR_REQUIRED_ADDRESS_FIELDS))\n        for field_name in field_names:\n            self.fields[field_name].required = True\n\n\nclass UserAddressForm(PhoneNumberMixin, AbstractAddressForm):\n\n    class Meta:\n        model = UserAddress\n        fields = [\n            'title', 'first_name', 'last_name',\n            'line1', 'line2', 'line3', 'line4',\n            'state', 'postcode', 'country',\n            'phone_number', 'notes',\n        ]\n\n    def __init__(self, user, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.instance.user = user\n",
    "output": "import pytest\nfrom django.conf import settings\nfrom django.test import TestCase\n\nfrom oscar.core import customisation\n\nVALID_FOLDER_PATH = 'tests/_site/apps'\n\n\nclass TestUtilities(TestCase):\n\n    def test_subfolder_extraction(self):\n        folders = list(customisation.subfolders('/var/www/eggs'))\n        self.assertEqual(folders, ['/var', '/var/www', '/var/www/eggs'])\n\n\ndef test_raises_exception_for_nonexistant_app_label():\n    with pytest.raises(ValueError):\n        customisation.fork_app('sillytown', 'somefolder')\n\n\ndef test_raises_exception_if_app_has_already_been_forked():\n    # We piggyback on another test which means a custom app is already in\n    # the settings we use for the test suite. We just check that's still\n    # the case here.\n    assert 'tests._site.apps.partner' in settings.INSTALLED_APPS\n    with pytest.raises(ValueError):\n        customisation.fork_app('partner', VALID_FOLDER_PATH)\n\n\ndef test_creates_new_folder(tmpdir):\n    path = tmpdir.mkdir('fork')\n    customisation.fork_app('order', str(path))\n    path.join('order').ensure_dir()\n\n\ndef test_creates_init_file(tmpdir):\n    path = tmpdir.mkdir('fork')\n    customisation.fork_app('order', str(path))\n\n    path.join('order').join('__init__.py').ensure()\n\n\ndef test_handles_dashboard_app(tmpdir):\n    # Dashboard apps are fiddly as they aren't identified by a single app\n    # label.\n    path = tmpdir.mkdir('fork')\n    customisation.fork_app('dashboard.catalogue', str(path))\n    # Check __init__.py created (and supporting folders)\n\n    path.join('dashboard').join('catalogue').join('__init__.py').ensure()\n\n\ndef test_creates_models_and_admin_file(tmpdir):\n    path = tmpdir.mkdir('fork')\n    customisation.fork_app('order', str(path))\n    for module, expected_string in [\n        ('models', 'from oscar.apps.order.models import *'),\n        ('admin', 'from oscar.apps.order.admin import *'),\n        ('config', 'OrderConfig')\n    ]:\n        filepath = path.join('order').join('%s.py' % module)\n        filepath.ensure()\n        contents = filepath.read()\n        assert expected_string in contents\n\n\ndef test_copies_in_migrations_when_needed(tmpdir):\n    path = tmpdir.mkdir('fork')\n    for app, has_models in [('order', True), ('search', False)]:\n        customisation.fork_app(app, str(path))\n\n        native_migration_path = path.join(app).join('migrations')\n        assert has_models == native_migration_path.check()\n\n\ndef test_dashboard_app_config(tmpdir, monkeypatch):\n    path = tmpdir.mkdir('fork')\n    customisation.fork_app('dashboard', str(path))\n\n    path.join('__init__.py').write('')\n    monkeypatch.syspath_prepend(str(tmpdir))\n\n    config_module = __import__(\n        '%s.dashboard.config' % path.basename, fromlist=['DashboardConfig']\n    )\n\n    assert hasattr(config_module, 'DashboardConfig')\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django import forms\nfrom django.conf import settings\n\nfrom oscar.core.loading import get_model\nfrom oscar.forms.mixins import PhoneNumberMixin\n\nUserAddress = get_model('address', 'useraddress')\n\n\nclass AbstractAddressForm(forms.ModelForm):\n\n    def __init__(self, *args, **kwargs):\n        \"\"\"\n        Set fields in OSCAR_REQUIRED_ADDRESS_FIELDS as required.\n        \"\"\"\n        super().__init__(*args, **kwargs)\n        field_names = (set(self.fields) &\n                       set(settings.OSCAR_REQUIRED_ADDRESS_FIELDS))\n        for field_name in field_names:\n            self.fields[field_name].required = True\n\n\nclass UserAddressForm(PhoneNumberMixin, AbstractAddressForm):\n\n    class Meta:\n        model = UserAddress\n        fields = [\n            'title', 'first_name', 'last_name',\n            'line1', 'line2', 'line3', 'line4',\n            'state', 'postcode', 'country',\n            'phone_number', 'notes',\n        ]\n\n    def __init__(self, user, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.instance.user = user\n",
    "output": "import warnings\n\nfrom django.contrib.auth.models import AnonymousUser, Permission\nfrom django.test import TestCase\n\nfrom oscar.core.decorators import deprecated\nfrom oscar.test import factories\nfrom oscar.views.decorators import check_permissions\n\n\nclass TestPermissionsDecorator(TestCase):\n\n    def test_empty_permissions_passes(self):\n        user = factories.UserFactory.build()\n        self.assertTrue(check_permissions(user, []))\n\n    def test_properties_are_checked(self):\n        staff_user = factories.UserFactory.build(is_staff=True)\n        non_staff_user = factories.UserFactory.build(is_staff=False)\n        self.assertTrue(check_permissions(staff_user, ['is_staff']))\n        self.assertFalse(check_permissions(non_staff_user, ['is_staff']))\n\n    def test_methods_are_checked(self):\n        anonymous_user = AnonymousUser()\n        known_user = factories.UserFactory.build()\n        self.assertTrue(check_permissions(anonymous_user, ['is_anonymous']))\n        self.assertFalse(check_permissions(known_user, ['is_anonymous']))\n\n    def test_permissions_are_checked(self):\n        user_with_perm = factories.UserFactory()\n        user_without_perm = factories.UserFactory()\n        perm = Permission.objects.get(\n            content_type__app_label='address', codename='add_country')\n        user_with_perm.user_permissions.add(perm)\n        self.assertTrue(\n            check_permissions(user_with_perm, ['address.add_country']))\n        self.assertFalse(\n            check_permissions(user_without_perm, ['address.add_country']))\n\n\nclass TestDeprecatedDecorator(TestCase):\n\n    def test_decorate_function(self):\n\n        @deprecated\n        def func():\n            return True\n\n        with warnings.catch_warnings(record=True) as caught:\n            warnings.simplefilter(\"always\")\n            self.assertTrue(func())\n            assert len(caught) == 1\n            assert issubclass(caught[0].category, DeprecationWarning)\n\n    def test_decorate_class(self):\n\n        class Cls(object):\n            val = False\n\n            def __init__(self):\n                self.val = True\n\n        Deprecated = deprecated(Cls)  # noqa\n\n        with warnings.catch_warnings(record=True) as caught:\n            warnings.simplefilter(\"always\")\n            obj = Deprecated()\n            self.assertTrue(obj.val)\n            assert len(caught) == 1\n            assert issubclass(caught[0].category, DeprecationWarning)\n\n    def test_subclass_decorated(self):\n\n        class Cls(object):\n            val = False\n\n            def __init__(self):\n                self.val = True\n\n        Deprecated = deprecated(Cls)  # noqa\n\n        class SubCls(Deprecated):\n            pass\n\n        with warnings.catch_warnings(record=True) as caught:\n            warnings.simplefilter(\"always\")\n            obj = SubCls()\n            self.assertTrue(obj.val)\n            assert len(caught) == 1\n            assert issubclass(caught[0].category, DeprecationWarning)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django import forms\nfrom django.conf import settings\n\nfrom oscar.core.loading import get_model\nfrom oscar.forms.mixins import PhoneNumberMixin\n\nUserAddress = get_model('address', 'useraddress')\n\n\nclass AbstractAddressForm(forms.ModelForm):\n\n    def __init__(self, *args, **kwargs):\n        \"\"\"\n        Set fields in OSCAR_REQUIRED_ADDRESS_FIELDS as required.\n        \"\"\"\n        super().__init__(*args, **kwargs)\n        field_names = (set(self.fields) &\n                       set(settings.OSCAR_REQUIRED_ADDRESS_FIELDS))\n        for field_name in field_names:\n            self.fields[field_name].required = True\n\n\nclass UserAddressForm(PhoneNumberMixin, AbstractAddressForm):\n\n    class Meta:\n        model = UserAddress\n        fields = [\n            'title', 'first_name', 'last_name',\n            'line1', 'line2', 'line3', 'line4',\n            'state', 'postcode', 'country',\n            'phone_number', 'notes',\n        ]\n\n    def __init__(self, user, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.instance.user = user\n",
    "output": "from os.path import dirname\nimport sys\n\nfrom django.test import override_settings, TestCase\nfrom django.conf import settings\n\nimport oscar\nfrom oscar.core.loading import (\n    get_model, AppNotFoundError, get_classes, get_class, get_class_loader,\n    ClassNotFoundError)\nfrom tests import temporary_python_path\nfrom tests._site.loader import DummyClass\n\n\nclass TestClassLoading(TestCase):\n    \"\"\"\n    Oscar's class loading utilities\n    \"\"\"\n\n    def test_load_oscar_classes_correctly(self):\n        Product, Category = get_classes('catalogue.models', ('Product', 'Category'))\n        self.assertEqual('oscar.apps.catalogue.models', Product.__module__)\n        self.assertEqual('oscar.apps.catalogue.models', Category.__module__)\n\n    def test_load_oscar_class_correctly(self):\n        Product = get_class('catalogue.models', 'Product')\n        self.assertEqual('oscar.apps.catalogue.models', Product.__module__)\n\n    def test_load_oscar_class_from_dashboard_subapp(self):\n        ReportForm = get_class('dashboard.reports.forms', 'ReportForm')\n        self.assertEqual('oscar.apps.dashboard.reports.forms', ReportForm.__module__)\n\n    def test_raise_exception_when_bad_appname_used(self):\n        with self.assertRaises(AppNotFoundError):\n            get_classes('fridge.models', ('Product', 'Category'))\n\n    def test_raise_exception_when_bad_classname_used(self):\n        with self.assertRaises(ClassNotFoundError):\n            get_class('catalogue.models', 'Monkey')\n\n    def test_raise_importerror_if_app_raises_importerror(self):\n        \"\"\"\n        This tests that Oscar doesn't fall back to using the Oscar catalogue\n        app if the overriding app throws an ImportError.\n        \"\"\"\n        apps = list(settings.INSTALLED_APPS)\n        apps[apps.index('oscar.apps.catalogue')] = 'tests._site.import_error_app.catalogue'\n        with override_settings(INSTALLED_APPS=apps):\n            with self.assertRaises(ImportError):\n                get_class('catalogue.app', 'CatalogueApplication')\n\n\nclass ClassLoadingWithLocalOverrideTests(TestCase):\n\n    def setUp(self):\n        self.installed_apps = list(settings.INSTALLED_APPS)\n        self.installed_apps[self.installed_apps.index('oscar.apps.shipping')] = 'tests._site.shipping'\n\n    def test_loading_class_defined_in_local_module(self):\n        with override_settings(INSTALLED_APPS=self.installed_apps):\n            (Free,) = get_classes('shipping.methods', ('Free',))\n            self.assertEqual('tests._site.shipping.methods', Free.__module__)\n\n    def test_loading_class_which_is_not_defined_in_local_module(self):\n        with override_settings(INSTALLED_APPS=self.installed_apps):\n            (FixedPrice,) = get_classes('shipping.methods', ('FixedPrice',))\n            self.assertEqual('oscar.apps.shipping.methods', FixedPrice.__module__)\n\n    def test_loading_class_from_module_not_defined_in_local_app(self):\n        with override_settings(INSTALLED_APPS=self.installed_apps):\n            (Repository,) = get_classes('shipping.repository', ('Repository',))\n            self.assertEqual('oscar.apps.shipping.repository', Repository.__module__)\n\n    def test_loading_classes_defined_in_both_local_and_oscar_modules(self):\n        with override_settings(INSTALLED_APPS=self.installed_apps):\n            (Free, FixedPrice) = get_classes('shipping.methods', ('Free', 'FixedPrice'))\n            self.assertEqual('tests._site.shipping.methods', Free.__module__)\n            self.assertEqual('oscar.apps.shipping.methods', FixedPrice.__module__)\n\n    def test_loading_classes_with_root_app(self):\n        import tests._site.shipping\n        path = dirname(dirname(tests._site.shipping.__file__))\n        with temporary_python_path([path]):\n            self.installed_apps[\n                self.installed_apps.index('tests._site.shipping')] = 'shipping'\n            with override_settings(INSTALLED_APPS=self.installed_apps):\n                (Free,) = get_classes('shipping.methods', ('Free',))\n                self.assertEqual('shipping.methods', Free.__module__)\n\n    def test_overriding_view_is_possible_without_overriding_app(self):\n        from oscar.apps.customer.app import application, CustomerApplication\n        # If test fails, it's helpful to know if it's caused by order of\n        # execution\n        self.assertEqual(CustomerApplication().summary_view.__module__,\n                         'tests._site.apps.customer.views')\n        self.assertEqual(application.summary_view.__module__,\n                         'tests._site.apps.customer.views')\n\n\nclass ClassLoadingWithLocalOverrideWithMultipleSegmentsTests(TestCase):\n\n    def setUp(self):\n        self.installed_apps = list(settings.INSTALLED_APPS)\n        self.installed_apps[self.installed_apps.index('oscar.apps.shipping')] = 'tests._site.apps.shipping'\n\n    def test_loading_class_defined_in_local_module(self):\n        with override_settings(INSTALLED_APPS=self.installed_apps):\n            (Free,) = get_classes('shipping.methods', ('Free',))\n            self.assertEqual('tests._site.apps.shipping.methods', Free.__module__)\n\n\nclass TestGetCoreAppsFunction(TestCase):\n    \"\"\"\n    oscar.get_core_apps function\n    \"\"\"\n\n    def test_returns_core_apps_when_no_overrides_specified(self):\n        apps = oscar.get_core_apps()\n        self.assertEqual(oscar.OSCAR_CORE_APPS, apps)\n\n    def test_uses_non_dashboard_override_when_specified(self):\n        apps = oscar.get_core_apps(overrides=['apps.shipping'])\n        self.assertTrue('apps.shipping' in apps)\n        self.assertTrue('oscar.apps.shipping' not in apps)\n\n    def test_uses_dashboard_override_when_specified(self):\n        apps = oscar.get_core_apps(overrides=['apps.dashboard.catalogue'])\n        self.assertTrue('apps.dashboard.catalogue' in apps)\n        self.assertTrue('oscar.apps.dashboard.catalogue' not in apps)\n        self.assertTrue('oscar.apps.catalogue' in apps)\n\n\nclass TestOverridingCoreApps(TestCase):\n\n    def test_means_the_overriding_model_is_registered_first(self):\n        klass = get_model('partner', 'StockRecord')\n        self.assertEqual(\n            'tests._site.apps.partner.models', klass.__module__)\n\n\nclass TestAppLabelsForModels(TestCase):\n\n    def test_all_oscar_models_have_app_labels(self):\n        from django.apps import apps\n        models = apps.get_models()\n        missing = []\n        for model in models:\n            # Ignore non-Oscar models\n            if 'oscar' not in repr(model):\n                continue\n            # Don't know how to get the actual model's Meta class. But if\n            # the parent doesn't have a Meta class, it's doesn't have an\n            # base in Oscar anyway and is not intended to be overridden\n            abstract_model = model.__base__\n            meta_class = getattr(abstract_model, 'Meta', None)\n            if meta_class is None:\n                continue\n\n            if not hasattr(meta_class, 'app_label'):\n                missing.append(model)\n        if missing:\n            self.fail(\"Those models don't have an app_label set: %s\" % missing)\n\n\nclass TestDynamicLoadingOn3rdPartyApps(TestCase):\n\n    core_app_prefix = 'thirdparty_package.apps'\n\n    def setUp(self):\n        self.installed_apps = list(settings.INSTALLED_APPS)\n        sys.path.append('./tests/_site/')\n\n    def tearDown(self):\n        sys.path.remove('./tests/_site/')\n\n    def test_load_core_3rd_party_class_correctly(self):\n        self.installed_apps.append('thirdparty_package.apps.myapp')\n        with override_settings(INSTALLED_APPS=self.installed_apps):\n            Cow, Goat = get_classes('myapp.models', ('Cow', 'Goat'), self.core_app_prefix)\n            self.assertEqual('thirdparty_package.apps.myapp.models', Cow.__module__)\n            self.assertEqual('thirdparty_package.apps.myapp.models', Goat.__module__)\n\n    def test_load_overriden_3rd_party_class_correctly(self):\n        self.installed_apps.append('apps.myapp')\n        with override_settings(INSTALLED_APPS=self.installed_apps):\n            Cow, Goat = get_classes('myapp.models', ('Cow', 'Goat'), self.core_app_prefix)\n            self.assertEqual('thirdparty_package.apps.myapp.models', Cow.__module__)\n            self.assertEqual('apps.myapp.models', Goat.__module__)\n\n\nclass OverriddenClassLoadingTestCase(TestCase):\n\n    def test_non_override_class_loader(self):\n        from oscar.apps.catalogue.views import ProductDetailView\n        View = get_class('catalogue.views', 'ProductDetailView')\n        self.assertEqual(View, ProductDetailView)\n\n    @override_settings(OSCAR_DYNAMIC_CLASS_LOADER='tests._site.loader.custom_class_loader')\n    def test_override_class_loader(self):\n        # Clear lru cache for the class loader\n        get_class_loader.cache_clear()\n\n        View = get_class('catalogue.views', 'ProductDetailView')\n        self.assertEqual(View, DummyClass)\n\n        # Clear lru cache for the class loader again\n        get_class_loader.cache_clear()\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django import forms\nfrom django.conf import settings\n\nfrom oscar.core.loading import get_model\nfrom oscar.forms.mixins import PhoneNumberMixin\n\nUserAddress = get_model('address', 'useraddress')\n\n\nclass AbstractAddressForm(forms.ModelForm):\n\n    def __init__(self, *args, **kwargs):\n        \"\"\"\n        Set fields in OSCAR_REQUIRED_ADDRESS_FIELDS as required.\n        \"\"\"\n        super().__init__(*args, **kwargs)\n        field_names = (set(self.fields) &\n                       set(settings.OSCAR_REQUIRED_ADDRESS_FIELDS))\n        for field_name in field_names:\n            self.fields[field_name].required = True\n\n\nclass UserAddressForm(PhoneNumberMixin, AbstractAddressForm):\n\n    class Meta:\n        model = UserAddress\n        fields = [\n            'title', 'first_name', 'last_name',\n            'line1', 'line2', 'line3', 'line4',\n            'state', 'postcode', 'country',\n            'phone_number', 'notes',\n        ]\n\n    def __init__(self, user, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.instance.user = user\n",
    "output": "from django import forms\nfrom django.test import TestCase, override_settings\n\nfrom oscar.apps.address.forms import AbstractAddressForm\nfrom oscar.apps.address.models import UserAddress\nfrom oscar.apps.order.models import ShippingAddress\nfrom oscar.forms.mixins import PhoneNumberMixin\nfrom oscar.test.factories import CountryFactory\n\n\nclass PhoneNumberMixinTestCase(TestCase):\n\n    def test_mixin_adds_phone_number_field(self):\n\n        class TestForm(PhoneNumberMixin, forms.Form):\n            pass\n\n        form = TestForm()\n        self.assertIn('phone_number', form.fields)\n\n    def test_mixin_adds_all_phone_number_fields(self):\n\n        class TestForm(PhoneNumberMixin, forms.Form):\n            phone_number_fields = {\n                'phone_number': {\n                    'required': False,\n                    'help_text': '',\n                    'max_length': 32,\n                    'label': 'Phone number'\n                },\n                'another_phone_number': {\n                    'required': False,\n                    'help_text': 'Another phone number help text',\n                    'max_length': 32,\n                    'label': 'Another phone number'\n                },\n                'one_more_phone_number': {\n                    'required': False,\n                    'help_text': '',\n                    'max_length': 32,\n                    'label': 'One more phone number'\n                },\n            }\n\n        form = TestForm()\n        self.assertIn('phone_number', form.fields)\n        self.assertIn('another_phone_number', form.fields)\n        self.assertIn('one_more_phone_number', form.fields)\n\n        field = form.fields['another_phone_number']\n        self.assertEqual(field.help_text, 'Another phone number help text')\n\n    def test_mixin_retains_existing_field_properties(self):\n\n        class TestForm(PhoneNumberMixin, forms.ModelForm):\n\n            class Meta:\n                model = UserAddress\n                fields = ['country', 'phone_number']\n                # Override default label and help text\n                labels = {'phone_number': 'Special number'}\n                help_texts = {'phone_number': 'Special help text'}\n\n        form = TestForm()\n        field = form.fields['phone_number']\n        self.assertEqual(field.label, 'Special number')\n        self.assertEqual(field.help_text, 'Special help text')\n\n    @override_settings(OSCAR_REQUIRED_ADDRESS_FIELDS=('phone_number',))\n    def test_required_empty_field_raises_validation_error(self):\n\n        class TestForm(PhoneNumberMixin, AbstractAddressForm):\n            phone_number_fields = {\n                'phone_number': {\n                    'required': True,\n                    'help_text': '',\n                    'max_length': 32,\n                    'label': 'Phone number'\n                }\n            }\n\n            class Meta:\n                model = ShippingAddress\n                fields = ['country', 'phone_number', 'postcode']\n\n        CountryFactory(iso_3166_1_a2='GB', is_shipping_country=True)\n        form = TestForm(data={'phone_number': '', 'country': 'GB', 'postcode': 'WW1 2BB'})\n        self.assertFalse(form.is_valid())\n        self.assertEqual(form.errors['phone_number'], ['This field is required.'])\n\n    @override_settings(OSCAR_REQUIRED_ADDRESS_FIELDS=[])\n    def test_optional_empty_field_validates(self):\n\n        class TestForm(PhoneNumberMixin, AbstractAddressForm):\n            phone_number_fields = {\n                'phone_number': {\n                    'required': False,\n                    'help_text': '',\n                    'max_length': 32,\n                    'label': 'Phone number'\n                }\n            }\n\n            class Meta:\n                model = ShippingAddress\n                fields = ['country', 'phone_number', 'postcode']\n\n        CountryFactory(iso_3166_1_a2='GB', is_shipping_country=True)\n        form = TestForm(data={'phone_number': '', 'country': 'GB', 'postcode': 'WW1 2BB'})\n        self.assertTrue(form.is_valid())\n\n    @override_settings(OSCAR_REQUIRED_ADDRESS_FIELDS=[])\n    def test_invalid_number_fails_validation(self):\n\n        class TestForm(PhoneNumberMixin, AbstractAddressForm):\n            phone_number_fields = {\n                'phone_number': {\n                    'required': False,\n                    'help_text': '',\n                    'max_length': 32,\n                    'label': 'Phone number'\n                }\n            }\n\n            class Meta:\n                model = ShippingAddress\n                fields = ['country', 'phone_number', 'postcode']\n\n        CountryFactory(iso_3166_1_a2='GB', is_shipping_country=True)\n        form = TestForm(data={'phone_number': '123456', 'country': 'GB', 'postcode': 'WW1 2BB'})\n        self.assertFalse(form.is_valid())\n        self.assertEqual(form.errors['phone_number'], ['This is not a valid local phone format for UNITED KINGDOM.'])\n\n    @override_settings(OSCAR_REQUIRED_ADDRESS_FIELDS=[])\n    def test_valid_number_passes_validation(self):\n\n        class TestForm(PhoneNumberMixin, AbstractAddressForm):\n            phone_number_fields = {\n                'phone_number': {\n                    'required': False,\n                    'help_text': '',\n                    'max_length': 32,\n                    'label': 'Phone number'\n                }\n            }\n\n            class Meta:\n                model = ShippingAddress\n                fields = ['country', 'phone_number', 'postcode']\n\n        CountryFactory(iso_3166_1_a2='GB', is_shipping_country=True)\n        form = TestForm(data={'phone_number': '02089001234', 'country': 'GB', 'postcode': 'WW1 2BB'})\n        self.assertTrue(form.is_valid())\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django import forms\nfrom django.conf import settings\n\nfrom oscar.core.loading import get_model\nfrom oscar.forms.mixins import PhoneNumberMixin\n\nUserAddress = get_model('address', 'useraddress')\n\n\nclass AbstractAddressForm(forms.ModelForm):\n\n    def __init__(self, *args, **kwargs):\n        \"\"\"\n        Set fields in OSCAR_REQUIRED_ADDRESS_FIELDS as required.\n        \"\"\"\n        super().__init__(*args, **kwargs)\n        field_names = (set(self.fields) &\n                       set(settings.OSCAR_REQUIRED_ADDRESS_FIELDS))\n        for field_name in field_names:\n            self.fields[field_name].required = True\n\n\nclass UserAddressForm(PhoneNumberMixin, AbstractAddressForm):\n\n    class Meta:\n        model = UserAddress\n        fields = [\n            'title', 'first_name', 'last_name',\n            'line1', 'line2', 'line3', 'line4',\n            'state', 'postcode', 'country',\n            'phone_number', 'notes',\n        ]\n\n    def __init__(self, user, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.instance.user = user\n",
    "output": "from django.core.exceptions import ImproperlyConfigured\nfrom django.test import TestCase\n\nfrom oscar.models.fields import NullCharField\n\n\nclass NullCharFieldTest(TestCase):\n\n    def test_from_db_value_converts_null_to_string(self):\n        field = NullCharField()\n        self.assertEqual('', field.from_db_value(None, expression=None, connection=None, context=None))\n\n    def test_get_prep_value_converts_empty_string_to_null(self):\n        field = NullCharField()\n        self.assertEqual(None, field.get_prep_value(''))\n\n    def test_raises_exception_for_invalid_null_blank_combo(self):\n        with self.assertRaises(ImproperlyConfigured):\n            NullCharField(null=True, blank=False)\n\n        with self.assertRaises(ImproperlyConfigured):\n            NullCharField(null=False, blank=True)\n\n        with self.assertRaises(ImproperlyConfigured):\n            NullCharField(null=False, blank=False)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django import forms\nfrom django.conf import settings\n\nfrom oscar.core.loading import get_model\nfrom oscar.forms.mixins import PhoneNumberMixin\n\nUserAddress = get_model('address', 'useraddress')\n\n\nclass AbstractAddressForm(forms.ModelForm):\n\n    def __init__(self, *args, **kwargs):\n        \"\"\"\n        Set fields in OSCAR_REQUIRED_ADDRESS_FIELDS as required.\n        \"\"\"\n        super().__init__(*args, **kwargs)\n        field_names = (set(self.fields) &\n                       set(settings.OSCAR_REQUIRED_ADDRESS_FIELDS))\n        for field_name in field_names:\n            self.fields[field_name].required = True\n\n\nclass UserAddressForm(PhoneNumberMixin, AbstractAddressForm):\n\n    class Meta:\n        model = UserAddress\n        fields = [\n            'title', 'first_name', 'last_name',\n            'line1', 'line2', 'line3', 'line4',\n            'state', 'postcode', 'country',\n            'phone_number', 'notes',\n        ]\n\n    def __init__(self, user, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.instance.user = user\n",
    "output": "from decimal import Decimal as D\nfrom itertools import product\nfrom django.test import TestCase\n\nfrom oscar.core.prices import Price\n\n\nclass TestPriceObject(TestCase):\n\n    def test_can_be_instantiated_with_tax_amount(self):\n        price = Price('USD', D('10.00'), tax=D('2.00'))\n        self.assertTrue(price.is_tax_known)\n        self.assertEqual(D('12.00'), price.incl_tax)\n\n    def test_can_have_tax_set_later(self):\n        price = Price('USD', D('10.00'))\n        price.tax = D('2.00')\n        self.assertEqual(D('12.00'), price.incl_tax)\n\n    def test_price_equals_reflexivity(self):\n        for price in (\n            Price(currency='USD', excl_tax=D('10.00')),\n            Price(currency='USD', excl_tax=D('10.00'), tax=D('2.00')),\n            Price(currency='USD', excl_tax=D('10.00'), incl_tax=D('12.00')),\n        ):\n            self.assertEqual(price, price)\n\n    def test_price_equals_formats(self):\n        price1 = Price(currency='USD', excl_tax=D('10.00'), tax=D('2.00'))\n        price2 = Price(currency='USD', excl_tax=D('10.00'), incl_tax=D('12.00'))\n        self.assertEqual(price1, price2)\n\n    def test_price_equals_currency_matters(self):\n        price1 = Price(currency='EUR', excl_tax=D('10.00'), tax=D('2.00'))\n        price2 = Price(currency='USD', excl_tax=D('10.00'), tax=D('2.00'))\n        self.assertNotEqual(price1, price2)\n\n    def test_price_equals_transitivity(self):\n        prices = (\n            Price(currency='EUR', excl_tax=D('10.00'), tax=D('2.00')),\n            Price(currency='USD', excl_tax=D('10.00'), tax=D('2.00')),\n            Price(currency='USD', excl_tax=D('10.00'), incl_tax=D('12.00')),\n            Price(currency='USD', excl_tax=D('10.00'), tax=D('8.00'))\n        )\n        prices_product = product(prices, prices)\n        for price1, price2 in prices_product:\n            self.assertEqual(price1 == price2, price2 == price1)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django import forms\nfrom django.conf import settings\n\nfrom oscar.core.loading import get_model\nfrom oscar.forms.mixins import PhoneNumberMixin\n\nUserAddress = get_model('address', 'useraddress')\n\n\nclass AbstractAddressForm(forms.ModelForm):\n\n    def __init__(self, *args, **kwargs):\n        \"\"\"\n        Set fields in OSCAR_REQUIRED_ADDRESS_FIELDS as required.\n        \"\"\"\n        super().__init__(*args, **kwargs)\n        field_names = (set(self.fields) &\n                       set(settings.OSCAR_REQUIRED_ADDRESS_FIELDS))\n        for field_name in field_names:\n            self.fields[field_name].required = True\n\n\nclass UserAddressForm(PhoneNumberMixin, AbstractAddressForm):\n\n    class Meta:\n        model = UserAddress\n        fields = [\n            'title', 'first_name', 'last_name',\n            'line1', 'line2', 'line3', 'line4',\n            'state', 'postcode', 'country',\n            'phone_number', 'notes',\n        ]\n\n    def __init__(self, user, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.instance.user = user\n",
    "output": "# coding=utf-8\n\nfrom django.test import TestCase\nfrom django.test.utils import override_settings\n\n\nclass SlugFieldTest(TestCase):\n\n    def test_slugfield_allow_unicode_kwargs_precedence(self):\n        from oscar.models.fields.slugfield import SlugField\n        with override_settings(OSCAR_SLUG_ALLOW_UNICODE=True):\n            slug_field = SlugField(allow_unicode=False)\n            self.assertFalse(slug_field.allow_unicode)\n            slug_field = SlugField()\n            self.assertTrue(slug_field.allow_unicode)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django import forms\nfrom django.conf import settings\n\nfrom oscar.core.loading import get_model\nfrom oscar.forms.mixins import PhoneNumberMixin\n\nUserAddress = get_model('address', 'useraddress')\n\n\nclass AbstractAddressForm(forms.ModelForm):\n\n    def __init__(self, *args, **kwargs):\n        \"\"\"\n        Set fields in OSCAR_REQUIRED_ADDRESS_FIELDS as required.\n        \"\"\"\n        super().__init__(*args, **kwargs)\n        field_names = (set(self.fields) &\n                       set(settings.OSCAR_REQUIRED_ADDRESS_FIELDS))\n        for field_name in field_names:\n            self.fields[field_name].required = True\n\n\nclass UserAddressForm(PhoneNumberMixin, AbstractAddressForm):\n\n    class Meta:\n        model = UserAddress\n        fields = [\n            'title', 'first_name', 'last_name',\n            'line1', 'line2', 'line3', 'line4',\n            'state', 'postcode', 'country',\n            'phone_number', 'notes',\n        ]\n\n    def __init__(self, user, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.instance.user = user\n",
    "output": "# coding=utf-8\nfrom django.test import TestCase\nfrom django.test.utils import override_settings\n\nfrom oscar.core import utils\n\n\ndef sluggish(value, allow_unicode=False):\n    return value.upper()\n\n\nclass TestSlugify(TestCase):\n\n    def test_default_unicode_to_ascii(self):\n        self.assertEqual('konig-der-straxdfe', utils.slugify('K\u00f6nig der Stra\u00dfe'))\n        self.assertEqual('not-fancy', utils.slugify('Not fancy'))\n        self.assertEqual('u4e01u4e02-u4e03u4e04u4e05', utils.slugify('\u4e01\u4e02 \u4e03\u4e04\u4e05'))\n\n    @override_settings(OSCAR_SLUG_ALLOW_UNICODE=True)\n    def test_allow_unicode(self):\n        self.assertEqual('k\u00f6nig-der-stra\u00dfe', utils.slugify('K\u00f6nig der Stra\u00dfe'))\n        self.assertEqual('\u4e01\u4e02-\u4e03\u4e04\u4e05', utils.slugify('\u4e01\u4e02 \u4e03\u4e04\u4e05'))\n        self.assertEqual('not-fancy', utils.slugify('Not fancy'))\n\n    @override_settings(OSCAR_SLUG_FUNCTION='tests.integration.core.test_utils.sluggish')\n    def test_custom_slugifier(self):\n        self.assertEqual('HAM AND EGGS', utils.slugify('Ham and eggs'))\n\n    @override_settings(OSCAR_SLUG_MAP={'c++': 'cpp'})\n    def test_uses_custom_mappings(self):\n        self.assertEqual('cpp', utils.slugify('c++'))\n\n    @override_settings(OSCAR_SLUG_BLACKLIST=['the'])\n    def test_uses_blacklist(self):\n        self.assertEqual('bible', utils.slugify('The Bible'))\n\n    @override_settings(OSCAR_SLUG_BLACKLIST=['the', 'bible'])\n    def test_uses_blacklist_doesnt_reduce_to_nothing(self):\n        self.assertEqual('bible', utils.slugify('The Bible'))\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django import forms\nfrom django.conf import settings\n\nfrom oscar.core.loading import get_model\nfrom oscar.forms.mixins import PhoneNumberMixin\n\nUserAddress = get_model('address', 'useraddress')\n\n\nclass AbstractAddressForm(forms.ModelForm):\n\n    def __init__(self, *args, **kwargs):\n        \"\"\"\n        Set fields in OSCAR_REQUIRED_ADDRESS_FIELDS as required.\n        \"\"\"\n        super().__init__(*args, **kwargs)\n        field_names = (set(self.fields) &\n                       set(settings.OSCAR_REQUIRED_ADDRESS_FIELDS))\n        for field_name in field_names:\n            self.fields[field_name].required = True\n\n\nclass UserAddressForm(PhoneNumberMixin, AbstractAddressForm):\n\n    class Meta:\n        model = UserAddress\n        fields = [\n            'title', 'first_name', 'last_name',\n            'line1', 'line2', 'line3', 'line4',\n            'state', 'postcode', 'country',\n            'phone_number', 'notes',\n        ]\n\n    def __init__(self, user, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.instance.user = user\n",
    "output": "from django.core.exceptions import ValidationError\nfrom django.contrib.flatpages.models import FlatPage\nfrom django.test import TestCase, override_settings\nfrom django.utils.translation import activate\n\nfrom oscar.core.validators import ExtendedURLValidator, URLDoesNotExistValidator\n\n\nclass TestExtendedURLValidator(TestCase):\n\n    def setUp(self):\n        self.validator = ExtendedURLValidator()\n\n    def test_validates_local_url(self):\n        try:\n            self.validator('/')\n        except ValidationError:\n            self.fail('ExtendedURLValidator raised ValidationError'\n                      'unexpectedly!')\n\n    def test_validates_local_url_with_query_strings(self):\n        try:\n            self.validator('/?q=test')  # Query strings shouldn't affect validation\n        except ValidationError:\n            self.fail('ExtendedURLValidator raised ValidationError'\n                      'unexpectedly!')\n\n    def test_raises_validation_error_for_missing_urls(self):\n        with self.assertRaises(ValidationError):\n            self.validator('/invalid/')\n\n    def test_validates_urls_missing_preceding_slash(self):\n        try:\n            self.validator('catalogue/')\n        except ValidationError:\n            self.fail('ExtendedURLValidator raised ValidationError'\n                      'unexpectedly!')\n\n    def test_raises_validation_error_for_urls_without_trailing_slash(self):\n        with self.assertRaises(ValidationError):\n            self.validator('/catalogue')  # Missing the / is bad\n\n    def test_validates_flatpages_urls(self):\n        FlatPage.objects.create(title='test page', url='/test/page/')\n        try:\n            self.validator('/test/page/')\n        except ValidationError:\n            self.fail('ExtendedURLValidator raises ValidationError'\n                      'unexpectedly!')\n\n\n@override_settings(\n    LANGUAGES=(\n        ('de', 'German'),\n        ('en-gb', 'British English'),\n    )\n)\nclass TestExtendedURLValidatorForLocalePrefixURLS(TestCase):\n    def setUp(self):\n        self.validator = ExtendedURLValidator()\n\n    def test_validate_same_locals(self):\n        \"\"\"\n        Current locale is default (\"en-gb\"), URL has locale prefix\n        of default and current locale (\"en-gb\").\n        \"\"\"\n        try:\n            self.validator('/en-gb/test/')\n        except ValidationError:\n            self.fail('ExtendedURLValidator raised ValidationError'\n                      'unexpectedly!')\n\n    def test_validate_prefix_locale_is_non_default(self):\n        \"\"\"\n        Current locale is default (\"en-gb\"), URL has locale prefix\n        of non-default locale (\"de\").\n        \"\"\"\n        try:\n            self.validator('/de/test/')\n        except ValidationError:\n            self.fail('ExtendedURLValidator raised ValidationError'\n                      'unexpectedly!')\n\n    def test_validate_current_locale_is_non_default(self):\n        \"\"\"\n        Current locale is non-default (\"de\"), URL has locale prefix\n        of default locale (\"en-gb\").\n        \"\"\"\n        activate('de')\n        try:\n            self.validator('/en-gb/test/')\n        except ValidationError:\n            self.fail('ExtendedURLValidator raised ValidationError'\n                      'unexpectedly!')\n\n    def test_validate_current_and_prefix_locales_are_non_default_and_same(self):\n        \"\"\"\n        Current locale is non-default (\"de\"), URL has locale prefix\n        of non-default locale (\"de\").\n        \"\"\"\n        activate('de')\n        try:\n            self.validator('/de/test/')\n        except ValidationError:\n            self.fail('ExtendedURLValidator raised ValidationError'\n                      'unexpectedly!')\n\n    def test_validate_current_and_prefix_locales_are_non_default_and_different(self):\n        \"\"\"\n        Current locale is non-default (\"it\"), URL has locale prefix\n        of non-default locale (\"de\").\n        \"\"\"\n        activate('it')\n        try:\n            self.validator('/de/test/')\n        except ValidationError:\n            self.fail('ExtendedURLValidator raised ValidationError'\n                      'unexpectedly!')\n\n\nclass TestURLDoesNotExistValidator(TestCase):\n\n    def setUp(self):\n        self.validator = URLDoesNotExistValidator()\n\n    def test_raises_exception_for_local_urls(self):\n        self.assertRaises(ValidationError, self.validator, '/')\n\n    def test_raises_exception_for_flatpages(self):\n        FlatPage.objects.create(title='test page', url='/test/page/')\n        self.assertRaises(ValidationError, self.validator, '/test/page/')\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django import forms\nfrom django.conf import settings\n\nfrom oscar.core.loading import get_model\nfrom oscar.forms.mixins import PhoneNumberMixin\n\nUserAddress = get_model('address', 'useraddress')\n\n\nclass AbstractAddressForm(forms.ModelForm):\n\n    def __init__(self, *args, **kwargs):\n        \"\"\"\n        Set fields in OSCAR_REQUIRED_ADDRESS_FIELDS as required.\n        \"\"\"\n        super().__init__(*args, **kwargs)\n        field_names = (set(self.fields) &\n                       set(settings.OSCAR_REQUIRED_ADDRESS_FIELDS))\n        for field_name in field_names:\n            self.fields[field_name].required = True\n\n\nclass UserAddressForm(PhoneNumberMixin, AbstractAddressForm):\n\n    class Meta:\n        model = UserAddress\n        fields = [\n            'title', 'first_name', 'last_name',\n            'line1', 'line2', 'line3', 'line4',\n            'state', 'postcode', 'country',\n            'phone_number', 'notes',\n        ]\n\n    def __init__(self, user, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.instance.user = user\n",
    "output": "import pytest\n\nfrom oscar.views import handler403, handler404, handler500\n\n\n@pytest.mark.django_db\ndef test_handler403_response_status(rf):\n    request = rf.get('/')\n    response = handler403(request, exception=None)\n    assert response.status_code == 403\n\n\n@pytest.mark.django_db\ndef test_handler404_response_status(rf):\n    request = rf.get('/')\n    response = handler404(request, exception=None)\n    assert response.status_code == 404\n\n\n@pytest.mark.django_db\ndef test_handler500_response_status(rf):\n    request = rf.get('/')\n    response = handler500(request)\n    assert response.status_code == 500\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom django import forms\nfrom django.conf import settings\n\nfrom oscar.core.loading import get_model\nfrom oscar.forms.mixins import PhoneNumberMixin\n\nUserAddress = get_model('address', 'useraddress')\n\n\nclass AbstractAddressForm(forms.ModelForm):\n\n    def __init__(self, *args, **kwargs):\n        \"\"\"\n        Set fields in OSCAR_REQUIRED_ADDRESS_FIELDS as required.\n        \"\"\"\n        super().__init__(*args, **kwargs)\n        field_names = (set(self.fields) &\n                       set(settings.OSCAR_REQUIRED_ADDRESS_FIELDS))\n        for field_name in field_names:\n            self.fields[field_name].required = True\n\n\nclass UserAddressForm(PhoneNumberMixin, AbstractAddressForm):\n\n    class Meta:\n        model = UserAddress\n        fields = [\n            'title', 'first_name', 'last_name',\n            'line1', 'line2', 'line3', 'line4',\n            'state', 'postcode', 'country',\n            'phone_number', 'notes',\n        ]\n\n    def __init__(self, user, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.instance.user = user\n",
    "output": ""
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom oscar.apps.address.abstract_models import (\n    AbstractCountry, AbstractUserAddress)\nfrom oscar.core.loading import is_model_registered\n\n__all__ = []\n\n\nif not is_model_registered('address', 'UserAddress'):\n    class UserAddress(AbstractUserAddress):\n        pass\n\n    __all__.append('UserAddress')\n\n\nif not is_model_registered('address', 'Country'):\n    class Country(AbstractCountry):\n        pass\n\n    __all__.append('Country')\n",
    "output": "from django.test import TestCase\n\nfrom oscar.apps.address import models, forms\nfrom oscar.test.factories import UserFactory\n\n\nclass TestUserAddressForm(TestCase):\n\n    def setUp(self):\n        self.user = UserFactory()\n        self.country = models.Country.objects.create(\n            iso_3166_1_a2='GB', name=\"UNITED KINGDOM\")\n\n    def test_merges_addresses_with_same_hash(self):\n        data = {\n            'user': self.user,\n            'first_name': \"Matus\",\n            'last_name': \"Moravcik\",\n            'line1': \"1 Egg Street\",\n            'line4': \"London\",\n            'postcode': \"N12 9RE\",\n            'country': self.country}\n\n        # Create two addresses, which are slightly different\n        models.UserAddress.objects.create(**data)\n        other = data.copy()\n        other['first_name'] = 'Izidor'\n        duplicate = models.UserAddress.objects.create(**other)\n\n        # Edit duplicate to be same as original and check that the two\n        # addresses are merged when the form saves.\n        post_data = data.copy()\n        post_data['country'] = self.country.iso_3166_1_a2\n        form = forms.UserAddressForm(self.user, post_data, instance=duplicate)\n        self.assertFalse(form.is_valid())\n        self.assertTrue(len(form.errors['__all__']) > 0)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom oscar.apps.address.abstract_models import (\n    AbstractCountry, AbstractUserAddress)\nfrom oscar.core.loading import is_model_registered\n\n__all__ = []\n\n\nif not is_model_registered('address', 'UserAddress'):\n    class UserAddress(AbstractUserAddress):\n        pass\n\n    __all__.append('UserAddress')\n\n\nif not is_model_registered('address', 'Country'):\n    class Country(AbstractCountry):\n        pass\n\n    __all__.append('Country')\n",
    "output": "# -*- coding: utf-8 -*-\nimport pytest\nfrom django.test import TestCase\nfrom django.core import exceptions\n\nfrom oscar.apps.order.models import ShippingAddress\nfrom oscar.core.compat import get_user_model\nfrom oscar.apps.address import models\nfrom oscar.test import factories\n\nfrom tests._site.model_tests_app.models import (\n    UserAddressModelWithCustomBaseFields, UserAddressModelWithCustomHashFields\n)\n\nUser = get_user_model()\n\n\nclass UserAddressModelWithCustomBaseFieldsFactory(factories.UserAddressFactory):\n    class Meta:\n        model = UserAddressModelWithCustomBaseFields\n\n\nclass UserAddressModelWithCustomHashFieldsFactory(factories.UserAddressFactory):\n    class Meta:\n        model = UserAddressModelWithCustomHashFields\n\n\nclass TestUserAddress(TestCase):\n\n    def setUp(self):\n        self.country = factories.CountryFactory.build()\n        self.user = factories.UserFactory()\n\n    def test_uses_title_firstname_and_lastname_in_salutation(self):\n        a = factories.UserAddressFactory.build(\n            country=self.country,\n            title='Dr',\n            first_name='Barry',\n            last_name='Barrington',\n            user=self.user)\n        self.assertEqual(\"Dr Barry Barrington\", a.salutation)\n\n    def test_strips_whitespace_from_salutation(self):\n        a = factories.UserAddressFactory.build(\n            title='',\n            first_name='',\n            last_name='Barrington',\n            country=self.country,\n            user=self.user)\n        self.assertEqual(\"Barrington\", a.salutation)\n\n    def test_has_name_property(self):\n        a = factories.UserAddressFactory.build(\n            country=self.country,\n            first_name='Barry',\n            last_name='Barrington',\n            user=self.user)\n        self.assertEqual(\"Barry Barrington\", a.name)\n\n    def test_has_summary_property(self):\n        c = factories.CountryFactory(name='')\n        a = factories.UserAddressFactory(\n            country=c,\n            title='Dr',\n            first_name='Barry',\n            last_name='Barrington',\n            line1='1 King Road',\n            line4='London',\n            postcode='SW1 9RE')\n        self.assertEqual(\n            \"Dr Barry Barrington, 1 King Road, London, SW1 9RE, UNITED KINGDOM\",\n            a.summary)\n\n    def test_summary_includes_country(self):\n        c = factories.CountryFactory.build(name='UNITED KINGDOM')\n        a = factories.UserAddressFactory.build(\n            country=c,\n            title='Dr',\n            first_name='Barry',\n            last_name='Barrington',\n            line1='1 King Road',\n            line4='London',\n            postcode='SW1 9RE',\n            user=self.user)\n        self.assertEqual(\n            \"Dr Barry Barrington, 1 King Road, London, SW1 9RE, UNITED KINGDOM\",\n            a.summary)\n\n    def test_hash_value(self):\n        a = factories.UserAddressFactory.build(\n            country=self.country,\n            user=self.user)\n        self.assertEqual(a.generate_hash(), 2668616117)\n\n    def test_hash_and_summary_values_on_model_with_custom_base_fields(self):\n        a = UserAddressModelWithCustomBaseFieldsFactory.build(country=self.country, user=self.user)\n        self.assertEqual(a.summary, '1 King Road, London')\n        self.assertEqual(a.generate_hash(), 2668616117)\n\n    def test_hash_and_summary_values_on_model_with_custom_hash_fields(self):\n        a = UserAddressModelWithCustomHashFieldsFactory.build(country=self.country, user=self.user)\n        self.assertEqual(a.summary, 'Dr Barry Barrington, 1 King Road, London, SW1 9RE, UNITED KINGDOM')\n        self.assertEqual(a.generate_hash(), 2153195893)\n\n    def test_can_be_hashed_including_non_ascii(self):\n        a = factories.UserAddressFactory.build(\n            first_name=\"\\u0141ukasz Smith\",\n            last_name='Smith',\n            line1=\"75 Smith Road\",\n            postcode=\"n4 8ty\",\n            country=self.country,\n            user=self.user)\n        hash = a.generate_hash()\n        self.assertTrue(hash is not None)\n\n    def test_strips_whitespace_in_name_property(self):\n        a = factories.UserAddressFactory.build(\n            first_name='',\n            last_name='Barrington',\n            country=self.country,\n            user=self.user)\n        self.assertEqual(\"Barrington\", a.name)\n\n    def test_uses_city_as_an_alias_of_line4(self):\n        a = factories.UserAddressFactory.build(\n            line4='London',\n            country=self.country,\n            user=self.user)\n        self.assertEqual('London', a.city)\n\n    def test_converts_postcode_to_uppercase_when_cleaning(self):\n        address = factories.UserAddressFactory.build(\n            postcode=\"n4 8ty\",\n            country=self.country,\n            user=self.user)\n        address.clean()\n        self.assertEqual(\"N4 8TY\", address.postcode)\n\n    def test_strips_whitespace_when_cleaning(self):\n        a = factories.UserAddressFactory.build(\n            line1=\"  75 Smith Road  \",\n            postcode=\"  n4 8ty\",\n            country=self.country,\n            user=self.user)\n        a.clean()\n        self.assertEqual(\"N4 8TY\", a.postcode)\n        self.assertEqual(\"75 Smith Road\", a.line1)\n\n    def test_active_address_fields_skips_whitespace_only_fields(self):\n        a = factories.UserAddressFactory.build(\n            first_name='   ',\n            last_name='Barrington',\n            line1='  75 Smith Road  ',\n            postcode='  n4 8ty',\n            title='',\n            country=self.country,\n            user=self.user)\n        active_fields = a.active_address_fields()\n        self.assertEqual(\"Barrington\", active_fields[0])\n\n    def test_ignores_whitespace_when_hashing(self):\n        a1 = factories.UserAddressFactory.build(\n            first_name='Terry',\n            last_name='Barrington',\n            country=self.country,\n            user=self.user)\n        a1.clean()\n        a2 = factories.UserAddressFactory.build(\n            first_name='   Terry  ',\n            last_name='     Barrington',\n            country=self.country,\n            user=self.user)\n        a2.clean()\n        self.assertEqual(a1.generate_hash(), a2.generate_hash())\n\n    def test_populate_shipping_address_doesnt_set_id(self):\n        a = factories.UserAddressFactory.build(\n            country=self.country,\n            user=self.user)\n        a.clean()\n        sa = ShippingAddress()\n        a.populate_alternative_model(sa)\n        self.assertIsNone(sa.id)\n\n    def test_populated_shipping_address_has_same_summary_user_address(self):\n        a = factories.UserAddressFactory.build(\n            country=self.country,\n            user=self.user)\n        a.clean()\n        sa = ShippingAddress()\n        a.populate_alternative_model(sa)\n        self.assertEqual(sa.summary, a.summary)\n\n    def test_summary_value(self):\n        a = factories.UserAddressFactory.build(\n            country=self.country,\n            user=self.user)\n        self.assertEqual(a.summary, 'Dr Barry Barrington, 1 King Road, London, SW1 9RE, UNITED KINGDOM')\n\n    def test_summary_is_property(self):\n        a = factories.UserAddressFactory.build(\n            title='',\n            line4='',\n            first_name=\" Terry  \",\n            last_name='Barrington',\n            line1=\"  75 Smith Road  \",\n            postcode=\"  n4 8ty\",\n            country=self.country,\n            user=self.user)\n        a.clean()\n        self.assertEqual(\n            \"Terry Barrington, 75 Smith Road, N4 8TY, UNITED KINGDOM\",\n            a.summary)\n\n\nVALID_POSTCODES = [\n    ('GB', 'N1 9RT'),\n    ('SK', '991 41'),\n    ('CZ', '612 00'),\n    ('CC', '6799'),\n    ('CY', '8240'),\n    ('MC', '98000'),\n    ('SH', 'STHL 1ZZ'),\n    ('JP', '150-2345'),\n    ('PG', '314'),\n    ('HN', '41202'),\n    ('BN', 'BC3615'),\n    ('TW', '104'),\n    ('TW', '10444'),\n    # It works for small cases as well\n    ('GB', 'sw2 1rw'),\n]\n\n\nINVALID_POSTCODES = [\n    ('GB', 'not-a-postcode'),\n    ('DE', '123b4'),\n]\n\n\n@pytest.mark.parametrize('country_value, postcode_value', VALID_POSTCODES)\ndef test_assert_valid_postcode(country_value, postcode_value):\n    country = models.Country(iso_3166_1_a2=country_value)\n    address = models.UserAddress(country=country, postcode=postcode_value)\n    address.clean()\n\n\n@pytest.mark.parametrize('country_value, postcode_value', INVALID_POSTCODES)\ndef test_assert_invalid_postcode(country_value, postcode_value):\n    country = models.Country(iso_3166_1_a2=country_value)\n    address = models.UserAddress(country=country, postcode=postcode_value)\n\n    with pytest.raises(exceptions.ValidationError):\n        address.clean()\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom oscar.apps.address.abstract_models import (\n    AbstractCountry, AbstractUserAddress)\nfrom oscar.core.loading import is_model_registered\n\n__all__ = []\n\n\nif not is_model_registered('address', 'UserAddress'):\n    class UserAddress(AbstractUserAddress):\n        pass\n\n    __all__.append('UserAddress')\n\n\nif not is_model_registered('address', 'Country'):\n    class Country(AbstractCountry):\n        pass\n\n    __all__.append('Country')\n",
    "output": ""
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom oscar.apps.address.abstract_models import (\n    AbstractCountry, AbstractUserAddress)\nfrom oscar.core.loading import is_model_registered\n\n__all__ = []\n\n\nif not is_model_registered('address', 'UserAddress'):\n    class UserAddress(AbstractUserAddress):\n        pass\n\n    __all__.append('UserAddress')\n\n\nif not is_model_registered('address', 'Country'):\n    class Country(AbstractCountry):\n        pass\n\n    __all__.append('Country')\n",
    "output": "from datetime import datetime, date\n\nfrom django.test import TestCase\nfrom django.core.exceptions import ValidationError\nfrom django.core.files.uploadedfile import SimpleUploadedFile\n\nfrom oscar.test import factories\n\n\nclass TestBooleanAttributes(TestCase):\n\n    def setUp(self):\n        self.attr = factories.ProductAttributeFactory(type=\"boolean\")\n\n    def test_validate_boolean_values(self):\n        self.assertIsNone(self.attr.validate_value(True))\n\n    def test_validate_invalid_boolean_values(self):\n        with self.assertRaises(ValidationError):\n            self.attr.validate_value(1)\n\n\nclass TestMultiOptionAttributes(TestCase):\n\n    def setUp(self):\n        self.option_group = factories.AttributeOptionGroupFactory()\n        self.attr = factories.ProductAttributeFactory(\n            type='multi_option',\n            name='Sizes',\n            code='sizes',\n            option_group=self.option_group,\n        )\n\n        # Add some options to the group\n        self.options = factories.AttributeOptionFactory.create_batch(\n            3, group=self.option_group)\n\n    def test_validate_multi_option_values(self):\n        self.assertIsNone(self.attr.validate_value([\n            self.options[0], self.options[1]]))\n\n    def test_validate_invalid_multi_option_values(self):\n        with self.assertRaises(ValidationError):\n            # value must be an iterable\n            self.attr.validate_value('foobar')\n\n        with self.assertRaises(ValidationError):\n            # Items must all be AttributeOption objects\n            self.attr.validate_value([self.options[0], 'notanOption'])\n\n    def test_save_multi_option_value(self):\n        product = factories.ProductFactory()\n        # We'll save two out of the three available options\n        self.attr.save_value(product, [self.options[0], self.options[2]])\n        product.refresh_from_db()\n        self.assertEqual(list(product.attr.sizes), [self.options[0], self.options[2]])\n\n    def test_delete_multi_option_value(self):\n        product = factories.ProductFactory()\n        self.attr.save_value(product, [self.options[0], self.options[1]])\n        # Now delete these values\n        self.attr.save_value(product, None)\n        product.refresh_from_db()\n        self.assertFalse(hasattr(product.attr, 'sizes'))\n\n    def test_multi_option_value_as_text(self):\n        product = factories.ProductFactory()\n        self.attr.save_value(product, self.options)\n        attr_val = product.attribute_values.get(attribute=self.attr)\n        self.assertEqual(attr_val.value_as_text, \", \".join(o.option for o in self.options))\n\n\nclass TestDatetimeAttributes(TestCase):\n\n    def setUp(self):\n        self.attr = factories.ProductAttributeFactory(type=\"datetime\")\n\n    def test_validate_datetime_values(self):\n        self.assertIsNone(self.attr.validate_value(datetime.now()))\n\n    def test_validate_invalid_datetime_values(self):\n        with self.assertRaises(ValidationError):\n            self.attr.validate_value(1)\n\n\nclass TestDateAttributes(TestCase):\n\n    def setUp(self):\n        self.attr = factories.ProductAttributeFactory(type=\"date\")\n\n    def test_validate_datetime_values(self):\n        self.assertIsNone(self.attr.validate_value(datetime.now()))\n\n    def test_validate_date_values(self):\n        self.assertIsNone(self.attr.validate_value(date.today()))\n\n    def test_validate_invalid_date_values(self):\n        with self.assertRaises(ValidationError):\n            self.attr.validate_value(1)\n\n\nclass TestIntegerAttributes(TestCase):\n\n    def setUp(self):\n        self.attr = factories.ProductAttributeFactory(type=\"integer\")\n\n    def test_validate_integer_values(self):\n        self.assertIsNone(self.attr.validate_value(1))\n\n    def test_validate_str_integer_values(self):\n        self.assertIsNone(self.attr.validate_value('1'))\n\n    def test_validate_invalid_integer_values(self):\n        with self.assertRaises(ValidationError):\n            self.attr.validate_value('notanInteger')\n\n\nclass TestFloatAttributes(TestCase):\n\n    def setUp(self):\n        self.attr = factories.ProductAttributeFactory(type=\"float\")\n\n    def test_validate_integer_values(self):\n        self.assertIsNone(self.attr.validate_value(1))\n\n    def test_validate_float_values(self):\n        self.assertIsNone(self.attr.validate_value(1.2))\n\n    def test_validate_str_float_values(self):\n        self.assertIsNone(self.attr.validate_value('1.2'))\n\n    def test_validate_invalid_float_values(self):\n        with self.assertRaises(ValidationError):\n            self.attr.validate_value('notaFloat')\n\n\nclass TestTextAttributes(TestCase):\n\n    def setUp(self):\n        self.attr = factories.ProductAttributeFactory(type=\"text\")\n\n    def test_validate_string_and_unicode_values(self):\n        self.assertIsNone(self.attr.validate_value('String'))\n\n    def test_validate_invalid_float_values(self):\n        with self.assertRaises(ValidationError):\n            self.attr.validate_value(1)\n\n\nclass TestFileAttributes(TestCase):\n    def setUp(self):\n        self.attr = factories.ProductAttributeFactory(type=\"file\")\n\n    def test_validate_file_values(self):\n        file_field = SimpleUploadedFile('test_file.txt', b'Test')\n        self.assertIsNone(self.attr.validate_value(file_field))\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom oscar.apps.address.abstract_models import (\n    AbstractCountry, AbstractUserAddress)\nfrom oscar.core.loading import is_model_registered\n\n__all__ = []\n\n\nif not is_model_registered('address', 'UserAddress'):\n    class UserAddress(AbstractUserAddress):\n        pass\n\n    __all__.append('UserAddress')\n\n\nif not is_model_registered('address', 'Country'):\n    class Country(AbstractCountry):\n        pass\n\n    __all__.append('Country')\n",
    "output": "# -*- coding: utf-8 -*-\nfrom django.core.cache import cache\nfrom django.test import TestCase\nfrom django.test.utils import override_settings\n\nfrom oscar.apps.catalogue.models import Category\nfrom oscar.apps.catalogue.categories import create_from_breadcrumbs\nfrom oscar.templatetags.category_tags import get_annotated_list\n\n\nclass TestCategory(TestCase):\n\n    def setUp(self):\n        self.products = Category.add_root(name=\"Pr\u00f6ducts\")\n        self.books = self.products.add_child(name=\"B\u00fccher\")\n\n    def tearDown(self):\n        cache.clear()\n\n    def test_includes_parents_name_in_full_name(self):\n        self.assertTrue(self.products.name in self.books.full_name)\n\n    def test_has_children_method(self):\n        self.assertTrue(self.products.has_children())\n\n    def test_slugs_were_autogenerated(self):\n        self.assertTrue(self.products.slug)\n        self.assertTrue(self.books.slug)\n\n    def test_supplied_slug_is_not_altered(self):\n        more_books = self.products.add_child(\n            name=self.books.name, slug=self.books.slug)\n        self.assertEqual(more_books.slug, self.books.slug)\n\n    @override_settings(OSCAR_SLUG_ALLOW_UNICODE=True)\n    def test_unicode_slug(self):\n        root_category = Category.add_root(name=\"Vins fran\u00e7ais\")\n        child_category = root_category.add_child(name=\"Ch\u00e2teau d'Yquem\")\n        self.assertEqual(root_category.slug, 'vins-fran\u00e7ais')\n        self.assertEqual(\n            root_category.get_absolute_url(), '/catalogue/category/vins-fran%C3%A7ais_{}/'.format(root_category.pk)\n        )\n        self.assertEqual(child_category.slug, 'ch\u00e2teau-dyquem')\n        self.assertEqual(\n            child_category.get_absolute_url(),\n            '/catalogue/category/vins-fran%C3%A7ais/ch%C3%A2teau-dyquem_{}/'.format(child_category.pk)\n        )\n\n    @override_settings(OSCAR_SLUG_ALLOW_UNICODE=True)\n    def test_url_caching(self):\n        category = self.products.add_child(name=\"Fromages fran\u00e7ais\")\n        absolute_url = category.get_absolute_url()\n        url = cache.get(category.get_url_cache_key())\n        self.assertEqual(url, '/catalogue/category/products/fromages-fran%C3%A7ais_{}/'.format(category.pk))\n        self.assertEqual(absolute_url, '/catalogue/category/products/fromages-fran%C3%A7ais_{}/'.format(category.pk))\n\n\nclass TestMovingACategory(TestCase):\n\n    def setUp(self):\n        breadcrumbs = (\n            'Books > Fiction > Horror > Teen',\n            'Books > Fiction > Horror > Gothic',\n            'Books > Fiction > Comedy',\n            'Books > Non-fiction > Biography',\n            'Books > Non-fiction > Programming',\n            'Books > Children',\n        )\n        for trail in breadcrumbs:\n            create_from_breadcrumbs(trail)\n\n        horror = Category.objects.get(name=\"Horror\")\n        programming = Category.objects.get(name=\"Programming\")\n        horror.move(programming)\n\n        # Reload horror instance to pick up changes\n        self.horror = Category.objects.get(name=\"Horror\")\n\n    def test_updates_instance_name(self):\n        self.assertEqual('Books > Non-fiction > Horror', self.horror.full_name)\n\n    def test_updates_subtree_names(self):\n        teen = Category.objects.get(name=\"Teen\")\n        self.assertEqual('Books > Non-fiction > Horror > Teen',\n                         teen.full_name)\n        gothic = Category.objects.get(name=\"Gothic\")\n        self.assertEqual('Books > Non-fiction > Horror > Gothic',\n                         gothic.full_name)\n\n\nclass TestCategoryFactory(TestCase):\n\n    def test_can_create_single_level_category(self):\n        trail = 'Books'\n        category = create_from_breadcrumbs(trail)\n        self.assertIsNotNone(category)\n        self.assertEqual(category.name, 'Books')\n        self.assertEqual(category.slug, 'books')\n\n    def test_can_create_parent_and_child_categories(self):\n        trail = 'Books > Science-Fiction'\n        category = create_from_breadcrumbs(trail)\n\n        self.assertIsNotNone(category)\n        self.assertEqual(category.name, 'Science-Fiction')\n        self.assertEqual(category.get_depth(), 2)\n        self.assertEqual(category.get_parent().name, 'Books')\n        self.assertEqual(2, Category.objects.count())\n        self.assertEqual(category.full_slug, 'books/science-fiction')\n\n    def test_can_create_multiple_categories(self):\n        trail = 'Books > Science-Fiction > Star Trek'\n        create_from_breadcrumbs(trail)\n        trail = 'Books > Factual > Popular Science'\n        category = create_from_breadcrumbs(trail)\n\n        self.assertIsNotNone(category)\n        self.assertEqual(category.name, 'Popular Science')\n        self.assertEqual(category.get_depth(), 3)\n        self.assertEqual(category.get_parent().name, 'Factual')\n        self.assertEqual(5, Category.objects.count())\n        self.assertEqual(category.full_slug, 'books/factual/popular-science', )\n\n    def test_can_use_alternative_separator(self):\n        trail = 'Food|Cheese|Blue'\n        create_from_breadcrumbs(trail, separator='|')\n        self.assertEqual(3, len(Category.objects.all()))\n\n    def test_updating_subtree_slugs_when_moving_category_to_new_parent(self):\n        trail = 'A > B > C'\n        create_from_breadcrumbs(trail)\n        trail = 'A > B > D'\n        create_from_breadcrumbs(trail)\n        trail = 'A > E > F'\n        create_from_breadcrumbs(trail)\n        trail = 'A > E > G'\n        create_from_breadcrumbs(trail)\n\n        trail = 'T'\n        target = create_from_breadcrumbs(trail)\n        category = Category.objects.get(name='A')\n\n        category.move(target, pos='first-child')\n\n        c1 = Category.objects.get(name='A')\n        self.assertEqual(c1.full_slug, 't/a')\n        self.assertEqual(c1.full_name, 'T > A')\n\n        child = Category.objects.get(name='F')\n        self.assertEqual(child.full_slug, 't/a/e/f')\n        self.assertEqual(child.full_name, 'T > A > E > F')\n\n        child = Category.objects.get(name='D')\n        self.assertEqual(child.full_slug, 't/a/b/d')\n        self.assertEqual(child.full_name, 'T > A > B > D')\n\n    def test_updating_subtree_when_moving_category_to_new_sibling(self):\n        trail = 'A > B > C'\n        create_from_breadcrumbs(trail)\n        trail = 'A > B > D'\n        create_from_breadcrumbs(trail)\n        trail = 'A > E > F'\n        create_from_breadcrumbs(trail)\n        trail = 'A > E > G'\n        create_from_breadcrumbs(trail)\n\n        category = Category.objects.get(name='E')\n        target = Category.objects.get(name='A')\n\n        category.move(target, pos='right')\n\n        child = Category.objects.get(name='E')\n        self.assertEqual(child.full_slug, 'e')\n        self.assertEqual(child.full_name, 'E')\n\n        child = Category.objects.get(name='F')\n        self.assertEqual(child.full_slug, 'e/f')\n        self.assertEqual(child.full_name, 'E > F')\n\n\nclass TestCategoryTemplateTags(TestCase):\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.template = \"\"\"\n          {% if tree_categories %}\n              <ul>\n              {% for tree_category, info in tree_categories %}\n                  <li>\n                  {% if tree_category.pk == category.pk %}\n                      <strong>{{ tree_category.name }}</strong>\n                  {% else %}\n                      <a href=\"{{ tree_category.get_absolute_url }}\">\n                          {{ tree_category.name }}</a>\n                  {% endif %}\n                  {% if info.has_children %}<ul>{% else %}</li>{% endif %}\n                  {% for n in info.num_to_close %}\n                      </ul></li>\n                  {% endfor %}\n              {% endfor %}\n              </ul>\n          {% endif %}\n        \"\"\"\n\n    def setUp(self):\n        breadcrumbs = (\n            'Books > Fiction > Horror > Teen',\n            'Books > Fiction > Horror > Gothic',\n            'Books > Fiction > Comedy',\n            'Books > Non-fiction > Biography',\n            'Books > Non-fiction > Programming',\n            'Books > Children',\n        )\n        for trail in breadcrumbs:\n            create_from_breadcrumbs(trail)\n\n    def get_category_names(self, depth=None, parent=None):\n        \"\"\"\n        For the tests, we are only interested in the category names returned\n        from the template tag. This helper calls the template tag and\n        returns a list of the included categories.\n        \"\"\"\n        annotated_list = get_annotated_list(depth, parent)\n        names = [category.name for category, __ in annotated_list]\n        names_set = set(names)\n        # We return a set to ease testing, but need to be sure we're not\n        # losing any duplicates through that conversion.\n        self.assertEqual(len(names_set), len(names))\n        return names_set\n\n    def test_all_categories(self):\n        expected_categories = {\n            'Books', 'Fiction', 'Horror', 'Teen', 'Gothic', 'Comedy',\n            'Non-fiction', 'Biography', 'Programming', 'Children'}\n        actual_categories = self.get_category_names()\n        self.assertEqual(expected_categories, actual_categories)\n\n    def test_categories_depth(self):\n        expected_categories = {'Books'}\n        actual_categories = self.get_category_names(depth=1)\n        self.assertEqual(expected_categories, actual_categories)\n\n    def test_categories_parent(self):\n        parent = Category.objects.get(name=\"Fiction\")\n        actual_categories = self.get_category_names(parent=parent)\n        expected_categories = {'Horror', 'Teen', 'Gothic', 'Comedy'}\n        self.assertEqual(expected_categories, actual_categories)\n\n    def test_categories_depth_parent(self):\n        parent = Category.objects.get(name=\"Fiction\")\n        actual_categories = self.get_category_names(depth=1, parent=parent)\n        expected_categories = {'Horror', 'Comedy'}\n        self.assertEqual(expected_categories, actual_categories)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom oscar.apps.address.abstract_models import (\n    AbstractCountry, AbstractUserAddress)\nfrom oscar.core.loading import is_model_registered\n\n__all__ = []\n\n\nif not is_model_registered('address', 'UserAddress'):\n    class UserAddress(AbstractUserAddress):\n        pass\n\n    __all__.append('UserAddress')\n\n\nif not is_model_registered('address', 'Country'):\n    class Country(AbstractCountry):\n        pass\n\n    __all__.append('Country')\n",
    "output": "import pytest\nfrom django.core.exceptions import ValidationError\n\nfrom oscar.apps.catalogue import models\n\n\ndef test_product_attributes_can_contain_underscores():\n    attr = models.ProductAttribute(name=\"A\", code=\"a_b\")\n    attr.full_clean()\n\n\ndef test_product_attributes_cant_contain_hyphens():\n    attr = models.ProductAttribute(name=\"A\", code=\"a-b\")\n    with pytest.raises(ValidationError):\n        attr.full_clean()\n\n\ndef test_product_attributes_cant_be_python_keywords():\n    attr = models.ProductAttribute(name=\"A\", code=\"import\")\n    with pytest.raises(ValidationError):\n        attr.full_clean()\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom oscar.apps.address.abstract_models import (\n    AbstractCountry, AbstractUserAddress)\nfrom oscar.core.loading import is_model_registered\n\n__all__ = []\n\n\nif not is_model_registered('address', 'UserAddress'):\n    class UserAddress(AbstractUserAddress):\n        pass\n\n    __all__.append('UserAddress')\n\n\nif not is_model_registered('address', 'Country'):\n    class Country(AbstractCountry):\n        pass\n\n    __all__.append('Country')\n",
    "output": "from django.test import TestCase\n\nfrom oscar.test import factories\nfrom oscar.core.loading import get_model\n\n\nProduct = get_model('catalogue', 'Product')\n\n\nclass ProductOptionTests(TestCase):\n    def setUp(self):\n        self.product_class = factories.ProductClassFactory()\n        self.product = factories.create_product(product_class=self.product_class)\n        self.option = factories.OptionFactory()\n\n    def test_product_has_options_per_product_class(self):\n        self.product_class.options.add(self.option)\n        self.assertTrue(self.product.has_options)\n\n    def test_product_has_options_per_product(self):\n        self.product.product_options.add(self.option)\n        self.assertTrue(self.product.has_options)\n\n    def test_queryset_per_product_class(self):\n        self.product_class.options.add(self.option)\n        qs = Product.browsable.base_queryset().filter(id=self.product.id)\n        product = qs.first()\n        self.assertTrue(product.has_options)\n        self.assertEquals(product.num_product_class_options, 1)\n\n    def test_queryset_per_product(self):\n        self.product.product_options.add(self.option)\n        qs = Product.browsable.base_queryset().filter(id=self.product.id)\n        product = qs.first()\n        self.assertTrue(product.has_options)\n        self.assertEquals(product.num_product_options, 1)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom oscar.apps.address.abstract_models import (\n    AbstractCountry, AbstractUserAddress)\nfrom oscar.core.loading import is_model_registered\n\n__all__ = []\n\n\nif not is_model_registered('address', 'UserAddress'):\n    class UserAddress(AbstractUserAddress):\n        pass\n\n    __all__.append('UserAddress')\n\n\nif not is_model_registered('address', 'Country'):\n    class Country(AbstractCountry):\n        pass\n\n    __all__.append('Country')\n",
    "output": "# coding=utf-8\nfrom django.db import IntegrityError\nfrom django.test import TestCase\nfrom django.core.exceptions import ValidationError\n\nfrom oscar.apps.catalogue.models import (Product, ProductClass,\n                                         ProductAttribute,\n                                         AttributeOption,\n                                         ProductRecommendation)\nfrom oscar.test import factories\n\n\nclass ProductTests(TestCase):\n\n    def setUp(self):\n        self.product_class, _ = ProductClass.objects.get_or_create(\n            name='Clothing')\n\n\nclass ProductCreationTests(ProductTests):\n\n    def setUp(self):\n        super().setUp()\n        ProductAttribute.objects.create(product_class=self.product_class,\n                                        name='Number of pages',\n                                        code='num_pages',\n                                        type='integer')\n        Product.ENABLE_ATTRIBUTE_BINDING = True\n\n    def tearDown(self):\n        Product.ENABLE_ATTRIBUTE_BINDING = False\n\n    def test_create_products_with_attributes(self):\n        product = Product(upc='1234',\n                          product_class=self.product_class,\n                          title='testing')\n        product.attr.num_pages = 100\n        product.save()\n\n    def test_none_upc_is_represented_as_empty_string(self):\n        product = Product(product_class=self.product_class,\n                          title='testing', upc=None)\n        product.save()\n        product.refresh_from_db()\n        self.assertEqual(product.upc, '')\n\n    def test_upc_uniqueness_enforced(self):\n        Product.objects.create(product_class=self.product_class,\n                               title='testing', upc='bah')\n        self.assertRaises(IntegrityError, Product.objects.create,\n                          product_class=self.product_class,\n                          title='testing', upc='bah')\n\n    def test_allow_two_products_without_upc(self):\n        for x in range(2):\n            Product.objects.create(product_class=self.product_class,\n                                   title='testing', upc=None)\n\n\nclass TopLevelProductTests(ProductTests):\n\n    def test_top_level_products_must_have_titles(self):\n        product = Product(product_class=self.product_class)\n        self.assertRaises(ValidationError, product.clean)\n\n    def test_top_level_products_must_have_product_class(self):\n        product = Product(title=\"Kopfh\u00f6rer\")\n        self.assertRaises(ValidationError, product.clean)\n\n    def test_top_level_products_are_part_of_browsable_set(self):\n        product = Product.objects.create(\n            product_class=self.product_class, title=\"Kopfh\u00f6rer\")\n        self.assertEqual(set([product]), set(Product.browsable.all()))\n\n\nclass ChildProductTests(ProductTests):\n\n    def setUp(self):\n        super().setUp()\n        self.parent = Product.objects.create(\n            title=\"Parent product\",\n            product_class=self.product_class,\n            structure=Product.PARENT,\n            is_discountable=False)\n\n    def test_child_products_dont_need_titles(self):\n        Product.objects.create(\n            parent=self.parent, structure=Product.CHILD)\n\n    def test_child_products_dont_need_a_product_class(self):\n        Product.objects.create(parent=self.parent, structure=Product.CHILD)\n\n    def test_child_products_inherit_fields(self):\n        p = Product.objects.create(\n            parent=self.parent,\n            structure=Product.CHILD,\n            is_discountable=True)\n        self.assertEqual(\"Parent product\", p.get_title())\n        self.assertEqual(\"Clothing\", p.get_product_class().name)\n        self.assertEqual(False, p.get_is_discountable())\n\n    def test_child_products_are_not_part_of_browsable_set(self):\n        Product.objects.create(\n            product_class=self.product_class, parent=self.parent,\n            structure=Product.CHILD)\n        self.assertEqual(set([self.parent]), set(Product.browsable.all()))\n\n\nclass TestAChildProduct(TestCase):\n\n    def setUp(self):\n        clothing = ProductClass.objects.create(\n            name='Clothing', requires_shipping=True)\n        self.parent = clothing.products.create(\n            title=\"Parent\", structure=Product.PARENT)\n        self.child = self.parent.children.create(structure=Product.CHILD)\n\n    def test_delegates_requires_shipping_logic(self):\n        self.assertTrue(self.child.is_shipping_required)\n\n\nclass ProductAttributeCreationTests(TestCase):\n\n    def test_validating_option_attribute(self):\n        option_group = factories.AttributeOptionGroupFactory()\n        option_1 = factories.AttributeOptionFactory(group=option_group)\n        option_2 = factories.AttributeOptionFactory(group=option_group)\n        pa = factories.ProductAttribute(\n            type='option', option_group=option_group)\n\n        self.assertRaises(ValidationError, pa.validate_value, 'invalid')\n        pa.validate_value(option_1)\n        pa.validate_value(option_2)\n\n        invalid_option = AttributeOption(option='invalid option')\n        self.assertRaises(\n            ValidationError, pa.validate_value, invalid_option)\n\n    def test_entity_attributes(self):\n        unrelated_object = factories.PartnerFactory()\n        attribute = factories.ProductAttributeFactory(type='entity')\n\n        attribute_value = factories.ProductAttributeValueFactory(\n            attribute=attribute, value_entity=unrelated_object)\n\n        self.assertEqual(attribute_value.value, unrelated_object)\n\n\nclass ProductRecommendationTests(ProductTests):\n\n    def setUp(self):\n        super().setUp()\n        self.primary_product = Product.objects.create(\n            upc='1234', product_class=self.product_class, title='Primary Product'\n        )\n\n    def test_recommended_products_ordering(self):\n        secondary_products = []\n        for i in range(5):\n            secondary_products.append(Product.objects.create(\n                upc='secondary%s' % i, product_class=self.product_class, title='Secondary Product #%s' % i\n            ))\n\n        ProductRecommendation.objects.create(\n            primary=self.primary_product, recommendation=secondary_products[3], ranking=5)\n        ProductRecommendation.objects.create(\n            primary=self.primary_product, recommendation=secondary_products[1], ranking=2)\n        ProductRecommendation.objects.create(\n            primary=self.primary_product, recommendation=secondary_products[2], ranking=4)\n        ProductRecommendation.objects.create(\n            primary=self.primary_product, recommendation=secondary_products[4], ranking=1)\n        ProductRecommendation.objects.create(\n            primary=self.primary_product, recommendation=secondary_products[0], ranking=3)\n        recommended_products = [\n            secondary_products[3], secondary_products[2], secondary_products[0],\n            secondary_products[1], secondary_products[4]\n        ]\n        self.assertEqual(self.primary_product.sorted_recommended_products, recommended_products)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom oscar.apps.address.abstract_models import (\n    AbstractCountry, AbstractUserAddress)\nfrom oscar.core.loading import is_model_registered\n\n__all__ = []\n\n\nif not is_model_registered('address', 'UserAddress'):\n    class UserAddress(AbstractUserAddress):\n        pass\n\n    __all__.append('UserAddress')\n\n\nif not is_model_registered('address', 'Country'):\n    class Country(AbstractCountry):\n        pass\n\n    __all__.append('Country')\n",
    "output": "from django.test import TestCase\n\nfrom oscar.apps.catalogue import models\n\n\nclass TestProductClassModel(TestCase):\n\n    def test_slug_is_auto_created(self):\n        books = models.ProductClass.objects.create(\n            name=\"Book\",\n        )\n        self.assertEqual('book', books.slug)\n\n    def test_has_attribute_for_whether_shipping_is_required(self):\n        models.ProductClass.objects.create(\n            name=\"Download\",\n            requires_shipping=False,\n        )\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom oscar.apps.address.abstract_models import (\n    AbstractCountry, AbstractUserAddress)\nfrom oscar.core.loading import is_model_registered\n\n__all__ = []\n\n\nif not is_model_registered('address', 'UserAddress'):\n    class UserAddress(AbstractUserAddress):\n        pass\n\n    __all__.append('UserAddress')\n\n\nif not is_model_registered('address', 'Country'):\n    class Country(AbstractCountry):\n        pass\n\n    __all__.append('Country')\n",
    "output": "import os\nimport tempfile\nfrom unittest import mock\n\nfrom django.contrib.staticfiles.testing import StaticLiveServerTestCase\nfrom django.test import TestCase, override_settings\n\nfrom oscar.apps.catalogue.abstract_models import MissingProductImage\nfrom oscar.test import factories\n\n\nclass TestProductImages(TestCase):\n\n    def test_images_are_in_consecutive_order(self):\n        product = factories.create_product()\n        for i in range(4):\n            factories.create_product_image(product=product, display_order=i)\n\n        product.images.all()[2].delete()\n\n        for idx, im in enumerate(product.images.all()):\n            self.assertEqual(im.display_order, idx)\n\n    def test_variant_images(self):\n        parent = factories.ProductFactory(structure='parent')\n        variant = factories.create_product(parent=parent)\n        factories.create_product_image(product=variant, caption='Variant Image')\n        all_images = variant.get_all_images()\n        self.assertEquals(all_images.count(), 1)\n        product_image = all_images.first()\n        self.assertEquals(product_image.caption, 'Variant Image')\n\n    def test_variant_images_fallback_to_parent(self):\n        parent = factories.ProductFactory(structure='parent')\n        variant = factories.create_product(parent=parent)\n        factories.create_product_image(product=parent, caption='Parent Product Image')\n        all_images = variant.get_all_images()\n        self.assertEquals(all_images.count(), 1)\n        product_image = all_images.first()\n        self.assertEquals(product_image.caption, 'Parent Product Image')\n\n\nclass TestMissingProductImage(StaticLiveServerTestCase):\n\n    TEMP_MEDIA_ROOT = tempfile.mkdtemp()\n\n    @override_settings(MEDIA_ROOT=TEMP_MEDIA_ROOT)\n    @mock.patch('oscar.apps.catalogue.abstract_models.find')\n    def test_symlink_creates_directories(self, mock_find):\n        # Create a fake empty file to symlink\n        img = tempfile.NamedTemporaryFile(delete=False)\n        img.close()\n\n        mock_find.return_value = img.name\n        # Initialise the class with a nested path\n        path = 'image/path.jpg'\n        MissingProductImage(path)\n        # Check that the directory exists\n        image_path = os.path.join(self.TEMP_MEDIA_ROOT, path)\n        self.assertTrue(os.path.exists(image_path))\n\n        # Clean up\n        for f in [image_path, img.name]:\n            os.unlink(f)\n        for d in [os.path.join(self.TEMP_MEDIA_ROOT, 'image'), self.TEMP_MEDIA_ROOT]:\n            os.rmdir(d)\n\n    @mock.patch('oscar.apps.catalogue.abstract_models.MissingProductImage.symlink_missing_image')\n    def test_no_symlink_when_no_media_root(self, mock_symlink):\n        MissingProductImage()\n        self.assertEqual(mock_symlink.call_count, 0)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom oscar.apps.address.abstract_models import (\n    AbstractCountry, AbstractUserAddress)\nfrom oscar.core.loading import is_model_registered\n\n__all__ = []\n\n\nif not is_model_registered('address', 'UserAddress'):\n    class UserAddress(AbstractUserAddress):\n        pass\n\n    __all__.append('UserAddress')\n\n\nif not is_model_registered('address', 'Country'):\n    class Country(AbstractCountry):\n        pass\n\n    __all__.append('Country')\n",
    "output": "from django.test import TestCase\nfrom django.test.utils import override_settings\n\nfrom oscar.apps.catalogue.search_handlers import (\n    get_product_search_handler_class,\n)\n\n\nclass TestSearchHandler(object):\n    pass\n\n\nclass TestProductSearchHandlerSetting(TestCase):\n    def test_product_search_handler_setting(self):\n        \"\"\"\n        Test that the `OSCAR_PRODUCT_SEARCH_HANDLER` setting, when set,\n        dictates the return value of the `get_product_search_handler_class`\n        function.\n        \"\"\"\n        handler_override = 'tests.integration.catalogue.test_product_search_handler_setting.TestSearchHandler'\n        with override_settings(OSCAR_PRODUCT_SEARCH_HANDLER=handler_override):\n            handler_class = get_product_search_handler_class()\n\n        self.assertEqual(handler_class, TestSearchHandler)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom oscar.apps.address.abstract_models import (\n    AbstractCountry, AbstractUserAddress)\nfrom oscar.core.loading import is_model_registered\n\n__all__ = []\n\n\nif not is_model_registered('address', 'UserAddress'):\n    class UserAddress(AbstractUserAddress):\n        pass\n\n    __all__.append('UserAddress')\n\n\nif not is_model_registered('address', 'Country'):\n    class Country(AbstractCountry):\n        pass\n\n    __all__.append('Country')\n",
    "output": ""
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom oscar.apps.address.abstract_models import (\n    AbstractCountry, AbstractUserAddress)\nfrom oscar.core.loading import is_model_registered\n\n__all__ = []\n\n\nif not is_model_registered('address', 'UserAddress'):\n    class UserAddress(AbstractUserAddress):\n        pass\n\n    __all__.append('UserAddress')\n\n\nif not is_model_registered('address', 'Country'):\n    class Country(AbstractCountry):\n        pass\n\n    __all__.append('Country')\n",
    "output": "from django.test import TestCase\n\nfrom oscar.apps.catalogue.reviews import forms\nfrom oscar.test.factories import UserFactory, create_product\n\n\nclass TestReviewForm(TestCase):\n\n    def test_cleans_title(self):\n        product = create_product()\n        reviewer = UserFactory()\n        data = {\n            'title': '  This product is lovely',\n            'body': 'I really like this cheese',\n            'score': 0,\n            'name': 'JR Hartley',\n            'email': 'hartley@example.com'\n        }\n        form = forms.ProductReviewForm(\n            product=product, user=reviewer, data=data)\n\n        assert form.is_valid()\n\n        review = form.save()\n        assert review.title == \"This product is lovely\"\n\n    def test_validates_empty_data_correctly(self):\n        form = forms.ProductReviewForm(product=None, user=None, data={})\n        assert form.is_valid() is False\n\n    def test_validates_correctly(self):\n        data = {\n            'title': 'This product is lovely',\n            'body': 'I really like this cheese',\n            'score': 0,\n            'name': 'JR Hartley',\n            'email': 'hartley@example.com'\n        }\n        form = forms.ProductReviewForm(product=None, user=None, data=data)\n        assert form.is_valid()\n\n\nclass TestVoteForm(TestCase):\n\n    def setUp(self):\n        self.product = create_product()\n        self.reviewer = UserFactory()\n        self.voter = UserFactory()\n        self.review = self.product.reviews.create(\n            title='This is nice',\n            score=3,\n            body=\"This is the body\",\n            user=self.reviewer)\n\n    def test_allows_real_users_to_vote(self):\n        form = forms.VoteForm(self.review, self.voter, data={'delta': 1})\n        self.assertTrue(form.is_valid())\n\n    def test_prevents_users_from_voting_more_than_once(self):\n        self.review.vote_up(self.voter)\n        form = forms.VoteForm(self.review, self.voter, data={'delta': 1})\n        self.assertFalse(form.is_valid())\n        self.assertTrue(len(form.errors['__all__']) > 0)\n\n    def test_prevents_users_voting_on_their_own_reviews(self):\n        form = forms.VoteForm(self.review, self.reviewer, data={'delta': 1})\n        self.assertFalse(form.is_valid())\n        self.assertTrue(len(form.errors['__all__']) > 0)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom oscar.apps.address.abstract_models import (\n    AbstractCountry, AbstractUserAddress)\nfrom oscar.core.loading import is_model_registered\n\n__all__ = []\n\n\nif not is_model_registered('address', 'UserAddress'):\n    class UserAddress(AbstractUserAddress):\n        pass\n\n    __all__.append('UserAddress')\n\n\nif not is_model_registered('address', 'Country'):\n    class Country(AbstractCountry):\n        pass\n\n    __all__.append('Country')\n",
    "output": "from django.test import TestCase\nfrom django.core.exceptions import ValidationError\n\nfrom oscar.core.compat import get_user_model\nfrom oscar.apps.catalogue.reviews import models\nfrom oscar.test.factories import create_product\nfrom oscar.test.factories import UserFactory\n\nUser = get_user_model()\n\n\nclass TestAnAnonymousReview(TestCase):\n\n    def setUp(self):\n        self.product = create_product()\n        self.data = {\n            'product': self.product,\n            'title': 'This product is lovely',\n            'body': 'I really like this cheese',\n            'score': 0,\n            'name': 'JR Hartley',\n            'email': 'hartley@example.com'\n        }\n\n    def review(self, **kwargs):\n        if kwargs:\n            data = self.data.copy()\n            data.update(kwargs)\n        else:\n            data = self.data\n        return models.ProductReview(**data)\n\n    def test_can_be_created(self):\n        review = self.review()\n        review.full_clean()\n\n    def test_requires_a_title(self):\n        review = self.review(title=\"\")\n        self.assertRaises(ValidationError, review.full_clean)\n\n    def test_requires_a_body(self):\n        review = self.review(body=\"\")\n        self.assertRaises(ValidationError, review.full_clean)\n\n    def test_requires_a_name(self):\n        review = self.review(name=\"\")\n        self.assertRaises(ValidationError, review.full_clean)\n\n    def test_requires_an_email_address(self):\n        review = self.review(email=\"\")\n        self.assertRaises(ValidationError, review.full_clean)\n\n    def test_requires_non_whitespace_title(self):\n        review = self.review(title=\"    \")\n        self.assertRaises(ValidationError, review.full_clean)\n\n    def test_starts_with_no_votes(self):\n        review = self.review()\n        review.save()\n        self.assertFalse(review.has_votes)\n        self.assertEqual(0, review.num_up_votes)\n        self.assertEqual(0, review.num_down_votes)\n\n    def test_has_reviewer_name_property(self):\n        review = self.review(name=\"Dave\")\n        self.assertEqual(\"Dave\", review.reviewer_name)\n\n    def test_review_moderate_setting_false(self):\n        with self.settings(OSCAR_MODERATE_REVIEWS=False):\n            review = self.review()\n            self.assertEqual(1, review.status)\n\n    def test_review_moderate_setting_true(self):\n        with self.settings(OSCAR_MODERATE_REVIEWS=True):\n            review = self.review()\n            self.assertEqual(0, review.status)\n\n\nclass TestAUserReview(TestCase):\n\n    def setUp(self):\n        self.product = create_product()\n        self.user = UserFactory(first_name=\"Tom\", last_name=\"Thumb\")\n        self.data = {\n            'product': self.product,\n            'title': 'This product is lovely',\n            'body': 'I really like this cheese',\n            'score': 0,\n            'user': self.user\n        }\n\n    def review(self, **kwargs):\n        if kwargs:\n            data = self.data.copy()\n            data.update(kwargs)\n        else:\n            data = self.data\n        return models.ProductReview(**data)\n\n    def test_can_be_created(self):\n        review = self.review()\n        review.full_clean()\n\n    def test_requires_a_title(self):\n        review = self.review(title=\"\")\n        self.assertRaises(ValidationError, review.full_clean)\n\n    def test_requires_a_body(self):\n        review = self.review(body=\"\")\n        self.assertRaises(ValidationError, review.full_clean)\n\n    def test_has_reviewer_name_property(self):\n        review = self.review()\n        self.assertEqual(\"Tom Thumb\", review.reviewer_name)\n\n    def test_num_approved_reviews(self):\n        review = self.review()\n        review.save()\n        self.assertEqual(self.product.num_approved_reviews, 1)\n        self.assertEqual(self.product.reviews.approved().first(), review)\n\n    def test_review_moderate_setting_false(self):\n        with self.settings(OSCAR_MODERATE_REVIEWS=False):\n            review = self.review()\n            self.assertEqual(1, review.status)\n\n    def test_review_moderate_setting_true(self):\n        with self.settings(OSCAR_MODERATE_REVIEWS=True):\n            review = self.review()\n            self.assertEqual(0, review.status)\n\n\nclass TestVotingOnAReview(TestCase):\n\n    def setUp(self):\n        self.product = create_product()\n        self.user = UserFactory()\n        self.voter = UserFactory()\n        self.review = self.product.reviews.create(\n            title='This is nice',\n            score=3,\n            body=\"This is the body\",\n            user=self.user)\n\n    def test_updates_totals_for_upvote(self):\n        self.review.vote_up(self.voter)\n        self.assertTrue(self.review.has_votes)\n        self.assertEqual(1, self.review.total_votes)\n        self.assertEqual(1, self.review.delta_votes)\n\n    def test_updates_totals_for_downvote(self):\n        self.review.vote_down(self.voter)\n        self.assertTrue(self.review.has_votes)\n        self.assertEqual(1, self.review.total_votes)\n        self.assertEqual(-1, self.review.delta_votes)\n\n    def test_is_permitted_for_normal_user(self):\n        is_allowed, reason = self.review.can_user_vote(self.voter)\n        self.assertTrue(is_allowed, reason)\n\n    def test_is_not_permitted_for_reviewer(self):\n        is_allowed, reason = self.review.can_user_vote(self.user)\n        self.assertFalse(is_allowed, reason)\n\n    def test_is_not_permitted_for_previous_voter(self):\n        self.review.vote_up(self.voter)\n        is_allowed, reason = self.review.can_user_vote(self.voter)\n        self.assertFalse(is_allowed, reason)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom oscar.apps.address.abstract_models import (\n    AbstractCountry, AbstractUserAddress)\nfrom oscar.core.loading import is_model_registered\n\n__all__ = []\n\n\nif not is_model_registered('address', 'UserAddress'):\n    class UserAddress(AbstractUserAddress):\n        pass\n\n    __all__.append('UserAddress')\n\n\nif not is_model_registered('address', 'Country'):\n    class Country(AbstractCountry):\n        pass\n\n    __all__.append('Country')\n",
    "output": ""
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom oscar.apps.address.abstract_models import (\n    AbstractCountry, AbstractUserAddress)\nfrom oscar.core.loading import is_model_registered\n\n__all__ = []\n\n\nif not is_model_registered('address', 'UserAddress'):\n    class UserAddress(AbstractUserAddress):\n        pass\n\n    __all__.append('UserAddress')\n\n\nif not is_model_registered('address', 'Country'):\n    class Country(AbstractCountry):\n        pass\n\n    __all__.append('Country')\n",
    "output": "from decimal import Decimal as D\nfrom unittest import mock\n\nfrom django.test import TestCase, override_settings\nfrom django.conf import settings\n\nfrom oscar.apps.basket import forms, formsets\nfrom oscar.apps.offer.utils import Applicator\nfrom oscar.core.loading import get_model\nfrom oscar.test import factories\nfrom oscar.test.basket import add_product\nfrom oscar.test.factories import (\n    BenefitFactory, ConditionalOfferFactory, ConditionFactory, RangeFactory)\n\n\nLine = get_model('basket', 'Line')\n\n\nclass TestBasketLineForm(TestCase):\n\n    def setUp(self):\n        self.applicator = Applicator()\n        rng = RangeFactory(includes_all_products=True)\n        self.condition = ConditionFactory(\n            range=rng, type=ConditionFactory._meta.model.VALUE,\n            value=D('100'), proxy_class=None)\n        self.benefit = BenefitFactory(\n            range=rng, type=BenefitFactory._meta.model.FIXED,\n            value=D('10'), max_affected_items=1)\n        self.basket = factories.create_basket()\n        self.line = self.basket.all_lines()[0]\n\n    def mock_availability_return_value(self, is_available, reason=''):\n        policy = self.line.purchase_info.availability\n        policy.is_purchase_permitted = mock.MagicMock(\n            return_value=(is_available, reason))\n\n    def build_form(self, quantity=None):\n        if quantity is None:\n            quantity = self.line.quantity\n        return forms.BasketLineForm(\n            strategy=self.basket.strategy,\n            data={'quantity': quantity},\n            instance=self.line)\n\n    def test_enforces_availability_policy_for_valid_quantities(self):\n        self.mock_availability_return_value(True)\n        form = self.build_form()\n        self.assertTrue(form.is_valid())\n\n    def test_enforces_availability_policy_for_invalid_quantities(self):\n        self.mock_availability_return_value(False, \"Some reason\")\n        form = self.build_form()\n        self.assertFalse(form.is_valid())\n        self.assertEqual(\n            form.errors['quantity'], ['Some reason'])\n\n    def test_skips_availability_policy_for_zero_quantities(self):\n        self.mock_availability_return_value(True)\n        form = self.build_form(quantity=0)\n        self.assertTrue(form.is_valid())\n\n    def test_enforces_max_line_quantity_for_new_product(self):\n        invalid_qty = settings.OSCAR_MAX_BASKET_QUANTITY_THRESHOLD + 1\n        form = self.build_form(quantity=invalid_qty)\n        self.assertFalse(form.is_valid())\n\n    @override_settings(OSCAR_MAX_BASKET_QUANTITY_THRESHOLD=10)\n    def test_enforce_max_line_quantity_for_existing_product(self):\n        self.basket.flush()\n        product = factories.create_product(num_in_stock=20)\n        add_product(self.basket, D('100'), 4, product)\n        self.line = self.basket.all_lines()[0]\n        form = self.build_form(quantity=6)\n        self.assertTrue(form.is_valid())\n        form.save()\n        form = self.build_form(quantity=11)\n        self.assertFalse(form.is_valid())\n\n    def test_line_quantity_max_attribute_per_num_available(self):\n        self.basket.flush()\n        product = factories.create_product(num_in_stock=20)\n        add_product(self.basket, D('100'), 4, product)\n        self.line = self.basket.all_lines()[0]\n        form = self.build_form()\n        self.assertIn('max=\"20\"', str(form['quantity']))\n\n    @override_settings(OSCAR_MAX_BASKET_QUANTITY_THRESHOLD=10)\n    def test_line_quantity_max_attribute_per_basket_threshold(self):\n        self.basket.flush()\n        product = factories.create_product(num_in_stock=20)\n        add_product(self.basket, D('100'), 4, product)\n        self.line = self.basket.all_lines()[0]\n        form = self.build_form()\n        self.assertIn('max=\"6\"', str(form['quantity']))\n\n    def test_basketline_formset_ordering(self):\n        # when we use a unordered queryset in the Basketlineformset, the\n        # discounts will be lost because django will query the database\n        # again to enforce ordered results\n        add_product(self.basket, D('100'), 5)\n        offer = ConditionalOfferFactory(\n            pk=1, condition=self.condition, benefit=self.benefit)\n\n        # now we force an unordered queryset so we can see that our discounts\n        # will disappear due to a new ordering query (see django/forms/model.py)\n        default_line_ordering = Line._meta.ordering\n        Line._meta.ordering = []\n        self.basket._lines = self.basket.lines.all()\n\n        self.applicator.apply_offers(self.basket, [offer])\n        formset = formsets.BasketLineFormSet(\n            strategy=self.basket.strategy,\n            queryset=self.basket.all_lines())\n\n        # the discount is in all_lines():\n        self.assertTrue(self.basket.all_lines()[0].has_discount)\n\n        # but not in the formset\n        self.assertFalse(formset.forms[0].instance.has_discount)\n\n        # Restore the ordering on the line\n        Line._meta.ordering = default_line_ordering\n\n        # clear the cached lines and apply the offer again\n        self.basket._lines = None\n        self.applicator.apply_offers(self.basket, [offer])\n\n        formset = formsets.BasketLineFormSet(\n            strategy=self.basket.strategy,\n            queryset=self.basket.all_lines())\n        self.assertTrue(formset.forms[0].instance.has_discount)\n\n\nclass TestAddToBasketForm(TestCase):\n\n    def test_allows_a_product_quantity_to_be_increased(self):\n        basket = factories.create_basket()\n        product = basket.all_lines()[0].product\n\n        # Add more of the same product\n        data = {'quantity': 1}\n        form = forms.AddToBasketForm(\n            basket=basket, product=product, data=data)\n        self.assertTrue(form.is_valid())\n\n    def test_checks_whether_passed_product_id_matches_a_real_product(self):\n        basket = factories.create_basket()\n        product = basket.all_lines()[0].product\n\n        # Add more of the same product\n        data = {'quantity': -1}\n        form = forms.AddToBasketForm(\n            basket=basket, product=product, data=data)\n        self.assertFalse(form.is_valid())\n\n    def test_checks_if_purchase_is_permitted(self):\n        basket = factories.BasketFactory()\n        product = factories.ProductFactory()\n\n        # Build a 4-level mock monster so we can force the return value of\n        # whether the product is available to buy. This is a serious code smell\n        # and needs to be remedied.\n        info = mock.Mock()\n        info.availability = mock.Mock()\n        info.availability.is_purchase_permitted = mock.Mock(\n            return_value=(False, \"Not on your nelly!\"))\n        basket.strategy.fetch_for_product = mock.Mock(\n            return_value=info)\n\n        data = {'quantity': 1}\n        form = forms.AddToBasketForm(\n            basket=basket, product=product, data=data)\n        self.assertFalse(form.is_valid())\n        self.assertEqual('Not on your nelly!', form.errors['__all__'][0])\n\n    def test_mixed_currency_baskets_are_not_permitted(self):\n        # Ensure basket is one currency\n        basket = mock.Mock()\n        basket.currency = 'GBP'\n        basket.num_items = 1\n\n        # Ensure new product has different currency\n        info = mock.Mock()\n        info.price.currency = 'EUR'\n        basket.strategy.fetch_for_product = mock.Mock(\n            return_value=info)\n\n        product = factories.ProductFactory()\n\n        data = {'quantity': 1}\n        form = forms.AddToBasketForm(\n            basket=basket, product=product, data=data)\n        self.assertFalse(form.is_valid())\n\n    def test_cannot_add_a_product_without_price(self):\n        basket = factories.BasketFactory()\n        product = factories.create_product(price=None)\n\n        data = {'quantity': 1}\n        form = forms.AddToBasketForm(\n            basket=basket, product=product, data=data)\n        self.assertFalse(form.is_valid())\n        self.assertEqual(\n            form.errors['__all__'][0],\n            'This product cannot be added to the basket because a price '\n            'could not be determined for it.',\n        )\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom oscar.apps.address.abstract_models import (\n    AbstractCountry, AbstractUserAddress)\nfrom oscar.core.loading import is_model_registered\n\n__all__ = []\n\n\nif not is_model_registered('address', 'UserAddress'):\n    class UserAddress(AbstractUserAddress):\n        pass\n\n    __all__.append('UserAddress')\n\n\nif not is_model_registered('address', 'Country'):\n    class Country(AbstractCountry):\n        pass\n\n    __all__.append('Country')\n",
    "output": "from django.http import HttpResponse\nfrom django.test import TestCase\nfrom django.test.client import RequestFactory\nfrom django.contrib.auth.models import AnonymousUser\n\nfrom oscar.apps.basket import middleware\n\n\nclass TestBasketMiddleware(TestCase):\n\n    @staticmethod\n    def get_response_for_test(request):\n        return HttpResponse()\n\n    def setUp(self):\n        self.middleware = middleware.BasketMiddleware(self.get_response_for_test)\n        self.request = RequestFactory().get('/')\n        self.request.user = AnonymousUser()\n        self.middleware(self.request)\n\n    def test_basket_is_attached_to_request(self):\n        self.assertTrue(hasattr(self.request, 'basket'))\n\n    def test_strategy_is_attached_to_basket(self):\n        self.assertTrue(hasattr(self.request.basket, 'strategy'))\n\n    def test_strategy_is_attached_to_request(self):\n        self.assertTrue(hasattr(self.request, 'strategy'))\n\n    def test_get_cookie_basket_handles_invalid_signatures(self):\n        request_factory = RequestFactory()\n        request_factory.cookies['oscar_open_basket'] = '1:NOTAVALIDHASH'\n        request = request_factory.get('/')\n        request.cookies_to_delete = []\n\n        cookie_basket = self.middleware.get_cookie_basket(\"oscar_open_basket\", request, None)\n\n        self.assertEqual(None, cookie_basket)\n        self.assertIn(\"oscar_open_basket\", request.cookies_to_delete)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom oscar.apps.address.abstract_models import (\n    AbstractCountry, AbstractUserAddress)\nfrom oscar.core.loading import is_model_registered\n\n__all__ = []\n\n\nif not is_model_registered('address', 'UserAddress'):\n    class UserAddress(AbstractUserAddress):\n        pass\n\n    __all__.append('UserAddress')\n\n\nif not is_model_registered('address', 'Country'):\n    class Country(AbstractCountry):\n        pass\n\n    __all__.append('Country')\n",
    "output": "# -*- coding: utf-8 -*-\nfrom decimal import Decimal as D\n\nfrom django.test import TestCase\n\nfrom oscar.apps.basket.models import Basket\nfrom oscar.apps.catalogue.models import Option\nfrom oscar.apps.partner import availability, prices, strategy\nfrom oscar.test import factories\nfrom oscar.test.factories import (\n    BasketFactory, BasketLineAttributeFactory, OptionFactory, ProductFactory)\n\n\nclass TestANewBasket(TestCase):\n\n    def setUp(self):\n        self.basket = Basket()\n        self.basket.strategy = strategy.Default()\n\n    def test_has_zero_lines(self):\n        self.assertEqual(0, self.basket.num_lines)\n\n    def test_has_zero_items(self):\n        self.assertEqual(0, self.basket.num_items)\n\n    def test_doesnt_contain_vouchers(self):\n        self.assertFalse(self.basket.contains_a_voucher)\n\n    def test_can_be_edited(self):\n        self.assertTrue(self.basket.can_be_edited)\n\n    def test_is_empty(self):\n        self.assertTrue(self.basket.is_empty)\n\n    def test_is_not_submitted(self):\n        self.assertFalse(self.basket.is_submitted)\n\n    def test_has_no_applied_offers(self):\n        self.assertEqual({}, self.basket.applied_offers())\n\n\nclass TestBasketLine(TestCase):\n\n    def test_description(self):\n        basket = BasketFactory()\n        product = ProductFactory(title=\"A product\")\n        basket.add_product(product)\n\n        line = basket.lines.first()\n        self.assertEqual(line.description, \"A product\")\n\n    def test_description_with_attributes(self):\n        basket = BasketFactory()\n        product = ProductFactory(title=\"A product\")\n        basket.add_product(product)\n\n        line = basket.lines.first()\n        BasketLineAttributeFactory(\n            line=line, value='\\u2603', option__name='with')\n        self.assertEqual(line.description, \"A product (with = '\\u2603')\")\n\n    def test_create_line_reference(self):\n        basket = BasketFactory()\n        product = ProductFactory(title=\"A product\")\n        option = OptionFactory(name=\"product_option\", code=\"product_option\")\n        option_product = ProductFactory(title='Asunci\u00f3n')\n        options = [{'option': option, 'value': option_product}]\n        basket.add_product(product, options=options)\n\n    def test_basket_lines_queryset_is_ordered(self):\n        # This is needed to make sure a formset is not performing the query\n        # again with an order_by clause (losing all calculated discounts)\n        basket = BasketFactory()\n        product = ProductFactory(title=\"A product\")\n        another_product = ProductFactory(title=\"Another product\")\n        basket.add_product(product)\n        basket.add_product(another_product)\n        queryset = basket.all_lines()\n        self.assertTrue(queryset.ordered)\n\n    def test_line_tax_for_zero_tax_strategies(self):\n        basket = Basket()\n        basket.strategy = strategy.Default()\n        product = factories.create_product()\n        # Tax for the default strategy will be 0\n        factories.create_stockrecord(\n            product, price_excl_tax=D('75.00'), num_in_stock=10)\n        basket.add(product, 1)\n\n        self.assertEqual(basket.lines.first().line_tax, D('0'))\n\n    def test_line_tax_for_unknown_tax_strategies(self):\n\n        class UnknownTaxStrategy(strategy.Default):\n            \"\"\" A test strategy where the tax is not known \"\"\"\n\n            def pricing_policy(self, product, stockrecord):\n                return prices.FixedPrice('GBP', stockrecord.price_excl_tax, tax=None)\n\n        basket = Basket()\n        basket.strategy = UnknownTaxStrategy()\n        product = factories.create_product()\n        factories.create_stockrecord(product, num_in_stock=10)\n        basket.add(product, 1)\n\n        self.assertEqual(basket.lines.first().line_tax, None)\n\n\nclass TestAddingAProductToABasket(TestCase):\n\n    def setUp(self):\n        self.basket = Basket()\n        self.basket.strategy = strategy.Default()\n        self.product = factories.create_product()\n        self.record = factories.create_stockrecord(\n            currency='GBP',\n            product=self.product, price_excl_tax=D('10.00'))\n        self.purchase_info = factories.create_purchase_info(self.record)\n        self.basket.add(self.product)\n\n    def test_creates_a_line(self):\n        self.assertEqual(1, self.basket.num_lines)\n\n    def test_sets_line_prices(self):\n        line = self.basket.lines.all()[0]\n        self.assertEqual(line.price_incl_tax, self.purchase_info.price.incl_tax)\n        self.assertEqual(line.price_excl_tax, self.purchase_info.price.excl_tax)\n\n    def test_adding_negative_quantity(self):\n        self.assertEqual(1, self.basket.num_lines)\n        self.basket.add(self.product, quantity=4)\n        self.assertEqual(5, self.basket.line_quantity(self.product, self.record))\n        self.basket.add(self.product, quantity=-10)\n        self.assertEqual(0, self.basket.line_quantity(self.product, self.record))\n\n    def test_means_another_currency_product_cannot_be_added(self):\n        product = factories.create_product()\n        factories.create_stockrecord(\n            currency='USD', product=product, price_excl_tax=D('20.00'))\n        with self.assertRaises(ValueError):\n            self.basket.add(product)\n\n    def test_cannot_add_a_product_without_price(self):\n        product = factories.create_product(price=None)\n        with self.assertRaises(ValueError):\n            self.basket.add(product)\n\n\nclass TestANonEmptyBasket(TestCase):\n\n    def setUp(self):\n        self.basket = Basket()\n        self.basket.strategy = strategy.Default()\n        self.product = factories.create_product()\n        self.record = factories.create_stockrecord(\n            self.product, price_excl_tax=D('10.00'))\n        self.purchase_info = factories.create_purchase_info(self.record)\n        self.basket.add(self.product, 10)\n\n    def test_can_be_flushed(self):\n        self.basket.flush()\n        self.assertEqual(self.basket.num_items, 0)\n\n    def test_returns_correct_product_quantity(self):\n        self.assertEqual(10, self.basket.product_quantity(\n            self.product))\n\n    def test_returns_correct_line_quantity_for_existing_product_and_stockrecord(self):\n        self.assertEqual(10, self.basket.line_quantity(\n            self.product, self.record))\n\n    def test_returns_zero_line_quantity_for_alternative_stockrecord(self):\n        record = factories.create_stockrecord(\n            self.product, price_excl_tax=D('5.00'))\n        self.assertEqual(0, self.basket.line_quantity(\n            self.product, record))\n\n    def test_returns_zero_line_quantity_for_missing_product_and_stockrecord(self):\n        product = factories.create_product()\n        record = factories.create_stockrecord(\n            product, price_excl_tax=D('5.00'))\n        self.assertEqual(0, self.basket.line_quantity(\n            product, record))\n\n    def test_returns_correct_quantity_for_existing_product_and_stockrecord_and_options(self):\n        product = factories.create_product()\n        record = factories.create_stockrecord(\n            product, price_excl_tax=D('5.00'))\n        option = Option.objects.create(name=\"Message\")\n        options = [{\"option\": option, \"value\": \"2\"}]\n\n        self.basket.add(product, options=options)\n        self.assertEqual(0, self.basket.line_quantity(\n            product, record))\n        self.assertEqual(1, self.basket.line_quantity(\n            product, record, options))\n\n    def test_total_sums_product_totals(self):\n        product = factories.create_product()\n        factories.create_stockrecord(\n            product, price_excl_tax=D('5.00'))\n        self.basket.add(product, 1)\n        self.assertEqual(self.basket.total_excl_tax, 105)\n\n    def test_totals_for_free_products(self):\n        basket = Basket()\n        basket.strategy = strategy.Default()\n        # Add a zero-priced product to the basket\n        product = factories.create_product()\n        factories.create_stockrecord(\n            product, price_excl_tax=D('0.00'), num_in_stock=10)\n        basket.add(product, 1)\n\n        self.assertEqual(basket.lines.count(), 1)\n        self.assertEqual(basket.total_excl_tax, 0)\n        self.assertEqual(basket.total_incl_tax, 0)\n\n    def test_basket_prices_calculation_for_unavailable_pricing(self):\n        new_product = factories.create_product()\n        factories.create_stockrecord(\n            new_product, price_excl_tax=D('5.00'))\n        self.basket.add(new_product, 1)\n\n        class UnavailableProductStrategy(strategy.Default):\n            \"\"\" A test strategy that makes a specific product unavailable \"\"\"\n\n            def availability_policy(self, product, stockrecord):\n                if product == new_product:\n                    return availability.Unavailable()\n                return super().availability_policy(product, stockrecord)\n\n            def pricing_policy(self, product, stockrecord):\n                if product == new_product:\n                    return prices.Unavailable()\n                return super().pricing_policy(product, stockrecord)\n\n        self.basket.strategy = UnavailableProductStrategy()\n        line = self.basket.all_lines()[1]\n        self.assertEqual(line.get_warning(), \"'D\\xf9\\uff4d\\u03fb\\u03d2 title' is no longer available\")\n        self.assertIsNone(line.line_price_excl_tax)\n        self.assertIsNone(line.line_price_incl_tax)\n        self.assertIsNone(line.line_price_excl_tax_incl_discounts)\n        self.assertIsNone(line.line_price_incl_tax_incl_discounts)\n        self.assertIsNone(line.line_tax)\n        self.assertEqual(self.basket.total_excl_tax, 100)\n        self.assertEqual(self.basket.total_incl_tax, 100)\n        self.assertEqual(self.basket.total_excl_tax_excl_discounts, 100)\n        self.assertEqual(self.basket.total_incl_tax_excl_discounts, 100)\n\n    def test_max_allowed_quantity(self):\n        self.basket.add_product(self.product, quantity=3)\n\n        # max allowed here is 7 (20-10+3)\n        with self.settings(OSCAR_MAX_BASKET_QUANTITY_THRESHOLD=20):\n            max_allowed, basket_threshold = self.basket.max_allowed_quantity()\n            self.assertEqual(max_allowed, 7)\n            self.assertEqual(basket_threshold, 20)\n\n        # but we can also completely disable the threshold\n        with self.settings(OSCAR_MAX_BASKET_QUANTITY_THRESHOLD=None):\n            max_allowed, basket_threshold = self.basket.max_allowed_quantity()\n            self.assertEqual(max_allowed, None)\n            self.assertEqual(basket_threshold, None)\n\n    def test_is_quantity_allowed(self):\n        with self.settings(OSCAR_MAX_BASKET_QUANTITY_THRESHOLD=20):\n            # 7 or below is possible\n            allowed, message = self.basket.is_quantity_allowed(qty=7)\n            self.assertTrue(allowed)\n            self.assertIsNone(message)\n            # but above it's not\n            allowed, message = self.basket.is_quantity_allowed(qty=11)\n            self.assertFalse(allowed)\n            self.assertIsNotNone(message)\n\n        with self.settings(OSCAR_MAX_BASKET_QUANTITY_THRESHOLD=None):\n            # with the treshold disabled all quantities are possible\n            allowed, message = self.basket.is_quantity_allowed(qty=7)\n            self.assertTrue(allowed)\n            self.assertIsNone(message)\n            allowed, message = self.basket.is_quantity_allowed(qty=5000)\n            self.assertTrue(allowed)\n            self.assertIsNone(message)\n\n\nclass TestMergingTwoBaskets(TestCase):\n\n    def setUp(self):\n        self.product = factories.create_product()\n        self.record = factories.create_stockrecord(\n            self.product, price_excl_tax=D('10.00'))\n        self.purchase_info = factories.create_purchase_info(self.record)\n\n        self.main_basket = Basket()\n        self.main_basket.strategy = strategy.Default()\n        self.main_basket.add(self.product, quantity=2)\n\n        self.merge_basket = Basket()\n        self.merge_basket.strategy = strategy.Default()\n        self.merge_basket.add(self.product, quantity=1)\n\n        self.main_basket.merge(self.merge_basket)\n\n    def test_doesnt_sum_quantities(self):\n        self.assertEqual(1, self.main_basket.num_lines)\n\n    def test_changes_status_of_merge_basket(self):\n        self.assertEqual(Basket.MERGED, self.merge_basket.status)\n\n\nclass TestASubmittedBasket(TestCase):\n\n    def setUp(self):\n        self.basket = Basket()\n        self.basket.strategy = strategy.Default()\n        self.basket.submit()\n\n    def test_has_correct_status(self):\n        self.assertTrue(self.basket.is_submitted)\n\n    def test_can_be_edited(self):\n        self.assertFalse(self.basket.can_be_edited)\n\n\nclass TestMergingAVoucherBasket(TestCase):\n\n    def test_transfers_vouchers_to_new_basket(self):\n        baskets = [factories.BasketFactory(), factories.BasketFactory()]\n        voucher = factories.VoucherFactory()\n        baskets[0].vouchers.add(voucher)\n        baskets[1].merge(baskets[0])\n\n        self.assertEqual(1, baskets[1].vouchers.all().count())\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom oscar.apps.address.abstract_models import (\n    AbstractCountry, AbstractUserAddress)\nfrom oscar.core.loading import is_model_registered\n\n__all__ = []\n\n\nif not is_model_registered('address', 'UserAddress'):\n    class UserAddress(AbstractUserAddress):\n        pass\n\n    __all__.append('UserAddress')\n\n\nif not is_model_registered('address', 'Country'):\n    class Country(AbstractCountry):\n        pass\n\n    __all__.append('Country')\n",
    "output": "import datetime\n\nfrom django.test import TestCase\n\nfrom oscar.apps.basket.reports import (\n    OpenBasketReportGenerator, SubmittedBasketReportGenerator)\n\n\nclass TestBasketReports(TestCase):\n\n    def test_open_report_doesnt_error(self):\n        data = {\n            'start_date': datetime.date(2012, 5, 1),\n            'end_date': datetime.date(2012, 5, 17),\n            'formatter': 'CSV'\n        }\n        generator = OpenBasketReportGenerator(**data)\n        generator.generate()\n\n    def test_submitted_report_doesnt_error(self):\n        data = {\n            'start_date': datetime.date(2012, 5, 1),\n            'end_date': datetime.date(2012, 5, 17),\n            'formatter': 'CSV'\n        }\n        generator = SubmittedBasketReportGenerator(**data)\n        generator.generate()\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom oscar.apps.address.abstract_models import (\n    AbstractCountry, AbstractUserAddress)\nfrom oscar.core.loading import is_model_registered\n\n__all__ = []\n\n\nif not is_model_registered('address', 'UserAddress'):\n    class UserAddress(AbstractUserAddress):\n        pass\n\n    __all__.append('UserAddress')\n\n\nif not is_model_registered('address', 'Country'):\n    class Country(AbstractCountry):\n        pass\n\n    __all__.append('Country')\n",
    "output": "\nimport pytest\nfrom oscar.test.factories import (\n    BasketFactory, ConditionalOfferFactory, ProductFactory)\n\n\n@pytest.fixture\ndef filled_basket():\n    basket = BasketFactory()\n    product1 = ProductFactory()\n    product2 = ProductFactory()\n    basket.add_product(product1, quantity=10)\n    basket.add_product(product2, quantity=20)\n    return basket\n\n\n@pytest.mark.django_db\nclass TestLineOfferConsumer(object):\n\n    def test_consumed_no_offer(self, filled_basket):\n        for line in filled_basket.all_lines():\n            assert line.consumer.consumed() == 0\n\n    def test_consumed_with_offer(self, filled_basket):\n        offer1 = ConditionalOfferFactory(name='offer1')\n        offer2 = ConditionalOfferFactory(name='offer2')\n        offer1.exclusive = False\n        offer2.exclusive = False\n\n        for line in filled_basket.all_lines():\n            assert line.consumer.consumed(offer1) == 0\n            assert line.consumer.consumed(offer2) == 0\n\n        line1 = filled_basket.all_lines()[0]\n        line2 = filled_basket.all_lines()[1]\n\n        line1.consumer.consume(1, offer1)\n        assert line1.consumer.consumed() == 1\n        assert line1.consumer.consumed(offer1) == 1\n        assert line1.consumer.consumed(offer2) == 0\n\n        line1.consumer.consume(9, offer1)\n        assert line1.consumer.consumed() == line1.quantity\n        assert line1.consumer.consumed(offer1) == line1.quantity\n        assert line1.consumer.consumed(offer2) == 0\n\n        line1.consumer.consume(99, offer1)\n        assert line1.consumer.consumed(offer1) == line1.quantity\n        assert line1.consumer.consumed(offer2) == 0\n\n        line1.consumer.consume(1, offer2)\n        line2.consumer.consume(1, offer2)\n\n        assert line1.consumer.consumed(offer2) == 1\n        assert line2.consumer.consumed(offer2) == 1\n\n    def test_consume(self, filled_basket):\n        line = filled_basket.all_lines()[0]\n        line.consume(1)\n        assert line.quantity_with_discount == 1\n        line.consume(99)\n        assert line.quantity_with_discount == 10\n\n    def test_consumed_with_exclusive_offer(self, filled_basket):\n        offer1 = ConditionalOfferFactory(name='offer1')\n        offer2 = ConditionalOfferFactory(name='offer2')\n        offer3 = ConditionalOfferFactory(name='offer3')\n        offer1.exclusive = True\n        offer2.exclusive = False\n        offer3.exclusive = False\n\n        for line in filled_basket.all_lines():\n            assert line.consumer.consumed(offer1) == 0\n            assert line.consumer.consumed(offer2) == 0\n\n        line1 = filled_basket.all_lines()[0]\n        line2 = filled_basket.all_lines()[1]\n\n        line1.consumer.consume(1, offer1)\n        assert line1.is_available_for_offer_discount(offer2) is True\n\n        line1.consumer.consume(99, offer1)\n        assert line1.is_available_for_offer_discount(offer2) is False\n\n        line2.consumer.consume(1, offer2)\n        assert line2.is_available_for_offer_discount(offer1) is True\n\n        line2.consumer.consume(99, offer2)\n        assert line2.is_available_for_offer_discount(offer1) is False\n        assert line2.is_available_for_offer_discount(offer3) is True\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom oscar.apps.address.abstract_models import (\n    AbstractCountry, AbstractUserAddress)\nfrom oscar.core.loading import is_model_registered\n\n__all__ = []\n\n\nif not is_model_registered('address', 'UserAddress'):\n    class UserAddress(AbstractUserAddress):\n        pass\n\n    __all__.append('UserAddress')\n\n\nif not is_model_registered('address', 'Country'):\n    class Country(AbstractCountry):\n        pass\n\n    __all__.append('Country')\n",
    "output": "from django.contrib.messages import get_messages\nfrom django.test import TestCase\nfrom django.urls import reverse\n\nfrom oscar.apps.basket import views\nfrom oscar.test import factories\nfrom tests.fixtures import RequestFactory\n\n\nclass TestVoucherAddView(TestCase):\n    def test_get(self):\n        request = RequestFactory().get('/')\n\n        view = views.VoucherAddView.as_view()\n        response = view(request)\n\n        self.assertEqual(response.status_code, 302)\n\n    def _get_voucher_message(self, request):\n        return '\\n'.join(str(m.message) for m in get_messages(request))\n\n    def test_post_valid(self):\n        voucher = factories.VoucherFactory()\n        self.assertTrue(voucher.is_active())\n\n        data = {\n            'code': voucher.code\n        }\n        request = RequestFactory().post('/', data=data)\n        request.basket.save()\n\n        view = views.VoucherAddView.as_view()\n        response = view(request)\n        self.assertEqual(response.status_code, 302)\n\n        voucher = voucher.__class__.objects.get(pk=voucher.pk)\n        self.assertEqual(voucher.num_basket_additions, 1, msg=self._get_voucher_message(request))\n\n    def test_post_valid_from_set(self):\n        voucherset = factories.VoucherSetFactory()\n        voucher = voucherset.vouchers.first()\n\n        self.assertTrue(voucher.is_active())\n\n        data = {\n            'code': voucher.code\n        }\n        request = RequestFactory().post('/', data=data)\n        request.basket.save()\n\n        view = views.VoucherAddView.as_view()\n        response = view(request)\n        self.assertEqual(response.status_code, 302)\n\n        voucher = voucher.__class__.objects.get(pk=voucher.pk)\n        self.assertEqual(voucher.num_basket_additions, 1, msg=self._get_voucher_message(request))\n\n        self.assertEqual(voucherset.num_basket_additions, 1)\n\n\nclass TestVoucherRemoveView(TestCase):\n    def test_post_valid(self):\n        voucher = factories.VoucherFactory(num_basket_additions=5)\n\n        data = {\n            'code': voucher.code\n        }\n        request = RequestFactory().post('/', data=data)\n        request.basket.save()\n        request.basket.vouchers.add(voucher)\n\n        view = views.VoucherRemoveView.as_view()\n        response = view(request, pk=voucher.pk)\n        self.assertEqual(response.status_code, 302)\n\n        voucher = voucher.__class__.objects.get(pk=voucher.pk)\n        self.assertEqual(voucher.num_basket_additions, 4)\n\n    def test_post_with_missing_voucher(self):\n        \"\"\" If the voucher is missing, verify the view queues a message and redirects. \"\"\"\n        pk = '12345'\n        view = views.VoucherRemoveView.as_view()\n        request = RequestFactory().post('/')\n        request.basket.save()\n        response = view(request, pk=pk)\n\n        self.assertEqual(response.status_code, 302)\n\n        actual = list(get_messages(request))[-1].message\n        expected = \"No voucher found with id '{}'\".format(pk)\n        self.assertEqual(actual, expected)\n\n\nclass TestBasketSummaryView(TestCase):\n    def setUp(self):\n        self.url = reverse('basket:summary')\n        self.country = factories.CountryFactory()\n        self.user = factories.UserFactory()\n\n    def test_default_shipping_address(self):\n        user_address = factories.UserAddressFactory(\n            country=self.country, user=self.user, is_default_for_shipping=True\n        )\n        request = RequestFactory().get(self.url, user=self.user)\n        view = views.BasketView(request=request)\n        self.assertEquals(view.get_default_shipping_address(), user_address)\n\n    def test_default_shipping_address_for_anonymous_user(self):\n        request = RequestFactory().get(self.url)\n        view = views.BasketView(request=request)\n        self.assertIsNone(view.get_default_shipping_address())\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom oscar.apps.address.abstract_models import (\n    AbstractCountry, AbstractUserAddress)\nfrom oscar.core.loading import is_model_registered\n\n__all__ = []\n\n\nif not is_model_registered('address', 'UserAddress'):\n    class UserAddress(AbstractUserAddress):\n        pass\n\n    __all__.append('UserAddress')\n\n\nif not is_model_registered('address', 'Country'):\n    class Country(AbstractCountry):\n        pass\n\n    __all__.append('Country')\n",
    "output": ""
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom oscar.apps.address.abstract_models import (\n    AbstractCountry, AbstractUserAddress)\nfrom oscar.core.loading import is_model_registered\n\n__all__ = []\n\n\nif not is_model_registered('address', 'UserAddress'):\n    class UserAddress(AbstractUserAddress):\n        pass\n\n    __all__.append('UserAddress')\n\n\nif not is_model_registered('address', 'Country'):\n    class Country(AbstractCountry):\n        pass\n\n    __all__.append('Country')\n",
    "output": "from decimal import Decimal as D\nfrom unittest import mock\n\nfrom django.test import TestCase\n\nfrom oscar.apps.checkout import calculators\nfrom oscar.core import prices\n\n\nclass TestOrderTotalCalculator(TestCase):\n\n    def setUp(self):\n        self.calculator = calculators.OrderTotalCalculator()\n\n    def test_returns_correct_totals_when_tax_is_not_known(self):\n        basket = mock.Mock()\n        basket.total_excl_tax = D('10.00')\n        basket.is_tax_known = False\n\n        shipping_charge = prices.Price(\n            currency=basket.currency, excl_tax=D('5.00'))\n\n        total = self.calculator.calculate(basket, shipping_charge)\n\n        self.assertIsInstance(total, prices.Price)\n        self.assertEqual(D('10.00') + D('5.00'), total.excl_tax)\n        self.assertFalse(total.is_tax_known)\n\n    def test_returns_correct_totals_when_tax_is_known(self):\n        basket = mock.Mock()\n        basket.total_excl_tax = D('10.00')\n        basket.total_incl_tax = D('12.00')\n        basket.is_tax_known = True\n\n        shipping_charge = prices.Price(\n            currency=basket.currency, excl_tax=D('5.00'),\n            tax=D('0.50'))\n\n        total = self.calculator.calculate(basket, shipping_charge)\n\n        self.assertIsInstance(total, prices.Price)\n        self.assertEqual(D('10.00') + D('5.00'), total.excl_tax)\n        self.assertTrue(total.is_tax_known)\n        self.assertEqual(D('12.00') + D('5.50'), total.incl_tax)\n        self.assertEqual(D('2.00') + D('0.50'), total.tax)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom oscar.apps.address.abstract_models import (\n    AbstractCountry, AbstractUserAddress)\nfrom oscar.core.loading import is_model_registered\n\n__all__ = []\n\n\nif not is_model_registered('address', 'UserAddress'):\n    class UserAddress(AbstractUserAddress):\n        pass\n\n    __all__.append('UserAddress')\n\n\nif not is_model_registered('address', 'Country'):\n    class Country(AbstractCountry):\n        pass\n\n    __all__.append('Country')\n",
    "output": "# coding=utf-8\nfrom django.test import TestCase\nfrom django.test.utils import override_settings\n\nfrom oscar.apps.address.models import Country\nfrom oscar.apps.checkout.forms import ShippingAddressForm\nfrom oscar.test.factories import CountryFactory\n\n\nclass AnotherShippingAddressForm(ShippingAddressForm):\n    phone_number_fields = {\n        'phone_number': {\n            'required': False,\n            'help_text': '',\n            'max_length': 32,\n            'label': 'Phone number'\n        },\n        'another_phone_number': {\n            'required': False,\n            'help_text': 'Another phone number help text',\n            'max_length': 32,\n            'label': 'Another phone number'\n        },\n    }\n\n\nclass TestShippingAddressForm(TestCase):\n    minimal_data = {\n        'first_name': 'B\u00e4rry',\n        'last_name': 'Chuckle',\n        'line1': '1 King St',\n        'line4': 'Goth\u00e1m',\n        'postcode': 'N1 7RR'\n    }\n\n    def setUp(self):\n        CountryFactory(iso_3166_1_a2='GB', is_shipping_country=True)\n\n    def test_removes_country_field(self):\n        self.assertTrue('country' not in ShippingAddressForm().fields)\n\n    def test_keeps_country_field(self):\n        CountryFactory(iso_3166_1_a2='DE', is_shipping_country=True)\n        self.assertTrue('country' in ShippingAddressForm().fields)\n\n    @override_settings(OSCAR_REQUIRED_ADDRESS_FIELDS=('last_name', 'postcode'))\n    def test_required_fields_validated(self):\n        form = ShippingAddressForm()\n        self.assertTrue(form.fields['last_name'].required)\n        self.assertTrue(form.fields['postcode'].required)\n        self.assertFalse(form.fields['first_name'].required)\n        self.assertFalse(form.fields['line2'].required)\n        self.assertFalse(form.fields['line3'].required)\n        self.assertFalse(form.fields['line4'].required)\n\n    @override_settings(OSCAR_REQUIRED_ADDRESS_FIELDS=('phone_number',))\n    def test_required_phone_number_validated(self):\n        # This needs a separate test because of the logic in PhoneNumberMixin\n        form = ShippingAddressForm()\n        self.assertTrue(form.fields['phone_number'].required)\n\n    # Tests where the country field is hidden\n\n    def test_is_valid_without_phone_number(self):\n        self.assertTrue(ShippingAddressForm(self.minimal_data).is_valid())\n\n    def test_only_accepts_british_local_phone_number(self):\n        data = self.minimal_data.copy()\n        data['phone_number'] = '07 914721389'  # local UK number\n        self.assertTrue(ShippingAddressForm(data).is_valid())\n\n        data['phone_number'] = '0176 968 426 71'  # local German number\n        self.assertFalse(ShippingAddressForm(data).is_valid())\n\n    def test_only_accepts_british_local_phone_numbers(self):\n        data = self.minimal_data.copy()\n        # Both numbers are British local numbers\n        data['phone_number'] = '07 914721389'\n        data['another_phone_number'] = '0344493 0787'  # British Airways\n        self.assertTrue(AnotherShippingAddressForm(data).is_valid())\n\n        # Both numbers are local German numbers\n        data['phone_number'] = '0176 968 426 71'\n        data['another_phone_number'] = '07032 15 49225'  # IBM Germany\n        self.assertFalse(AnotherShippingAddressForm(data).is_valid())\n\n        # One number is British number, another is German number\n        data['phone_number'] = '07 914721389'\n        data['another_phone_number'] = '0176 968 426 71'\n        self.assertFalse(AnotherShippingAddressForm(data).is_valid())\n\n        # As previous case, but numbers are reversed\n        data['phone_number'] = '0176 968 426 71'\n        data['another_phone_number'] = '07 914721389'\n        self.assertFalse(AnotherShippingAddressForm(data).is_valid())\n\n    def test_is_valid_with_international_phone_number(self):\n        data = self.minimal_data.copy()\n        data['phone_number'] = '+49 176 968426 71'\n        form = ShippingAddressForm(data)\n        self.assertTrue(form.is_valid())\n\n    def test_is_valid_with_international_phone_numbers(self):\n        data = self.minimal_data.copy()\n        data['phone_number'] = '+49 176 968426 71'\n        data['another_phone_number'] = '+49-1805-426452'\n        form = AnotherShippingAddressForm(data)\n        self.assertTrue(form.is_valid())\n\n    # Tests where the country field exists\n\n    def test_needs_country_data(self):\n        CountryFactory(iso_3166_1_a2='DE', is_shipping_country=True)\n\n        self.assertFalse(ShippingAddressForm(self.minimal_data).is_valid())\n\n        data = self.minimal_data.copy()\n        data['country'] = Country.objects.get(iso_3166_1_a2='GB').pk\n        self.assertTrue(ShippingAddressForm(data).is_valid())\n\n    def test_only_accepts_local_phone_number_when_country_matches(self):\n        CountryFactory(iso_3166_1_a2='DE', is_shipping_country=True)\n\n        data = self.minimal_data.copy()\n        data['phone_number'] = '07 914721389'  # local UK number\n\n        data['country'] = Country.objects.get(iso_3166_1_a2='DE').pk\n        self.assertFalse(ShippingAddressForm(data).is_valid())\n\n        data['country'] = Country.objects.get(iso_3166_1_a2='GB').pk\n        self.assertTrue(ShippingAddressForm(data).is_valid())\n\n    def test_only_accepts_local_phone_numbers_when_country_matches(self):\n        CountryFactory(iso_3166_1_a2='DE', is_shipping_country=True)\n        data = self.minimal_data.copy()\n        # Local UK numbers\n        data['phone_number'] = '07 914721389'\n        data['another_phone_number'] = '0344493 0787'\n\n        data['country'] = Country.objects.get(iso_3166_1_a2='DE').pk\n        self.assertFalse(ShippingAddressForm(data).is_valid())\n\n        data['country'] = Country.objects.get(iso_3166_1_a2='GB').pk\n        self.assertTrue(ShippingAddressForm(data).is_valid())\n\n    @override_settings(OSCAR_REQUIRED_ADDRESS_FIELDS=('phone_number',))\n    def test_local_phone_number_invalid_without_country(self):\n        # Add another country, so we have two.\n        CountryFactory(iso_3166_1_a2='DE', is_shipping_country=True)\n        data = self.minimal_data.copy()\n        data['phone_number'] = '07 914721389'\n        # User hasn't selected a country. Because there are multiple country\n        # choices we should not accept the local number.\n        form = ShippingAddressForm(data)\n        self.assertFalse(form.is_valid())\n        self.assertIn('phone_number', form.errors)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom oscar.apps.address.abstract_models import (\n    AbstractCountry, AbstractUserAddress)\nfrom oscar.core.loading import is_model_registered\n\n__all__ = []\n\n\nif not is_model_registered('address', 'UserAddress'):\n    class UserAddress(AbstractUserAddress):\n        pass\n\n    __all__.append('UserAddress')\n\n\nif not is_model_registered('address', 'Country'):\n    class Country(AbstractCountry):\n        pass\n\n    __all__.append('Country')\n",
    "output": "from decimal import Decimal as D\nfrom unittest import mock\n\nfrom django.http import HttpRequest\nfrom django.test import TestCase\nfrom django.test.utils import override_settings\n\nfrom oscar.apps.checkout.calculators import OrderTotalCalculator\nfrom oscar.apps.checkout.mixins import CheckoutSessionMixin, OrderPlacementMixin\nfrom oscar.apps.checkout.exceptions import FailedPreCondition\nfrom oscar.core.loading import get_model\nfrom oscar.test import factories\nfrom oscar.test.basket import add_product\nfrom oscar.test.utils import RequestFactory\nfrom oscar.apps.shipping.methods import FixedPrice, Free\n\n\nOrder = get_model('order', 'Order')\n\n\nclass TestOrderPlacementMixin(TestCase):\n\n    def test_returns_none_when_no_shipping_address_passed_to_creation_method(self):\n        address = OrderPlacementMixin().create_shipping_address(\n            user=mock.Mock(), shipping_address=None)\n        self.assertEqual(address, None)\n\n    def test_update_address_book(self):\n        basket = factories.create_basket(empty=True)\n        user = factories.UserFactory()\n        add_product(basket, D('12.00'))\n        shipping_method = FixedPrice(D('5.00'), D('5.00'))\n\n        billing_address = factories.BillingAddressFactory(line1='1 Boardwalk Place',\n                                                          line2='Trafalgar Way',\n                                                          line3='Tower Hamlets',\n                                                          line4='London')\n        shipping_address = factories.ShippingAddressFactory(line1='Knightsbridge',\n                                                            line2='159',\n                                                            line4='London')\n        shipping_charge = shipping_method.calculate(basket)\n        order_total = OrderTotalCalculator().calculate(basket, shipping_charge)\n\n        order_submission_data = {'user': user,\n                                 'order_number': '12345',\n                                 'basket': basket,\n                                 'shipping_address': shipping_address,\n                                 'shipping_method': shipping_method,\n                                 'shipping_charge': shipping_charge,\n                                 'billing_address': billing_address,\n                                 'order_total': order_total}\n        OrderPlacementMixin().place_order(**order_submission_data)\n\n        self.assertEqual(user.addresses.filter(hash=billing_address.generate_hash()).count(), 1)\n        self.assertEqual(user.addresses.filter(hash=shipping_address.generate_hash()).count(), 1)\n\n        user_billing_address = user.addresses.get(hash=billing_address.generate_hash())\n        user_shipping_address = user.addresses.get(hash=shipping_address.generate_hash())\n        self.assertEqual(user_billing_address.num_orders_as_billing_address, 1)\n        self.assertEqual(user_shipping_address.num_orders_as_shipping_address, 1)\n\n        order_submission_data['order_number'] = '12346'\n\n        OrderPlacementMixin().place_order(**order_submission_data)\n\n        user_billing_address = user.addresses.get(hash=billing_address.generate_hash())\n        user_shipping_address = user.addresses.get(hash=shipping_address.generate_hash())\n        self.assertEqual(user_billing_address.num_orders_as_billing_address, 2)\n        self.assertEqual(user_shipping_address.num_orders_as_shipping_address, 2)\n\n        order_submission_data.pop('billing_address', None)\n        order_submission_data['order_number'] = '123457'\n        OrderPlacementMixin().place_order(**order_submission_data)\n\n        user_billing_address = user.addresses.get(hash=billing_address.generate_hash())\n        user_shipping_address = user.addresses.get(hash=shipping_address.generate_hash())\n        self.assertEqual(user_billing_address.num_orders_as_billing_address, 2)\n        self.assertEqual(user_shipping_address.num_orders_as_shipping_address, 3)\n\n        shipping_address.line2 = '160'\n        order_submission_data['billing_address'] = billing_address\n        order_submission_data['order_number'] = '123458'\n        OrderPlacementMixin().place_order(**order_submission_data)\n\n        user_billing_address = user.addresses.get(hash=billing_address.generate_hash())\n        user_shipping_address = user.addresses.get(hash=shipping_address.generate_hash())\n        self.assertEqual(user_billing_address.num_orders_as_billing_address, 3)\n        self.assertEqual(user_shipping_address.num_orders_as_shipping_address, 1)\n\n    @override_settings(SITE_ID='')\n    def test_multi_site(self):\n        basket = factories.create_basket(empty=True)\n        site1 = factories.SiteFactory()\n        site2 = factories.SiteFactory()\n        request = HttpRequest()\n        request.META['SERVER_PORT'] = 80\n        request.META['SERVER_NAME'] = site1.domain\n        user = factories.UserFactory()\n        add_product(basket, D('12.00'))\n        shipping_method = Free()\n        shipping_charge = shipping_method.calculate(basket)\n        order_total = OrderTotalCalculator().calculate(basket, shipping_charge)\n\n        billing_address = factories.BillingAddressFactory()\n        shipping_address = factories.ShippingAddressFactory()\n        order_submission_data = {'user': user,\n                                 'order_number': '12345',\n                                 'basket': basket,\n                                 'shipping_method': shipping_method,\n                                 'shipping_charge': shipping_charge,\n                                 'order_total': order_total,\n                                 'billing_address': billing_address,\n                                 'shipping_address': shipping_address,\n                                 'request': request}\n        OrderPlacementMixin().place_order(**order_submission_data)\n        order1 = Order.objects.get(number='12345')\n        self.assertEqual(order1.site, site1)\n\n        add_product(basket, D('12.00'))\n        request.META['SERVER_NAME'] = site2.domain\n        order_submission_data['order_number'] = '12346'\n        order_submission_data['request'] = request\n        OrderPlacementMixin().place_order(**order_submission_data)\n        order2 = Order.objects.get(number='12346')\n        self.assertEqual(order2.site, site2)\n\n    def test_multiple_payment_events(self):\n        basket = factories.create_basket(empty=True)\n        user = factories.UserFactory()\n        add_product(basket, D('100.00'))\n        order_placement = OrderPlacementMixin()\n        order_placement.add_payment_event('Gift Card Payment', D('10'))\n        order_placement.add_payment_event('Credit Card Payment', D('90'))\n        shipping_method = Free()\n        shipping_charge = shipping_method.calculate(basket)\n        order_total = OrderTotalCalculator().calculate(basket, shipping_charge)\n\n        billing_address = factories.BillingAddressFactory()\n        shipping_address = factories.ShippingAddressFactory()\n        order_submission_data = {'user': user,\n                                 'order_number': '12345',\n                                 'basket': basket,\n                                 'shipping_method': shipping_method,\n                                 'shipping_charge': shipping_charge,\n                                 'order_total': order_total,\n                                 'billing_address': billing_address,\n                                 'shipping_address': shipping_address}\n        order_placement.place_order(**order_submission_data)\n        order1 = Order.objects.get(number='12345')\n        self.assertEqual(order1.payment_events.count(), 2)\n        event1 = order1.payment_events.all()[0]\n        event2 = order1.payment_events.all()[1]\n        self.assertEqual(event1.event_type.name, 'Credit Card Payment')\n        self.assertEqual(event1.amount, D('90'))\n        self.assertEqual(event1.lines.count(), 1)\n        self.assertEqual(event2.event_type.name, 'Gift Card Payment')\n        self.assertEqual(event2.amount, D('10'))\n        self.assertEqual(event2.lines.count(), 1)\n\n\nclass TestCheckoutSessionMixin(TestCase):\n\n    def setUp(self):\n        self.request = RequestFactory().get('/')\n        self.product = factories.create_product(num_in_stock=10)\n        self.stock_record = self.product.stockrecords.first()\n\n    def add_product_to_basket(self, product, quantity=1):\n        self.request.basket.add_product(product, quantity=quantity)\n        self.assertEqual(len(self.request.basket.all_lines()), 1)\n        self.assertEqual(self.request.basket.all_lines()[0].product, product)\n\n    def test_check_basket_is_valid_no_stock_available(self):\n        self.add_product_to_basket(self.product)\n        CheckoutSessionMixin().check_basket_is_valid(self.request)\n        self.stock_record.allocate(10)\n        self.stock_record.save()\n        with self.assertRaises(FailedPreCondition):\n            CheckoutSessionMixin().check_basket_is_valid(self.request)\n\n    def test_check_basket_is_valid_stock_exceeded(self):\n        self.add_product_to_basket(self.product)\n        CheckoutSessionMixin().check_basket_is_valid(self.request)\n        self.request.basket.add_product(self.product, quantity=11)\n        with self.assertRaises(FailedPreCondition):\n            CheckoutSessionMixin().check_basket_is_valid(self.request)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom oscar.apps.address.abstract_models import (\n    AbstractCountry, AbstractUserAddress)\nfrom oscar.core.loading import is_model_registered\n\n__all__ = []\n\n\nif not is_model_registered('address', 'UserAddress'):\n    class UserAddress(AbstractUserAddress):\n        pass\n\n    __all__.append('UserAddress')\n\n\nif not is_model_registered('address', 'Country'):\n    class Country(AbstractCountry):\n        pass\n\n    __all__.append('Country')\n",
    "output": "from unittest import mock\n\nfrom django.test import TestCase\nfrom django.test.client import RequestFactory\nfrom django.contrib.sessions.middleware import SessionMiddleware\n\nfrom oscar.apps.checkout.utils import CheckoutSessionData\n\n\nclass TestCheckoutSession(TestCase):\n    \"\"\"\n    oscar.apps.checkout.utils.CheckoutSessionData\n    \"\"\"\n\n    def setUp(self):\n        request = RequestFactory().get('/')\n        SessionMiddleware().process_request(request)\n        self.session_data = CheckoutSessionData(request)\n\n    def test_allows_data_to_be_written_and_read_out(self):\n        self.session_data._set('namespace', 'key', 'value')\n        self.assertEqual('value', self.session_data._get('namespace', 'key'))\n\n    def test_allows_set_data_can_be_unset(self):\n        self.session_data._set('namespace', 'key', 'value')\n        self.session_data._unset('namespace', 'key')\n        self.assertIsNone(self.session_data._get('namespace', 'key'))\n\n    def test_stores_guest_email(self):\n        self.session_data.set_guest_email('a@a.com')\n        self.assertEqual('a@a.com', self.session_data.get_guest_email())\n\n    def test_allows_a_namespace_to_be_flushed(self):\n        self.session_data._set('ns', 'a', 1)\n        self.session_data._set('ns', 'b', 2)\n        self.session_data._flush_namespace('ns')\n        self.assertIsNone(self.session_data._get('ns', 'a'))\n        self.assertIsNone(self.session_data._get('ns', 'b'))\n\n    def test_allows_bill_to_user_address(self):\n        address = mock.Mock()\n        address.id = 1\n        self.session_data.bill_to_user_address(address)\n        self.assertEqual(1, self.session_data.billing_user_address_id())\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom oscar.apps.address.abstract_models import (\n    AbstractCountry, AbstractUserAddress)\nfrom oscar.core.loading import is_model_registered\n\n__all__ = []\n\n\nif not is_model_registered('address', 'UserAddress'):\n    class UserAddress(AbstractUserAddress):\n        pass\n\n    __all__.append('UserAddress')\n\n\nif not is_model_registered('address', 'Country'):\n    class Country(AbstractCountry):\n        pass\n\n    __all__.append('Country')\n",
    "output": "from django.test import TestCase\nfrom django.test.utils import override_settings\nfrom django.urls import reverse\n\nfrom oscar.test.factories import OrderFactory\n\n\nclass ThankYouViewTestCase(TestCase):\n\n    @override_settings(OSCAR_ALLOW_ANON_CHECKOUT=True)\n    def test_analytics_event_triggered_only_on_first_view(self):\n        order = OrderFactory()\n        session = self.client.session\n        # Put the order ID in the session, mimicking a completed order,\n        # so that we can reach the thank you page.\n        session['checkout_order_id'] = order.pk\n        session.save()\n\n        r1 = self.client.get(reverse('checkout:thank-you'), follow=True)\n        self.assertTrue(r1.context['send_analytics_event'])\n\n        # Request the view a second time\n        r2 = self.client.get(reverse('checkout:thank-you'), follow=True)\n        self.assertFalse(r2.context['send_analytics_event'])\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom oscar.apps.address.abstract_models import (\n    AbstractCountry, AbstractUserAddress)\nfrom oscar.core.loading import is_model_registered\n\n__all__ = []\n\n\nif not is_model_registered('address', 'UserAddress'):\n    class UserAddress(AbstractUserAddress):\n        pass\n\n    __all__.append('UserAddress')\n\n\nif not is_model_registered('address', 'Country'):\n    class Country(AbstractCountry):\n        pass\n\n    __all__.append('Country')\n",
    "output": ""
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom oscar.apps.address.abstract_models import (\n    AbstractCountry, AbstractUserAddress)\nfrom oscar.core.loading import is_model_registered\n\n__all__ = []\n\n\nif not is_model_registered('address', 'UserAddress'):\n    class UserAddress(AbstractUserAddress):\n        pass\n\n    __all__.append('UserAddress')\n\n\nif not is_model_registered('address', 'Country'):\n    class Country(AbstractCountry):\n        pass\n\n    __all__.append('Country')\n",
    "output": "# coding=utf-8\n\"\"\"\nAutoSlugField taken from django-extensions at\n15d3eb305957cee4768dd86e44df1bdad341a10e\nUses Oscar's slugify function instead of Django's\n\nCopyright (c) 2007 Michael Trier\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\"\"\nfrom django.db import models\nfrom django.test import TestCase\nfrom django.test.utils import override_settings\n\nfrom oscar.core.loading import get_model\n\nSluggedTestModel = get_model('model_tests_app', 'sluggedtestmodel')\nChildSluggedTestModel = get_model('model_tests_app', 'childsluggedtestmodel')\nCustomSluggedTestModel = get_model('model_tests_app', 'CustomSluggedTestModel')\n\n\nclass AutoSlugFieldTest(TestCase):\n    def tearDown(self):\n        super().tearDown()\n\n        SluggedTestModel.objects.all().delete()\n\n    def test_auto_create_slug(self):\n        m = SluggedTestModel(title='foo')\n        m.save()\n        self.assertEqual(m.slug, 'foo')\n\n    def test_auto_create_next_slug(self):\n        m = SluggedTestModel(title='foo')\n        m.save()\n\n        m = SluggedTestModel(title='foo')\n        m.save()\n        self.assertEqual(m.slug, 'foo-2')\n\n    def test_auto_create_slug_with_number(self):\n        m = SluggedTestModel(title='foo 2012')\n        m.save()\n        self.assertEqual(m.slug, 'foo-2012')\n\n    def test_auto_update_slug_with_number(self):\n        m = SluggedTestModel(title='foo 2012')\n        m.save()\n        m.save()\n        self.assertEqual(m.slug, 'foo-2012')\n\n    def test_auto_create_unicode_slug(self):\n        with override_settings(OSCAR_SLUG_ALLOW_UNICODE=True):\n            m = SluggedTestModel(title='Ch\u00e2teau Margaux 1960')\n            m.save()\n            self.assertEqual(m.slug, 'ch\u00e2teau-margaux-1960')\n\n    def test_auto_create_next_unicode_slug(self):\n        with override_settings(OSCAR_SLUG_ALLOW_UNICODE=True):\n            m1 = SluggedTestModel(title='Ch\u00e2teau Margaux 1960')\n            m1.save()\n\n            m2 = SluggedTestModel(title='Ch\u00e2teau Margaux 1960')\n            m2.save()\n\n            self.assertEqual(m2.slug, 'ch\u00e2teau-margaux-1960-2')\n\n    def test_switch_to_unicode_slug(self):\n        m = SluggedTestModel(title='Ch\u00e2teau Margaux 1960')\n        m.save()\n        self.assertEqual(m.slug, 'chateau-margaux-1960')\n        with override_settings(OSCAR_SLUG_ALLOW_UNICODE=True):\n            m = SluggedTestModel(title='Ch\u00e2teau Margaux 1960')\n            m.save()\n            self.assertEqual(m.slug, 'ch\u00e2teau-margaux-1960')\n\n    def test_autoslugfield_allow_unicode_kwargs_precedence(self):\n        from oscar.models.fields import AutoSlugField\n        with override_settings(OSCAR_SLUG_ALLOW_UNICODE=True):\n            autoslug_field = AutoSlugField(populate_from='title', allow_unicode=False)\n            self.assertFalse(autoslug_field.allow_unicode)\n            autoslug_field = AutoSlugField(populate_from='title')\n            self.assertTrue(autoslug_field.allow_unicode)\n\n    def test_update_slug(self):\n        m = SluggedTestModel(title='foo')\n        m.save()\n        self.assertEqual(m.slug, 'foo')\n\n        # update m instance without using `save'\n        SluggedTestModel.objects.filter(pk=m.pk).update(slug='foo-2012')\n        # update m instance with new data from the db\n        m = SluggedTestModel.objects.get(pk=m.pk)\n        self.assertEqual(m.slug, 'foo-2012')\n\n        m.save()\n        self.assertEqual(m.title, 'foo')\n        self.assertEqual(m.slug, 'foo-2012')\n\n        # Check slug is not overwrite\n        m.title = 'bar'\n        m.save()\n        self.assertEqual(m.title, 'bar')\n        self.assertEqual(m.slug, 'foo-2012')\n\n    def test_simple_slug_source(self):\n        m = SluggedTestModel(title='-foo')\n        m.save()\n        self.assertEqual(m.slug, 'foo')\n\n        n = SluggedTestModel(title='-foo')\n        n.save()\n        self.assertEqual(n.slug, 'foo-2')\n\n        n.save()\n        self.assertEqual(n.slug, 'foo-2')\n\n    def test_empty_slug_source(self):\n        # regression test\n\n        m = SluggedTestModel(title='')\n        m.save()\n        self.assertEqual(m.slug, '-2')\n\n        n = SluggedTestModel(title='')\n        n.save()\n        self.assertEqual(n.slug, '-3')\n\n        n.save()\n        self.assertEqual(n.slug, '-3')\n\n    def test_inheritance_creates_next_slug(self):\n        m = SluggedTestModel(title='foo')\n        m.save()\n\n        n = ChildSluggedTestModel(title='foo')\n        n.save()\n        self.assertEqual(n.slug, 'foo-2')\n\n        o = SluggedTestModel(title='foo')\n        o.save()\n        self.assertEqual(o.slug, 'foo-3')\n\n    def test_separator_and_uppercase_options(self):\n        m = CustomSluggedTestModel(title=\"Password reset\")\n        m.save()\n        self.assertEqual(m.slug, 'PASSWORD_RESET')\n\n        m = CustomSluggedTestModel(title=\"Password reset\")\n        m.save()\n        self.assertEqual(m.slug, 'PASSWORD_RESET_2')\n\n    def test_migration(self):\n        \"\"\"\n        Tests making migrations with Django 1.7+'s migration framework\n        \"\"\"\n\n        import oscar\n        from django.db import migrations\n        from django.db.migrations.writer import MigrationWriter\n        from oscar.models.fields import AutoSlugField\n        fields = {\n            'autoslugfield': AutoSlugField(populate_from='otherfield'),\n        }\n\n        migration = type(str(\"Migration\"), (migrations.Migration,), {\n            \"operations\": [\n                migrations.CreateModel(\"MyModel\", tuple(fields.items()),\n                                       {'populate_from': 'otherfield'},\n                                       (models.Model,)),\n            ],\n        })\n        writer = MigrationWriter(migration)\n        output = writer.as_string()\n\n        if isinstance(output, str):\n            output = output.encode('utf-8')\n\n        # We don't test the output formatting - that's too fragile.\n        # Just make sure it runs for now, and that things look alright.\n        context = {\n            'migrations': migrations,\n            'oscar': oscar,\n        }\n        result = self.safe_exec(output, context=context)\n        self.assertIn(\"Migration\", result)\n\n    def safe_exec(self, string, value=None, context=None):\n        loc = {}\n        g = globals()\n        g.update(context)\n        try:\n            exec(string, g, loc)\n        except Exception as e:\n            if value:\n                self.fail(\"Could not exec %r (from value %r): %s\" % (\n                    string.strip(), value, e))\n            else:\n                self.fail(\"Could not exec %r: %s\" % (string.strip(), e))\n        return loc\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom oscar.apps.address.abstract_models import (\n    AbstractCountry, AbstractUserAddress)\nfrom oscar.core.loading import is_model_registered\n\n__all__ = []\n\n\nif not is_model_registered('address', 'UserAddress'):\n    class UserAddress(AbstractUserAddress):\n        pass\n\n    __all__.append('UserAddress')\n\n\nif not is_model_registered('address', 'Country'):\n    class Country(AbstractCountry):\n        pass\n\n    __all__.append('Country')\n",
    "output": "# -*- coding: utf-8 -*-\nimport codecs\nimport datetime\nimport io\nimport os\nfrom tempfile import NamedTemporaryFile\nfrom django.utils.encoding import smart_text\n\nfrom django.test import TestCase, override_settings\n\nfrom oscar.core.compat import UnicodeCSVWriter, existing_user_fields\n\n\nclass unicodeobj(object):\n\n    def __init__(self, s):\n        self.s = s\n\n    def __str__(self):\n        return self.s\n\n\nclass TestExistingUserFields(TestCase):\n\n    def test_order(self):\n        fields = existing_user_fields(['email', 'first_name', 'last_name'])\n        self.assertEqual(fields, ['email', 'first_name', 'last_name'])\n\n\nclass TestUnicodeCSVWriter(TestCase):\n\n    def test_can_write_different_values(self):\n        writer = UnicodeCSVWriter(open_file=io.StringIO())\n        s = '\u00fcn\u012fcod\u0113'\n        rows = [[s, unicodeobj(s), 123, datetime.date.today()], ]\n        writer.writerows(rows)\n        self.assertRaises(TypeError, writer.writerows, [object()])\n\n    def test_context_manager(self):\n        tmp_file = NamedTemporaryFile()\n        with UnicodeCSVWriter(filename=tmp_file.name) as writer:\n            s = '\u00fcn\u012fcod\u0113'\n            rows = [[s, unicodeobj(s), 123, datetime.date.today()], ]\n            writer.writerows(rows)\n\n    def test_csv_write_output(self):\n        tmp_file = NamedTemporaryFile(delete=False)\n        with UnicodeCSVWriter(filename=tmp_file.name) as writer:\n            s = '\u00fcn\u012fcod\u0113'\n            row = [s, 123, 'foo-bar']\n            writer.writerows([row])\n\n        with open(tmp_file.name, 'r') as read_file:\n            content = smart_text(read_file.read(), encoding='utf-8').strip()\n            self.assertEqual(content, '\u00fcn\u012fcod\u0113,123,foo-bar')\n\n        # Clean up\n        os.unlink(tmp_file.name)\n\n    @override_settings(OSCAR_CSV_INCLUDE_BOM=True)\n    def test_bom_write_with_open_file(self):\n        csv_file = NamedTemporaryFile(delete=False)\n        with open(csv_file.name, 'w') as open_file:\n            writer = UnicodeCSVWriter(open_file=open_file, encoding=\"utf-8\")\n            s = '\u00fcn\u012fcod\u0113'\n            row = [s, 123, datetime.date.today()]\n            writer.writerows([row])\n\n        with open(csv_file.name, 'rb') as read_file:\n            self.assertTrue(read_file.read().startswith(codecs.BOM_UTF8))\n\n        # Clean up\n        os.unlink(csv_file.name)\n\n    @override_settings(OSCAR_CSV_INCLUDE_BOM=True)\n    def test_bom_write_with_filename(self):\n        csv_file = NamedTemporaryFile(delete=False)\n        with UnicodeCSVWriter(filename=csv_file.name, encoding=\"utf-8\") as writer:\n            s = '\u00fcn\u012fcod\u0113'\n            row = [s, 123, datetime.date.today()]\n            writer.writerows([row])\n\n        with open(csv_file.name, 'rb') as read_file:\n            self.assertTrue(read_file.read().startswith(codecs.BOM_UTF8))\n\n        # Clean up\n        os.unlink(csv_file.name)\n\n    @override_settings(OSCAR_CSV_INCLUDE_BOM=True)\n    def test_bom_not_written_for_other_encodings(self):\n        csv_file = NamedTemporaryFile(delete=False)\n        with UnicodeCSVWriter(filename=csv_file.name, encoding=\"ascii\") as writer:\n            s = 'boring ascii'\n            row = [s, 123, datetime.date.today()]\n            writer.writerows([row])\n\n        with open(csv_file.name, 'rb') as read_file:\n            self.assertFalse(read_file.read().startswith(codecs.BOM_UTF8))\n\n        # Clean up\n        os.unlink(csv_file.name)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom oscar.apps.address.abstract_models import (\n    AbstractCountry, AbstractUserAddress)\nfrom oscar.core.loading import is_model_registered\n\n__all__ = []\n\n\nif not is_model_registered('address', 'UserAddress'):\n    class UserAddress(AbstractUserAddress):\n        pass\n\n    __all__.append('UserAddress')\n\n\nif not is_model_registered('address', 'Country'):\n    class Country(AbstractCountry):\n        pass\n\n    __all__.append('Country')\n",
    "output": "import pytest\nfrom django.conf import settings\nfrom django.test import TestCase\n\nfrom oscar.core import customisation\n\nVALID_FOLDER_PATH = 'tests/_site/apps'\n\n\nclass TestUtilities(TestCase):\n\n    def test_subfolder_extraction(self):\n        folders = list(customisation.subfolders('/var/www/eggs'))\n        self.assertEqual(folders, ['/var', '/var/www', '/var/www/eggs'])\n\n\ndef test_raises_exception_for_nonexistant_app_label():\n    with pytest.raises(ValueError):\n        customisation.fork_app('sillytown', 'somefolder')\n\n\ndef test_raises_exception_if_app_has_already_been_forked():\n    # We piggyback on another test which means a custom app is already in\n    # the settings we use for the test suite. We just check that's still\n    # the case here.\n    assert 'tests._site.apps.partner' in settings.INSTALLED_APPS\n    with pytest.raises(ValueError):\n        customisation.fork_app('partner', VALID_FOLDER_PATH)\n\n\ndef test_creates_new_folder(tmpdir):\n    path = tmpdir.mkdir('fork')\n    customisation.fork_app('order', str(path))\n    path.join('order').ensure_dir()\n\n\ndef test_creates_init_file(tmpdir):\n    path = tmpdir.mkdir('fork')\n    customisation.fork_app('order', str(path))\n\n    path.join('order').join('__init__.py').ensure()\n\n\ndef test_handles_dashboard_app(tmpdir):\n    # Dashboard apps are fiddly as they aren't identified by a single app\n    # label.\n    path = tmpdir.mkdir('fork')\n    customisation.fork_app('dashboard.catalogue', str(path))\n    # Check __init__.py created (and supporting folders)\n\n    path.join('dashboard').join('catalogue').join('__init__.py').ensure()\n\n\ndef test_creates_models_and_admin_file(tmpdir):\n    path = tmpdir.mkdir('fork')\n    customisation.fork_app('order', str(path))\n    for module, expected_string in [\n        ('models', 'from oscar.apps.order.models import *'),\n        ('admin', 'from oscar.apps.order.admin import *'),\n        ('config', 'OrderConfig')\n    ]:\n        filepath = path.join('order').join('%s.py' % module)\n        filepath.ensure()\n        contents = filepath.read()\n        assert expected_string in contents\n\n\ndef test_copies_in_migrations_when_needed(tmpdir):\n    path = tmpdir.mkdir('fork')\n    for app, has_models in [('order', True), ('search', False)]:\n        customisation.fork_app(app, str(path))\n\n        native_migration_path = path.join(app).join('migrations')\n        assert has_models == native_migration_path.check()\n\n\ndef test_dashboard_app_config(tmpdir, monkeypatch):\n    path = tmpdir.mkdir('fork')\n    customisation.fork_app('dashboard', str(path))\n\n    path.join('__init__.py').write('')\n    monkeypatch.syspath_prepend(str(tmpdir))\n\n    config_module = __import__(\n        '%s.dashboard.config' % path.basename, fromlist=['DashboardConfig']\n    )\n\n    assert hasattr(config_module, 'DashboardConfig')\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom oscar.apps.address.abstract_models import (\n    AbstractCountry, AbstractUserAddress)\nfrom oscar.core.loading import is_model_registered\n\n__all__ = []\n\n\nif not is_model_registered('address', 'UserAddress'):\n    class UserAddress(AbstractUserAddress):\n        pass\n\n    __all__.append('UserAddress')\n\n\nif not is_model_registered('address', 'Country'):\n    class Country(AbstractCountry):\n        pass\n\n    __all__.append('Country')\n",
    "output": "import warnings\n\nfrom django.contrib.auth.models import AnonymousUser, Permission\nfrom django.test import TestCase\n\nfrom oscar.core.decorators import deprecated\nfrom oscar.test import factories\nfrom oscar.views.decorators import check_permissions\n\n\nclass TestPermissionsDecorator(TestCase):\n\n    def test_empty_permissions_passes(self):\n        user = factories.UserFactory.build()\n        self.assertTrue(check_permissions(user, []))\n\n    def test_properties_are_checked(self):\n        staff_user = factories.UserFactory.build(is_staff=True)\n        non_staff_user = factories.UserFactory.build(is_staff=False)\n        self.assertTrue(check_permissions(staff_user, ['is_staff']))\n        self.assertFalse(check_permissions(non_staff_user, ['is_staff']))\n\n    def test_methods_are_checked(self):\n        anonymous_user = AnonymousUser()\n        known_user = factories.UserFactory.build()\n        self.assertTrue(check_permissions(anonymous_user, ['is_anonymous']))\n        self.assertFalse(check_permissions(known_user, ['is_anonymous']))\n\n    def test_permissions_are_checked(self):\n        user_with_perm = factories.UserFactory()\n        user_without_perm = factories.UserFactory()\n        perm = Permission.objects.get(\n            content_type__app_label='address', codename='add_country')\n        user_with_perm.user_permissions.add(perm)\n        self.assertTrue(\n            check_permissions(user_with_perm, ['address.add_country']))\n        self.assertFalse(\n            check_permissions(user_without_perm, ['address.add_country']))\n\n\nclass TestDeprecatedDecorator(TestCase):\n\n    def test_decorate_function(self):\n\n        @deprecated\n        def func():\n            return True\n\n        with warnings.catch_warnings(record=True) as caught:\n            warnings.simplefilter(\"always\")\n            self.assertTrue(func())\n            assert len(caught) == 1\n            assert issubclass(caught[0].category, DeprecationWarning)\n\n    def test_decorate_class(self):\n\n        class Cls(object):\n            val = False\n\n            def __init__(self):\n                self.val = True\n\n        Deprecated = deprecated(Cls)  # noqa\n\n        with warnings.catch_warnings(record=True) as caught:\n            warnings.simplefilter(\"always\")\n            obj = Deprecated()\n            self.assertTrue(obj.val)\n            assert len(caught) == 1\n            assert issubclass(caught[0].category, DeprecationWarning)\n\n    def test_subclass_decorated(self):\n\n        class Cls(object):\n            val = False\n\n            def __init__(self):\n                self.val = True\n\n        Deprecated = deprecated(Cls)  # noqa\n\n        class SubCls(Deprecated):\n            pass\n\n        with warnings.catch_warnings(record=True) as caught:\n            warnings.simplefilter(\"always\")\n            obj = SubCls()\n            self.assertTrue(obj.val)\n            assert len(caught) == 1\n            assert issubclass(caught[0].category, DeprecationWarning)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom oscar.apps.address.abstract_models import (\n    AbstractCountry, AbstractUserAddress)\nfrom oscar.core.loading import is_model_registered\n\n__all__ = []\n\n\nif not is_model_registered('address', 'UserAddress'):\n    class UserAddress(AbstractUserAddress):\n        pass\n\n    __all__.append('UserAddress')\n\n\nif not is_model_registered('address', 'Country'):\n    class Country(AbstractCountry):\n        pass\n\n    __all__.append('Country')\n",
    "output": "from os.path import dirname\nimport sys\n\nfrom django.test import override_settings, TestCase\nfrom django.conf import settings\n\nimport oscar\nfrom oscar.core.loading import (\n    get_model, AppNotFoundError, get_classes, get_class, get_class_loader,\n    ClassNotFoundError)\nfrom tests import temporary_python_path\nfrom tests._site.loader import DummyClass\n\n\nclass TestClassLoading(TestCase):\n    \"\"\"\n    Oscar's class loading utilities\n    \"\"\"\n\n    def test_load_oscar_classes_correctly(self):\n        Product, Category = get_classes('catalogue.models', ('Product', 'Category'))\n        self.assertEqual('oscar.apps.catalogue.models', Product.__module__)\n        self.assertEqual('oscar.apps.catalogue.models', Category.__module__)\n\n    def test_load_oscar_class_correctly(self):\n        Product = get_class('catalogue.models', 'Product')\n        self.assertEqual('oscar.apps.catalogue.models', Product.__module__)\n\n    def test_load_oscar_class_from_dashboard_subapp(self):\n        ReportForm = get_class('dashboard.reports.forms', 'ReportForm')\n        self.assertEqual('oscar.apps.dashboard.reports.forms', ReportForm.__module__)\n\n    def test_raise_exception_when_bad_appname_used(self):\n        with self.assertRaises(AppNotFoundError):\n            get_classes('fridge.models', ('Product', 'Category'))\n\n    def test_raise_exception_when_bad_classname_used(self):\n        with self.assertRaises(ClassNotFoundError):\n            get_class('catalogue.models', 'Monkey')\n\n    def test_raise_importerror_if_app_raises_importerror(self):\n        \"\"\"\n        This tests that Oscar doesn't fall back to using the Oscar catalogue\n        app if the overriding app throws an ImportError.\n        \"\"\"\n        apps = list(settings.INSTALLED_APPS)\n        apps[apps.index('oscar.apps.catalogue')] = 'tests._site.import_error_app.catalogue'\n        with override_settings(INSTALLED_APPS=apps):\n            with self.assertRaises(ImportError):\n                get_class('catalogue.app', 'CatalogueApplication')\n\n\nclass ClassLoadingWithLocalOverrideTests(TestCase):\n\n    def setUp(self):\n        self.installed_apps = list(settings.INSTALLED_APPS)\n        self.installed_apps[self.installed_apps.index('oscar.apps.shipping')] = 'tests._site.shipping'\n\n    def test_loading_class_defined_in_local_module(self):\n        with override_settings(INSTALLED_APPS=self.installed_apps):\n            (Free,) = get_classes('shipping.methods', ('Free',))\n            self.assertEqual('tests._site.shipping.methods', Free.__module__)\n\n    def test_loading_class_which_is_not_defined_in_local_module(self):\n        with override_settings(INSTALLED_APPS=self.installed_apps):\n            (FixedPrice,) = get_classes('shipping.methods', ('FixedPrice',))\n            self.assertEqual('oscar.apps.shipping.methods', FixedPrice.__module__)\n\n    def test_loading_class_from_module_not_defined_in_local_app(self):\n        with override_settings(INSTALLED_APPS=self.installed_apps):\n            (Repository,) = get_classes('shipping.repository', ('Repository',))\n            self.assertEqual('oscar.apps.shipping.repository', Repository.__module__)\n\n    def test_loading_classes_defined_in_both_local_and_oscar_modules(self):\n        with override_settings(INSTALLED_APPS=self.installed_apps):\n            (Free, FixedPrice) = get_classes('shipping.methods', ('Free', 'FixedPrice'))\n            self.assertEqual('tests._site.shipping.methods', Free.__module__)\n            self.assertEqual('oscar.apps.shipping.methods', FixedPrice.__module__)\n\n    def test_loading_classes_with_root_app(self):\n        import tests._site.shipping\n        path = dirname(dirname(tests._site.shipping.__file__))\n        with temporary_python_path([path]):\n            self.installed_apps[\n                self.installed_apps.index('tests._site.shipping')] = 'shipping'\n            with override_settings(INSTALLED_APPS=self.installed_apps):\n                (Free,) = get_classes('shipping.methods', ('Free',))\n                self.assertEqual('shipping.methods', Free.__module__)\n\n    def test_overriding_view_is_possible_without_overriding_app(self):\n        from oscar.apps.customer.app import application, CustomerApplication\n        # If test fails, it's helpful to know if it's caused by order of\n        # execution\n        self.assertEqual(CustomerApplication().summary_view.__module__,\n                         'tests._site.apps.customer.views')\n        self.assertEqual(application.summary_view.__module__,\n                         'tests._site.apps.customer.views')\n\n\nclass ClassLoadingWithLocalOverrideWithMultipleSegmentsTests(TestCase):\n\n    def setUp(self):\n        self.installed_apps = list(settings.INSTALLED_APPS)\n        self.installed_apps[self.installed_apps.index('oscar.apps.shipping')] = 'tests._site.apps.shipping'\n\n    def test_loading_class_defined_in_local_module(self):\n        with override_settings(INSTALLED_APPS=self.installed_apps):\n            (Free,) = get_classes('shipping.methods', ('Free',))\n            self.assertEqual('tests._site.apps.shipping.methods', Free.__module__)\n\n\nclass TestGetCoreAppsFunction(TestCase):\n    \"\"\"\n    oscar.get_core_apps function\n    \"\"\"\n\n    def test_returns_core_apps_when_no_overrides_specified(self):\n        apps = oscar.get_core_apps()\n        self.assertEqual(oscar.OSCAR_CORE_APPS, apps)\n\n    def test_uses_non_dashboard_override_when_specified(self):\n        apps = oscar.get_core_apps(overrides=['apps.shipping'])\n        self.assertTrue('apps.shipping' in apps)\n        self.assertTrue('oscar.apps.shipping' not in apps)\n\n    def test_uses_dashboard_override_when_specified(self):\n        apps = oscar.get_core_apps(overrides=['apps.dashboard.catalogue'])\n        self.assertTrue('apps.dashboard.catalogue' in apps)\n        self.assertTrue('oscar.apps.dashboard.catalogue' not in apps)\n        self.assertTrue('oscar.apps.catalogue' in apps)\n\n\nclass TestOverridingCoreApps(TestCase):\n\n    def test_means_the_overriding_model_is_registered_first(self):\n        klass = get_model('partner', 'StockRecord')\n        self.assertEqual(\n            'tests._site.apps.partner.models', klass.__module__)\n\n\nclass TestAppLabelsForModels(TestCase):\n\n    def test_all_oscar_models_have_app_labels(self):\n        from django.apps import apps\n        models = apps.get_models()\n        missing = []\n        for model in models:\n            # Ignore non-Oscar models\n            if 'oscar' not in repr(model):\n                continue\n            # Don't know how to get the actual model's Meta class. But if\n            # the parent doesn't have a Meta class, it's doesn't have an\n            # base in Oscar anyway and is not intended to be overridden\n            abstract_model = model.__base__\n            meta_class = getattr(abstract_model, 'Meta', None)\n            if meta_class is None:\n                continue\n\n            if not hasattr(meta_class, 'app_label'):\n                missing.append(model)\n        if missing:\n            self.fail(\"Those models don't have an app_label set: %s\" % missing)\n\n\nclass TestDynamicLoadingOn3rdPartyApps(TestCase):\n\n    core_app_prefix = 'thirdparty_package.apps'\n\n    def setUp(self):\n        self.installed_apps = list(settings.INSTALLED_APPS)\n        sys.path.append('./tests/_site/')\n\n    def tearDown(self):\n        sys.path.remove('./tests/_site/')\n\n    def test_load_core_3rd_party_class_correctly(self):\n        self.installed_apps.append('thirdparty_package.apps.myapp')\n        with override_settings(INSTALLED_APPS=self.installed_apps):\n            Cow, Goat = get_classes('myapp.models', ('Cow', 'Goat'), self.core_app_prefix)\n            self.assertEqual('thirdparty_package.apps.myapp.models', Cow.__module__)\n            self.assertEqual('thirdparty_package.apps.myapp.models', Goat.__module__)\n\n    def test_load_overriden_3rd_party_class_correctly(self):\n        self.installed_apps.append('apps.myapp')\n        with override_settings(INSTALLED_APPS=self.installed_apps):\n            Cow, Goat = get_classes('myapp.models', ('Cow', 'Goat'), self.core_app_prefix)\n            self.assertEqual('thirdparty_package.apps.myapp.models', Cow.__module__)\n            self.assertEqual('apps.myapp.models', Goat.__module__)\n\n\nclass OverriddenClassLoadingTestCase(TestCase):\n\n    def test_non_override_class_loader(self):\n        from oscar.apps.catalogue.views import ProductDetailView\n        View = get_class('catalogue.views', 'ProductDetailView')\n        self.assertEqual(View, ProductDetailView)\n\n    @override_settings(OSCAR_DYNAMIC_CLASS_LOADER='tests._site.loader.custom_class_loader')\n    def test_override_class_loader(self):\n        # Clear lru cache for the class loader\n        get_class_loader.cache_clear()\n\n        View = get_class('catalogue.views', 'ProductDetailView')\n        self.assertEqual(View, DummyClass)\n\n        # Clear lru cache for the class loader again\n        get_class_loader.cache_clear()\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom oscar.apps.address.abstract_models import (\n    AbstractCountry, AbstractUserAddress)\nfrom oscar.core.loading import is_model_registered\n\n__all__ = []\n\n\nif not is_model_registered('address', 'UserAddress'):\n    class UserAddress(AbstractUserAddress):\n        pass\n\n    __all__.append('UserAddress')\n\n\nif not is_model_registered('address', 'Country'):\n    class Country(AbstractCountry):\n        pass\n\n    __all__.append('Country')\n",
    "output": "from django import forms\nfrom django.test import TestCase, override_settings\n\nfrom oscar.apps.address.forms import AbstractAddressForm\nfrom oscar.apps.address.models import UserAddress\nfrom oscar.apps.order.models import ShippingAddress\nfrom oscar.forms.mixins import PhoneNumberMixin\nfrom oscar.test.factories import CountryFactory\n\n\nclass PhoneNumberMixinTestCase(TestCase):\n\n    def test_mixin_adds_phone_number_field(self):\n\n        class TestForm(PhoneNumberMixin, forms.Form):\n            pass\n\n        form = TestForm()\n        self.assertIn('phone_number', form.fields)\n\n    def test_mixin_adds_all_phone_number_fields(self):\n\n        class TestForm(PhoneNumberMixin, forms.Form):\n            phone_number_fields = {\n                'phone_number': {\n                    'required': False,\n                    'help_text': '',\n                    'max_length': 32,\n                    'label': 'Phone number'\n                },\n                'another_phone_number': {\n                    'required': False,\n                    'help_text': 'Another phone number help text',\n                    'max_length': 32,\n                    'label': 'Another phone number'\n                },\n                'one_more_phone_number': {\n                    'required': False,\n                    'help_text': '',\n                    'max_length': 32,\n                    'label': 'One more phone number'\n                },\n            }\n\n        form = TestForm()\n        self.assertIn('phone_number', form.fields)\n        self.assertIn('another_phone_number', form.fields)\n        self.assertIn('one_more_phone_number', form.fields)\n\n        field = form.fields['another_phone_number']\n        self.assertEqual(field.help_text, 'Another phone number help text')\n\n    def test_mixin_retains_existing_field_properties(self):\n\n        class TestForm(PhoneNumberMixin, forms.ModelForm):\n\n            class Meta:\n                model = UserAddress\n                fields = ['country', 'phone_number']\n                # Override default label and help text\n                labels = {'phone_number': 'Special number'}\n                help_texts = {'phone_number': 'Special help text'}\n\n        form = TestForm()\n        field = form.fields['phone_number']\n        self.assertEqual(field.label, 'Special number')\n        self.assertEqual(field.help_text, 'Special help text')\n\n    @override_settings(OSCAR_REQUIRED_ADDRESS_FIELDS=('phone_number',))\n    def test_required_empty_field_raises_validation_error(self):\n\n        class TestForm(PhoneNumberMixin, AbstractAddressForm):\n            phone_number_fields = {\n                'phone_number': {\n                    'required': True,\n                    'help_text': '',\n                    'max_length': 32,\n                    'label': 'Phone number'\n                }\n            }\n\n            class Meta:\n                model = ShippingAddress\n                fields = ['country', 'phone_number', 'postcode']\n\n        CountryFactory(iso_3166_1_a2='GB', is_shipping_country=True)\n        form = TestForm(data={'phone_number': '', 'country': 'GB', 'postcode': 'WW1 2BB'})\n        self.assertFalse(form.is_valid())\n        self.assertEqual(form.errors['phone_number'], ['This field is required.'])\n\n    @override_settings(OSCAR_REQUIRED_ADDRESS_FIELDS=[])\n    def test_optional_empty_field_validates(self):\n\n        class TestForm(PhoneNumberMixin, AbstractAddressForm):\n            phone_number_fields = {\n                'phone_number': {\n                    'required': False,\n                    'help_text': '',\n                    'max_length': 32,\n                    'label': 'Phone number'\n                }\n            }\n\n            class Meta:\n                model = ShippingAddress\n                fields = ['country', 'phone_number', 'postcode']\n\n        CountryFactory(iso_3166_1_a2='GB', is_shipping_country=True)\n        form = TestForm(data={'phone_number': '', 'country': 'GB', 'postcode': 'WW1 2BB'})\n        self.assertTrue(form.is_valid())\n\n    @override_settings(OSCAR_REQUIRED_ADDRESS_FIELDS=[])\n    def test_invalid_number_fails_validation(self):\n\n        class TestForm(PhoneNumberMixin, AbstractAddressForm):\n            phone_number_fields = {\n                'phone_number': {\n                    'required': False,\n                    'help_text': '',\n                    'max_length': 32,\n                    'label': 'Phone number'\n                }\n            }\n\n            class Meta:\n                model = ShippingAddress\n                fields = ['country', 'phone_number', 'postcode']\n\n        CountryFactory(iso_3166_1_a2='GB', is_shipping_country=True)\n        form = TestForm(data={'phone_number': '123456', 'country': 'GB', 'postcode': 'WW1 2BB'})\n        self.assertFalse(form.is_valid())\n        self.assertEqual(form.errors['phone_number'], ['This is not a valid local phone format for UNITED KINGDOM.'])\n\n    @override_settings(OSCAR_REQUIRED_ADDRESS_FIELDS=[])\n    def test_valid_number_passes_validation(self):\n\n        class TestForm(PhoneNumberMixin, AbstractAddressForm):\n            phone_number_fields = {\n                'phone_number': {\n                    'required': False,\n                    'help_text': '',\n                    'max_length': 32,\n                    'label': 'Phone number'\n                }\n            }\n\n            class Meta:\n                model = ShippingAddress\n                fields = ['country', 'phone_number', 'postcode']\n\n        CountryFactory(iso_3166_1_a2='GB', is_shipping_country=True)\n        form = TestForm(data={'phone_number': '02089001234', 'country': 'GB', 'postcode': 'WW1 2BB'})\n        self.assertTrue(form.is_valid())\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom oscar.apps.address.abstract_models import (\n    AbstractCountry, AbstractUserAddress)\nfrom oscar.core.loading import is_model_registered\n\n__all__ = []\n\n\nif not is_model_registered('address', 'UserAddress'):\n    class UserAddress(AbstractUserAddress):\n        pass\n\n    __all__.append('UserAddress')\n\n\nif not is_model_registered('address', 'Country'):\n    class Country(AbstractCountry):\n        pass\n\n    __all__.append('Country')\n",
    "output": "from django.core.exceptions import ImproperlyConfigured\nfrom django.test import TestCase\n\nfrom oscar.models.fields import NullCharField\n\n\nclass NullCharFieldTest(TestCase):\n\n    def test_from_db_value_converts_null_to_string(self):\n        field = NullCharField()\n        self.assertEqual('', field.from_db_value(None, expression=None, connection=None, context=None))\n\n    def test_get_prep_value_converts_empty_string_to_null(self):\n        field = NullCharField()\n        self.assertEqual(None, field.get_prep_value(''))\n\n    def test_raises_exception_for_invalid_null_blank_combo(self):\n        with self.assertRaises(ImproperlyConfigured):\n            NullCharField(null=True, blank=False)\n\n        with self.assertRaises(ImproperlyConfigured):\n            NullCharField(null=False, blank=True)\n\n        with self.assertRaises(ImproperlyConfigured):\n            NullCharField(null=False, blank=False)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom oscar.apps.address.abstract_models import (\n    AbstractCountry, AbstractUserAddress)\nfrom oscar.core.loading import is_model_registered\n\n__all__ = []\n\n\nif not is_model_registered('address', 'UserAddress'):\n    class UserAddress(AbstractUserAddress):\n        pass\n\n    __all__.append('UserAddress')\n\n\nif not is_model_registered('address', 'Country'):\n    class Country(AbstractCountry):\n        pass\n\n    __all__.append('Country')\n",
    "output": "from decimal import Decimal as D\nfrom itertools import product\nfrom django.test import TestCase\n\nfrom oscar.core.prices import Price\n\n\nclass TestPriceObject(TestCase):\n\n    def test_can_be_instantiated_with_tax_amount(self):\n        price = Price('USD', D('10.00'), tax=D('2.00'))\n        self.assertTrue(price.is_tax_known)\n        self.assertEqual(D('12.00'), price.incl_tax)\n\n    def test_can_have_tax_set_later(self):\n        price = Price('USD', D('10.00'))\n        price.tax = D('2.00')\n        self.assertEqual(D('12.00'), price.incl_tax)\n\n    def test_price_equals_reflexivity(self):\n        for price in (\n            Price(currency='USD', excl_tax=D('10.00')),\n            Price(currency='USD', excl_tax=D('10.00'), tax=D('2.00')),\n            Price(currency='USD', excl_tax=D('10.00'), incl_tax=D('12.00')),\n        ):\n            self.assertEqual(price, price)\n\n    def test_price_equals_formats(self):\n        price1 = Price(currency='USD', excl_tax=D('10.00'), tax=D('2.00'))\n        price2 = Price(currency='USD', excl_tax=D('10.00'), incl_tax=D('12.00'))\n        self.assertEqual(price1, price2)\n\n    def test_price_equals_currency_matters(self):\n        price1 = Price(currency='EUR', excl_tax=D('10.00'), tax=D('2.00'))\n        price2 = Price(currency='USD', excl_tax=D('10.00'), tax=D('2.00'))\n        self.assertNotEqual(price1, price2)\n\n    def test_price_equals_transitivity(self):\n        prices = (\n            Price(currency='EUR', excl_tax=D('10.00'), tax=D('2.00')),\n            Price(currency='USD', excl_tax=D('10.00'), tax=D('2.00')),\n            Price(currency='USD', excl_tax=D('10.00'), incl_tax=D('12.00')),\n            Price(currency='USD', excl_tax=D('10.00'), tax=D('8.00'))\n        )\n        prices_product = product(prices, prices)\n        for price1, price2 in prices_product:\n            self.assertEqual(price1 == price2, price2 == price1)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom oscar.apps.address.abstract_models import (\n    AbstractCountry, AbstractUserAddress)\nfrom oscar.core.loading import is_model_registered\n\n__all__ = []\n\n\nif not is_model_registered('address', 'UserAddress'):\n    class UserAddress(AbstractUserAddress):\n        pass\n\n    __all__.append('UserAddress')\n\n\nif not is_model_registered('address', 'Country'):\n    class Country(AbstractCountry):\n        pass\n\n    __all__.append('Country')\n",
    "output": "# coding=utf-8\n\nfrom django.test import TestCase\nfrom django.test.utils import override_settings\n\n\nclass SlugFieldTest(TestCase):\n\n    def test_slugfield_allow_unicode_kwargs_precedence(self):\n        from oscar.models.fields.slugfield import SlugField\n        with override_settings(OSCAR_SLUG_ALLOW_UNICODE=True):\n            slug_field = SlugField(allow_unicode=False)\n            self.assertFalse(slug_field.allow_unicode)\n            slug_field = SlugField()\n            self.assertTrue(slug_field.allow_unicode)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom oscar.apps.address.abstract_models import (\n    AbstractCountry, AbstractUserAddress)\nfrom oscar.core.loading import is_model_registered\n\n__all__ = []\n\n\nif not is_model_registered('address', 'UserAddress'):\n    class UserAddress(AbstractUserAddress):\n        pass\n\n    __all__.append('UserAddress')\n\n\nif not is_model_registered('address', 'Country'):\n    class Country(AbstractCountry):\n        pass\n\n    __all__.append('Country')\n",
    "output": "# coding=utf-8\nfrom django.test import TestCase\nfrom django.test.utils import override_settings\n\nfrom oscar.core import utils\n\n\ndef sluggish(value, allow_unicode=False):\n    return value.upper()\n\n\nclass TestSlugify(TestCase):\n\n    def test_default_unicode_to_ascii(self):\n        self.assertEqual('konig-der-straxdfe', utils.slugify('K\u00f6nig der Stra\u00dfe'))\n        self.assertEqual('not-fancy', utils.slugify('Not fancy'))\n        self.assertEqual('u4e01u4e02-u4e03u4e04u4e05', utils.slugify('\u4e01\u4e02 \u4e03\u4e04\u4e05'))\n\n    @override_settings(OSCAR_SLUG_ALLOW_UNICODE=True)\n    def test_allow_unicode(self):\n        self.assertEqual('k\u00f6nig-der-stra\u00dfe', utils.slugify('K\u00f6nig der Stra\u00dfe'))\n        self.assertEqual('\u4e01\u4e02-\u4e03\u4e04\u4e05', utils.slugify('\u4e01\u4e02 \u4e03\u4e04\u4e05'))\n        self.assertEqual('not-fancy', utils.slugify('Not fancy'))\n\n    @override_settings(OSCAR_SLUG_FUNCTION='tests.integration.core.test_utils.sluggish')\n    def test_custom_slugifier(self):\n        self.assertEqual('HAM AND EGGS', utils.slugify('Ham and eggs'))\n\n    @override_settings(OSCAR_SLUG_MAP={'c++': 'cpp'})\n    def test_uses_custom_mappings(self):\n        self.assertEqual('cpp', utils.slugify('c++'))\n\n    @override_settings(OSCAR_SLUG_BLACKLIST=['the'])\n    def test_uses_blacklist(self):\n        self.assertEqual('bible', utils.slugify('The Bible'))\n\n    @override_settings(OSCAR_SLUG_BLACKLIST=['the', 'bible'])\n    def test_uses_blacklist_doesnt_reduce_to_nothing(self):\n        self.assertEqual('bible', utils.slugify('The Bible'))\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom oscar.apps.address.abstract_models import (\n    AbstractCountry, AbstractUserAddress)\nfrom oscar.core.loading import is_model_registered\n\n__all__ = []\n\n\nif not is_model_registered('address', 'UserAddress'):\n    class UserAddress(AbstractUserAddress):\n        pass\n\n    __all__.append('UserAddress')\n\n\nif not is_model_registered('address', 'Country'):\n    class Country(AbstractCountry):\n        pass\n\n    __all__.append('Country')\n",
    "output": "from django.core.exceptions import ValidationError\nfrom django.contrib.flatpages.models import FlatPage\nfrom django.test import TestCase, override_settings\nfrom django.utils.translation import activate\n\nfrom oscar.core.validators import ExtendedURLValidator, URLDoesNotExistValidator\n\n\nclass TestExtendedURLValidator(TestCase):\n\n    def setUp(self):\n        self.validator = ExtendedURLValidator()\n\n    def test_validates_local_url(self):\n        try:\n            self.validator('/')\n        except ValidationError:\n            self.fail('ExtendedURLValidator raised ValidationError'\n                      'unexpectedly!')\n\n    def test_validates_local_url_with_query_strings(self):\n        try:\n            self.validator('/?q=test')  # Query strings shouldn't affect validation\n        except ValidationError:\n            self.fail('ExtendedURLValidator raised ValidationError'\n                      'unexpectedly!')\n\n    def test_raises_validation_error_for_missing_urls(self):\n        with self.assertRaises(ValidationError):\n            self.validator('/invalid/')\n\n    def test_validates_urls_missing_preceding_slash(self):\n        try:\n            self.validator('catalogue/')\n        except ValidationError:\n            self.fail('ExtendedURLValidator raised ValidationError'\n                      'unexpectedly!')\n\n    def test_raises_validation_error_for_urls_without_trailing_slash(self):\n        with self.assertRaises(ValidationError):\n            self.validator('/catalogue')  # Missing the / is bad\n\n    def test_validates_flatpages_urls(self):\n        FlatPage.objects.create(title='test page', url='/test/page/')\n        try:\n            self.validator('/test/page/')\n        except ValidationError:\n            self.fail('ExtendedURLValidator raises ValidationError'\n                      'unexpectedly!')\n\n\n@override_settings(\n    LANGUAGES=(\n        ('de', 'German'),\n        ('en-gb', 'British English'),\n    )\n)\nclass TestExtendedURLValidatorForLocalePrefixURLS(TestCase):\n    def setUp(self):\n        self.validator = ExtendedURLValidator()\n\n    def test_validate_same_locals(self):\n        \"\"\"\n        Current locale is default (\"en-gb\"), URL has locale prefix\n        of default and current locale (\"en-gb\").\n        \"\"\"\n        try:\n            self.validator('/en-gb/test/')\n        except ValidationError:\n            self.fail('ExtendedURLValidator raised ValidationError'\n                      'unexpectedly!')\n\n    def test_validate_prefix_locale_is_non_default(self):\n        \"\"\"\n        Current locale is default (\"en-gb\"), URL has locale prefix\n        of non-default locale (\"de\").\n        \"\"\"\n        try:\n            self.validator('/de/test/')\n        except ValidationError:\n            self.fail('ExtendedURLValidator raised ValidationError'\n                      'unexpectedly!')\n\n    def test_validate_current_locale_is_non_default(self):\n        \"\"\"\n        Current locale is non-default (\"de\"), URL has locale prefix\n        of default locale (\"en-gb\").\n        \"\"\"\n        activate('de')\n        try:\n            self.validator('/en-gb/test/')\n        except ValidationError:\n            self.fail('ExtendedURLValidator raised ValidationError'\n                      'unexpectedly!')\n\n    def test_validate_current_and_prefix_locales_are_non_default_and_same(self):\n        \"\"\"\n        Current locale is non-default (\"de\"), URL has locale prefix\n        of non-default locale (\"de\").\n        \"\"\"\n        activate('de')\n        try:\n            self.validator('/de/test/')\n        except ValidationError:\n            self.fail('ExtendedURLValidator raised ValidationError'\n                      'unexpectedly!')\n\n    def test_validate_current_and_prefix_locales_are_non_default_and_different(self):\n        \"\"\"\n        Current locale is non-default (\"it\"), URL has locale prefix\n        of non-default locale (\"de\").\n        \"\"\"\n        activate('it')\n        try:\n            self.validator('/de/test/')\n        except ValidationError:\n            self.fail('ExtendedURLValidator raised ValidationError'\n                      'unexpectedly!')\n\n\nclass TestURLDoesNotExistValidator(TestCase):\n\n    def setUp(self):\n        self.validator = URLDoesNotExistValidator()\n\n    def test_raises_exception_for_local_urls(self):\n        self.assertRaises(ValidationError, self.validator, '/')\n\n    def test_raises_exception_for_flatpages(self):\n        FlatPage.objects.create(title='test page', url='/test/page/')\n        self.assertRaises(ValidationError, self.validator, '/test/page/')\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom oscar.apps.address.abstract_models import (\n    AbstractCountry, AbstractUserAddress)\nfrom oscar.core.loading import is_model_registered\n\n__all__ = []\n\n\nif not is_model_registered('address', 'UserAddress'):\n    class UserAddress(AbstractUserAddress):\n        pass\n\n    __all__.append('UserAddress')\n\n\nif not is_model_registered('address', 'Country'):\n    class Country(AbstractCountry):\n        pass\n\n    __all__.append('Country')\n",
    "output": "import pytest\n\nfrom oscar.views import handler403, handler404, handler500\n\n\n@pytest.mark.django_db\ndef test_handler403_response_status(rf):\n    request = rf.get('/')\n    response = handler403(request, exception=None)\n    assert response.status_code == 403\n\n\n@pytest.mark.django_db\ndef test_handler404_response_status(rf):\n    request = rf.get('/')\n    response = handler404(request, exception=None)\n    assert response.status_code == 404\n\n\n@pytest.mark.django_db\ndef test_handler500_response_status(rf):\n    request = rf.get('/')\n    response = handler500(request)\n    assert response.status_code == 500\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\nfrom oscar.apps.address.abstract_models import (\n    AbstractCountry, AbstractUserAddress)\nfrom oscar.core.loading import is_model_registered\n\n__all__ = []\n\n\nif not is_model_registered('address', 'UserAddress'):\n    class UserAddress(AbstractUserAddress):\n        pass\n\n    __all__.append('UserAddress')\n\n\nif not is_model_registered('address', 'Country'):\n    class Country(AbstractCountry):\n        pass\n\n    __all__.append('Country')\n",
    "output": ""
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\ndefault_app_config = 'oscar.apps.address.config.AddressConfig'\n",
    "output": "from django.test import TestCase\n\nfrom oscar.apps.address import models, forms\nfrom oscar.test.factories import UserFactory\n\n\nclass TestUserAddressForm(TestCase):\n\n    def setUp(self):\n        self.user = UserFactory()\n        self.country = models.Country.objects.create(\n            iso_3166_1_a2='GB', name=\"UNITED KINGDOM\")\n\n    def test_merges_addresses_with_same_hash(self):\n        data = {\n            'user': self.user,\n            'first_name': \"Matus\",\n            'last_name': \"Moravcik\",\n            'line1': \"1 Egg Street\",\n            'line4': \"London\",\n            'postcode': \"N12 9RE\",\n            'country': self.country}\n\n        # Create two addresses, which are slightly different\n        models.UserAddress.objects.create(**data)\n        other = data.copy()\n        other['first_name'] = 'Izidor'\n        duplicate = models.UserAddress.objects.create(**other)\n\n        # Edit duplicate to be same as original and check that the two\n        # addresses are merged when the form saves.\n        post_data = data.copy()\n        post_data['country'] = self.country.iso_3166_1_a2\n        form = forms.UserAddressForm(self.user, post_data, instance=duplicate)\n        self.assertFalse(form.is_valid())\n        self.assertTrue(len(form.errors['__all__']) > 0)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\ndefault_app_config = 'oscar.apps.address.config.AddressConfig'\n",
    "output": "# -*- coding: utf-8 -*-\nimport pytest\nfrom django.test import TestCase\nfrom django.core import exceptions\n\nfrom oscar.apps.order.models import ShippingAddress\nfrom oscar.core.compat import get_user_model\nfrom oscar.apps.address import models\nfrom oscar.test import factories\n\nfrom tests._site.model_tests_app.models import (\n    UserAddressModelWithCustomBaseFields, UserAddressModelWithCustomHashFields\n)\n\nUser = get_user_model()\n\n\nclass UserAddressModelWithCustomBaseFieldsFactory(factories.UserAddressFactory):\n    class Meta:\n        model = UserAddressModelWithCustomBaseFields\n\n\nclass UserAddressModelWithCustomHashFieldsFactory(factories.UserAddressFactory):\n    class Meta:\n        model = UserAddressModelWithCustomHashFields\n\n\nclass TestUserAddress(TestCase):\n\n    def setUp(self):\n        self.country = factories.CountryFactory.build()\n        self.user = factories.UserFactory()\n\n    def test_uses_title_firstname_and_lastname_in_salutation(self):\n        a = factories.UserAddressFactory.build(\n            country=self.country,\n            title='Dr',\n            first_name='Barry',\n            last_name='Barrington',\n            user=self.user)\n        self.assertEqual(\"Dr Barry Barrington\", a.salutation)\n\n    def test_strips_whitespace_from_salutation(self):\n        a = factories.UserAddressFactory.build(\n            title='',\n            first_name='',\n            last_name='Barrington',\n            country=self.country,\n            user=self.user)\n        self.assertEqual(\"Barrington\", a.salutation)\n\n    def test_has_name_property(self):\n        a = factories.UserAddressFactory.build(\n            country=self.country,\n            first_name='Barry',\n            last_name='Barrington',\n            user=self.user)\n        self.assertEqual(\"Barry Barrington\", a.name)\n\n    def test_has_summary_property(self):\n        c = factories.CountryFactory(name='')\n        a = factories.UserAddressFactory(\n            country=c,\n            title='Dr',\n            first_name='Barry',\n            last_name='Barrington',\n            line1='1 King Road',\n            line4='London',\n            postcode='SW1 9RE')\n        self.assertEqual(\n            \"Dr Barry Barrington, 1 King Road, London, SW1 9RE, UNITED KINGDOM\",\n            a.summary)\n\n    def test_summary_includes_country(self):\n        c = factories.CountryFactory.build(name='UNITED KINGDOM')\n        a = factories.UserAddressFactory.build(\n            country=c,\n            title='Dr',\n            first_name='Barry',\n            last_name='Barrington',\n            line1='1 King Road',\n            line4='London',\n            postcode='SW1 9RE',\n            user=self.user)\n        self.assertEqual(\n            \"Dr Barry Barrington, 1 King Road, London, SW1 9RE, UNITED KINGDOM\",\n            a.summary)\n\n    def test_hash_value(self):\n        a = factories.UserAddressFactory.build(\n            country=self.country,\n            user=self.user)\n        self.assertEqual(a.generate_hash(), 2668616117)\n\n    def test_hash_and_summary_values_on_model_with_custom_base_fields(self):\n        a = UserAddressModelWithCustomBaseFieldsFactory.build(country=self.country, user=self.user)\n        self.assertEqual(a.summary, '1 King Road, London')\n        self.assertEqual(a.generate_hash(), 2668616117)\n\n    def test_hash_and_summary_values_on_model_with_custom_hash_fields(self):\n        a = UserAddressModelWithCustomHashFieldsFactory.build(country=self.country, user=self.user)\n        self.assertEqual(a.summary, 'Dr Barry Barrington, 1 King Road, London, SW1 9RE, UNITED KINGDOM')\n        self.assertEqual(a.generate_hash(), 2153195893)\n\n    def test_can_be_hashed_including_non_ascii(self):\n        a = factories.UserAddressFactory.build(\n            first_name=\"\\u0141ukasz Smith\",\n            last_name='Smith',\n            line1=\"75 Smith Road\",\n            postcode=\"n4 8ty\",\n            country=self.country,\n            user=self.user)\n        hash = a.generate_hash()\n        self.assertTrue(hash is not None)\n\n    def test_strips_whitespace_in_name_property(self):\n        a = factories.UserAddressFactory.build(\n            first_name='',\n            last_name='Barrington',\n            country=self.country,\n            user=self.user)\n        self.assertEqual(\"Barrington\", a.name)\n\n    def test_uses_city_as_an_alias_of_line4(self):\n        a = factories.UserAddressFactory.build(\n            line4='London',\n            country=self.country,\n            user=self.user)\n        self.assertEqual('London', a.city)\n\n    def test_converts_postcode_to_uppercase_when_cleaning(self):\n        address = factories.UserAddressFactory.build(\n            postcode=\"n4 8ty\",\n            country=self.country,\n            user=self.user)\n        address.clean()\n        self.assertEqual(\"N4 8TY\", address.postcode)\n\n    def test_strips_whitespace_when_cleaning(self):\n        a = factories.UserAddressFactory.build(\n            line1=\"  75 Smith Road  \",\n            postcode=\"  n4 8ty\",\n            country=self.country,\n            user=self.user)\n        a.clean()\n        self.assertEqual(\"N4 8TY\", a.postcode)\n        self.assertEqual(\"75 Smith Road\", a.line1)\n\n    def test_active_address_fields_skips_whitespace_only_fields(self):\n        a = factories.UserAddressFactory.build(\n            first_name='   ',\n            last_name='Barrington',\n            line1='  75 Smith Road  ',\n            postcode='  n4 8ty',\n            title='',\n            country=self.country,\n            user=self.user)\n        active_fields = a.active_address_fields()\n        self.assertEqual(\"Barrington\", active_fields[0])\n\n    def test_ignores_whitespace_when_hashing(self):\n        a1 = factories.UserAddressFactory.build(\n            first_name='Terry',\n            last_name='Barrington',\n            country=self.country,\n            user=self.user)\n        a1.clean()\n        a2 = factories.UserAddressFactory.build(\n            first_name='   Terry  ',\n            last_name='     Barrington',\n            country=self.country,\n            user=self.user)\n        a2.clean()\n        self.assertEqual(a1.generate_hash(), a2.generate_hash())\n\n    def test_populate_shipping_address_doesnt_set_id(self):\n        a = factories.UserAddressFactory.build(\n            country=self.country,\n            user=self.user)\n        a.clean()\n        sa = ShippingAddress()\n        a.populate_alternative_model(sa)\n        self.assertIsNone(sa.id)\n\n    def test_populated_shipping_address_has_same_summary_user_address(self):\n        a = factories.UserAddressFactory.build(\n            country=self.country,\n            user=self.user)\n        a.clean()\n        sa = ShippingAddress()\n        a.populate_alternative_model(sa)\n        self.assertEqual(sa.summary, a.summary)\n\n    def test_summary_value(self):\n        a = factories.UserAddressFactory.build(\n            country=self.country,\n            user=self.user)\n        self.assertEqual(a.summary, 'Dr Barry Barrington, 1 King Road, London, SW1 9RE, UNITED KINGDOM')\n\n    def test_summary_is_property(self):\n        a = factories.UserAddressFactory.build(\n            title='',\n            line4='',\n            first_name=\" Terry  \",\n            last_name='Barrington',\n            line1=\"  75 Smith Road  \",\n            postcode=\"  n4 8ty\",\n            country=self.country,\n            user=self.user)\n        a.clean()\n        self.assertEqual(\n            \"Terry Barrington, 75 Smith Road, N4 8TY, UNITED KINGDOM\",\n            a.summary)\n\n\nVALID_POSTCODES = [\n    ('GB', 'N1 9RT'),\n    ('SK', '991 41'),\n    ('CZ', '612 00'),\n    ('CC', '6799'),\n    ('CY', '8240'),\n    ('MC', '98000'),\n    ('SH', 'STHL 1ZZ'),\n    ('JP', '150-2345'),\n    ('PG', '314'),\n    ('HN', '41202'),\n    ('BN', 'BC3615'),\n    ('TW', '104'),\n    ('TW', '10444'),\n    # It works for small cases as well\n    ('GB', 'sw2 1rw'),\n]\n\n\nINVALID_POSTCODES = [\n    ('GB', 'not-a-postcode'),\n    ('DE', '123b4'),\n]\n\n\n@pytest.mark.parametrize('country_value, postcode_value', VALID_POSTCODES)\ndef test_assert_valid_postcode(country_value, postcode_value):\n    country = models.Country(iso_3166_1_a2=country_value)\n    address = models.UserAddress(country=country, postcode=postcode_value)\n    address.clean()\n\n\n@pytest.mark.parametrize('country_value, postcode_value', INVALID_POSTCODES)\ndef test_assert_invalid_postcode(country_value, postcode_value):\n    country = models.Country(iso_3166_1_a2=country_value)\n    address = models.UserAddress(country=country, postcode=postcode_value)\n\n    with pytest.raises(exceptions.ValidationError):\n        address.clean()\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\ndefault_app_config = 'oscar.apps.address.config.AddressConfig'\n",
    "output": ""
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\ndefault_app_config = 'oscar.apps.address.config.AddressConfig'\n",
    "output": "from datetime import datetime, date\n\nfrom django.test import TestCase\nfrom django.core.exceptions import ValidationError\nfrom django.core.files.uploadedfile import SimpleUploadedFile\n\nfrom oscar.test import factories\n\n\nclass TestBooleanAttributes(TestCase):\n\n    def setUp(self):\n        self.attr = factories.ProductAttributeFactory(type=\"boolean\")\n\n    def test_validate_boolean_values(self):\n        self.assertIsNone(self.attr.validate_value(True))\n\n    def test_validate_invalid_boolean_values(self):\n        with self.assertRaises(ValidationError):\n            self.attr.validate_value(1)\n\n\nclass TestMultiOptionAttributes(TestCase):\n\n    def setUp(self):\n        self.option_group = factories.AttributeOptionGroupFactory()\n        self.attr = factories.ProductAttributeFactory(\n            type='multi_option',\n            name='Sizes',\n            code='sizes',\n            option_group=self.option_group,\n        )\n\n        # Add some options to the group\n        self.options = factories.AttributeOptionFactory.create_batch(\n            3, group=self.option_group)\n\n    def test_validate_multi_option_values(self):\n        self.assertIsNone(self.attr.validate_value([\n            self.options[0], self.options[1]]))\n\n    def test_validate_invalid_multi_option_values(self):\n        with self.assertRaises(ValidationError):\n            # value must be an iterable\n            self.attr.validate_value('foobar')\n\n        with self.assertRaises(ValidationError):\n            # Items must all be AttributeOption objects\n            self.attr.validate_value([self.options[0], 'notanOption'])\n\n    def test_save_multi_option_value(self):\n        product = factories.ProductFactory()\n        # We'll save two out of the three available options\n        self.attr.save_value(product, [self.options[0], self.options[2]])\n        product.refresh_from_db()\n        self.assertEqual(list(product.attr.sizes), [self.options[0], self.options[2]])\n\n    def test_delete_multi_option_value(self):\n        product = factories.ProductFactory()\n        self.attr.save_value(product, [self.options[0], self.options[1]])\n        # Now delete these values\n        self.attr.save_value(product, None)\n        product.refresh_from_db()\n        self.assertFalse(hasattr(product.attr, 'sizes'))\n\n    def test_multi_option_value_as_text(self):\n        product = factories.ProductFactory()\n        self.attr.save_value(product, self.options)\n        attr_val = product.attribute_values.get(attribute=self.attr)\n        self.assertEqual(attr_val.value_as_text, \", \".join(o.option for o in self.options))\n\n\nclass TestDatetimeAttributes(TestCase):\n\n    def setUp(self):\n        self.attr = factories.ProductAttributeFactory(type=\"datetime\")\n\n    def test_validate_datetime_values(self):\n        self.assertIsNone(self.attr.validate_value(datetime.now()))\n\n    def test_validate_invalid_datetime_values(self):\n        with self.assertRaises(ValidationError):\n            self.attr.validate_value(1)\n\n\nclass TestDateAttributes(TestCase):\n\n    def setUp(self):\n        self.attr = factories.ProductAttributeFactory(type=\"date\")\n\n    def test_validate_datetime_values(self):\n        self.assertIsNone(self.attr.validate_value(datetime.now()))\n\n    def test_validate_date_values(self):\n        self.assertIsNone(self.attr.validate_value(date.today()))\n\n    def test_validate_invalid_date_values(self):\n        with self.assertRaises(ValidationError):\n            self.attr.validate_value(1)\n\n\nclass TestIntegerAttributes(TestCase):\n\n    def setUp(self):\n        self.attr = factories.ProductAttributeFactory(type=\"integer\")\n\n    def test_validate_integer_values(self):\n        self.assertIsNone(self.attr.validate_value(1))\n\n    def test_validate_str_integer_values(self):\n        self.assertIsNone(self.attr.validate_value('1'))\n\n    def test_validate_invalid_integer_values(self):\n        with self.assertRaises(ValidationError):\n            self.attr.validate_value('notanInteger')\n\n\nclass TestFloatAttributes(TestCase):\n\n    def setUp(self):\n        self.attr = factories.ProductAttributeFactory(type=\"float\")\n\n    def test_validate_integer_values(self):\n        self.assertIsNone(self.attr.validate_value(1))\n\n    def test_validate_float_values(self):\n        self.assertIsNone(self.attr.validate_value(1.2))\n\n    def test_validate_str_float_values(self):\n        self.assertIsNone(self.attr.validate_value('1.2'))\n\n    def test_validate_invalid_float_values(self):\n        with self.assertRaises(ValidationError):\n            self.attr.validate_value('notaFloat')\n\n\nclass TestTextAttributes(TestCase):\n\n    def setUp(self):\n        self.attr = factories.ProductAttributeFactory(type=\"text\")\n\n    def test_validate_string_and_unicode_values(self):\n        self.assertIsNone(self.attr.validate_value('String'))\n\n    def test_validate_invalid_float_values(self):\n        with self.assertRaises(ValidationError):\n            self.attr.validate_value(1)\n\n\nclass TestFileAttributes(TestCase):\n    def setUp(self):\n        self.attr = factories.ProductAttributeFactory(type=\"file\")\n\n    def test_validate_file_values(self):\n        file_field = SimpleUploadedFile('test_file.txt', b'Test')\n        self.assertIsNone(self.attr.validate_value(file_field))\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\ndefault_app_config = 'oscar.apps.address.config.AddressConfig'\n",
    "output": "# -*- coding: utf-8 -*-\nfrom django.core.cache import cache\nfrom django.test import TestCase\nfrom django.test.utils import override_settings\n\nfrom oscar.apps.catalogue.models import Category\nfrom oscar.apps.catalogue.categories import create_from_breadcrumbs\nfrom oscar.templatetags.category_tags import get_annotated_list\n\n\nclass TestCategory(TestCase):\n\n    def setUp(self):\n        self.products = Category.add_root(name=\"Pr\u00f6ducts\")\n        self.books = self.products.add_child(name=\"B\u00fccher\")\n\n    def tearDown(self):\n        cache.clear()\n\n    def test_includes_parents_name_in_full_name(self):\n        self.assertTrue(self.products.name in self.books.full_name)\n\n    def test_has_children_method(self):\n        self.assertTrue(self.products.has_children())\n\n    def test_slugs_were_autogenerated(self):\n        self.assertTrue(self.products.slug)\n        self.assertTrue(self.books.slug)\n\n    def test_supplied_slug_is_not_altered(self):\n        more_books = self.products.add_child(\n            name=self.books.name, slug=self.books.slug)\n        self.assertEqual(more_books.slug, self.books.slug)\n\n    @override_settings(OSCAR_SLUG_ALLOW_UNICODE=True)\n    def test_unicode_slug(self):\n        root_category = Category.add_root(name=\"Vins fran\u00e7ais\")\n        child_category = root_category.add_child(name=\"Ch\u00e2teau d'Yquem\")\n        self.assertEqual(root_category.slug, 'vins-fran\u00e7ais')\n        self.assertEqual(\n            root_category.get_absolute_url(), '/catalogue/category/vins-fran%C3%A7ais_{}/'.format(root_category.pk)\n        )\n        self.assertEqual(child_category.slug, 'ch\u00e2teau-dyquem')\n        self.assertEqual(\n            child_category.get_absolute_url(),\n            '/catalogue/category/vins-fran%C3%A7ais/ch%C3%A2teau-dyquem_{}/'.format(child_category.pk)\n        )\n\n    @override_settings(OSCAR_SLUG_ALLOW_UNICODE=True)\n    def test_url_caching(self):\n        category = self.products.add_child(name=\"Fromages fran\u00e7ais\")\n        absolute_url = category.get_absolute_url()\n        url = cache.get(category.get_url_cache_key())\n        self.assertEqual(url, '/catalogue/category/products/fromages-fran%C3%A7ais_{}/'.format(category.pk))\n        self.assertEqual(absolute_url, '/catalogue/category/products/fromages-fran%C3%A7ais_{}/'.format(category.pk))\n\n\nclass TestMovingACategory(TestCase):\n\n    def setUp(self):\n        breadcrumbs = (\n            'Books > Fiction > Horror > Teen',\n            'Books > Fiction > Horror > Gothic',\n            'Books > Fiction > Comedy',\n            'Books > Non-fiction > Biography',\n            'Books > Non-fiction > Programming',\n            'Books > Children',\n        )\n        for trail in breadcrumbs:\n            create_from_breadcrumbs(trail)\n\n        horror = Category.objects.get(name=\"Horror\")\n        programming = Category.objects.get(name=\"Programming\")\n        horror.move(programming)\n\n        # Reload horror instance to pick up changes\n        self.horror = Category.objects.get(name=\"Horror\")\n\n    def test_updates_instance_name(self):\n        self.assertEqual('Books > Non-fiction > Horror', self.horror.full_name)\n\n    def test_updates_subtree_names(self):\n        teen = Category.objects.get(name=\"Teen\")\n        self.assertEqual('Books > Non-fiction > Horror > Teen',\n                         teen.full_name)\n        gothic = Category.objects.get(name=\"Gothic\")\n        self.assertEqual('Books > Non-fiction > Horror > Gothic',\n                         gothic.full_name)\n\n\nclass TestCategoryFactory(TestCase):\n\n    def test_can_create_single_level_category(self):\n        trail = 'Books'\n        category = create_from_breadcrumbs(trail)\n        self.assertIsNotNone(category)\n        self.assertEqual(category.name, 'Books')\n        self.assertEqual(category.slug, 'books')\n\n    def test_can_create_parent_and_child_categories(self):\n        trail = 'Books > Science-Fiction'\n        category = create_from_breadcrumbs(trail)\n\n        self.assertIsNotNone(category)\n        self.assertEqual(category.name, 'Science-Fiction')\n        self.assertEqual(category.get_depth(), 2)\n        self.assertEqual(category.get_parent().name, 'Books')\n        self.assertEqual(2, Category.objects.count())\n        self.assertEqual(category.full_slug, 'books/science-fiction')\n\n    def test_can_create_multiple_categories(self):\n        trail = 'Books > Science-Fiction > Star Trek'\n        create_from_breadcrumbs(trail)\n        trail = 'Books > Factual > Popular Science'\n        category = create_from_breadcrumbs(trail)\n\n        self.assertIsNotNone(category)\n        self.assertEqual(category.name, 'Popular Science')\n        self.assertEqual(category.get_depth(), 3)\n        self.assertEqual(category.get_parent().name, 'Factual')\n        self.assertEqual(5, Category.objects.count())\n        self.assertEqual(category.full_slug, 'books/factual/popular-science', )\n\n    def test_can_use_alternative_separator(self):\n        trail = 'Food|Cheese|Blue'\n        create_from_breadcrumbs(trail, separator='|')\n        self.assertEqual(3, len(Category.objects.all()))\n\n    def test_updating_subtree_slugs_when_moving_category_to_new_parent(self):\n        trail = 'A > B > C'\n        create_from_breadcrumbs(trail)\n        trail = 'A > B > D'\n        create_from_breadcrumbs(trail)\n        trail = 'A > E > F'\n        create_from_breadcrumbs(trail)\n        trail = 'A > E > G'\n        create_from_breadcrumbs(trail)\n\n        trail = 'T'\n        target = create_from_breadcrumbs(trail)\n        category = Category.objects.get(name='A')\n\n        category.move(target, pos='first-child')\n\n        c1 = Category.objects.get(name='A')\n        self.assertEqual(c1.full_slug, 't/a')\n        self.assertEqual(c1.full_name, 'T > A')\n\n        child = Category.objects.get(name='F')\n        self.assertEqual(child.full_slug, 't/a/e/f')\n        self.assertEqual(child.full_name, 'T > A > E > F')\n\n        child = Category.objects.get(name='D')\n        self.assertEqual(child.full_slug, 't/a/b/d')\n        self.assertEqual(child.full_name, 'T > A > B > D')\n\n    def test_updating_subtree_when_moving_category_to_new_sibling(self):\n        trail = 'A > B > C'\n        create_from_breadcrumbs(trail)\n        trail = 'A > B > D'\n        create_from_breadcrumbs(trail)\n        trail = 'A > E > F'\n        create_from_breadcrumbs(trail)\n        trail = 'A > E > G'\n        create_from_breadcrumbs(trail)\n\n        category = Category.objects.get(name='E')\n        target = Category.objects.get(name='A')\n\n        category.move(target, pos='right')\n\n        child = Category.objects.get(name='E')\n        self.assertEqual(child.full_slug, 'e')\n        self.assertEqual(child.full_name, 'E')\n\n        child = Category.objects.get(name='F')\n        self.assertEqual(child.full_slug, 'e/f')\n        self.assertEqual(child.full_name, 'E > F')\n\n\nclass TestCategoryTemplateTags(TestCase):\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.template = \"\"\"\n          {% if tree_categories %}\n              <ul>\n              {% for tree_category, info in tree_categories %}\n                  <li>\n                  {% if tree_category.pk == category.pk %}\n                      <strong>{{ tree_category.name }}</strong>\n                  {% else %}\n                      <a href=\"{{ tree_category.get_absolute_url }}\">\n                          {{ tree_category.name }}</a>\n                  {% endif %}\n                  {% if info.has_children %}<ul>{% else %}</li>{% endif %}\n                  {% for n in info.num_to_close %}\n                      </ul></li>\n                  {% endfor %}\n              {% endfor %}\n              </ul>\n          {% endif %}\n        \"\"\"\n\n    def setUp(self):\n        breadcrumbs = (\n            'Books > Fiction > Horror > Teen',\n            'Books > Fiction > Horror > Gothic',\n            'Books > Fiction > Comedy',\n            'Books > Non-fiction > Biography',\n            'Books > Non-fiction > Programming',\n            'Books > Children',\n        )\n        for trail in breadcrumbs:\n            create_from_breadcrumbs(trail)\n\n    def get_category_names(self, depth=None, parent=None):\n        \"\"\"\n        For the tests, we are only interested in the category names returned\n        from the template tag. This helper calls the template tag and\n        returns a list of the included categories.\n        \"\"\"\n        annotated_list = get_annotated_list(depth, parent)\n        names = [category.name for category, __ in annotated_list]\n        names_set = set(names)\n        # We return a set to ease testing, but need to be sure we're not\n        # losing any duplicates through that conversion.\n        self.assertEqual(len(names_set), len(names))\n        return names_set\n\n    def test_all_categories(self):\n        expected_categories = {\n            'Books', 'Fiction', 'Horror', 'Teen', 'Gothic', 'Comedy',\n            'Non-fiction', 'Biography', 'Programming', 'Children'}\n        actual_categories = self.get_category_names()\n        self.assertEqual(expected_categories, actual_categories)\n\n    def test_categories_depth(self):\n        expected_categories = {'Books'}\n        actual_categories = self.get_category_names(depth=1)\n        self.assertEqual(expected_categories, actual_categories)\n\n    def test_categories_parent(self):\n        parent = Category.objects.get(name=\"Fiction\")\n        actual_categories = self.get_category_names(parent=parent)\n        expected_categories = {'Horror', 'Teen', 'Gothic', 'Comedy'}\n        self.assertEqual(expected_categories, actual_categories)\n\n    def test_categories_depth_parent(self):\n        parent = Category.objects.get(name=\"Fiction\")\n        actual_categories = self.get_category_names(depth=1, parent=parent)\n        expected_categories = {'Horror', 'Comedy'}\n        self.assertEqual(expected_categories, actual_categories)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\ndefault_app_config = 'oscar.apps.address.config.AddressConfig'\n",
    "output": "import pytest\nfrom django.core.exceptions import ValidationError\n\nfrom oscar.apps.catalogue import models\n\n\ndef test_product_attributes_can_contain_underscores():\n    attr = models.ProductAttribute(name=\"A\", code=\"a_b\")\n    attr.full_clean()\n\n\ndef test_product_attributes_cant_contain_hyphens():\n    attr = models.ProductAttribute(name=\"A\", code=\"a-b\")\n    with pytest.raises(ValidationError):\n        attr.full_clean()\n\n\ndef test_product_attributes_cant_be_python_keywords():\n    attr = models.ProductAttribute(name=\"A\", code=\"import\")\n    with pytest.raises(ValidationError):\n        attr.full_clean()\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\ndefault_app_config = 'oscar.apps.address.config.AddressConfig'\n",
    "output": "from django.test import TestCase\n\nfrom oscar.test import factories\nfrom oscar.core.loading import get_model\n\n\nProduct = get_model('catalogue', 'Product')\n\n\nclass ProductOptionTests(TestCase):\n    def setUp(self):\n        self.product_class = factories.ProductClassFactory()\n        self.product = factories.create_product(product_class=self.product_class)\n        self.option = factories.OptionFactory()\n\n    def test_product_has_options_per_product_class(self):\n        self.product_class.options.add(self.option)\n        self.assertTrue(self.product.has_options)\n\n    def test_product_has_options_per_product(self):\n        self.product.product_options.add(self.option)\n        self.assertTrue(self.product.has_options)\n\n    def test_queryset_per_product_class(self):\n        self.product_class.options.add(self.option)\n        qs = Product.browsable.base_queryset().filter(id=self.product.id)\n        product = qs.first()\n        self.assertTrue(product.has_options)\n        self.assertEquals(product.num_product_class_options, 1)\n\n    def test_queryset_per_product(self):\n        self.product.product_options.add(self.option)\n        qs = Product.browsable.base_queryset().filter(id=self.product.id)\n        product = qs.first()\n        self.assertTrue(product.has_options)\n        self.assertEquals(product.num_product_options, 1)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\ndefault_app_config = 'oscar.apps.address.config.AddressConfig'\n",
    "output": "# coding=utf-8\nfrom django.db import IntegrityError\nfrom django.test import TestCase\nfrom django.core.exceptions import ValidationError\n\nfrom oscar.apps.catalogue.models import (Product, ProductClass,\n                                         ProductAttribute,\n                                         AttributeOption,\n                                         ProductRecommendation)\nfrom oscar.test import factories\n\n\nclass ProductTests(TestCase):\n\n    def setUp(self):\n        self.product_class, _ = ProductClass.objects.get_or_create(\n            name='Clothing')\n\n\nclass ProductCreationTests(ProductTests):\n\n    def setUp(self):\n        super().setUp()\n        ProductAttribute.objects.create(product_class=self.product_class,\n                                        name='Number of pages',\n                                        code='num_pages',\n                                        type='integer')\n        Product.ENABLE_ATTRIBUTE_BINDING = True\n\n    def tearDown(self):\n        Product.ENABLE_ATTRIBUTE_BINDING = False\n\n    def test_create_products_with_attributes(self):\n        product = Product(upc='1234',\n                          product_class=self.product_class,\n                          title='testing')\n        product.attr.num_pages = 100\n        product.save()\n\n    def test_none_upc_is_represented_as_empty_string(self):\n        product = Product(product_class=self.product_class,\n                          title='testing', upc=None)\n        product.save()\n        product.refresh_from_db()\n        self.assertEqual(product.upc, '')\n\n    def test_upc_uniqueness_enforced(self):\n        Product.objects.create(product_class=self.product_class,\n                               title='testing', upc='bah')\n        self.assertRaises(IntegrityError, Product.objects.create,\n                          product_class=self.product_class,\n                          title='testing', upc='bah')\n\n    def test_allow_two_products_without_upc(self):\n        for x in range(2):\n            Product.objects.create(product_class=self.product_class,\n                                   title='testing', upc=None)\n\n\nclass TopLevelProductTests(ProductTests):\n\n    def test_top_level_products_must_have_titles(self):\n        product = Product(product_class=self.product_class)\n        self.assertRaises(ValidationError, product.clean)\n\n    def test_top_level_products_must_have_product_class(self):\n        product = Product(title=\"Kopfh\u00f6rer\")\n        self.assertRaises(ValidationError, product.clean)\n\n    def test_top_level_products_are_part_of_browsable_set(self):\n        product = Product.objects.create(\n            product_class=self.product_class, title=\"Kopfh\u00f6rer\")\n        self.assertEqual(set([product]), set(Product.browsable.all()))\n\n\nclass ChildProductTests(ProductTests):\n\n    def setUp(self):\n        super().setUp()\n        self.parent = Product.objects.create(\n            title=\"Parent product\",\n            product_class=self.product_class,\n            structure=Product.PARENT,\n            is_discountable=False)\n\n    def test_child_products_dont_need_titles(self):\n        Product.objects.create(\n            parent=self.parent, structure=Product.CHILD)\n\n    def test_child_products_dont_need_a_product_class(self):\n        Product.objects.create(parent=self.parent, structure=Product.CHILD)\n\n    def test_child_products_inherit_fields(self):\n        p = Product.objects.create(\n            parent=self.parent,\n            structure=Product.CHILD,\n            is_discountable=True)\n        self.assertEqual(\"Parent product\", p.get_title())\n        self.assertEqual(\"Clothing\", p.get_product_class().name)\n        self.assertEqual(False, p.get_is_discountable())\n\n    def test_child_products_are_not_part_of_browsable_set(self):\n        Product.objects.create(\n            product_class=self.product_class, parent=self.parent,\n            structure=Product.CHILD)\n        self.assertEqual(set([self.parent]), set(Product.browsable.all()))\n\n\nclass TestAChildProduct(TestCase):\n\n    def setUp(self):\n        clothing = ProductClass.objects.create(\n            name='Clothing', requires_shipping=True)\n        self.parent = clothing.products.create(\n            title=\"Parent\", structure=Product.PARENT)\n        self.child = self.parent.children.create(structure=Product.CHILD)\n\n    def test_delegates_requires_shipping_logic(self):\n        self.assertTrue(self.child.is_shipping_required)\n\n\nclass ProductAttributeCreationTests(TestCase):\n\n    def test_validating_option_attribute(self):\n        option_group = factories.AttributeOptionGroupFactory()\n        option_1 = factories.AttributeOptionFactory(group=option_group)\n        option_2 = factories.AttributeOptionFactory(group=option_group)\n        pa = factories.ProductAttribute(\n            type='option', option_group=option_group)\n\n        self.assertRaises(ValidationError, pa.validate_value, 'invalid')\n        pa.validate_value(option_1)\n        pa.validate_value(option_2)\n\n        invalid_option = AttributeOption(option='invalid option')\n        self.assertRaises(\n            ValidationError, pa.validate_value, invalid_option)\n\n    def test_entity_attributes(self):\n        unrelated_object = factories.PartnerFactory()\n        attribute = factories.ProductAttributeFactory(type='entity')\n\n        attribute_value = factories.ProductAttributeValueFactory(\n            attribute=attribute, value_entity=unrelated_object)\n\n        self.assertEqual(attribute_value.value, unrelated_object)\n\n\nclass ProductRecommendationTests(ProductTests):\n\n    def setUp(self):\n        super().setUp()\n        self.primary_product = Product.objects.create(\n            upc='1234', product_class=self.product_class, title='Primary Product'\n        )\n\n    def test_recommended_products_ordering(self):\n        secondary_products = []\n        for i in range(5):\n            secondary_products.append(Product.objects.create(\n                upc='secondary%s' % i, product_class=self.product_class, title='Secondary Product #%s' % i\n            ))\n\n        ProductRecommendation.objects.create(\n            primary=self.primary_product, recommendation=secondary_products[3], ranking=5)\n        ProductRecommendation.objects.create(\n            primary=self.primary_product, recommendation=secondary_products[1], ranking=2)\n        ProductRecommendation.objects.create(\n            primary=self.primary_product, recommendation=secondary_products[2], ranking=4)\n        ProductRecommendation.objects.create(\n            primary=self.primary_product, recommendation=secondary_products[4], ranking=1)\n        ProductRecommendation.objects.create(\n            primary=self.primary_product, recommendation=secondary_products[0], ranking=3)\n        recommended_products = [\n            secondary_products[3], secondary_products[2], secondary_products[0],\n            secondary_products[1], secondary_products[4]\n        ]\n        self.assertEqual(self.primary_product.sorted_recommended_products, recommended_products)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\ndefault_app_config = 'oscar.apps.address.config.AddressConfig'\n",
    "output": "from django.test import TestCase\n\nfrom oscar.apps.catalogue import models\n\n\nclass TestProductClassModel(TestCase):\n\n    def test_slug_is_auto_created(self):\n        books = models.ProductClass.objects.create(\n            name=\"Book\",\n        )\n        self.assertEqual('book', books.slug)\n\n    def test_has_attribute_for_whether_shipping_is_required(self):\n        models.ProductClass.objects.create(\n            name=\"Download\",\n            requires_shipping=False,\n        )\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\ndefault_app_config = 'oscar.apps.address.config.AddressConfig'\n",
    "output": "import os\nimport tempfile\nfrom unittest import mock\n\nfrom django.contrib.staticfiles.testing import StaticLiveServerTestCase\nfrom django.test import TestCase, override_settings\n\nfrom oscar.apps.catalogue.abstract_models import MissingProductImage\nfrom oscar.test import factories\n\n\nclass TestProductImages(TestCase):\n\n    def test_images_are_in_consecutive_order(self):\n        product = factories.create_product()\n        for i in range(4):\n            factories.create_product_image(product=product, display_order=i)\n\n        product.images.all()[2].delete()\n\n        for idx, im in enumerate(product.images.all()):\n            self.assertEqual(im.display_order, idx)\n\n    def test_variant_images(self):\n        parent = factories.ProductFactory(structure='parent')\n        variant = factories.create_product(parent=parent)\n        factories.create_product_image(product=variant, caption='Variant Image')\n        all_images = variant.get_all_images()\n        self.assertEquals(all_images.count(), 1)\n        product_image = all_images.first()\n        self.assertEquals(product_image.caption, 'Variant Image')\n\n    def test_variant_images_fallback_to_parent(self):\n        parent = factories.ProductFactory(structure='parent')\n        variant = factories.create_product(parent=parent)\n        factories.create_product_image(product=parent, caption='Parent Product Image')\n        all_images = variant.get_all_images()\n        self.assertEquals(all_images.count(), 1)\n        product_image = all_images.first()\n        self.assertEquals(product_image.caption, 'Parent Product Image')\n\n\nclass TestMissingProductImage(StaticLiveServerTestCase):\n\n    TEMP_MEDIA_ROOT = tempfile.mkdtemp()\n\n    @override_settings(MEDIA_ROOT=TEMP_MEDIA_ROOT)\n    @mock.patch('oscar.apps.catalogue.abstract_models.find')\n    def test_symlink_creates_directories(self, mock_find):\n        # Create a fake empty file to symlink\n        img = tempfile.NamedTemporaryFile(delete=False)\n        img.close()\n\n        mock_find.return_value = img.name\n        # Initialise the class with a nested path\n        path = 'image/path.jpg'\n        MissingProductImage(path)\n        # Check that the directory exists\n        image_path = os.path.join(self.TEMP_MEDIA_ROOT, path)\n        self.assertTrue(os.path.exists(image_path))\n\n        # Clean up\n        for f in [image_path, img.name]:\n            os.unlink(f)\n        for d in [os.path.join(self.TEMP_MEDIA_ROOT, 'image'), self.TEMP_MEDIA_ROOT]:\n            os.rmdir(d)\n\n    @mock.patch('oscar.apps.catalogue.abstract_models.MissingProductImage.symlink_missing_image')\n    def test_no_symlink_when_no_media_root(self, mock_symlink):\n        MissingProductImage()\n        self.assertEqual(mock_symlink.call_count, 0)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\ndefault_app_config = 'oscar.apps.address.config.AddressConfig'\n",
    "output": "from django.test import TestCase\nfrom django.test.utils import override_settings\n\nfrom oscar.apps.catalogue.search_handlers import (\n    get_product_search_handler_class,\n)\n\n\nclass TestSearchHandler(object):\n    pass\n\n\nclass TestProductSearchHandlerSetting(TestCase):\n    def test_product_search_handler_setting(self):\n        \"\"\"\n        Test that the `OSCAR_PRODUCT_SEARCH_HANDLER` setting, when set,\n        dictates the return value of the `get_product_search_handler_class`\n        function.\n        \"\"\"\n        handler_override = 'tests.integration.catalogue.test_product_search_handler_setting.TestSearchHandler'\n        with override_settings(OSCAR_PRODUCT_SEARCH_HANDLER=handler_override):\n            handler_class = get_product_search_handler_class()\n\n        self.assertEqual(handler_class, TestSearchHandler)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\ndefault_app_config = 'oscar.apps.address.config.AddressConfig'\n",
    "output": ""
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\ndefault_app_config = 'oscar.apps.address.config.AddressConfig'\n",
    "output": "from django.test import TestCase\n\nfrom oscar.apps.catalogue.reviews import forms\nfrom oscar.test.factories import UserFactory, create_product\n\n\nclass TestReviewForm(TestCase):\n\n    def test_cleans_title(self):\n        product = create_product()\n        reviewer = UserFactory()\n        data = {\n            'title': '  This product is lovely',\n            'body': 'I really like this cheese',\n            'score': 0,\n            'name': 'JR Hartley',\n            'email': 'hartley@example.com'\n        }\n        form = forms.ProductReviewForm(\n            product=product, user=reviewer, data=data)\n\n        assert form.is_valid()\n\n        review = form.save()\n        assert review.title == \"This product is lovely\"\n\n    def test_validates_empty_data_correctly(self):\n        form = forms.ProductReviewForm(product=None, user=None, data={})\n        assert form.is_valid() is False\n\n    def test_validates_correctly(self):\n        data = {\n            'title': 'This product is lovely',\n            'body': 'I really like this cheese',\n            'score': 0,\n            'name': 'JR Hartley',\n            'email': 'hartley@example.com'\n        }\n        form = forms.ProductReviewForm(product=None, user=None, data=data)\n        assert form.is_valid()\n\n\nclass TestVoteForm(TestCase):\n\n    def setUp(self):\n        self.product = create_product()\n        self.reviewer = UserFactory()\n        self.voter = UserFactory()\n        self.review = self.product.reviews.create(\n            title='This is nice',\n            score=3,\n            body=\"This is the body\",\n            user=self.reviewer)\n\n    def test_allows_real_users_to_vote(self):\n        form = forms.VoteForm(self.review, self.voter, data={'delta': 1})\n        self.assertTrue(form.is_valid())\n\n    def test_prevents_users_from_voting_more_than_once(self):\n        self.review.vote_up(self.voter)\n        form = forms.VoteForm(self.review, self.voter, data={'delta': 1})\n        self.assertFalse(form.is_valid())\n        self.assertTrue(len(form.errors['__all__']) > 0)\n\n    def test_prevents_users_voting_on_their_own_reviews(self):\n        form = forms.VoteForm(self.review, self.reviewer, data={'delta': 1})\n        self.assertFalse(form.is_valid())\n        self.assertTrue(len(form.errors['__all__']) > 0)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\ndefault_app_config = 'oscar.apps.address.config.AddressConfig'\n",
    "output": "from django.test import TestCase\nfrom django.core.exceptions import ValidationError\n\nfrom oscar.core.compat import get_user_model\nfrom oscar.apps.catalogue.reviews import models\nfrom oscar.test.factories import create_product\nfrom oscar.test.factories import UserFactory\n\nUser = get_user_model()\n\n\nclass TestAnAnonymousReview(TestCase):\n\n    def setUp(self):\n        self.product = create_product()\n        self.data = {\n            'product': self.product,\n            'title': 'This product is lovely',\n            'body': 'I really like this cheese',\n            'score': 0,\n            'name': 'JR Hartley',\n            'email': 'hartley@example.com'\n        }\n\n    def review(self, **kwargs):\n        if kwargs:\n            data = self.data.copy()\n            data.update(kwargs)\n        else:\n            data = self.data\n        return models.ProductReview(**data)\n\n    def test_can_be_created(self):\n        review = self.review()\n        review.full_clean()\n\n    def test_requires_a_title(self):\n        review = self.review(title=\"\")\n        self.assertRaises(ValidationError, review.full_clean)\n\n    def test_requires_a_body(self):\n        review = self.review(body=\"\")\n        self.assertRaises(ValidationError, review.full_clean)\n\n    def test_requires_a_name(self):\n        review = self.review(name=\"\")\n        self.assertRaises(ValidationError, review.full_clean)\n\n    def test_requires_an_email_address(self):\n        review = self.review(email=\"\")\n        self.assertRaises(ValidationError, review.full_clean)\n\n    def test_requires_non_whitespace_title(self):\n        review = self.review(title=\"    \")\n        self.assertRaises(ValidationError, review.full_clean)\n\n    def test_starts_with_no_votes(self):\n        review = self.review()\n        review.save()\n        self.assertFalse(review.has_votes)\n        self.assertEqual(0, review.num_up_votes)\n        self.assertEqual(0, review.num_down_votes)\n\n    def test_has_reviewer_name_property(self):\n        review = self.review(name=\"Dave\")\n        self.assertEqual(\"Dave\", review.reviewer_name)\n\n    def test_review_moderate_setting_false(self):\n        with self.settings(OSCAR_MODERATE_REVIEWS=False):\n            review = self.review()\n            self.assertEqual(1, review.status)\n\n    def test_review_moderate_setting_true(self):\n        with self.settings(OSCAR_MODERATE_REVIEWS=True):\n            review = self.review()\n            self.assertEqual(0, review.status)\n\n\nclass TestAUserReview(TestCase):\n\n    def setUp(self):\n        self.product = create_product()\n        self.user = UserFactory(first_name=\"Tom\", last_name=\"Thumb\")\n        self.data = {\n            'product': self.product,\n            'title': 'This product is lovely',\n            'body': 'I really like this cheese',\n            'score': 0,\n            'user': self.user\n        }\n\n    def review(self, **kwargs):\n        if kwargs:\n            data = self.data.copy()\n            data.update(kwargs)\n        else:\n            data = self.data\n        return models.ProductReview(**data)\n\n    def test_can_be_created(self):\n        review = self.review()\n        review.full_clean()\n\n    def test_requires_a_title(self):\n        review = self.review(title=\"\")\n        self.assertRaises(ValidationError, review.full_clean)\n\n    def test_requires_a_body(self):\n        review = self.review(body=\"\")\n        self.assertRaises(ValidationError, review.full_clean)\n\n    def test_has_reviewer_name_property(self):\n        review = self.review()\n        self.assertEqual(\"Tom Thumb\", review.reviewer_name)\n\n    def test_num_approved_reviews(self):\n        review = self.review()\n        review.save()\n        self.assertEqual(self.product.num_approved_reviews, 1)\n        self.assertEqual(self.product.reviews.approved().first(), review)\n\n    def test_review_moderate_setting_false(self):\n        with self.settings(OSCAR_MODERATE_REVIEWS=False):\n            review = self.review()\n            self.assertEqual(1, review.status)\n\n    def test_review_moderate_setting_true(self):\n        with self.settings(OSCAR_MODERATE_REVIEWS=True):\n            review = self.review()\n            self.assertEqual(0, review.status)\n\n\nclass TestVotingOnAReview(TestCase):\n\n    def setUp(self):\n        self.product = create_product()\n        self.user = UserFactory()\n        self.voter = UserFactory()\n        self.review = self.product.reviews.create(\n            title='This is nice',\n            score=3,\n            body=\"This is the body\",\n            user=self.user)\n\n    def test_updates_totals_for_upvote(self):\n        self.review.vote_up(self.voter)\n        self.assertTrue(self.review.has_votes)\n        self.assertEqual(1, self.review.total_votes)\n        self.assertEqual(1, self.review.delta_votes)\n\n    def test_updates_totals_for_downvote(self):\n        self.review.vote_down(self.voter)\n        self.assertTrue(self.review.has_votes)\n        self.assertEqual(1, self.review.total_votes)\n        self.assertEqual(-1, self.review.delta_votes)\n\n    def test_is_permitted_for_normal_user(self):\n        is_allowed, reason = self.review.can_user_vote(self.voter)\n        self.assertTrue(is_allowed, reason)\n\n    def test_is_not_permitted_for_reviewer(self):\n        is_allowed, reason = self.review.can_user_vote(self.user)\n        self.assertFalse(is_allowed, reason)\n\n    def test_is_not_permitted_for_previous_voter(self):\n        self.review.vote_up(self.voter)\n        is_allowed, reason = self.review.can_user_vote(self.voter)\n        self.assertFalse(is_allowed, reason)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\ndefault_app_config = 'oscar.apps.address.config.AddressConfig'\n",
    "output": ""
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\ndefault_app_config = 'oscar.apps.address.config.AddressConfig'\n",
    "output": "from decimal import Decimal as D\nfrom unittest import mock\n\nfrom django.test import TestCase, override_settings\nfrom django.conf import settings\n\nfrom oscar.apps.basket import forms, formsets\nfrom oscar.apps.offer.utils import Applicator\nfrom oscar.core.loading import get_model\nfrom oscar.test import factories\nfrom oscar.test.basket import add_product\nfrom oscar.test.factories import (\n    BenefitFactory, ConditionalOfferFactory, ConditionFactory, RangeFactory)\n\n\nLine = get_model('basket', 'Line')\n\n\nclass TestBasketLineForm(TestCase):\n\n    def setUp(self):\n        self.applicator = Applicator()\n        rng = RangeFactory(includes_all_products=True)\n        self.condition = ConditionFactory(\n            range=rng, type=ConditionFactory._meta.model.VALUE,\n            value=D('100'), proxy_class=None)\n        self.benefit = BenefitFactory(\n            range=rng, type=BenefitFactory._meta.model.FIXED,\n            value=D('10'), max_affected_items=1)\n        self.basket = factories.create_basket()\n        self.line = self.basket.all_lines()[0]\n\n    def mock_availability_return_value(self, is_available, reason=''):\n        policy = self.line.purchase_info.availability\n        policy.is_purchase_permitted = mock.MagicMock(\n            return_value=(is_available, reason))\n\n    def build_form(self, quantity=None):\n        if quantity is None:\n            quantity = self.line.quantity\n        return forms.BasketLineForm(\n            strategy=self.basket.strategy,\n            data={'quantity': quantity},\n            instance=self.line)\n\n    def test_enforces_availability_policy_for_valid_quantities(self):\n        self.mock_availability_return_value(True)\n        form = self.build_form()\n        self.assertTrue(form.is_valid())\n\n    def test_enforces_availability_policy_for_invalid_quantities(self):\n        self.mock_availability_return_value(False, \"Some reason\")\n        form = self.build_form()\n        self.assertFalse(form.is_valid())\n        self.assertEqual(\n            form.errors['quantity'], ['Some reason'])\n\n    def test_skips_availability_policy_for_zero_quantities(self):\n        self.mock_availability_return_value(True)\n        form = self.build_form(quantity=0)\n        self.assertTrue(form.is_valid())\n\n    def test_enforces_max_line_quantity_for_new_product(self):\n        invalid_qty = settings.OSCAR_MAX_BASKET_QUANTITY_THRESHOLD + 1\n        form = self.build_form(quantity=invalid_qty)\n        self.assertFalse(form.is_valid())\n\n    @override_settings(OSCAR_MAX_BASKET_QUANTITY_THRESHOLD=10)\n    def test_enforce_max_line_quantity_for_existing_product(self):\n        self.basket.flush()\n        product = factories.create_product(num_in_stock=20)\n        add_product(self.basket, D('100'), 4, product)\n        self.line = self.basket.all_lines()[0]\n        form = self.build_form(quantity=6)\n        self.assertTrue(form.is_valid())\n        form.save()\n        form = self.build_form(quantity=11)\n        self.assertFalse(form.is_valid())\n\n    def test_line_quantity_max_attribute_per_num_available(self):\n        self.basket.flush()\n        product = factories.create_product(num_in_stock=20)\n        add_product(self.basket, D('100'), 4, product)\n        self.line = self.basket.all_lines()[0]\n        form = self.build_form()\n        self.assertIn('max=\"20\"', str(form['quantity']))\n\n    @override_settings(OSCAR_MAX_BASKET_QUANTITY_THRESHOLD=10)\n    def test_line_quantity_max_attribute_per_basket_threshold(self):\n        self.basket.flush()\n        product = factories.create_product(num_in_stock=20)\n        add_product(self.basket, D('100'), 4, product)\n        self.line = self.basket.all_lines()[0]\n        form = self.build_form()\n        self.assertIn('max=\"6\"', str(form['quantity']))\n\n    def test_basketline_formset_ordering(self):\n        # when we use a unordered queryset in the Basketlineformset, the\n        # discounts will be lost because django will query the database\n        # again to enforce ordered results\n        add_product(self.basket, D('100'), 5)\n        offer = ConditionalOfferFactory(\n            pk=1, condition=self.condition, benefit=self.benefit)\n\n        # now we force an unordered queryset so we can see that our discounts\n        # will disappear due to a new ordering query (see django/forms/model.py)\n        default_line_ordering = Line._meta.ordering\n        Line._meta.ordering = []\n        self.basket._lines = self.basket.lines.all()\n\n        self.applicator.apply_offers(self.basket, [offer])\n        formset = formsets.BasketLineFormSet(\n            strategy=self.basket.strategy,\n            queryset=self.basket.all_lines())\n\n        # the discount is in all_lines():\n        self.assertTrue(self.basket.all_lines()[0].has_discount)\n\n        # but not in the formset\n        self.assertFalse(formset.forms[0].instance.has_discount)\n\n        # Restore the ordering on the line\n        Line._meta.ordering = default_line_ordering\n\n        # clear the cached lines and apply the offer again\n        self.basket._lines = None\n        self.applicator.apply_offers(self.basket, [offer])\n\n        formset = formsets.BasketLineFormSet(\n            strategy=self.basket.strategy,\n            queryset=self.basket.all_lines())\n        self.assertTrue(formset.forms[0].instance.has_discount)\n\n\nclass TestAddToBasketForm(TestCase):\n\n    def test_allows_a_product_quantity_to_be_increased(self):\n        basket = factories.create_basket()\n        product = basket.all_lines()[0].product\n\n        # Add more of the same product\n        data = {'quantity': 1}\n        form = forms.AddToBasketForm(\n            basket=basket, product=product, data=data)\n        self.assertTrue(form.is_valid())\n\n    def test_checks_whether_passed_product_id_matches_a_real_product(self):\n        basket = factories.create_basket()\n        product = basket.all_lines()[0].product\n\n        # Add more of the same product\n        data = {'quantity': -1}\n        form = forms.AddToBasketForm(\n            basket=basket, product=product, data=data)\n        self.assertFalse(form.is_valid())\n\n    def test_checks_if_purchase_is_permitted(self):\n        basket = factories.BasketFactory()\n        product = factories.ProductFactory()\n\n        # Build a 4-level mock monster so we can force the return value of\n        # whether the product is available to buy. This is a serious code smell\n        # and needs to be remedied.\n        info = mock.Mock()\n        info.availability = mock.Mock()\n        info.availability.is_purchase_permitted = mock.Mock(\n            return_value=(False, \"Not on your nelly!\"))\n        basket.strategy.fetch_for_product = mock.Mock(\n            return_value=info)\n\n        data = {'quantity': 1}\n        form = forms.AddToBasketForm(\n            basket=basket, product=product, data=data)\n        self.assertFalse(form.is_valid())\n        self.assertEqual('Not on your nelly!', form.errors['__all__'][0])\n\n    def test_mixed_currency_baskets_are_not_permitted(self):\n        # Ensure basket is one currency\n        basket = mock.Mock()\n        basket.currency = 'GBP'\n        basket.num_items = 1\n\n        # Ensure new product has different currency\n        info = mock.Mock()\n        info.price.currency = 'EUR'\n        basket.strategy.fetch_for_product = mock.Mock(\n            return_value=info)\n\n        product = factories.ProductFactory()\n\n        data = {'quantity': 1}\n        form = forms.AddToBasketForm(\n            basket=basket, product=product, data=data)\n        self.assertFalse(form.is_valid())\n\n    def test_cannot_add_a_product_without_price(self):\n        basket = factories.BasketFactory()\n        product = factories.create_product(price=None)\n\n        data = {'quantity': 1}\n        form = forms.AddToBasketForm(\n            basket=basket, product=product, data=data)\n        self.assertFalse(form.is_valid())\n        self.assertEqual(\n            form.errors['__all__'][0],\n            'This product cannot be added to the basket because a price '\n            'could not be determined for it.',\n        )\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\ndefault_app_config = 'oscar.apps.address.config.AddressConfig'\n",
    "output": "from django.http import HttpResponse\nfrom django.test import TestCase\nfrom django.test.client import RequestFactory\nfrom django.contrib.auth.models import AnonymousUser\n\nfrom oscar.apps.basket import middleware\n\n\nclass TestBasketMiddleware(TestCase):\n\n    @staticmethod\n    def get_response_for_test(request):\n        return HttpResponse()\n\n    def setUp(self):\n        self.middleware = middleware.BasketMiddleware(self.get_response_for_test)\n        self.request = RequestFactory().get('/')\n        self.request.user = AnonymousUser()\n        self.middleware(self.request)\n\n    def test_basket_is_attached_to_request(self):\n        self.assertTrue(hasattr(self.request, 'basket'))\n\n    def test_strategy_is_attached_to_basket(self):\n        self.assertTrue(hasattr(self.request.basket, 'strategy'))\n\n    def test_strategy_is_attached_to_request(self):\n        self.assertTrue(hasattr(self.request, 'strategy'))\n\n    def test_get_cookie_basket_handles_invalid_signatures(self):\n        request_factory = RequestFactory()\n        request_factory.cookies['oscar_open_basket'] = '1:NOTAVALIDHASH'\n        request = request_factory.get('/')\n        request.cookies_to_delete = []\n\n        cookie_basket = self.middleware.get_cookie_basket(\"oscar_open_basket\", request, None)\n\n        self.assertEqual(None, cookie_basket)\n        self.assertIn(\"oscar_open_basket\", request.cookies_to_delete)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\ndefault_app_config = 'oscar.apps.address.config.AddressConfig'\n",
    "output": "# -*- coding: utf-8 -*-\nfrom decimal import Decimal as D\n\nfrom django.test import TestCase\n\nfrom oscar.apps.basket.models import Basket\nfrom oscar.apps.catalogue.models import Option\nfrom oscar.apps.partner import availability, prices, strategy\nfrom oscar.test import factories\nfrom oscar.test.factories import (\n    BasketFactory, BasketLineAttributeFactory, OptionFactory, ProductFactory)\n\n\nclass TestANewBasket(TestCase):\n\n    def setUp(self):\n        self.basket = Basket()\n        self.basket.strategy = strategy.Default()\n\n    def test_has_zero_lines(self):\n        self.assertEqual(0, self.basket.num_lines)\n\n    def test_has_zero_items(self):\n        self.assertEqual(0, self.basket.num_items)\n\n    def test_doesnt_contain_vouchers(self):\n        self.assertFalse(self.basket.contains_a_voucher)\n\n    def test_can_be_edited(self):\n        self.assertTrue(self.basket.can_be_edited)\n\n    def test_is_empty(self):\n        self.assertTrue(self.basket.is_empty)\n\n    def test_is_not_submitted(self):\n        self.assertFalse(self.basket.is_submitted)\n\n    def test_has_no_applied_offers(self):\n        self.assertEqual({}, self.basket.applied_offers())\n\n\nclass TestBasketLine(TestCase):\n\n    def test_description(self):\n        basket = BasketFactory()\n        product = ProductFactory(title=\"A product\")\n        basket.add_product(product)\n\n        line = basket.lines.first()\n        self.assertEqual(line.description, \"A product\")\n\n    def test_description_with_attributes(self):\n        basket = BasketFactory()\n        product = ProductFactory(title=\"A product\")\n        basket.add_product(product)\n\n        line = basket.lines.first()\n        BasketLineAttributeFactory(\n            line=line, value='\\u2603', option__name='with')\n        self.assertEqual(line.description, \"A product (with = '\\u2603')\")\n\n    def test_create_line_reference(self):\n        basket = BasketFactory()\n        product = ProductFactory(title=\"A product\")\n        option = OptionFactory(name=\"product_option\", code=\"product_option\")\n        option_product = ProductFactory(title='Asunci\u00f3n')\n        options = [{'option': option, 'value': option_product}]\n        basket.add_product(product, options=options)\n\n    def test_basket_lines_queryset_is_ordered(self):\n        # This is needed to make sure a formset is not performing the query\n        # again with an order_by clause (losing all calculated discounts)\n        basket = BasketFactory()\n        product = ProductFactory(title=\"A product\")\n        another_product = ProductFactory(title=\"Another product\")\n        basket.add_product(product)\n        basket.add_product(another_product)\n        queryset = basket.all_lines()\n        self.assertTrue(queryset.ordered)\n\n    def test_line_tax_for_zero_tax_strategies(self):\n        basket = Basket()\n        basket.strategy = strategy.Default()\n        product = factories.create_product()\n        # Tax for the default strategy will be 0\n        factories.create_stockrecord(\n            product, price_excl_tax=D('75.00'), num_in_stock=10)\n        basket.add(product, 1)\n\n        self.assertEqual(basket.lines.first().line_tax, D('0'))\n\n    def test_line_tax_for_unknown_tax_strategies(self):\n\n        class UnknownTaxStrategy(strategy.Default):\n            \"\"\" A test strategy where the tax is not known \"\"\"\n\n            def pricing_policy(self, product, stockrecord):\n                return prices.FixedPrice('GBP', stockrecord.price_excl_tax, tax=None)\n\n        basket = Basket()\n        basket.strategy = UnknownTaxStrategy()\n        product = factories.create_product()\n        factories.create_stockrecord(product, num_in_stock=10)\n        basket.add(product, 1)\n\n        self.assertEqual(basket.lines.first().line_tax, None)\n\n\nclass TestAddingAProductToABasket(TestCase):\n\n    def setUp(self):\n        self.basket = Basket()\n        self.basket.strategy = strategy.Default()\n        self.product = factories.create_product()\n        self.record = factories.create_stockrecord(\n            currency='GBP',\n            product=self.product, price_excl_tax=D('10.00'))\n        self.purchase_info = factories.create_purchase_info(self.record)\n        self.basket.add(self.product)\n\n    def test_creates_a_line(self):\n        self.assertEqual(1, self.basket.num_lines)\n\n    def test_sets_line_prices(self):\n        line = self.basket.lines.all()[0]\n        self.assertEqual(line.price_incl_tax, self.purchase_info.price.incl_tax)\n        self.assertEqual(line.price_excl_tax, self.purchase_info.price.excl_tax)\n\n    def test_adding_negative_quantity(self):\n        self.assertEqual(1, self.basket.num_lines)\n        self.basket.add(self.product, quantity=4)\n        self.assertEqual(5, self.basket.line_quantity(self.product, self.record))\n        self.basket.add(self.product, quantity=-10)\n        self.assertEqual(0, self.basket.line_quantity(self.product, self.record))\n\n    def test_means_another_currency_product_cannot_be_added(self):\n        product = factories.create_product()\n        factories.create_stockrecord(\n            currency='USD', product=product, price_excl_tax=D('20.00'))\n        with self.assertRaises(ValueError):\n            self.basket.add(product)\n\n    def test_cannot_add_a_product_without_price(self):\n        product = factories.create_product(price=None)\n        with self.assertRaises(ValueError):\n            self.basket.add(product)\n\n\nclass TestANonEmptyBasket(TestCase):\n\n    def setUp(self):\n        self.basket = Basket()\n        self.basket.strategy = strategy.Default()\n        self.product = factories.create_product()\n        self.record = factories.create_stockrecord(\n            self.product, price_excl_tax=D('10.00'))\n        self.purchase_info = factories.create_purchase_info(self.record)\n        self.basket.add(self.product, 10)\n\n    def test_can_be_flushed(self):\n        self.basket.flush()\n        self.assertEqual(self.basket.num_items, 0)\n\n    def test_returns_correct_product_quantity(self):\n        self.assertEqual(10, self.basket.product_quantity(\n            self.product))\n\n    def test_returns_correct_line_quantity_for_existing_product_and_stockrecord(self):\n        self.assertEqual(10, self.basket.line_quantity(\n            self.product, self.record))\n\n    def test_returns_zero_line_quantity_for_alternative_stockrecord(self):\n        record = factories.create_stockrecord(\n            self.product, price_excl_tax=D('5.00'))\n        self.assertEqual(0, self.basket.line_quantity(\n            self.product, record))\n\n    def test_returns_zero_line_quantity_for_missing_product_and_stockrecord(self):\n        product = factories.create_product()\n        record = factories.create_stockrecord(\n            product, price_excl_tax=D('5.00'))\n        self.assertEqual(0, self.basket.line_quantity(\n            product, record))\n\n    def test_returns_correct_quantity_for_existing_product_and_stockrecord_and_options(self):\n        product = factories.create_product()\n        record = factories.create_stockrecord(\n            product, price_excl_tax=D('5.00'))\n        option = Option.objects.create(name=\"Message\")\n        options = [{\"option\": option, \"value\": \"2\"}]\n\n        self.basket.add(product, options=options)\n        self.assertEqual(0, self.basket.line_quantity(\n            product, record))\n        self.assertEqual(1, self.basket.line_quantity(\n            product, record, options))\n\n    def test_total_sums_product_totals(self):\n        product = factories.create_product()\n        factories.create_stockrecord(\n            product, price_excl_tax=D('5.00'))\n        self.basket.add(product, 1)\n        self.assertEqual(self.basket.total_excl_tax, 105)\n\n    def test_totals_for_free_products(self):\n        basket = Basket()\n        basket.strategy = strategy.Default()\n        # Add a zero-priced product to the basket\n        product = factories.create_product()\n        factories.create_stockrecord(\n            product, price_excl_tax=D('0.00'), num_in_stock=10)\n        basket.add(product, 1)\n\n        self.assertEqual(basket.lines.count(), 1)\n        self.assertEqual(basket.total_excl_tax, 0)\n        self.assertEqual(basket.total_incl_tax, 0)\n\n    def test_basket_prices_calculation_for_unavailable_pricing(self):\n        new_product = factories.create_product()\n        factories.create_stockrecord(\n            new_product, price_excl_tax=D('5.00'))\n        self.basket.add(new_product, 1)\n\n        class UnavailableProductStrategy(strategy.Default):\n            \"\"\" A test strategy that makes a specific product unavailable \"\"\"\n\n            def availability_policy(self, product, stockrecord):\n                if product == new_product:\n                    return availability.Unavailable()\n                return super().availability_policy(product, stockrecord)\n\n            def pricing_policy(self, product, stockrecord):\n                if product == new_product:\n                    return prices.Unavailable()\n                return super().pricing_policy(product, stockrecord)\n\n        self.basket.strategy = UnavailableProductStrategy()\n        line = self.basket.all_lines()[1]\n        self.assertEqual(line.get_warning(), \"'D\\xf9\\uff4d\\u03fb\\u03d2 title' is no longer available\")\n        self.assertIsNone(line.line_price_excl_tax)\n        self.assertIsNone(line.line_price_incl_tax)\n        self.assertIsNone(line.line_price_excl_tax_incl_discounts)\n        self.assertIsNone(line.line_price_incl_tax_incl_discounts)\n        self.assertIsNone(line.line_tax)\n        self.assertEqual(self.basket.total_excl_tax, 100)\n        self.assertEqual(self.basket.total_incl_tax, 100)\n        self.assertEqual(self.basket.total_excl_tax_excl_discounts, 100)\n        self.assertEqual(self.basket.total_incl_tax_excl_discounts, 100)\n\n    def test_max_allowed_quantity(self):\n        self.basket.add_product(self.product, quantity=3)\n\n        # max allowed here is 7 (20-10+3)\n        with self.settings(OSCAR_MAX_BASKET_QUANTITY_THRESHOLD=20):\n            max_allowed, basket_threshold = self.basket.max_allowed_quantity()\n            self.assertEqual(max_allowed, 7)\n            self.assertEqual(basket_threshold, 20)\n\n        # but we can also completely disable the threshold\n        with self.settings(OSCAR_MAX_BASKET_QUANTITY_THRESHOLD=None):\n            max_allowed, basket_threshold = self.basket.max_allowed_quantity()\n            self.assertEqual(max_allowed, None)\n            self.assertEqual(basket_threshold, None)\n\n    def test_is_quantity_allowed(self):\n        with self.settings(OSCAR_MAX_BASKET_QUANTITY_THRESHOLD=20):\n            # 7 or below is possible\n            allowed, message = self.basket.is_quantity_allowed(qty=7)\n            self.assertTrue(allowed)\n            self.assertIsNone(message)\n            # but above it's not\n            allowed, message = self.basket.is_quantity_allowed(qty=11)\n            self.assertFalse(allowed)\n            self.assertIsNotNone(message)\n\n        with self.settings(OSCAR_MAX_BASKET_QUANTITY_THRESHOLD=None):\n            # with the treshold disabled all quantities are possible\n            allowed, message = self.basket.is_quantity_allowed(qty=7)\n            self.assertTrue(allowed)\n            self.assertIsNone(message)\n            allowed, message = self.basket.is_quantity_allowed(qty=5000)\n            self.assertTrue(allowed)\n            self.assertIsNone(message)\n\n\nclass TestMergingTwoBaskets(TestCase):\n\n    def setUp(self):\n        self.product = factories.create_product()\n        self.record = factories.create_stockrecord(\n            self.product, price_excl_tax=D('10.00'))\n        self.purchase_info = factories.create_purchase_info(self.record)\n\n        self.main_basket = Basket()\n        self.main_basket.strategy = strategy.Default()\n        self.main_basket.add(self.product, quantity=2)\n\n        self.merge_basket = Basket()\n        self.merge_basket.strategy = strategy.Default()\n        self.merge_basket.add(self.product, quantity=1)\n\n        self.main_basket.merge(self.merge_basket)\n\n    def test_doesnt_sum_quantities(self):\n        self.assertEqual(1, self.main_basket.num_lines)\n\n    def test_changes_status_of_merge_basket(self):\n        self.assertEqual(Basket.MERGED, self.merge_basket.status)\n\n\nclass TestASubmittedBasket(TestCase):\n\n    def setUp(self):\n        self.basket = Basket()\n        self.basket.strategy = strategy.Default()\n        self.basket.submit()\n\n    def test_has_correct_status(self):\n        self.assertTrue(self.basket.is_submitted)\n\n    def test_can_be_edited(self):\n        self.assertFalse(self.basket.can_be_edited)\n\n\nclass TestMergingAVoucherBasket(TestCase):\n\n    def test_transfers_vouchers_to_new_basket(self):\n        baskets = [factories.BasketFactory(), factories.BasketFactory()]\n        voucher = factories.VoucherFactory()\n        baskets[0].vouchers.add(voucher)\n        baskets[1].merge(baskets[0])\n\n        self.assertEqual(1, baskets[1].vouchers.all().count())\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\ndefault_app_config = 'oscar.apps.address.config.AddressConfig'\n",
    "output": "import datetime\n\nfrom django.test import TestCase\n\nfrom oscar.apps.basket.reports import (\n    OpenBasketReportGenerator, SubmittedBasketReportGenerator)\n\n\nclass TestBasketReports(TestCase):\n\n    def test_open_report_doesnt_error(self):\n        data = {\n            'start_date': datetime.date(2012, 5, 1),\n            'end_date': datetime.date(2012, 5, 17),\n            'formatter': 'CSV'\n        }\n        generator = OpenBasketReportGenerator(**data)\n        generator.generate()\n\n    def test_submitted_report_doesnt_error(self):\n        data = {\n            'start_date': datetime.date(2012, 5, 1),\n            'end_date': datetime.date(2012, 5, 17),\n            'formatter': 'CSV'\n        }\n        generator = SubmittedBasketReportGenerator(**data)\n        generator.generate()\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\ndefault_app_config = 'oscar.apps.address.config.AddressConfig'\n",
    "output": "\nimport pytest\nfrom oscar.test.factories import (\n    BasketFactory, ConditionalOfferFactory, ProductFactory)\n\n\n@pytest.fixture\ndef filled_basket():\n    basket = BasketFactory()\n    product1 = ProductFactory()\n    product2 = ProductFactory()\n    basket.add_product(product1, quantity=10)\n    basket.add_product(product2, quantity=20)\n    return basket\n\n\n@pytest.mark.django_db\nclass TestLineOfferConsumer(object):\n\n    def test_consumed_no_offer(self, filled_basket):\n        for line in filled_basket.all_lines():\n            assert line.consumer.consumed() == 0\n\n    def test_consumed_with_offer(self, filled_basket):\n        offer1 = ConditionalOfferFactory(name='offer1')\n        offer2 = ConditionalOfferFactory(name='offer2')\n        offer1.exclusive = False\n        offer2.exclusive = False\n\n        for line in filled_basket.all_lines():\n            assert line.consumer.consumed(offer1) == 0\n            assert line.consumer.consumed(offer2) == 0\n\n        line1 = filled_basket.all_lines()[0]\n        line2 = filled_basket.all_lines()[1]\n\n        line1.consumer.consume(1, offer1)\n        assert line1.consumer.consumed() == 1\n        assert line1.consumer.consumed(offer1) == 1\n        assert line1.consumer.consumed(offer2) == 0\n\n        line1.consumer.consume(9, offer1)\n        assert line1.consumer.consumed() == line1.quantity\n        assert line1.consumer.consumed(offer1) == line1.quantity\n        assert line1.consumer.consumed(offer2) == 0\n\n        line1.consumer.consume(99, offer1)\n        assert line1.consumer.consumed(offer1) == line1.quantity\n        assert line1.consumer.consumed(offer2) == 0\n\n        line1.consumer.consume(1, offer2)\n        line2.consumer.consume(1, offer2)\n\n        assert line1.consumer.consumed(offer2) == 1\n        assert line2.consumer.consumed(offer2) == 1\n\n    def test_consume(self, filled_basket):\n        line = filled_basket.all_lines()[0]\n        line.consume(1)\n        assert line.quantity_with_discount == 1\n        line.consume(99)\n        assert line.quantity_with_discount == 10\n\n    def test_consumed_with_exclusive_offer(self, filled_basket):\n        offer1 = ConditionalOfferFactory(name='offer1')\n        offer2 = ConditionalOfferFactory(name='offer2')\n        offer3 = ConditionalOfferFactory(name='offer3')\n        offer1.exclusive = True\n        offer2.exclusive = False\n        offer3.exclusive = False\n\n        for line in filled_basket.all_lines():\n            assert line.consumer.consumed(offer1) == 0\n            assert line.consumer.consumed(offer2) == 0\n\n        line1 = filled_basket.all_lines()[0]\n        line2 = filled_basket.all_lines()[1]\n\n        line1.consumer.consume(1, offer1)\n        assert line1.is_available_for_offer_discount(offer2) is True\n\n        line1.consumer.consume(99, offer1)\n        assert line1.is_available_for_offer_discount(offer2) is False\n\n        line2.consumer.consume(1, offer2)\n        assert line2.is_available_for_offer_discount(offer1) is True\n\n        line2.consumer.consume(99, offer2)\n        assert line2.is_available_for_offer_discount(offer1) is False\n        assert line2.is_available_for_offer_discount(offer3) is True\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\ndefault_app_config = 'oscar.apps.address.config.AddressConfig'\n",
    "output": "from django.contrib.messages import get_messages\nfrom django.test import TestCase\nfrom django.urls import reverse\n\nfrom oscar.apps.basket import views\nfrom oscar.test import factories\nfrom tests.fixtures import RequestFactory\n\n\nclass TestVoucherAddView(TestCase):\n    def test_get(self):\n        request = RequestFactory().get('/')\n\n        view = views.VoucherAddView.as_view()\n        response = view(request)\n\n        self.assertEqual(response.status_code, 302)\n\n    def _get_voucher_message(self, request):\n        return '\\n'.join(str(m.message) for m in get_messages(request))\n\n    def test_post_valid(self):\n        voucher = factories.VoucherFactory()\n        self.assertTrue(voucher.is_active())\n\n        data = {\n            'code': voucher.code\n        }\n        request = RequestFactory().post('/', data=data)\n        request.basket.save()\n\n        view = views.VoucherAddView.as_view()\n        response = view(request)\n        self.assertEqual(response.status_code, 302)\n\n        voucher = voucher.__class__.objects.get(pk=voucher.pk)\n        self.assertEqual(voucher.num_basket_additions, 1, msg=self._get_voucher_message(request))\n\n    def test_post_valid_from_set(self):\n        voucherset = factories.VoucherSetFactory()\n        voucher = voucherset.vouchers.first()\n\n        self.assertTrue(voucher.is_active())\n\n        data = {\n            'code': voucher.code\n        }\n        request = RequestFactory().post('/', data=data)\n        request.basket.save()\n\n        view = views.VoucherAddView.as_view()\n        response = view(request)\n        self.assertEqual(response.status_code, 302)\n\n        voucher = voucher.__class__.objects.get(pk=voucher.pk)\n        self.assertEqual(voucher.num_basket_additions, 1, msg=self._get_voucher_message(request))\n\n        self.assertEqual(voucherset.num_basket_additions, 1)\n\n\nclass TestVoucherRemoveView(TestCase):\n    def test_post_valid(self):\n        voucher = factories.VoucherFactory(num_basket_additions=5)\n\n        data = {\n            'code': voucher.code\n        }\n        request = RequestFactory().post('/', data=data)\n        request.basket.save()\n        request.basket.vouchers.add(voucher)\n\n        view = views.VoucherRemoveView.as_view()\n        response = view(request, pk=voucher.pk)\n        self.assertEqual(response.status_code, 302)\n\n        voucher = voucher.__class__.objects.get(pk=voucher.pk)\n        self.assertEqual(voucher.num_basket_additions, 4)\n\n    def test_post_with_missing_voucher(self):\n        \"\"\" If the voucher is missing, verify the view queues a message and redirects. \"\"\"\n        pk = '12345'\n        view = views.VoucherRemoveView.as_view()\n        request = RequestFactory().post('/')\n        request.basket.save()\n        response = view(request, pk=pk)\n\n        self.assertEqual(response.status_code, 302)\n\n        actual = list(get_messages(request))[-1].message\n        expected = \"No voucher found with id '{}'\".format(pk)\n        self.assertEqual(actual, expected)\n\n\nclass TestBasketSummaryView(TestCase):\n    def setUp(self):\n        self.url = reverse('basket:summary')\n        self.country = factories.CountryFactory()\n        self.user = factories.UserFactory()\n\n    def test_default_shipping_address(self):\n        user_address = factories.UserAddressFactory(\n            country=self.country, user=self.user, is_default_for_shipping=True\n        )\n        request = RequestFactory().get(self.url, user=self.user)\n        view = views.BasketView(request=request)\n        self.assertEquals(view.get_default_shipping_address(), user_address)\n\n    def test_default_shipping_address_for_anonymous_user(self):\n        request = RequestFactory().get(self.url)\n        view = views.BasketView(request=request)\n        self.assertIsNone(view.get_default_shipping_address())\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\ndefault_app_config = 'oscar.apps.address.config.AddressConfig'\n",
    "output": ""
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\ndefault_app_config = 'oscar.apps.address.config.AddressConfig'\n",
    "output": "from decimal import Decimal as D\nfrom unittest import mock\n\nfrom django.test import TestCase\n\nfrom oscar.apps.checkout import calculators\nfrom oscar.core import prices\n\n\nclass TestOrderTotalCalculator(TestCase):\n\n    def setUp(self):\n        self.calculator = calculators.OrderTotalCalculator()\n\n    def test_returns_correct_totals_when_tax_is_not_known(self):\n        basket = mock.Mock()\n        basket.total_excl_tax = D('10.00')\n        basket.is_tax_known = False\n\n        shipping_charge = prices.Price(\n            currency=basket.currency, excl_tax=D('5.00'))\n\n        total = self.calculator.calculate(basket, shipping_charge)\n\n        self.assertIsInstance(total, prices.Price)\n        self.assertEqual(D('10.00') + D('5.00'), total.excl_tax)\n        self.assertFalse(total.is_tax_known)\n\n    def test_returns_correct_totals_when_tax_is_known(self):\n        basket = mock.Mock()\n        basket.total_excl_tax = D('10.00')\n        basket.total_incl_tax = D('12.00')\n        basket.is_tax_known = True\n\n        shipping_charge = prices.Price(\n            currency=basket.currency, excl_tax=D('5.00'),\n            tax=D('0.50'))\n\n        total = self.calculator.calculate(basket, shipping_charge)\n\n        self.assertIsInstance(total, prices.Price)\n        self.assertEqual(D('10.00') + D('5.00'), total.excl_tax)\n        self.assertTrue(total.is_tax_known)\n        self.assertEqual(D('12.00') + D('5.50'), total.incl_tax)\n        self.assertEqual(D('2.00') + D('0.50'), total.tax)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\ndefault_app_config = 'oscar.apps.address.config.AddressConfig'\n",
    "output": "# coding=utf-8\nfrom django.test import TestCase\nfrom django.test.utils import override_settings\n\nfrom oscar.apps.address.models import Country\nfrom oscar.apps.checkout.forms import ShippingAddressForm\nfrom oscar.test.factories import CountryFactory\n\n\nclass AnotherShippingAddressForm(ShippingAddressForm):\n    phone_number_fields = {\n        'phone_number': {\n            'required': False,\n            'help_text': '',\n            'max_length': 32,\n            'label': 'Phone number'\n        },\n        'another_phone_number': {\n            'required': False,\n            'help_text': 'Another phone number help text',\n            'max_length': 32,\n            'label': 'Another phone number'\n        },\n    }\n\n\nclass TestShippingAddressForm(TestCase):\n    minimal_data = {\n        'first_name': 'B\u00e4rry',\n        'last_name': 'Chuckle',\n        'line1': '1 King St',\n        'line4': 'Goth\u00e1m',\n        'postcode': 'N1 7RR'\n    }\n\n    def setUp(self):\n        CountryFactory(iso_3166_1_a2='GB', is_shipping_country=True)\n\n    def test_removes_country_field(self):\n        self.assertTrue('country' not in ShippingAddressForm().fields)\n\n    def test_keeps_country_field(self):\n        CountryFactory(iso_3166_1_a2='DE', is_shipping_country=True)\n        self.assertTrue('country' in ShippingAddressForm().fields)\n\n    @override_settings(OSCAR_REQUIRED_ADDRESS_FIELDS=('last_name', 'postcode'))\n    def test_required_fields_validated(self):\n        form = ShippingAddressForm()\n        self.assertTrue(form.fields['last_name'].required)\n        self.assertTrue(form.fields['postcode'].required)\n        self.assertFalse(form.fields['first_name'].required)\n        self.assertFalse(form.fields['line2'].required)\n        self.assertFalse(form.fields['line3'].required)\n        self.assertFalse(form.fields['line4'].required)\n\n    @override_settings(OSCAR_REQUIRED_ADDRESS_FIELDS=('phone_number',))\n    def test_required_phone_number_validated(self):\n        # This needs a separate test because of the logic in PhoneNumberMixin\n        form = ShippingAddressForm()\n        self.assertTrue(form.fields['phone_number'].required)\n\n    # Tests where the country field is hidden\n\n    def test_is_valid_without_phone_number(self):\n        self.assertTrue(ShippingAddressForm(self.minimal_data).is_valid())\n\n    def test_only_accepts_british_local_phone_number(self):\n        data = self.minimal_data.copy()\n        data['phone_number'] = '07 914721389'  # local UK number\n        self.assertTrue(ShippingAddressForm(data).is_valid())\n\n        data['phone_number'] = '0176 968 426 71'  # local German number\n        self.assertFalse(ShippingAddressForm(data).is_valid())\n\n    def test_only_accepts_british_local_phone_numbers(self):\n        data = self.minimal_data.copy()\n        # Both numbers are British local numbers\n        data['phone_number'] = '07 914721389'\n        data['another_phone_number'] = '0344493 0787'  # British Airways\n        self.assertTrue(AnotherShippingAddressForm(data).is_valid())\n\n        # Both numbers are local German numbers\n        data['phone_number'] = '0176 968 426 71'\n        data['another_phone_number'] = '07032 15 49225'  # IBM Germany\n        self.assertFalse(AnotherShippingAddressForm(data).is_valid())\n\n        # One number is British number, another is German number\n        data['phone_number'] = '07 914721389'\n        data['another_phone_number'] = '0176 968 426 71'\n        self.assertFalse(AnotherShippingAddressForm(data).is_valid())\n\n        # As previous case, but numbers are reversed\n        data['phone_number'] = '0176 968 426 71'\n        data['another_phone_number'] = '07 914721389'\n        self.assertFalse(AnotherShippingAddressForm(data).is_valid())\n\n    def test_is_valid_with_international_phone_number(self):\n        data = self.minimal_data.copy()\n        data['phone_number'] = '+49 176 968426 71'\n        form = ShippingAddressForm(data)\n        self.assertTrue(form.is_valid())\n\n    def test_is_valid_with_international_phone_numbers(self):\n        data = self.minimal_data.copy()\n        data['phone_number'] = '+49 176 968426 71'\n        data['another_phone_number'] = '+49-1805-426452'\n        form = AnotherShippingAddressForm(data)\n        self.assertTrue(form.is_valid())\n\n    # Tests where the country field exists\n\n    def test_needs_country_data(self):\n        CountryFactory(iso_3166_1_a2='DE', is_shipping_country=True)\n\n        self.assertFalse(ShippingAddressForm(self.minimal_data).is_valid())\n\n        data = self.minimal_data.copy()\n        data['country'] = Country.objects.get(iso_3166_1_a2='GB').pk\n        self.assertTrue(ShippingAddressForm(data).is_valid())\n\n    def test_only_accepts_local_phone_number_when_country_matches(self):\n        CountryFactory(iso_3166_1_a2='DE', is_shipping_country=True)\n\n        data = self.minimal_data.copy()\n        data['phone_number'] = '07 914721389'  # local UK number\n\n        data['country'] = Country.objects.get(iso_3166_1_a2='DE').pk\n        self.assertFalse(ShippingAddressForm(data).is_valid())\n\n        data['country'] = Country.objects.get(iso_3166_1_a2='GB').pk\n        self.assertTrue(ShippingAddressForm(data).is_valid())\n\n    def test_only_accepts_local_phone_numbers_when_country_matches(self):\n        CountryFactory(iso_3166_1_a2='DE', is_shipping_country=True)\n        data = self.minimal_data.copy()\n        # Local UK numbers\n        data['phone_number'] = '07 914721389'\n        data['another_phone_number'] = '0344493 0787'\n\n        data['country'] = Country.objects.get(iso_3166_1_a2='DE').pk\n        self.assertFalse(ShippingAddressForm(data).is_valid())\n\n        data['country'] = Country.objects.get(iso_3166_1_a2='GB').pk\n        self.assertTrue(ShippingAddressForm(data).is_valid())\n\n    @override_settings(OSCAR_REQUIRED_ADDRESS_FIELDS=('phone_number',))\n    def test_local_phone_number_invalid_without_country(self):\n        # Add another country, so we have two.\n        CountryFactory(iso_3166_1_a2='DE', is_shipping_country=True)\n        data = self.minimal_data.copy()\n        data['phone_number'] = '07 914721389'\n        # User hasn't selected a country. Because there are multiple country\n        # choices we should not accept the local number.\n        form = ShippingAddressForm(data)\n        self.assertFalse(form.is_valid())\n        self.assertIn('phone_number', form.errors)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\ndefault_app_config = 'oscar.apps.address.config.AddressConfig'\n",
    "output": "from decimal import Decimal as D\nfrom unittest import mock\n\nfrom django.http import HttpRequest\nfrom django.test import TestCase\nfrom django.test.utils import override_settings\n\nfrom oscar.apps.checkout.calculators import OrderTotalCalculator\nfrom oscar.apps.checkout.mixins import CheckoutSessionMixin, OrderPlacementMixin\nfrom oscar.apps.checkout.exceptions import FailedPreCondition\nfrom oscar.core.loading import get_model\nfrom oscar.test import factories\nfrom oscar.test.basket import add_product\nfrom oscar.test.utils import RequestFactory\nfrom oscar.apps.shipping.methods import FixedPrice, Free\n\n\nOrder = get_model('order', 'Order')\n\n\nclass TestOrderPlacementMixin(TestCase):\n\n    def test_returns_none_when_no_shipping_address_passed_to_creation_method(self):\n        address = OrderPlacementMixin().create_shipping_address(\n            user=mock.Mock(), shipping_address=None)\n        self.assertEqual(address, None)\n\n    def test_update_address_book(self):\n        basket = factories.create_basket(empty=True)\n        user = factories.UserFactory()\n        add_product(basket, D('12.00'))\n        shipping_method = FixedPrice(D('5.00'), D('5.00'))\n\n        billing_address = factories.BillingAddressFactory(line1='1 Boardwalk Place',\n                                                          line2='Trafalgar Way',\n                                                          line3='Tower Hamlets',\n                                                          line4='London')\n        shipping_address = factories.ShippingAddressFactory(line1='Knightsbridge',\n                                                            line2='159',\n                                                            line4='London')\n        shipping_charge = shipping_method.calculate(basket)\n        order_total = OrderTotalCalculator().calculate(basket, shipping_charge)\n\n        order_submission_data = {'user': user,\n                                 'order_number': '12345',\n                                 'basket': basket,\n                                 'shipping_address': shipping_address,\n                                 'shipping_method': shipping_method,\n                                 'shipping_charge': shipping_charge,\n                                 'billing_address': billing_address,\n                                 'order_total': order_total}\n        OrderPlacementMixin().place_order(**order_submission_data)\n\n        self.assertEqual(user.addresses.filter(hash=billing_address.generate_hash()).count(), 1)\n        self.assertEqual(user.addresses.filter(hash=shipping_address.generate_hash()).count(), 1)\n\n        user_billing_address = user.addresses.get(hash=billing_address.generate_hash())\n        user_shipping_address = user.addresses.get(hash=shipping_address.generate_hash())\n        self.assertEqual(user_billing_address.num_orders_as_billing_address, 1)\n        self.assertEqual(user_shipping_address.num_orders_as_shipping_address, 1)\n\n        order_submission_data['order_number'] = '12346'\n\n        OrderPlacementMixin().place_order(**order_submission_data)\n\n        user_billing_address = user.addresses.get(hash=billing_address.generate_hash())\n        user_shipping_address = user.addresses.get(hash=shipping_address.generate_hash())\n        self.assertEqual(user_billing_address.num_orders_as_billing_address, 2)\n        self.assertEqual(user_shipping_address.num_orders_as_shipping_address, 2)\n\n        order_submission_data.pop('billing_address', None)\n        order_submission_data['order_number'] = '123457'\n        OrderPlacementMixin().place_order(**order_submission_data)\n\n        user_billing_address = user.addresses.get(hash=billing_address.generate_hash())\n        user_shipping_address = user.addresses.get(hash=shipping_address.generate_hash())\n        self.assertEqual(user_billing_address.num_orders_as_billing_address, 2)\n        self.assertEqual(user_shipping_address.num_orders_as_shipping_address, 3)\n\n        shipping_address.line2 = '160'\n        order_submission_data['billing_address'] = billing_address\n        order_submission_data['order_number'] = '123458'\n        OrderPlacementMixin().place_order(**order_submission_data)\n\n        user_billing_address = user.addresses.get(hash=billing_address.generate_hash())\n        user_shipping_address = user.addresses.get(hash=shipping_address.generate_hash())\n        self.assertEqual(user_billing_address.num_orders_as_billing_address, 3)\n        self.assertEqual(user_shipping_address.num_orders_as_shipping_address, 1)\n\n    @override_settings(SITE_ID='')\n    def test_multi_site(self):\n        basket = factories.create_basket(empty=True)\n        site1 = factories.SiteFactory()\n        site2 = factories.SiteFactory()\n        request = HttpRequest()\n        request.META['SERVER_PORT'] = 80\n        request.META['SERVER_NAME'] = site1.domain\n        user = factories.UserFactory()\n        add_product(basket, D('12.00'))\n        shipping_method = Free()\n        shipping_charge = shipping_method.calculate(basket)\n        order_total = OrderTotalCalculator().calculate(basket, shipping_charge)\n\n        billing_address = factories.BillingAddressFactory()\n        shipping_address = factories.ShippingAddressFactory()\n        order_submission_data = {'user': user,\n                                 'order_number': '12345',\n                                 'basket': basket,\n                                 'shipping_method': shipping_method,\n                                 'shipping_charge': shipping_charge,\n                                 'order_total': order_total,\n                                 'billing_address': billing_address,\n                                 'shipping_address': shipping_address,\n                                 'request': request}\n        OrderPlacementMixin().place_order(**order_submission_data)\n        order1 = Order.objects.get(number='12345')\n        self.assertEqual(order1.site, site1)\n\n        add_product(basket, D('12.00'))\n        request.META['SERVER_NAME'] = site2.domain\n        order_submission_data['order_number'] = '12346'\n        order_submission_data['request'] = request\n        OrderPlacementMixin().place_order(**order_submission_data)\n        order2 = Order.objects.get(number='12346')\n        self.assertEqual(order2.site, site2)\n\n    def test_multiple_payment_events(self):\n        basket = factories.create_basket(empty=True)\n        user = factories.UserFactory()\n        add_product(basket, D('100.00'))\n        order_placement = OrderPlacementMixin()\n        order_placement.add_payment_event('Gift Card Payment', D('10'))\n        order_placement.add_payment_event('Credit Card Payment', D('90'))\n        shipping_method = Free()\n        shipping_charge = shipping_method.calculate(basket)\n        order_total = OrderTotalCalculator().calculate(basket, shipping_charge)\n\n        billing_address = factories.BillingAddressFactory()\n        shipping_address = factories.ShippingAddressFactory()\n        order_submission_data = {'user': user,\n                                 'order_number': '12345',\n                                 'basket': basket,\n                                 'shipping_method': shipping_method,\n                                 'shipping_charge': shipping_charge,\n                                 'order_total': order_total,\n                                 'billing_address': billing_address,\n                                 'shipping_address': shipping_address}\n        order_placement.place_order(**order_submission_data)\n        order1 = Order.objects.get(number='12345')\n        self.assertEqual(order1.payment_events.count(), 2)\n        event1 = order1.payment_events.all()[0]\n        event2 = order1.payment_events.all()[1]\n        self.assertEqual(event1.event_type.name, 'Credit Card Payment')\n        self.assertEqual(event1.amount, D('90'))\n        self.assertEqual(event1.lines.count(), 1)\n        self.assertEqual(event2.event_type.name, 'Gift Card Payment')\n        self.assertEqual(event2.amount, D('10'))\n        self.assertEqual(event2.lines.count(), 1)\n\n\nclass TestCheckoutSessionMixin(TestCase):\n\n    def setUp(self):\n        self.request = RequestFactory().get('/')\n        self.product = factories.create_product(num_in_stock=10)\n        self.stock_record = self.product.stockrecords.first()\n\n    def add_product_to_basket(self, product, quantity=1):\n        self.request.basket.add_product(product, quantity=quantity)\n        self.assertEqual(len(self.request.basket.all_lines()), 1)\n        self.assertEqual(self.request.basket.all_lines()[0].product, product)\n\n    def test_check_basket_is_valid_no_stock_available(self):\n        self.add_product_to_basket(self.product)\n        CheckoutSessionMixin().check_basket_is_valid(self.request)\n        self.stock_record.allocate(10)\n        self.stock_record.save()\n        with self.assertRaises(FailedPreCondition):\n            CheckoutSessionMixin().check_basket_is_valid(self.request)\n\n    def test_check_basket_is_valid_stock_exceeded(self):\n        self.add_product_to_basket(self.product)\n        CheckoutSessionMixin().check_basket_is_valid(self.request)\n        self.request.basket.add_product(self.product, quantity=11)\n        with self.assertRaises(FailedPreCondition):\n            CheckoutSessionMixin().check_basket_is_valid(self.request)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\ndefault_app_config = 'oscar.apps.address.config.AddressConfig'\n",
    "output": "from unittest import mock\n\nfrom django.test import TestCase\nfrom django.test.client import RequestFactory\nfrom django.contrib.sessions.middleware import SessionMiddleware\n\nfrom oscar.apps.checkout.utils import CheckoutSessionData\n\n\nclass TestCheckoutSession(TestCase):\n    \"\"\"\n    oscar.apps.checkout.utils.CheckoutSessionData\n    \"\"\"\n\n    def setUp(self):\n        request = RequestFactory().get('/')\n        SessionMiddleware().process_request(request)\n        self.session_data = CheckoutSessionData(request)\n\n    def test_allows_data_to_be_written_and_read_out(self):\n        self.session_data._set('namespace', 'key', 'value')\n        self.assertEqual('value', self.session_data._get('namespace', 'key'))\n\n    def test_allows_set_data_can_be_unset(self):\n        self.session_data._set('namespace', 'key', 'value')\n        self.session_data._unset('namespace', 'key')\n        self.assertIsNone(self.session_data._get('namespace', 'key'))\n\n    def test_stores_guest_email(self):\n        self.session_data.set_guest_email('a@a.com')\n        self.assertEqual('a@a.com', self.session_data.get_guest_email())\n\n    def test_allows_a_namespace_to_be_flushed(self):\n        self.session_data._set('ns', 'a', 1)\n        self.session_data._set('ns', 'b', 2)\n        self.session_data._flush_namespace('ns')\n        self.assertIsNone(self.session_data._get('ns', 'a'))\n        self.assertIsNone(self.session_data._get('ns', 'b'))\n\n    def test_allows_bill_to_user_address(self):\n        address = mock.Mock()\n        address.id = 1\n        self.session_data.bill_to_user_address(address)\n        self.assertEqual(1, self.session_data.billing_user_address_id())\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\ndefault_app_config = 'oscar.apps.address.config.AddressConfig'\n",
    "output": "from django.test import TestCase\nfrom django.test.utils import override_settings\nfrom django.urls import reverse\n\nfrom oscar.test.factories import OrderFactory\n\n\nclass ThankYouViewTestCase(TestCase):\n\n    @override_settings(OSCAR_ALLOW_ANON_CHECKOUT=True)\n    def test_analytics_event_triggered_only_on_first_view(self):\n        order = OrderFactory()\n        session = self.client.session\n        # Put the order ID in the session, mimicking a completed order,\n        # so that we can reach the thank you page.\n        session['checkout_order_id'] = order.pk\n        session.save()\n\n        r1 = self.client.get(reverse('checkout:thank-you'), follow=True)\n        self.assertTrue(r1.context['send_analytics_event'])\n\n        # Request the view a second time\n        r2 = self.client.get(reverse('checkout:thank-you'), follow=True)\n        self.assertFalse(r2.context['send_analytics_event'])\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\ndefault_app_config = 'oscar.apps.address.config.AddressConfig'\n",
    "output": ""
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\ndefault_app_config = 'oscar.apps.address.config.AddressConfig'\n",
    "output": "# coding=utf-8\n\"\"\"\nAutoSlugField taken from django-extensions at\n15d3eb305957cee4768dd86e44df1bdad341a10e\nUses Oscar's slugify function instead of Django's\n\nCopyright (c) 2007 Michael Trier\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\"\"\nfrom django.db import models\nfrom django.test import TestCase\nfrom django.test.utils import override_settings\n\nfrom oscar.core.loading import get_model\n\nSluggedTestModel = get_model('model_tests_app', 'sluggedtestmodel')\nChildSluggedTestModel = get_model('model_tests_app', 'childsluggedtestmodel')\nCustomSluggedTestModel = get_model('model_tests_app', 'CustomSluggedTestModel')\n\n\nclass AutoSlugFieldTest(TestCase):\n    def tearDown(self):\n        super().tearDown()\n\n        SluggedTestModel.objects.all().delete()\n\n    def test_auto_create_slug(self):\n        m = SluggedTestModel(title='foo')\n        m.save()\n        self.assertEqual(m.slug, 'foo')\n\n    def test_auto_create_next_slug(self):\n        m = SluggedTestModel(title='foo')\n        m.save()\n\n        m = SluggedTestModel(title='foo')\n        m.save()\n        self.assertEqual(m.slug, 'foo-2')\n\n    def test_auto_create_slug_with_number(self):\n        m = SluggedTestModel(title='foo 2012')\n        m.save()\n        self.assertEqual(m.slug, 'foo-2012')\n\n    def test_auto_update_slug_with_number(self):\n        m = SluggedTestModel(title='foo 2012')\n        m.save()\n        m.save()\n        self.assertEqual(m.slug, 'foo-2012')\n\n    def test_auto_create_unicode_slug(self):\n        with override_settings(OSCAR_SLUG_ALLOW_UNICODE=True):\n            m = SluggedTestModel(title='Ch\u00e2teau Margaux 1960')\n            m.save()\n            self.assertEqual(m.slug, 'ch\u00e2teau-margaux-1960')\n\n    def test_auto_create_next_unicode_slug(self):\n        with override_settings(OSCAR_SLUG_ALLOW_UNICODE=True):\n            m1 = SluggedTestModel(title='Ch\u00e2teau Margaux 1960')\n            m1.save()\n\n            m2 = SluggedTestModel(title='Ch\u00e2teau Margaux 1960')\n            m2.save()\n\n            self.assertEqual(m2.slug, 'ch\u00e2teau-margaux-1960-2')\n\n    def test_switch_to_unicode_slug(self):\n        m = SluggedTestModel(title='Ch\u00e2teau Margaux 1960')\n        m.save()\n        self.assertEqual(m.slug, 'chateau-margaux-1960')\n        with override_settings(OSCAR_SLUG_ALLOW_UNICODE=True):\n            m = SluggedTestModel(title='Ch\u00e2teau Margaux 1960')\n            m.save()\n            self.assertEqual(m.slug, 'ch\u00e2teau-margaux-1960')\n\n    def test_autoslugfield_allow_unicode_kwargs_precedence(self):\n        from oscar.models.fields import AutoSlugField\n        with override_settings(OSCAR_SLUG_ALLOW_UNICODE=True):\n            autoslug_field = AutoSlugField(populate_from='title', allow_unicode=False)\n            self.assertFalse(autoslug_field.allow_unicode)\n            autoslug_field = AutoSlugField(populate_from='title')\n            self.assertTrue(autoslug_field.allow_unicode)\n\n    def test_update_slug(self):\n        m = SluggedTestModel(title='foo')\n        m.save()\n        self.assertEqual(m.slug, 'foo')\n\n        # update m instance without using `save'\n        SluggedTestModel.objects.filter(pk=m.pk).update(slug='foo-2012')\n        # update m instance with new data from the db\n        m = SluggedTestModel.objects.get(pk=m.pk)\n        self.assertEqual(m.slug, 'foo-2012')\n\n        m.save()\n        self.assertEqual(m.title, 'foo')\n        self.assertEqual(m.slug, 'foo-2012')\n\n        # Check slug is not overwrite\n        m.title = 'bar'\n        m.save()\n        self.assertEqual(m.title, 'bar')\n        self.assertEqual(m.slug, 'foo-2012')\n\n    def test_simple_slug_source(self):\n        m = SluggedTestModel(title='-foo')\n        m.save()\n        self.assertEqual(m.slug, 'foo')\n\n        n = SluggedTestModel(title='-foo')\n        n.save()\n        self.assertEqual(n.slug, 'foo-2')\n\n        n.save()\n        self.assertEqual(n.slug, 'foo-2')\n\n    def test_empty_slug_source(self):\n        # regression test\n\n        m = SluggedTestModel(title='')\n        m.save()\n        self.assertEqual(m.slug, '-2')\n\n        n = SluggedTestModel(title='')\n        n.save()\n        self.assertEqual(n.slug, '-3')\n\n        n.save()\n        self.assertEqual(n.slug, '-3')\n\n    def test_inheritance_creates_next_slug(self):\n        m = SluggedTestModel(title='foo')\n        m.save()\n\n        n = ChildSluggedTestModel(title='foo')\n        n.save()\n        self.assertEqual(n.slug, 'foo-2')\n\n        o = SluggedTestModel(title='foo')\n        o.save()\n        self.assertEqual(o.slug, 'foo-3')\n\n    def test_separator_and_uppercase_options(self):\n        m = CustomSluggedTestModel(title=\"Password reset\")\n        m.save()\n        self.assertEqual(m.slug, 'PASSWORD_RESET')\n\n        m = CustomSluggedTestModel(title=\"Password reset\")\n        m.save()\n        self.assertEqual(m.slug, 'PASSWORD_RESET_2')\n\n    def test_migration(self):\n        \"\"\"\n        Tests making migrations with Django 1.7+'s migration framework\n        \"\"\"\n\n        import oscar\n        from django.db import migrations\n        from django.db.migrations.writer import MigrationWriter\n        from oscar.models.fields import AutoSlugField\n        fields = {\n            'autoslugfield': AutoSlugField(populate_from='otherfield'),\n        }\n\n        migration = type(str(\"Migration\"), (migrations.Migration,), {\n            \"operations\": [\n                migrations.CreateModel(\"MyModel\", tuple(fields.items()),\n                                       {'populate_from': 'otherfield'},\n                                       (models.Model,)),\n            ],\n        })\n        writer = MigrationWriter(migration)\n        output = writer.as_string()\n\n        if isinstance(output, str):\n            output = output.encode('utf-8')\n\n        # We don't test the output formatting - that's too fragile.\n        # Just make sure it runs for now, and that things look alright.\n        context = {\n            'migrations': migrations,\n            'oscar': oscar,\n        }\n        result = self.safe_exec(output, context=context)\n        self.assertIn(\"Migration\", result)\n\n    def safe_exec(self, string, value=None, context=None):\n        loc = {}\n        g = globals()\n        g.update(context)\n        try:\n            exec(string, g, loc)\n        except Exception as e:\n            if value:\n                self.fail(\"Could not exec %r (from value %r): %s\" % (\n                    string.strip(), value, e))\n            else:\n                self.fail(\"Could not exec %r: %s\" % (string.strip(), e))\n        return loc\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\ndefault_app_config = 'oscar.apps.address.config.AddressConfig'\n",
    "output": "# -*- coding: utf-8 -*-\nimport codecs\nimport datetime\nimport io\nimport os\nfrom tempfile import NamedTemporaryFile\nfrom django.utils.encoding import smart_text\n\nfrom django.test import TestCase, override_settings\n\nfrom oscar.core.compat import UnicodeCSVWriter, existing_user_fields\n\n\nclass unicodeobj(object):\n\n    def __init__(self, s):\n        self.s = s\n\n    def __str__(self):\n        return self.s\n\n\nclass TestExistingUserFields(TestCase):\n\n    def test_order(self):\n        fields = existing_user_fields(['email', 'first_name', 'last_name'])\n        self.assertEqual(fields, ['email', 'first_name', 'last_name'])\n\n\nclass TestUnicodeCSVWriter(TestCase):\n\n    def test_can_write_different_values(self):\n        writer = UnicodeCSVWriter(open_file=io.StringIO())\n        s = '\u00fcn\u012fcod\u0113'\n        rows = [[s, unicodeobj(s), 123, datetime.date.today()], ]\n        writer.writerows(rows)\n        self.assertRaises(TypeError, writer.writerows, [object()])\n\n    def test_context_manager(self):\n        tmp_file = NamedTemporaryFile()\n        with UnicodeCSVWriter(filename=tmp_file.name) as writer:\n            s = '\u00fcn\u012fcod\u0113'\n            rows = [[s, unicodeobj(s), 123, datetime.date.today()], ]\n            writer.writerows(rows)\n\n    def test_csv_write_output(self):\n        tmp_file = NamedTemporaryFile(delete=False)\n        with UnicodeCSVWriter(filename=tmp_file.name) as writer:\n            s = '\u00fcn\u012fcod\u0113'\n            row = [s, 123, 'foo-bar']\n            writer.writerows([row])\n\n        with open(tmp_file.name, 'r') as read_file:\n            content = smart_text(read_file.read(), encoding='utf-8').strip()\n            self.assertEqual(content, '\u00fcn\u012fcod\u0113,123,foo-bar')\n\n        # Clean up\n        os.unlink(tmp_file.name)\n\n    @override_settings(OSCAR_CSV_INCLUDE_BOM=True)\n    def test_bom_write_with_open_file(self):\n        csv_file = NamedTemporaryFile(delete=False)\n        with open(csv_file.name, 'w') as open_file:\n            writer = UnicodeCSVWriter(open_file=open_file, encoding=\"utf-8\")\n            s = '\u00fcn\u012fcod\u0113'\n            row = [s, 123, datetime.date.today()]\n            writer.writerows([row])\n\n        with open(csv_file.name, 'rb') as read_file:\n            self.assertTrue(read_file.read().startswith(codecs.BOM_UTF8))\n\n        # Clean up\n        os.unlink(csv_file.name)\n\n    @override_settings(OSCAR_CSV_INCLUDE_BOM=True)\n    def test_bom_write_with_filename(self):\n        csv_file = NamedTemporaryFile(delete=False)\n        with UnicodeCSVWriter(filename=csv_file.name, encoding=\"utf-8\") as writer:\n            s = '\u00fcn\u012fcod\u0113'\n            row = [s, 123, datetime.date.today()]\n            writer.writerows([row])\n\n        with open(csv_file.name, 'rb') as read_file:\n            self.assertTrue(read_file.read().startswith(codecs.BOM_UTF8))\n\n        # Clean up\n        os.unlink(csv_file.name)\n\n    @override_settings(OSCAR_CSV_INCLUDE_BOM=True)\n    def test_bom_not_written_for_other_encodings(self):\n        csv_file = NamedTemporaryFile(delete=False)\n        with UnicodeCSVWriter(filename=csv_file.name, encoding=\"ascii\") as writer:\n            s = 'boring ascii'\n            row = [s, 123, datetime.date.today()]\n            writer.writerows([row])\n\n        with open(csv_file.name, 'rb') as read_file:\n            self.assertFalse(read_file.read().startswith(codecs.BOM_UTF8))\n\n        # Clean up\n        os.unlink(csv_file.name)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\ndefault_app_config = 'oscar.apps.address.config.AddressConfig'\n",
    "output": "import pytest\nfrom django.conf import settings\nfrom django.test import TestCase\n\nfrom oscar.core import customisation\n\nVALID_FOLDER_PATH = 'tests/_site/apps'\n\n\nclass TestUtilities(TestCase):\n\n    def test_subfolder_extraction(self):\n        folders = list(customisation.subfolders('/var/www/eggs'))\n        self.assertEqual(folders, ['/var', '/var/www', '/var/www/eggs'])\n\n\ndef test_raises_exception_for_nonexistant_app_label():\n    with pytest.raises(ValueError):\n        customisation.fork_app('sillytown', 'somefolder')\n\n\ndef test_raises_exception_if_app_has_already_been_forked():\n    # We piggyback on another test which means a custom app is already in\n    # the settings we use for the test suite. We just check that's still\n    # the case here.\n    assert 'tests._site.apps.partner' in settings.INSTALLED_APPS\n    with pytest.raises(ValueError):\n        customisation.fork_app('partner', VALID_FOLDER_PATH)\n\n\ndef test_creates_new_folder(tmpdir):\n    path = tmpdir.mkdir('fork')\n    customisation.fork_app('order', str(path))\n    path.join('order').ensure_dir()\n\n\ndef test_creates_init_file(tmpdir):\n    path = tmpdir.mkdir('fork')\n    customisation.fork_app('order', str(path))\n\n    path.join('order').join('__init__.py').ensure()\n\n\ndef test_handles_dashboard_app(tmpdir):\n    # Dashboard apps are fiddly as they aren't identified by a single app\n    # label.\n    path = tmpdir.mkdir('fork')\n    customisation.fork_app('dashboard.catalogue', str(path))\n    # Check __init__.py created (and supporting folders)\n\n    path.join('dashboard').join('catalogue').join('__init__.py').ensure()\n\n\ndef test_creates_models_and_admin_file(tmpdir):\n    path = tmpdir.mkdir('fork')\n    customisation.fork_app('order', str(path))\n    for module, expected_string in [\n        ('models', 'from oscar.apps.order.models import *'),\n        ('admin', 'from oscar.apps.order.admin import *'),\n        ('config', 'OrderConfig')\n    ]:\n        filepath = path.join('order').join('%s.py' % module)\n        filepath.ensure()\n        contents = filepath.read()\n        assert expected_string in contents\n\n\ndef test_copies_in_migrations_when_needed(tmpdir):\n    path = tmpdir.mkdir('fork')\n    for app, has_models in [('order', True), ('search', False)]:\n        customisation.fork_app(app, str(path))\n\n        native_migration_path = path.join(app).join('migrations')\n        assert has_models == native_migration_path.check()\n\n\ndef test_dashboard_app_config(tmpdir, monkeypatch):\n    path = tmpdir.mkdir('fork')\n    customisation.fork_app('dashboard', str(path))\n\n    path.join('__init__.py').write('')\n    monkeypatch.syspath_prepend(str(tmpdir))\n\n    config_module = __import__(\n        '%s.dashboard.config' % path.basename, fromlist=['DashboardConfig']\n    )\n\n    assert hasattr(config_module, 'DashboardConfig')\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\ndefault_app_config = 'oscar.apps.address.config.AddressConfig'\n",
    "output": "import warnings\n\nfrom django.contrib.auth.models import AnonymousUser, Permission\nfrom django.test import TestCase\n\nfrom oscar.core.decorators import deprecated\nfrom oscar.test import factories\nfrom oscar.views.decorators import check_permissions\n\n\nclass TestPermissionsDecorator(TestCase):\n\n    def test_empty_permissions_passes(self):\n        user = factories.UserFactory.build()\n        self.assertTrue(check_permissions(user, []))\n\n    def test_properties_are_checked(self):\n        staff_user = factories.UserFactory.build(is_staff=True)\n        non_staff_user = factories.UserFactory.build(is_staff=False)\n        self.assertTrue(check_permissions(staff_user, ['is_staff']))\n        self.assertFalse(check_permissions(non_staff_user, ['is_staff']))\n\n    def test_methods_are_checked(self):\n        anonymous_user = AnonymousUser()\n        known_user = factories.UserFactory.build()\n        self.assertTrue(check_permissions(anonymous_user, ['is_anonymous']))\n        self.assertFalse(check_permissions(known_user, ['is_anonymous']))\n\n    def test_permissions_are_checked(self):\n        user_with_perm = factories.UserFactory()\n        user_without_perm = factories.UserFactory()\n        perm = Permission.objects.get(\n            content_type__app_label='address', codename='add_country')\n        user_with_perm.user_permissions.add(perm)\n        self.assertTrue(\n            check_permissions(user_with_perm, ['address.add_country']))\n        self.assertFalse(\n            check_permissions(user_without_perm, ['address.add_country']))\n\n\nclass TestDeprecatedDecorator(TestCase):\n\n    def test_decorate_function(self):\n\n        @deprecated\n        def func():\n            return True\n\n        with warnings.catch_warnings(record=True) as caught:\n            warnings.simplefilter(\"always\")\n            self.assertTrue(func())\n            assert len(caught) == 1\n            assert issubclass(caught[0].category, DeprecationWarning)\n\n    def test_decorate_class(self):\n\n        class Cls(object):\n            val = False\n\n            def __init__(self):\n                self.val = True\n\n        Deprecated = deprecated(Cls)  # noqa\n\n        with warnings.catch_warnings(record=True) as caught:\n            warnings.simplefilter(\"always\")\n            obj = Deprecated()\n            self.assertTrue(obj.val)\n            assert len(caught) == 1\n            assert issubclass(caught[0].category, DeprecationWarning)\n\n    def test_subclass_decorated(self):\n\n        class Cls(object):\n            val = False\n\n            def __init__(self):\n                self.val = True\n\n        Deprecated = deprecated(Cls)  # noqa\n\n        class SubCls(Deprecated):\n            pass\n\n        with warnings.catch_warnings(record=True) as caught:\n            warnings.simplefilter(\"always\")\n            obj = SubCls()\n            self.assertTrue(obj.val)\n            assert len(caught) == 1\n            assert issubclass(caught[0].category, DeprecationWarning)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\ndefault_app_config = 'oscar.apps.address.config.AddressConfig'\n",
    "output": "from os.path import dirname\nimport sys\n\nfrom django.test import override_settings, TestCase\nfrom django.conf import settings\n\nimport oscar\nfrom oscar.core.loading import (\n    get_model, AppNotFoundError, get_classes, get_class, get_class_loader,\n    ClassNotFoundError)\nfrom tests import temporary_python_path\nfrom tests._site.loader import DummyClass\n\n\nclass TestClassLoading(TestCase):\n    \"\"\"\n    Oscar's class loading utilities\n    \"\"\"\n\n    def test_load_oscar_classes_correctly(self):\n        Product, Category = get_classes('catalogue.models', ('Product', 'Category'))\n        self.assertEqual('oscar.apps.catalogue.models', Product.__module__)\n        self.assertEqual('oscar.apps.catalogue.models', Category.__module__)\n\n    def test_load_oscar_class_correctly(self):\n        Product = get_class('catalogue.models', 'Product')\n        self.assertEqual('oscar.apps.catalogue.models', Product.__module__)\n\n    def test_load_oscar_class_from_dashboard_subapp(self):\n        ReportForm = get_class('dashboard.reports.forms', 'ReportForm')\n        self.assertEqual('oscar.apps.dashboard.reports.forms', ReportForm.__module__)\n\n    def test_raise_exception_when_bad_appname_used(self):\n        with self.assertRaises(AppNotFoundError):\n            get_classes('fridge.models', ('Product', 'Category'))\n\n    def test_raise_exception_when_bad_classname_used(self):\n        with self.assertRaises(ClassNotFoundError):\n            get_class('catalogue.models', 'Monkey')\n\n    def test_raise_importerror_if_app_raises_importerror(self):\n        \"\"\"\n        This tests that Oscar doesn't fall back to using the Oscar catalogue\n        app if the overriding app throws an ImportError.\n        \"\"\"\n        apps = list(settings.INSTALLED_APPS)\n        apps[apps.index('oscar.apps.catalogue')] = 'tests._site.import_error_app.catalogue'\n        with override_settings(INSTALLED_APPS=apps):\n            with self.assertRaises(ImportError):\n                get_class('catalogue.app', 'CatalogueApplication')\n\n\nclass ClassLoadingWithLocalOverrideTests(TestCase):\n\n    def setUp(self):\n        self.installed_apps = list(settings.INSTALLED_APPS)\n        self.installed_apps[self.installed_apps.index('oscar.apps.shipping')] = 'tests._site.shipping'\n\n    def test_loading_class_defined_in_local_module(self):\n        with override_settings(INSTALLED_APPS=self.installed_apps):\n            (Free,) = get_classes('shipping.methods', ('Free',))\n            self.assertEqual('tests._site.shipping.methods', Free.__module__)\n\n    def test_loading_class_which_is_not_defined_in_local_module(self):\n        with override_settings(INSTALLED_APPS=self.installed_apps):\n            (FixedPrice,) = get_classes('shipping.methods', ('FixedPrice',))\n            self.assertEqual('oscar.apps.shipping.methods', FixedPrice.__module__)\n\n    def test_loading_class_from_module_not_defined_in_local_app(self):\n        with override_settings(INSTALLED_APPS=self.installed_apps):\n            (Repository,) = get_classes('shipping.repository', ('Repository',))\n            self.assertEqual('oscar.apps.shipping.repository', Repository.__module__)\n\n    def test_loading_classes_defined_in_both_local_and_oscar_modules(self):\n        with override_settings(INSTALLED_APPS=self.installed_apps):\n            (Free, FixedPrice) = get_classes('shipping.methods', ('Free', 'FixedPrice'))\n            self.assertEqual('tests._site.shipping.methods', Free.__module__)\n            self.assertEqual('oscar.apps.shipping.methods', FixedPrice.__module__)\n\n    def test_loading_classes_with_root_app(self):\n        import tests._site.shipping\n        path = dirname(dirname(tests._site.shipping.__file__))\n        with temporary_python_path([path]):\n            self.installed_apps[\n                self.installed_apps.index('tests._site.shipping')] = 'shipping'\n            with override_settings(INSTALLED_APPS=self.installed_apps):\n                (Free,) = get_classes('shipping.methods', ('Free',))\n                self.assertEqual('shipping.methods', Free.__module__)\n\n    def test_overriding_view_is_possible_without_overriding_app(self):\n        from oscar.apps.customer.app import application, CustomerApplication\n        # If test fails, it's helpful to know if it's caused by order of\n        # execution\n        self.assertEqual(CustomerApplication().summary_view.__module__,\n                         'tests._site.apps.customer.views')\n        self.assertEqual(application.summary_view.__module__,\n                         'tests._site.apps.customer.views')\n\n\nclass ClassLoadingWithLocalOverrideWithMultipleSegmentsTests(TestCase):\n\n    def setUp(self):\n        self.installed_apps = list(settings.INSTALLED_APPS)\n        self.installed_apps[self.installed_apps.index('oscar.apps.shipping')] = 'tests._site.apps.shipping'\n\n    def test_loading_class_defined_in_local_module(self):\n        with override_settings(INSTALLED_APPS=self.installed_apps):\n            (Free,) = get_classes('shipping.methods', ('Free',))\n            self.assertEqual('tests._site.apps.shipping.methods', Free.__module__)\n\n\nclass TestGetCoreAppsFunction(TestCase):\n    \"\"\"\n    oscar.get_core_apps function\n    \"\"\"\n\n    def test_returns_core_apps_when_no_overrides_specified(self):\n        apps = oscar.get_core_apps()\n        self.assertEqual(oscar.OSCAR_CORE_APPS, apps)\n\n    def test_uses_non_dashboard_override_when_specified(self):\n        apps = oscar.get_core_apps(overrides=['apps.shipping'])\n        self.assertTrue('apps.shipping' in apps)\n        self.assertTrue('oscar.apps.shipping' not in apps)\n\n    def test_uses_dashboard_override_when_specified(self):\n        apps = oscar.get_core_apps(overrides=['apps.dashboard.catalogue'])\n        self.assertTrue('apps.dashboard.catalogue' in apps)\n        self.assertTrue('oscar.apps.dashboard.catalogue' not in apps)\n        self.assertTrue('oscar.apps.catalogue' in apps)\n\n\nclass TestOverridingCoreApps(TestCase):\n\n    def test_means_the_overriding_model_is_registered_first(self):\n        klass = get_model('partner', 'StockRecord')\n        self.assertEqual(\n            'tests._site.apps.partner.models', klass.__module__)\n\n\nclass TestAppLabelsForModels(TestCase):\n\n    def test_all_oscar_models_have_app_labels(self):\n        from django.apps import apps\n        models = apps.get_models()\n        missing = []\n        for model in models:\n            # Ignore non-Oscar models\n            if 'oscar' not in repr(model):\n                continue\n            # Don't know how to get the actual model's Meta class. But if\n            # the parent doesn't have a Meta class, it's doesn't have an\n            # base in Oscar anyway and is not intended to be overridden\n            abstract_model = model.__base__\n            meta_class = getattr(abstract_model, 'Meta', None)\n            if meta_class is None:\n                continue\n\n            if not hasattr(meta_class, 'app_label'):\n                missing.append(model)\n        if missing:\n            self.fail(\"Those models don't have an app_label set: %s\" % missing)\n\n\nclass TestDynamicLoadingOn3rdPartyApps(TestCase):\n\n    core_app_prefix = 'thirdparty_package.apps'\n\n    def setUp(self):\n        self.installed_apps = list(settings.INSTALLED_APPS)\n        sys.path.append('./tests/_site/')\n\n    def tearDown(self):\n        sys.path.remove('./tests/_site/')\n\n    def test_load_core_3rd_party_class_correctly(self):\n        self.installed_apps.append('thirdparty_package.apps.myapp')\n        with override_settings(INSTALLED_APPS=self.installed_apps):\n            Cow, Goat = get_classes('myapp.models', ('Cow', 'Goat'), self.core_app_prefix)\n            self.assertEqual('thirdparty_package.apps.myapp.models', Cow.__module__)\n            self.assertEqual('thirdparty_package.apps.myapp.models', Goat.__module__)\n\n    def test_load_overriden_3rd_party_class_correctly(self):\n        self.installed_apps.append('apps.myapp')\n        with override_settings(INSTALLED_APPS=self.installed_apps):\n            Cow, Goat = get_classes('myapp.models', ('Cow', 'Goat'), self.core_app_prefix)\n            self.assertEqual('thirdparty_package.apps.myapp.models', Cow.__module__)\n            self.assertEqual('apps.myapp.models', Goat.__module__)\n\n\nclass OverriddenClassLoadingTestCase(TestCase):\n\n    def test_non_override_class_loader(self):\n        from oscar.apps.catalogue.views import ProductDetailView\n        View = get_class('catalogue.views', 'ProductDetailView')\n        self.assertEqual(View, ProductDetailView)\n\n    @override_settings(OSCAR_DYNAMIC_CLASS_LOADER='tests._site.loader.custom_class_loader')\n    def test_override_class_loader(self):\n        # Clear lru cache for the class loader\n        get_class_loader.cache_clear()\n\n        View = get_class('catalogue.views', 'ProductDetailView')\n        self.assertEqual(View, DummyClass)\n\n        # Clear lru cache for the class loader again\n        get_class_loader.cache_clear()\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\ndefault_app_config = 'oscar.apps.address.config.AddressConfig'\n",
    "output": "from django import forms\nfrom django.test import TestCase, override_settings\n\nfrom oscar.apps.address.forms import AbstractAddressForm\nfrom oscar.apps.address.models import UserAddress\nfrom oscar.apps.order.models import ShippingAddress\nfrom oscar.forms.mixins import PhoneNumberMixin\nfrom oscar.test.factories import CountryFactory\n\n\nclass PhoneNumberMixinTestCase(TestCase):\n\n    def test_mixin_adds_phone_number_field(self):\n\n        class TestForm(PhoneNumberMixin, forms.Form):\n            pass\n\n        form = TestForm()\n        self.assertIn('phone_number', form.fields)\n\n    def test_mixin_adds_all_phone_number_fields(self):\n\n        class TestForm(PhoneNumberMixin, forms.Form):\n            phone_number_fields = {\n                'phone_number': {\n                    'required': False,\n                    'help_text': '',\n                    'max_length': 32,\n                    'label': 'Phone number'\n                },\n                'another_phone_number': {\n                    'required': False,\n                    'help_text': 'Another phone number help text',\n                    'max_length': 32,\n                    'label': 'Another phone number'\n                },\n                'one_more_phone_number': {\n                    'required': False,\n                    'help_text': '',\n                    'max_length': 32,\n                    'label': 'One more phone number'\n                },\n            }\n\n        form = TestForm()\n        self.assertIn('phone_number', form.fields)\n        self.assertIn('another_phone_number', form.fields)\n        self.assertIn('one_more_phone_number', form.fields)\n\n        field = form.fields['another_phone_number']\n        self.assertEqual(field.help_text, 'Another phone number help text')\n\n    def test_mixin_retains_existing_field_properties(self):\n\n        class TestForm(PhoneNumberMixin, forms.ModelForm):\n\n            class Meta:\n                model = UserAddress\n                fields = ['country', 'phone_number']\n                # Override default label and help text\n                labels = {'phone_number': 'Special number'}\n                help_texts = {'phone_number': 'Special help text'}\n\n        form = TestForm()\n        field = form.fields['phone_number']\n        self.assertEqual(field.label, 'Special number')\n        self.assertEqual(field.help_text, 'Special help text')\n\n    @override_settings(OSCAR_REQUIRED_ADDRESS_FIELDS=('phone_number',))\n    def test_required_empty_field_raises_validation_error(self):\n\n        class TestForm(PhoneNumberMixin, AbstractAddressForm):\n            phone_number_fields = {\n                'phone_number': {\n                    'required': True,\n                    'help_text': '',\n                    'max_length': 32,\n                    'label': 'Phone number'\n                }\n            }\n\n            class Meta:\n                model = ShippingAddress\n                fields = ['country', 'phone_number', 'postcode']\n\n        CountryFactory(iso_3166_1_a2='GB', is_shipping_country=True)\n        form = TestForm(data={'phone_number': '', 'country': 'GB', 'postcode': 'WW1 2BB'})\n        self.assertFalse(form.is_valid())\n        self.assertEqual(form.errors['phone_number'], ['This field is required.'])\n\n    @override_settings(OSCAR_REQUIRED_ADDRESS_FIELDS=[])\n    def test_optional_empty_field_validates(self):\n\n        class TestForm(PhoneNumberMixin, AbstractAddressForm):\n            phone_number_fields = {\n                'phone_number': {\n                    'required': False,\n                    'help_text': '',\n                    'max_length': 32,\n                    'label': 'Phone number'\n                }\n            }\n\n            class Meta:\n                model = ShippingAddress\n                fields = ['country', 'phone_number', 'postcode']\n\n        CountryFactory(iso_3166_1_a2='GB', is_shipping_country=True)\n        form = TestForm(data={'phone_number': '', 'country': 'GB', 'postcode': 'WW1 2BB'})\n        self.assertTrue(form.is_valid())\n\n    @override_settings(OSCAR_REQUIRED_ADDRESS_FIELDS=[])\n    def test_invalid_number_fails_validation(self):\n\n        class TestForm(PhoneNumberMixin, AbstractAddressForm):\n            phone_number_fields = {\n                'phone_number': {\n                    'required': False,\n                    'help_text': '',\n                    'max_length': 32,\n                    'label': 'Phone number'\n                }\n            }\n\n            class Meta:\n                model = ShippingAddress\n                fields = ['country', 'phone_number', 'postcode']\n\n        CountryFactory(iso_3166_1_a2='GB', is_shipping_country=True)\n        form = TestForm(data={'phone_number': '123456', 'country': 'GB', 'postcode': 'WW1 2BB'})\n        self.assertFalse(form.is_valid())\n        self.assertEqual(form.errors['phone_number'], ['This is not a valid local phone format for UNITED KINGDOM.'])\n\n    @override_settings(OSCAR_REQUIRED_ADDRESS_FIELDS=[])\n    def test_valid_number_passes_validation(self):\n\n        class TestForm(PhoneNumberMixin, AbstractAddressForm):\n            phone_number_fields = {\n                'phone_number': {\n                    'required': False,\n                    'help_text': '',\n                    'max_length': 32,\n                    'label': 'Phone number'\n                }\n            }\n\n            class Meta:\n                model = ShippingAddress\n                fields = ['country', 'phone_number', 'postcode']\n\n        CountryFactory(iso_3166_1_a2='GB', is_shipping_country=True)\n        form = TestForm(data={'phone_number': '02089001234', 'country': 'GB', 'postcode': 'WW1 2BB'})\n        self.assertTrue(form.is_valid())\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\ndefault_app_config = 'oscar.apps.address.config.AddressConfig'\n",
    "output": "from django.core.exceptions import ImproperlyConfigured\nfrom django.test import TestCase\n\nfrom oscar.models.fields import NullCharField\n\n\nclass NullCharFieldTest(TestCase):\n\n    def test_from_db_value_converts_null_to_string(self):\n        field = NullCharField()\n        self.assertEqual('', field.from_db_value(None, expression=None, connection=None, context=None))\n\n    def test_get_prep_value_converts_empty_string_to_null(self):\n        field = NullCharField()\n        self.assertEqual(None, field.get_prep_value(''))\n\n    def test_raises_exception_for_invalid_null_blank_combo(self):\n        with self.assertRaises(ImproperlyConfigured):\n            NullCharField(null=True, blank=False)\n\n        with self.assertRaises(ImproperlyConfigured):\n            NullCharField(null=False, blank=True)\n\n        with self.assertRaises(ImproperlyConfigured):\n            NullCharField(null=False, blank=False)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\ndefault_app_config = 'oscar.apps.address.config.AddressConfig'\n",
    "output": "from decimal import Decimal as D\nfrom itertools import product\nfrom django.test import TestCase\n\nfrom oscar.core.prices import Price\n\n\nclass TestPriceObject(TestCase):\n\n    def test_can_be_instantiated_with_tax_amount(self):\n        price = Price('USD', D('10.00'), tax=D('2.00'))\n        self.assertTrue(price.is_tax_known)\n        self.assertEqual(D('12.00'), price.incl_tax)\n\n    def test_can_have_tax_set_later(self):\n        price = Price('USD', D('10.00'))\n        price.tax = D('2.00')\n        self.assertEqual(D('12.00'), price.incl_tax)\n\n    def test_price_equals_reflexivity(self):\n        for price in (\n            Price(currency='USD', excl_tax=D('10.00')),\n            Price(currency='USD', excl_tax=D('10.00'), tax=D('2.00')),\n            Price(currency='USD', excl_tax=D('10.00'), incl_tax=D('12.00')),\n        ):\n            self.assertEqual(price, price)\n\n    def test_price_equals_formats(self):\n        price1 = Price(currency='USD', excl_tax=D('10.00'), tax=D('2.00'))\n        price2 = Price(currency='USD', excl_tax=D('10.00'), incl_tax=D('12.00'))\n        self.assertEqual(price1, price2)\n\n    def test_price_equals_currency_matters(self):\n        price1 = Price(currency='EUR', excl_tax=D('10.00'), tax=D('2.00'))\n        price2 = Price(currency='USD', excl_tax=D('10.00'), tax=D('2.00'))\n        self.assertNotEqual(price1, price2)\n\n    def test_price_equals_transitivity(self):\n        prices = (\n            Price(currency='EUR', excl_tax=D('10.00'), tax=D('2.00')),\n            Price(currency='USD', excl_tax=D('10.00'), tax=D('2.00')),\n            Price(currency='USD', excl_tax=D('10.00'), incl_tax=D('12.00')),\n            Price(currency='USD', excl_tax=D('10.00'), tax=D('8.00'))\n        )\n        prices_product = product(prices, prices)\n        for price1, price2 in prices_product:\n            self.assertEqual(price1 == price2, price2 == price1)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\ndefault_app_config = 'oscar.apps.address.config.AddressConfig'\n",
    "output": "# coding=utf-8\n\nfrom django.test import TestCase\nfrom django.test.utils import override_settings\n\n\nclass SlugFieldTest(TestCase):\n\n    def test_slugfield_allow_unicode_kwargs_precedence(self):\n        from oscar.models.fields.slugfield import SlugField\n        with override_settings(OSCAR_SLUG_ALLOW_UNICODE=True):\n            slug_field = SlugField(allow_unicode=False)\n            self.assertFalse(slug_field.allow_unicode)\n            slug_field = SlugField()\n            self.assertTrue(slug_field.allow_unicode)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\ndefault_app_config = 'oscar.apps.address.config.AddressConfig'\n",
    "output": "# coding=utf-8\nfrom django.test import TestCase\nfrom django.test.utils import override_settings\n\nfrom oscar.core import utils\n\n\ndef sluggish(value, allow_unicode=False):\n    return value.upper()\n\n\nclass TestSlugify(TestCase):\n\n    def test_default_unicode_to_ascii(self):\n        self.assertEqual('konig-der-straxdfe', utils.slugify('K\u00f6nig der Stra\u00dfe'))\n        self.assertEqual('not-fancy', utils.slugify('Not fancy'))\n        self.assertEqual('u4e01u4e02-u4e03u4e04u4e05', utils.slugify('\u4e01\u4e02 \u4e03\u4e04\u4e05'))\n\n    @override_settings(OSCAR_SLUG_ALLOW_UNICODE=True)\n    def test_allow_unicode(self):\n        self.assertEqual('k\u00f6nig-der-stra\u00dfe', utils.slugify('K\u00f6nig der Stra\u00dfe'))\n        self.assertEqual('\u4e01\u4e02-\u4e03\u4e04\u4e05', utils.slugify('\u4e01\u4e02 \u4e03\u4e04\u4e05'))\n        self.assertEqual('not-fancy', utils.slugify('Not fancy'))\n\n    @override_settings(OSCAR_SLUG_FUNCTION='tests.integration.core.test_utils.sluggish')\n    def test_custom_slugifier(self):\n        self.assertEqual('HAM AND EGGS', utils.slugify('Ham and eggs'))\n\n    @override_settings(OSCAR_SLUG_MAP={'c++': 'cpp'})\n    def test_uses_custom_mappings(self):\n        self.assertEqual('cpp', utils.slugify('c++'))\n\n    @override_settings(OSCAR_SLUG_BLACKLIST=['the'])\n    def test_uses_blacklist(self):\n        self.assertEqual('bible', utils.slugify('The Bible'))\n\n    @override_settings(OSCAR_SLUG_BLACKLIST=['the', 'bible'])\n    def test_uses_blacklist_doesnt_reduce_to_nothing(self):\n        self.assertEqual('bible', utils.slugify('The Bible'))\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\ndefault_app_config = 'oscar.apps.address.config.AddressConfig'\n",
    "output": "from django.core.exceptions import ValidationError\nfrom django.contrib.flatpages.models import FlatPage\nfrom django.test import TestCase, override_settings\nfrom django.utils.translation import activate\n\nfrom oscar.core.validators import ExtendedURLValidator, URLDoesNotExistValidator\n\n\nclass TestExtendedURLValidator(TestCase):\n\n    def setUp(self):\n        self.validator = ExtendedURLValidator()\n\n    def test_validates_local_url(self):\n        try:\n            self.validator('/')\n        except ValidationError:\n            self.fail('ExtendedURLValidator raised ValidationError'\n                      'unexpectedly!')\n\n    def test_validates_local_url_with_query_strings(self):\n        try:\n            self.validator('/?q=test')  # Query strings shouldn't affect validation\n        except ValidationError:\n            self.fail('ExtendedURLValidator raised ValidationError'\n                      'unexpectedly!')\n\n    def test_raises_validation_error_for_missing_urls(self):\n        with self.assertRaises(ValidationError):\n            self.validator('/invalid/')\n\n    def test_validates_urls_missing_preceding_slash(self):\n        try:\n            self.validator('catalogue/')\n        except ValidationError:\n            self.fail('ExtendedURLValidator raised ValidationError'\n                      'unexpectedly!')\n\n    def test_raises_validation_error_for_urls_without_trailing_slash(self):\n        with self.assertRaises(ValidationError):\n            self.validator('/catalogue')  # Missing the / is bad\n\n    def test_validates_flatpages_urls(self):\n        FlatPage.objects.create(title='test page', url='/test/page/')\n        try:\n            self.validator('/test/page/')\n        except ValidationError:\n            self.fail('ExtendedURLValidator raises ValidationError'\n                      'unexpectedly!')\n\n\n@override_settings(\n    LANGUAGES=(\n        ('de', 'German'),\n        ('en-gb', 'British English'),\n    )\n)\nclass TestExtendedURLValidatorForLocalePrefixURLS(TestCase):\n    def setUp(self):\n        self.validator = ExtendedURLValidator()\n\n    def test_validate_same_locals(self):\n        \"\"\"\n        Current locale is default (\"en-gb\"), URL has locale prefix\n        of default and current locale (\"en-gb\").\n        \"\"\"\n        try:\n            self.validator('/en-gb/test/')\n        except ValidationError:\n            self.fail('ExtendedURLValidator raised ValidationError'\n                      'unexpectedly!')\n\n    def test_validate_prefix_locale_is_non_default(self):\n        \"\"\"\n        Current locale is default (\"en-gb\"), URL has locale prefix\n        of non-default locale (\"de\").\n        \"\"\"\n        try:\n            self.validator('/de/test/')\n        except ValidationError:\n            self.fail('ExtendedURLValidator raised ValidationError'\n                      'unexpectedly!')\n\n    def test_validate_current_locale_is_non_default(self):\n        \"\"\"\n        Current locale is non-default (\"de\"), URL has locale prefix\n        of default locale (\"en-gb\").\n        \"\"\"\n        activate('de')\n        try:\n            self.validator('/en-gb/test/')\n        except ValidationError:\n            self.fail('ExtendedURLValidator raised ValidationError'\n                      'unexpectedly!')\n\n    def test_validate_current_and_prefix_locales_are_non_default_and_same(self):\n        \"\"\"\n        Current locale is non-default (\"de\"), URL has locale prefix\n        of non-default locale (\"de\").\n        \"\"\"\n        activate('de')\n        try:\n            self.validator('/de/test/')\n        except ValidationError:\n            self.fail('ExtendedURLValidator raised ValidationError'\n                      'unexpectedly!')\n\n    def test_validate_current_and_prefix_locales_are_non_default_and_different(self):\n        \"\"\"\n        Current locale is non-default (\"it\"), URL has locale prefix\n        of non-default locale (\"de\").\n        \"\"\"\n        activate('it')\n        try:\n            self.validator('/de/test/')\n        except ValidationError:\n            self.fail('ExtendedURLValidator raised ValidationError'\n                      'unexpectedly!')\n\n\nclass TestURLDoesNotExistValidator(TestCase):\n\n    def setUp(self):\n        self.validator = URLDoesNotExistValidator()\n\n    def test_raises_exception_for_local_urls(self):\n        self.assertRaises(ValidationError, self.validator, '/')\n\n    def test_raises_exception_for_flatpages(self):\n        FlatPage.objects.create(title='test page', url='/test/page/')\n        self.assertRaises(ValidationError, self.validator, '/test/page/')\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\ndefault_app_config = 'oscar.apps.address.config.AddressConfig'\n",
    "output": "import pytest\n\nfrom oscar.views import handler403, handler404, handler500\n\n\n@pytest.mark.django_db\ndef test_handler403_response_status(rf):\n    request = rf.get('/')\n    response = handler403(request, exception=None)\n    assert response.status_code == 403\n\n\n@pytest.mark.django_db\ndef test_handler404_response_status(rf):\n    request = rf.get('/')\n    response = handler404(request, exception=None)\n    assert response.status_code == 404\n\n\n@pytest.mark.django_db\ndef test_handler500_response_status(rf):\n    request = rf.get('/')\n    response = handler500(request)\n    assert response.status_code == 500\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\ndefault_app_config = 'oscar.apps.address.config.AddressConfig'\n",
    "output": ""
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\nimport oscar.models.fields\nfrom django.conf import settings\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Country',\n            fields=[\n                ('iso_3166_1_a2', models.CharField(primary_key=True, max_length=2, verbose_name='ISO 3166-1 alpha-2', serialize=False)),\n                ('iso_3166_1_a3', models.CharField(max_length=3, verbose_name='ISO 3166-1 alpha-3', blank=True)),\n                ('iso_3166_1_numeric', models.CharField(max_length=3, verbose_name='ISO 3166-1 numeric', blank=True)),\n                ('printable_name', models.CharField(max_length=128, verbose_name='Country name')),\n                ('name', models.CharField(max_length=128, verbose_name='Official name')),\n                ('display_order', models.PositiveSmallIntegerField(default=0, verbose_name='Display order', db_index=True, help_text='Higher the number, higher the country in the list.')),\n                ('is_shipping_country', models.BooleanField(default=False, db_index=True, verbose_name='Is shipping country')),\n            ],\n            options={\n                'ordering': ('-display_order', 'printable_name'),\n                'verbose_name_plural': 'Countries',\n                'verbose_name': 'Country',\n                'abstract': False,\n            },\n            bases=(models.Model,),\n        ),\n        migrations.CreateModel(\n            name='UserAddress',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(verbose_name='Title', max_length=64, blank=True, choices=[('Mr', 'Mr'), ('Miss', 'Miss'), ('Mrs', 'Mrs'), ('Ms', 'Ms'), ('Dr', 'Dr')])),\n                ('first_name', models.CharField(max_length=255, verbose_name='First name', blank=True)),\n                ('last_name', models.CharField(max_length=255, verbose_name='Last name', blank=True)),\n                ('line1', models.CharField(max_length=255, verbose_name='First line of address')),\n                ('line2', models.CharField(max_length=255, verbose_name='Second line of address', blank=True)),\n                ('line3', models.CharField(max_length=255, verbose_name='Third line of address', blank=True)),\n                ('line4', models.CharField(max_length=255, verbose_name='City', blank=True)),\n                ('state', models.CharField(max_length=255, verbose_name='State/County', blank=True)),\n                ('postcode', oscar.models.fields.UppercaseCharField(max_length=64, verbose_name='Post/Zip-code', blank=True)),\n                ('search_text', models.TextField(editable=False, verbose_name='Search text - used only for searching addresses')),\n                ('phone_number', oscar.models.fields.PhoneNumberField(verbose_name='Phone number', help_text='In case we need to call you about your order', blank=True)),\n                ('notes', models.TextField(verbose_name='Instructions', help_text='Tell us anything we should know when delivering your order.', blank=True)),\n                ('is_default_for_shipping', models.BooleanField(default=False, verbose_name='Default shipping address?')),\n                ('is_default_for_billing', models.BooleanField(default=False, verbose_name='Default billing address?')),\n                ('num_orders', models.PositiveIntegerField(default=0, verbose_name='Number of Orders')),\n                ('hash', models.CharField(max_length=255, editable=False, db_index=True, verbose_name='Address Hash')),\n                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date Created')),\n                ('country', models.ForeignKey(verbose_name='Country', to='address.Country', on_delete=models.CASCADE)),\n                ('user', models.ForeignKey(verbose_name='User', related_name='addresses', to=settings.AUTH_USER_MODEL, on_delete=models.CASCADE)),\n            ],\n            options={\n                'ordering': ['-num_orders'],\n                'verbose_name_plural': 'User addresses',\n                'verbose_name': 'User address',\n                'abstract': False,\n            },\n            bases=(models.Model,),\n        ),\n        migrations.AlterUniqueTogether(\n            name='useraddress',\n            unique_together=set([('user', 'hash')]),\n        ),\n    ]\n",
    "output": "from django.test import TestCase\n\nfrom oscar.apps.address import models, forms\nfrom oscar.test.factories import UserFactory\n\n\nclass TestUserAddressForm(TestCase):\n\n    def setUp(self):\n        self.user = UserFactory()\n        self.country = models.Country.objects.create(\n            iso_3166_1_a2='GB', name=\"UNITED KINGDOM\")\n\n    def test_merges_addresses_with_same_hash(self):\n        data = {\n            'user': self.user,\n            'first_name': \"Matus\",\n            'last_name': \"Moravcik\",\n            'line1': \"1 Egg Street\",\n            'line4': \"London\",\n            'postcode': \"N12 9RE\",\n            'country': self.country}\n\n        # Create two addresses, which are slightly different\n        models.UserAddress.objects.create(**data)\n        other = data.copy()\n        other['first_name'] = 'Izidor'\n        duplicate = models.UserAddress.objects.create(**other)\n\n        # Edit duplicate to be same as original and check that the two\n        # addresses are merged when the form saves.\n        post_data = data.copy()\n        post_data['country'] = self.country.iso_3166_1_a2\n        form = forms.UserAddressForm(self.user, post_data, instance=duplicate)\n        self.assertFalse(form.is_valid())\n        self.assertTrue(len(form.errors['__all__']) > 0)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\nimport oscar.models.fields\nfrom django.conf import settings\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Country',\n            fields=[\n                ('iso_3166_1_a2', models.CharField(primary_key=True, max_length=2, verbose_name='ISO 3166-1 alpha-2', serialize=False)),\n                ('iso_3166_1_a3', models.CharField(max_length=3, verbose_name='ISO 3166-1 alpha-3', blank=True)),\n                ('iso_3166_1_numeric', models.CharField(max_length=3, verbose_name='ISO 3166-1 numeric', blank=True)),\n                ('printable_name', models.CharField(max_length=128, verbose_name='Country name')),\n                ('name', models.CharField(max_length=128, verbose_name='Official name')),\n                ('display_order', models.PositiveSmallIntegerField(default=0, verbose_name='Display order', db_index=True, help_text='Higher the number, higher the country in the list.')),\n                ('is_shipping_country', models.BooleanField(default=False, db_index=True, verbose_name='Is shipping country')),\n            ],\n            options={\n                'ordering': ('-display_order', 'printable_name'),\n                'verbose_name_plural': 'Countries',\n                'verbose_name': 'Country',\n                'abstract': False,\n            },\n            bases=(models.Model,),\n        ),\n        migrations.CreateModel(\n            name='UserAddress',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(verbose_name='Title', max_length=64, blank=True, choices=[('Mr', 'Mr'), ('Miss', 'Miss'), ('Mrs', 'Mrs'), ('Ms', 'Ms'), ('Dr', 'Dr')])),\n                ('first_name', models.CharField(max_length=255, verbose_name='First name', blank=True)),\n                ('last_name', models.CharField(max_length=255, verbose_name='Last name', blank=True)),\n                ('line1', models.CharField(max_length=255, verbose_name='First line of address')),\n                ('line2', models.CharField(max_length=255, verbose_name='Second line of address', blank=True)),\n                ('line3', models.CharField(max_length=255, verbose_name='Third line of address', blank=True)),\n                ('line4', models.CharField(max_length=255, verbose_name='City', blank=True)),\n                ('state', models.CharField(max_length=255, verbose_name='State/County', blank=True)),\n                ('postcode', oscar.models.fields.UppercaseCharField(max_length=64, verbose_name='Post/Zip-code', blank=True)),\n                ('search_text', models.TextField(editable=False, verbose_name='Search text - used only for searching addresses')),\n                ('phone_number', oscar.models.fields.PhoneNumberField(verbose_name='Phone number', help_text='In case we need to call you about your order', blank=True)),\n                ('notes', models.TextField(verbose_name='Instructions', help_text='Tell us anything we should know when delivering your order.', blank=True)),\n                ('is_default_for_shipping', models.BooleanField(default=False, verbose_name='Default shipping address?')),\n                ('is_default_for_billing', models.BooleanField(default=False, verbose_name='Default billing address?')),\n                ('num_orders', models.PositiveIntegerField(default=0, verbose_name='Number of Orders')),\n                ('hash', models.CharField(max_length=255, editable=False, db_index=True, verbose_name='Address Hash')),\n                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date Created')),\n                ('country', models.ForeignKey(verbose_name='Country', to='address.Country', on_delete=models.CASCADE)),\n                ('user', models.ForeignKey(verbose_name='User', related_name='addresses', to=settings.AUTH_USER_MODEL, on_delete=models.CASCADE)),\n            ],\n            options={\n                'ordering': ['-num_orders'],\n                'verbose_name_plural': 'User addresses',\n                'verbose_name': 'User address',\n                'abstract': False,\n            },\n            bases=(models.Model,),\n        ),\n        migrations.AlterUniqueTogether(\n            name='useraddress',\n            unique_together=set([('user', 'hash')]),\n        ),\n    ]\n",
    "output": "# -*- coding: utf-8 -*-\nimport pytest\nfrom django.test import TestCase\nfrom django.core import exceptions\n\nfrom oscar.apps.order.models import ShippingAddress\nfrom oscar.core.compat import get_user_model\nfrom oscar.apps.address import models\nfrom oscar.test import factories\n\nfrom tests._site.model_tests_app.models import (\n    UserAddressModelWithCustomBaseFields, UserAddressModelWithCustomHashFields\n)\n\nUser = get_user_model()\n\n\nclass UserAddressModelWithCustomBaseFieldsFactory(factories.UserAddressFactory):\n    class Meta:\n        model = UserAddressModelWithCustomBaseFields\n\n\nclass UserAddressModelWithCustomHashFieldsFactory(factories.UserAddressFactory):\n    class Meta:\n        model = UserAddressModelWithCustomHashFields\n\n\nclass TestUserAddress(TestCase):\n\n    def setUp(self):\n        self.country = factories.CountryFactory.build()\n        self.user = factories.UserFactory()\n\n    def test_uses_title_firstname_and_lastname_in_salutation(self):\n        a = factories.UserAddressFactory.build(\n            country=self.country,\n            title='Dr',\n            first_name='Barry',\n            last_name='Barrington',\n            user=self.user)\n        self.assertEqual(\"Dr Barry Barrington\", a.salutation)\n\n    def test_strips_whitespace_from_salutation(self):\n        a = factories.UserAddressFactory.build(\n            title='',\n            first_name='',\n            last_name='Barrington',\n            country=self.country,\n            user=self.user)\n        self.assertEqual(\"Barrington\", a.salutation)\n\n    def test_has_name_property(self):\n        a = factories.UserAddressFactory.build(\n            country=self.country,\n            first_name='Barry',\n            last_name='Barrington',\n            user=self.user)\n        self.assertEqual(\"Barry Barrington\", a.name)\n\n    def test_has_summary_property(self):\n        c = factories.CountryFactory(name='')\n        a = factories.UserAddressFactory(\n            country=c,\n            title='Dr',\n            first_name='Barry',\n            last_name='Barrington',\n            line1='1 King Road',\n            line4='London',\n            postcode='SW1 9RE')\n        self.assertEqual(\n            \"Dr Barry Barrington, 1 King Road, London, SW1 9RE, UNITED KINGDOM\",\n            a.summary)\n\n    def test_summary_includes_country(self):\n        c = factories.CountryFactory.build(name='UNITED KINGDOM')\n        a = factories.UserAddressFactory.build(\n            country=c,\n            title='Dr',\n            first_name='Barry',\n            last_name='Barrington',\n            line1='1 King Road',\n            line4='London',\n            postcode='SW1 9RE',\n            user=self.user)\n        self.assertEqual(\n            \"Dr Barry Barrington, 1 King Road, London, SW1 9RE, UNITED KINGDOM\",\n            a.summary)\n\n    def test_hash_value(self):\n        a = factories.UserAddressFactory.build(\n            country=self.country,\n            user=self.user)\n        self.assertEqual(a.generate_hash(), 2668616117)\n\n    def test_hash_and_summary_values_on_model_with_custom_base_fields(self):\n        a = UserAddressModelWithCustomBaseFieldsFactory.build(country=self.country, user=self.user)\n        self.assertEqual(a.summary, '1 King Road, London')\n        self.assertEqual(a.generate_hash(), 2668616117)\n\n    def test_hash_and_summary_values_on_model_with_custom_hash_fields(self):\n        a = UserAddressModelWithCustomHashFieldsFactory.build(country=self.country, user=self.user)\n        self.assertEqual(a.summary, 'Dr Barry Barrington, 1 King Road, London, SW1 9RE, UNITED KINGDOM')\n        self.assertEqual(a.generate_hash(), 2153195893)\n\n    def test_can_be_hashed_including_non_ascii(self):\n        a = factories.UserAddressFactory.build(\n            first_name=\"\\u0141ukasz Smith\",\n            last_name='Smith',\n            line1=\"75 Smith Road\",\n            postcode=\"n4 8ty\",\n            country=self.country,\n            user=self.user)\n        hash = a.generate_hash()\n        self.assertTrue(hash is not None)\n\n    def test_strips_whitespace_in_name_property(self):\n        a = factories.UserAddressFactory.build(\n            first_name='',\n            last_name='Barrington',\n            country=self.country,\n            user=self.user)\n        self.assertEqual(\"Barrington\", a.name)\n\n    def test_uses_city_as_an_alias_of_line4(self):\n        a = factories.UserAddressFactory.build(\n            line4='London',\n            country=self.country,\n            user=self.user)\n        self.assertEqual('London', a.city)\n\n    def test_converts_postcode_to_uppercase_when_cleaning(self):\n        address = factories.UserAddressFactory.build(\n            postcode=\"n4 8ty\",\n            country=self.country,\n            user=self.user)\n        address.clean()\n        self.assertEqual(\"N4 8TY\", address.postcode)\n\n    def test_strips_whitespace_when_cleaning(self):\n        a = factories.UserAddressFactory.build(\n            line1=\"  75 Smith Road  \",\n            postcode=\"  n4 8ty\",\n            country=self.country,\n            user=self.user)\n        a.clean()\n        self.assertEqual(\"N4 8TY\", a.postcode)\n        self.assertEqual(\"75 Smith Road\", a.line1)\n\n    def test_active_address_fields_skips_whitespace_only_fields(self):\n        a = factories.UserAddressFactory.build(\n            first_name='   ',\n            last_name='Barrington',\n            line1='  75 Smith Road  ',\n            postcode='  n4 8ty',\n            title='',\n            country=self.country,\n            user=self.user)\n        active_fields = a.active_address_fields()\n        self.assertEqual(\"Barrington\", active_fields[0])\n\n    def test_ignores_whitespace_when_hashing(self):\n        a1 = factories.UserAddressFactory.build(\n            first_name='Terry',\n            last_name='Barrington',\n            country=self.country,\n            user=self.user)\n        a1.clean()\n        a2 = factories.UserAddressFactory.build(\n            first_name='   Terry  ',\n            last_name='     Barrington',\n            country=self.country,\n            user=self.user)\n        a2.clean()\n        self.assertEqual(a1.generate_hash(), a2.generate_hash())\n\n    def test_populate_shipping_address_doesnt_set_id(self):\n        a = factories.UserAddressFactory.build(\n            country=self.country,\n            user=self.user)\n        a.clean()\n        sa = ShippingAddress()\n        a.populate_alternative_model(sa)\n        self.assertIsNone(sa.id)\n\n    def test_populated_shipping_address_has_same_summary_user_address(self):\n        a = factories.UserAddressFactory.build(\n            country=self.country,\n            user=self.user)\n        a.clean()\n        sa = ShippingAddress()\n        a.populate_alternative_model(sa)\n        self.assertEqual(sa.summary, a.summary)\n\n    def test_summary_value(self):\n        a = factories.UserAddressFactory.build(\n            country=self.country,\n            user=self.user)\n        self.assertEqual(a.summary, 'Dr Barry Barrington, 1 King Road, London, SW1 9RE, UNITED KINGDOM')\n\n    def test_summary_is_property(self):\n        a = factories.UserAddressFactory.build(\n            title='',\n            line4='',\n            first_name=\" Terry  \",\n            last_name='Barrington',\n            line1=\"  75 Smith Road  \",\n            postcode=\"  n4 8ty\",\n            country=self.country,\n            user=self.user)\n        a.clean()\n        self.assertEqual(\n            \"Terry Barrington, 75 Smith Road, N4 8TY, UNITED KINGDOM\",\n            a.summary)\n\n\nVALID_POSTCODES = [\n    ('GB', 'N1 9RT'),\n    ('SK', '991 41'),\n    ('CZ', '612 00'),\n    ('CC', '6799'),\n    ('CY', '8240'),\n    ('MC', '98000'),\n    ('SH', 'STHL 1ZZ'),\n    ('JP', '150-2345'),\n    ('PG', '314'),\n    ('HN', '41202'),\n    ('BN', 'BC3615'),\n    ('TW', '104'),\n    ('TW', '10444'),\n    # It works for small cases as well\n    ('GB', 'sw2 1rw'),\n]\n\n\nINVALID_POSTCODES = [\n    ('GB', 'not-a-postcode'),\n    ('DE', '123b4'),\n]\n\n\n@pytest.mark.parametrize('country_value, postcode_value', VALID_POSTCODES)\ndef test_assert_valid_postcode(country_value, postcode_value):\n    country = models.Country(iso_3166_1_a2=country_value)\n    address = models.UserAddress(country=country, postcode=postcode_value)\n    address.clean()\n\n\n@pytest.mark.parametrize('country_value, postcode_value', INVALID_POSTCODES)\ndef test_assert_invalid_postcode(country_value, postcode_value):\n    country = models.Country(iso_3166_1_a2=country_value)\n    address = models.UserAddress(country=country, postcode=postcode_value)\n\n    with pytest.raises(exceptions.ValidationError):\n        address.clean()\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\nimport oscar.models.fields\nfrom django.conf import settings\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Country',\n            fields=[\n                ('iso_3166_1_a2', models.CharField(primary_key=True, max_length=2, verbose_name='ISO 3166-1 alpha-2', serialize=False)),\n                ('iso_3166_1_a3', models.CharField(max_length=3, verbose_name='ISO 3166-1 alpha-3', blank=True)),\n                ('iso_3166_1_numeric', models.CharField(max_length=3, verbose_name='ISO 3166-1 numeric', blank=True)),\n                ('printable_name', models.CharField(max_length=128, verbose_name='Country name')),\n                ('name', models.CharField(max_length=128, verbose_name='Official name')),\n                ('display_order', models.PositiveSmallIntegerField(default=0, verbose_name='Display order', db_index=True, help_text='Higher the number, higher the country in the list.')),\n                ('is_shipping_country', models.BooleanField(default=False, db_index=True, verbose_name='Is shipping country')),\n            ],\n            options={\n                'ordering': ('-display_order', 'printable_name'),\n                'verbose_name_plural': 'Countries',\n                'verbose_name': 'Country',\n                'abstract': False,\n            },\n            bases=(models.Model,),\n        ),\n        migrations.CreateModel(\n            name='UserAddress',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(verbose_name='Title', max_length=64, blank=True, choices=[('Mr', 'Mr'), ('Miss', 'Miss'), ('Mrs', 'Mrs'), ('Ms', 'Ms'), ('Dr', 'Dr')])),\n                ('first_name', models.CharField(max_length=255, verbose_name='First name', blank=True)),\n                ('last_name', models.CharField(max_length=255, verbose_name='Last name', blank=True)),\n                ('line1', models.CharField(max_length=255, verbose_name='First line of address')),\n                ('line2', models.CharField(max_length=255, verbose_name='Second line of address', blank=True)),\n                ('line3', models.CharField(max_length=255, verbose_name='Third line of address', blank=True)),\n                ('line4', models.CharField(max_length=255, verbose_name='City', blank=True)),\n                ('state', models.CharField(max_length=255, verbose_name='State/County', blank=True)),\n                ('postcode', oscar.models.fields.UppercaseCharField(max_length=64, verbose_name='Post/Zip-code', blank=True)),\n                ('search_text', models.TextField(editable=False, verbose_name='Search text - used only for searching addresses')),\n                ('phone_number', oscar.models.fields.PhoneNumberField(verbose_name='Phone number', help_text='In case we need to call you about your order', blank=True)),\n                ('notes', models.TextField(verbose_name='Instructions', help_text='Tell us anything we should know when delivering your order.', blank=True)),\n                ('is_default_for_shipping', models.BooleanField(default=False, verbose_name='Default shipping address?')),\n                ('is_default_for_billing', models.BooleanField(default=False, verbose_name='Default billing address?')),\n                ('num_orders', models.PositiveIntegerField(default=0, verbose_name='Number of Orders')),\n                ('hash', models.CharField(max_length=255, editable=False, db_index=True, verbose_name='Address Hash')),\n                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date Created')),\n                ('country', models.ForeignKey(verbose_name='Country', to='address.Country', on_delete=models.CASCADE)),\n                ('user', models.ForeignKey(verbose_name='User', related_name='addresses', to=settings.AUTH_USER_MODEL, on_delete=models.CASCADE)),\n            ],\n            options={\n                'ordering': ['-num_orders'],\n                'verbose_name_plural': 'User addresses',\n                'verbose_name': 'User address',\n                'abstract': False,\n            },\n            bases=(models.Model,),\n        ),\n        migrations.AlterUniqueTogether(\n            name='useraddress',\n            unique_together=set([('user', 'hash')]),\n        ),\n    ]\n",
    "output": ""
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\nimport oscar.models.fields\nfrom django.conf import settings\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Country',\n            fields=[\n                ('iso_3166_1_a2', models.CharField(primary_key=True, max_length=2, verbose_name='ISO 3166-1 alpha-2', serialize=False)),\n                ('iso_3166_1_a3', models.CharField(max_length=3, verbose_name='ISO 3166-1 alpha-3', blank=True)),\n                ('iso_3166_1_numeric', models.CharField(max_length=3, verbose_name='ISO 3166-1 numeric', blank=True)),\n                ('printable_name', models.CharField(max_length=128, verbose_name='Country name')),\n                ('name', models.CharField(max_length=128, verbose_name='Official name')),\n                ('display_order', models.PositiveSmallIntegerField(default=0, verbose_name='Display order', db_index=True, help_text='Higher the number, higher the country in the list.')),\n                ('is_shipping_country', models.BooleanField(default=False, db_index=True, verbose_name='Is shipping country')),\n            ],\n            options={\n                'ordering': ('-display_order', 'printable_name'),\n                'verbose_name_plural': 'Countries',\n                'verbose_name': 'Country',\n                'abstract': False,\n            },\n            bases=(models.Model,),\n        ),\n        migrations.CreateModel(\n            name='UserAddress',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(verbose_name='Title', max_length=64, blank=True, choices=[('Mr', 'Mr'), ('Miss', 'Miss'), ('Mrs', 'Mrs'), ('Ms', 'Ms'), ('Dr', 'Dr')])),\n                ('first_name', models.CharField(max_length=255, verbose_name='First name', blank=True)),\n                ('last_name', models.CharField(max_length=255, verbose_name='Last name', blank=True)),\n                ('line1', models.CharField(max_length=255, verbose_name='First line of address')),\n                ('line2', models.CharField(max_length=255, verbose_name='Second line of address', blank=True)),\n                ('line3', models.CharField(max_length=255, verbose_name='Third line of address', blank=True)),\n                ('line4', models.CharField(max_length=255, verbose_name='City', blank=True)),\n                ('state', models.CharField(max_length=255, verbose_name='State/County', blank=True)),\n                ('postcode', oscar.models.fields.UppercaseCharField(max_length=64, verbose_name='Post/Zip-code', blank=True)),\n                ('search_text', models.TextField(editable=False, verbose_name='Search text - used only for searching addresses')),\n                ('phone_number', oscar.models.fields.PhoneNumberField(verbose_name='Phone number', help_text='In case we need to call you about your order', blank=True)),\n                ('notes', models.TextField(verbose_name='Instructions', help_text='Tell us anything we should know when delivering your order.', blank=True)),\n                ('is_default_for_shipping', models.BooleanField(default=False, verbose_name='Default shipping address?')),\n                ('is_default_for_billing', models.BooleanField(default=False, verbose_name='Default billing address?')),\n                ('num_orders', models.PositiveIntegerField(default=0, verbose_name='Number of Orders')),\n                ('hash', models.CharField(max_length=255, editable=False, db_index=True, verbose_name='Address Hash')),\n                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date Created')),\n                ('country', models.ForeignKey(verbose_name='Country', to='address.Country', on_delete=models.CASCADE)),\n                ('user', models.ForeignKey(verbose_name='User', related_name='addresses', to=settings.AUTH_USER_MODEL, on_delete=models.CASCADE)),\n            ],\n            options={\n                'ordering': ['-num_orders'],\n                'verbose_name_plural': 'User addresses',\n                'verbose_name': 'User address',\n                'abstract': False,\n            },\n            bases=(models.Model,),\n        ),\n        migrations.AlterUniqueTogether(\n            name='useraddress',\n            unique_together=set([('user', 'hash')]),\n        ),\n    ]\n",
    "output": "from datetime import datetime, date\n\nfrom django.test import TestCase\nfrom django.core.exceptions import ValidationError\nfrom django.core.files.uploadedfile import SimpleUploadedFile\n\nfrom oscar.test import factories\n\n\nclass TestBooleanAttributes(TestCase):\n\n    def setUp(self):\n        self.attr = factories.ProductAttributeFactory(type=\"boolean\")\n\n    def test_validate_boolean_values(self):\n        self.assertIsNone(self.attr.validate_value(True))\n\n    def test_validate_invalid_boolean_values(self):\n        with self.assertRaises(ValidationError):\n            self.attr.validate_value(1)\n\n\nclass TestMultiOptionAttributes(TestCase):\n\n    def setUp(self):\n        self.option_group = factories.AttributeOptionGroupFactory()\n        self.attr = factories.ProductAttributeFactory(\n            type='multi_option',\n            name='Sizes',\n            code='sizes',\n            option_group=self.option_group,\n        )\n\n        # Add some options to the group\n        self.options = factories.AttributeOptionFactory.create_batch(\n            3, group=self.option_group)\n\n    def test_validate_multi_option_values(self):\n        self.assertIsNone(self.attr.validate_value([\n            self.options[0], self.options[1]]))\n\n    def test_validate_invalid_multi_option_values(self):\n        with self.assertRaises(ValidationError):\n            # value must be an iterable\n            self.attr.validate_value('foobar')\n\n        with self.assertRaises(ValidationError):\n            # Items must all be AttributeOption objects\n            self.attr.validate_value([self.options[0], 'notanOption'])\n\n    def test_save_multi_option_value(self):\n        product = factories.ProductFactory()\n        # We'll save two out of the three available options\n        self.attr.save_value(product, [self.options[0], self.options[2]])\n        product.refresh_from_db()\n        self.assertEqual(list(product.attr.sizes), [self.options[0], self.options[2]])\n\n    def test_delete_multi_option_value(self):\n        product = factories.ProductFactory()\n        self.attr.save_value(product, [self.options[0], self.options[1]])\n        # Now delete these values\n        self.attr.save_value(product, None)\n        product.refresh_from_db()\n        self.assertFalse(hasattr(product.attr, 'sizes'))\n\n    def test_multi_option_value_as_text(self):\n        product = factories.ProductFactory()\n        self.attr.save_value(product, self.options)\n        attr_val = product.attribute_values.get(attribute=self.attr)\n        self.assertEqual(attr_val.value_as_text, \", \".join(o.option for o in self.options))\n\n\nclass TestDatetimeAttributes(TestCase):\n\n    def setUp(self):\n        self.attr = factories.ProductAttributeFactory(type=\"datetime\")\n\n    def test_validate_datetime_values(self):\n        self.assertIsNone(self.attr.validate_value(datetime.now()))\n\n    def test_validate_invalid_datetime_values(self):\n        with self.assertRaises(ValidationError):\n            self.attr.validate_value(1)\n\n\nclass TestDateAttributes(TestCase):\n\n    def setUp(self):\n        self.attr = factories.ProductAttributeFactory(type=\"date\")\n\n    def test_validate_datetime_values(self):\n        self.assertIsNone(self.attr.validate_value(datetime.now()))\n\n    def test_validate_date_values(self):\n        self.assertIsNone(self.attr.validate_value(date.today()))\n\n    def test_validate_invalid_date_values(self):\n        with self.assertRaises(ValidationError):\n            self.attr.validate_value(1)\n\n\nclass TestIntegerAttributes(TestCase):\n\n    def setUp(self):\n        self.attr = factories.ProductAttributeFactory(type=\"integer\")\n\n    def test_validate_integer_values(self):\n        self.assertIsNone(self.attr.validate_value(1))\n\n    def test_validate_str_integer_values(self):\n        self.assertIsNone(self.attr.validate_value('1'))\n\n    def test_validate_invalid_integer_values(self):\n        with self.assertRaises(ValidationError):\n            self.attr.validate_value('notanInteger')\n\n\nclass TestFloatAttributes(TestCase):\n\n    def setUp(self):\n        self.attr = factories.ProductAttributeFactory(type=\"float\")\n\n    def test_validate_integer_values(self):\n        self.assertIsNone(self.attr.validate_value(1))\n\n    def test_validate_float_values(self):\n        self.assertIsNone(self.attr.validate_value(1.2))\n\n    def test_validate_str_float_values(self):\n        self.assertIsNone(self.attr.validate_value('1.2'))\n\n    def test_validate_invalid_float_values(self):\n        with self.assertRaises(ValidationError):\n            self.attr.validate_value('notaFloat')\n\n\nclass TestTextAttributes(TestCase):\n\n    def setUp(self):\n        self.attr = factories.ProductAttributeFactory(type=\"text\")\n\n    def test_validate_string_and_unicode_values(self):\n        self.assertIsNone(self.attr.validate_value('String'))\n\n    def test_validate_invalid_float_values(self):\n        with self.assertRaises(ValidationError):\n            self.attr.validate_value(1)\n\n\nclass TestFileAttributes(TestCase):\n    def setUp(self):\n        self.attr = factories.ProductAttributeFactory(type=\"file\")\n\n    def test_validate_file_values(self):\n        file_field = SimpleUploadedFile('test_file.txt', b'Test')\n        self.assertIsNone(self.attr.validate_value(file_field))\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\nimport oscar.models.fields\nfrom django.conf import settings\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Country',\n            fields=[\n                ('iso_3166_1_a2', models.CharField(primary_key=True, max_length=2, verbose_name='ISO 3166-1 alpha-2', serialize=False)),\n                ('iso_3166_1_a3', models.CharField(max_length=3, verbose_name='ISO 3166-1 alpha-3', blank=True)),\n                ('iso_3166_1_numeric', models.CharField(max_length=3, verbose_name='ISO 3166-1 numeric', blank=True)),\n                ('printable_name', models.CharField(max_length=128, verbose_name='Country name')),\n                ('name', models.CharField(max_length=128, verbose_name='Official name')),\n                ('display_order', models.PositiveSmallIntegerField(default=0, verbose_name='Display order', db_index=True, help_text='Higher the number, higher the country in the list.')),\n                ('is_shipping_country', models.BooleanField(default=False, db_index=True, verbose_name='Is shipping country')),\n            ],\n            options={\n                'ordering': ('-display_order', 'printable_name'),\n                'verbose_name_plural': 'Countries',\n                'verbose_name': 'Country',\n                'abstract': False,\n            },\n            bases=(models.Model,),\n        ),\n        migrations.CreateModel(\n            name='UserAddress',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(verbose_name='Title', max_length=64, blank=True, choices=[('Mr', 'Mr'), ('Miss', 'Miss'), ('Mrs', 'Mrs'), ('Ms', 'Ms'), ('Dr', 'Dr')])),\n                ('first_name', models.CharField(max_length=255, verbose_name='First name', blank=True)),\n                ('last_name', models.CharField(max_length=255, verbose_name='Last name', blank=True)),\n                ('line1', models.CharField(max_length=255, verbose_name='First line of address')),\n                ('line2', models.CharField(max_length=255, verbose_name='Second line of address', blank=True)),\n                ('line3', models.CharField(max_length=255, verbose_name='Third line of address', blank=True)),\n                ('line4', models.CharField(max_length=255, verbose_name='City', blank=True)),\n                ('state', models.CharField(max_length=255, verbose_name='State/County', blank=True)),\n                ('postcode', oscar.models.fields.UppercaseCharField(max_length=64, verbose_name='Post/Zip-code', blank=True)),\n                ('search_text', models.TextField(editable=False, verbose_name='Search text - used only for searching addresses')),\n                ('phone_number', oscar.models.fields.PhoneNumberField(verbose_name='Phone number', help_text='In case we need to call you about your order', blank=True)),\n                ('notes', models.TextField(verbose_name='Instructions', help_text='Tell us anything we should know when delivering your order.', blank=True)),\n                ('is_default_for_shipping', models.BooleanField(default=False, verbose_name='Default shipping address?')),\n                ('is_default_for_billing', models.BooleanField(default=False, verbose_name='Default billing address?')),\n                ('num_orders', models.PositiveIntegerField(default=0, verbose_name='Number of Orders')),\n                ('hash', models.CharField(max_length=255, editable=False, db_index=True, verbose_name='Address Hash')),\n                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date Created')),\n                ('country', models.ForeignKey(verbose_name='Country', to='address.Country', on_delete=models.CASCADE)),\n                ('user', models.ForeignKey(verbose_name='User', related_name='addresses', to=settings.AUTH_USER_MODEL, on_delete=models.CASCADE)),\n            ],\n            options={\n                'ordering': ['-num_orders'],\n                'verbose_name_plural': 'User addresses',\n                'verbose_name': 'User address',\n                'abstract': False,\n            },\n            bases=(models.Model,),\n        ),\n        migrations.AlterUniqueTogether(\n            name='useraddress',\n            unique_together=set([('user', 'hash')]),\n        ),\n    ]\n",
    "output": "# -*- coding: utf-8 -*-\nfrom django.core.cache import cache\nfrom django.test import TestCase\nfrom django.test.utils import override_settings\n\nfrom oscar.apps.catalogue.models import Category\nfrom oscar.apps.catalogue.categories import create_from_breadcrumbs\nfrom oscar.templatetags.category_tags import get_annotated_list\n\n\nclass TestCategory(TestCase):\n\n    def setUp(self):\n        self.products = Category.add_root(name=\"Pr\u00f6ducts\")\n        self.books = self.products.add_child(name=\"B\u00fccher\")\n\n    def tearDown(self):\n        cache.clear()\n\n    def test_includes_parents_name_in_full_name(self):\n        self.assertTrue(self.products.name in self.books.full_name)\n\n    def test_has_children_method(self):\n        self.assertTrue(self.products.has_children())\n\n    def test_slugs_were_autogenerated(self):\n        self.assertTrue(self.products.slug)\n        self.assertTrue(self.books.slug)\n\n    def test_supplied_slug_is_not_altered(self):\n        more_books = self.products.add_child(\n            name=self.books.name, slug=self.books.slug)\n        self.assertEqual(more_books.slug, self.books.slug)\n\n    @override_settings(OSCAR_SLUG_ALLOW_UNICODE=True)\n    def test_unicode_slug(self):\n        root_category = Category.add_root(name=\"Vins fran\u00e7ais\")\n        child_category = root_category.add_child(name=\"Ch\u00e2teau d'Yquem\")\n        self.assertEqual(root_category.slug, 'vins-fran\u00e7ais')\n        self.assertEqual(\n            root_category.get_absolute_url(), '/catalogue/category/vins-fran%C3%A7ais_{}/'.format(root_category.pk)\n        )\n        self.assertEqual(child_category.slug, 'ch\u00e2teau-dyquem')\n        self.assertEqual(\n            child_category.get_absolute_url(),\n            '/catalogue/category/vins-fran%C3%A7ais/ch%C3%A2teau-dyquem_{}/'.format(child_category.pk)\n        )\n\n    @override_settings(OSCAR_SLUG_ALLOW_UNICODE=True)\n    def test_url_caching(self):\n        category = self.products.add_child(name=\"Fromages fran\u00e7ais\")\n        absolute_url = category.get_absolute_url()\n        url = cache.get(category.get_url_cache_key())\n        self.assertEqual(url, '/catalogue/category/products/fromages-fran%C3%A7ais_{}/'.format(category.pk))\n        self.assertEqual(absolute_url, '/catalogue/category/products/fromages-fran%C3%A7ais_{}/'.format(category.pk))\n\n\nclass TestMovingACategory(TestCase):\n\n    def setUp(self):\n        breadcrumbs = (\n            'Books > Fiction > Horror > Teen',\n            'Books > Fiction > Horror > Gothic',\n            'Books > Fiction > Comedy',\n            'Books > Non-fiction > Biography',\n            'Books > Non-fiction > Programming',\n            'Books > Children',\n        )\n        for trail in breadcrumbs:\n            create_from_breadcrumbs(trail)\n\n        horror = Category.objects.get(name=\"Horror\")\n        programming = Category.objects.get(name=\"Programming\")\n        horror.move(programming)\n\n        # Reload horror instance to pick up changes\n        self.horror = Category.objects.get(name=\"Horror\")\n\n    def test_updates_instance_name(self):\n        self.assertEqual('Books > Non-fiction > Horror', self.horror.full_name)\n\n    def test_updates_subtree_names(self):\n        teen = Category.objects.get(name=\"Teen\")\n        self.assertEqual('Books > Non-fiction > Horror > Teen',\n                         teen.full_name)\n        gothic = Category.objects.get(name=\"Gothic\")\n        self.assertEqual('Books > Non-fiction > Horror > Gothic',\n                         gothic.full_name)\n\n\nclass TestCategoryFactory(TestCase):\n\n    def test_can_create_single_level_category(self):\n        trail = 'Books'\n        category = create_from_breadcrumbs(trail)\n        self.assertIsNotNone(category)\n        self.assertEqual(category.name, 'Books')\n        self.assertEqual(category.slug, 'books')\n\n    def test_can_create_parent_and_child_categories(self):\n        trail = 'Books > Science-Fiction'\n        category = create_from_breadcrumbs(trail)\n\n        self.assertIsNotNone(category)\n        self.assertEqual(category.name, 'Science-Fiction')\n        self.assertEqual(category.get_depth(), 2)\n        self.assertEqual(category.get_parent().name, 'Books')\n        self.assertEqual(2, Category.objects.count())\n        self.assertEqual(category.full_slug, 'books/science-fiction')\n\n    def test_can_create_multiple_categories(self):\n        trail = 'Books > Science-Fiction > Star Trek'\n        create_from_breadcrumbs(trail)\n        trail = 'Books > Factual > Popular Science'\n        category = create_from_breadcrumbs(trail)\n\n        self.assertIsNotNone(category)\n        self.assertEqual(category.name, 'Popular Science')\n        self.assertEqual(category.get_depth(), 3)\n        self.assertEqual(category.get_parent().name, 'Factual')\n        self.assertEqual(5, Category.objects.count())\n        self.assertEqual(category.full_slug, 'books/factual/popular-science', )\n\n    def test_can_use_alternative_separator(self):\n        trail = 'Food|Cheese|Blue'\n        create_from_breadcrumbs(trail, separator='|')\n        self.assertEqual(3, len(Category.objects.all()))\n\n    def test_updating_subtree_slugs_when_moving_category_to_new_parent(self):\n        trail = 'A > B > C'\n        create_from_breadcrumbs(trail)\n        trail = 'A > B > D'\n        create_from_breadcrumbs(trail)\n        trail = 'A > E > F'\n        create_from_breadcrumbs(trail)\n        trail = 'A > E > G'\n        create_from_breadcrumbs(trail)\n\n        trail = 'T'\n        target = create_from_breadcrumbs(trail)\n        category = Category.objects.get(name='A')\n\n        category.move(target, pos='first-child')\n\n        c1 = Category.objects.get(name='A')\n        self.assertEqual(c1.full_slug, 't/a')\n        self.assertEqual(c1.full_name, 'T > A')\n\n        child = Category.objects.get(name='F')\n        self.assertEqual(child.full_slug, 't/a/e/f')\n        self.assertEqual(child.full_name, 'T > A > E > F')\n\n        child = Category.objects.get(name='D')\n        self.assertEqual(child.full_slug, 't/a/b/d')\n        self.assertEqual(child.full_name, 'T > A > B > D')\n\n    def test_updating_subtree_when_moving_category_to_new_sibling(self):\n        trail = 'A > B > C'\n        create_from_breadcrumbs(trail)\n        trail = 'A > B > D'\n        create_from_breadcrumbs(trail)\n        trail = 'A > E > F'\n        create_from_breadcrumbs(trail)\n        trail = 'A > E > G'\n        create_from_breadcrumbs(trail)\n\n        category = Category.objects.get(name='E')\n        target = Category.objects.get(name='A')\n\n        category.move(target, pos='right')\n\n        child = Category.objects.get(name='E')\n        self.assertEqual(child.full_slug, 'e')\n        self.assertEqual(child.full_name, 'E')\n\n        child = Category.objects.get(name='F')\n        self.assertEqual(child.full_slug, 'e/f')\n        self.assertEqual(child.full_name, 'E > F')\n\n\nclass TestCategoryTemplateTags(TestCase):\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.template = \"\"\"\n          {% if tree_categories %}\n              <ul>\n              {% for tree_category, info in tree_categories %}\n                  <li>\n                  {% if tree_category.pk == category.pk %}\n                      <strong>{{ tree_category.name }}</strong>\n                  {% else %}\n                      <a href=\"{{ tree_category.get_absolute_url }}\">\n                          {{ tree_category.name }}</a>\n                  {% endif %}\n                  {% if info.has_children %}<ul>{% else %}</li>{% endif %}\n                  {% for n in info.num_to_close %}\n                      </ul></li>\n                  {% endfor %}\n              {% endfor %}\n              </ul>\n          {% endif %}\n        \"\"\"\n\n    def setUp(self):\n        breadcrumbs = (\n            'Books > Fiction > Horror > Teen',\n            'Books > Fiction > Horror > Gothic',\n            'Books > Fiction > Comedy',\n            'Books > Non-fiction > Biography',\n            'Books > Non-fiction > Programming',\n            'Books > Children',\n        )\n        for trail in breadcrumbs:\n            create_from_breadcrumbs(trail)\n\n    def get_category_names(self, depth=None, parent=None):\n        \"\"\"\n        For the tests, we are only interested in the category names returned\n        from the template tag. This helper calls the template tag and\n        returns a list of the included categories.\n        \"\"\"\n        annotated_list = get_annotated_list(depth, parent)\n        names = [category.name for category, __ in annotated_list]\n        names_set = set(names)\n        # We return a set to ease testing, but need to be sure we're not\n        # losing any duplicates through that conversion.\n        self.assertEqual(len(names_set), len(names))\n        return names_set\n\n    def test_all_categories(self):\n        expected_categories = {\n            'Books', 'Fiction', 'Horror', 'Teen', 'Gothic', 'Comedy',\n            'Non-fiction', 'Biography', 'Programming', 'Children'}\n        actual_categories = self.get_category_names()\n        self.assertEqual(expected_categories, actual_categories)\n\n    def test_categories_depth(self):\n        expected_categories = {'Books'}\n        actual_categories = self.get_category_names(depth=1)\n        self.assertEqual(expected_categories, actual_categories)\n\n    def test_categories_parent(self):\n        parent = Category.objects.get(name=\"Fiction\")\n        actual_categories = self.get_category_names(parent=parent)\n        expected_categories = {'Horror', 'Teen', 'Gothic', 'Comedy'}\n        self.assertEqual(expected_categories, actual_categories)\n\n    def test_categories_depth_parent(self):\n        parent = Category.objects.get(name=\"Fiction\")\n        actual_categories = self.get_category_names(depth=1, parent=parent)\n        expected_categories = {'Horror', 'Comedy'}\n        self.assertEqual(expected_categories, actual_categories)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\nimport oscar.models.fields\nfrom django.conf import settings\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Country',\n            fields=[\n                ('iso_3166_1_a2', models.CharField(primary_key=True, max_length=2, verbose_name='ISO 3166-1 alpha-2', serialize=False)),\n                ('iso_3166_1_a3', models.CharField(max_length=3, verbose_name='ISO 3166-1 alpha-3', blank=True)),\n                ('iso_3166_1_numeric', models.CharField(max_length=3, verbose_name='ISO 3166-1 numeric', blank=True)),\n                ('printable_name', models.CharField(max_length=128, verbose_name='Country name')),\n                ('name', models.CharField(max_length=128, verbose_name='Official name')),\n                ('display_order', models.PositiveSmallIntegerField(default=0, verbose_name='Display order', db_index=True, help_text='Higher the number, higher the country in the list.')),\n                ('is_shipping_country', models.BooleanField(default=False, db_index=True, verbose_name='Is shipping country')),\n            ],\n            options={\n                'ordering': ('-display_order', 'printable_name'),\n                'verbose_name_plural': 'Countries',\n                'verbose_name': 'Country',\n                'abstract': False,\n            },\n            bases=(models.Model,),\n        ),\n        migrations.CreateModel(\n            name='UserAddress',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(verbose_name='Title', max_length=64, blank=True, choices=[('Mr', 'Mr'), ('Miss', 'Miss'), ('Mrs', 'Mrs'), ('Ms', 'Ms'), ('Dr', 'Dr')])),\n                ('first_name', models.CharField(max_length=255, verbose_name='First name', blank=True)),\n                ('last_name', models.CharField(max_length=255, verbose_name='Last name', blank=True)),\n                ('line1', models.CharField(max_length=255, verbose_name='First line of address')),\n                ('line2', models.CharField(max_length=255, verbose_name='Second line of address', blank=True)),\n                ('line3', models.CharField(max_length=255, verbose_name='Third line of address', blank=True)),\n                ('line4', models.CharField(max_length=255, verbose_name='City', blank=True)),\n                ('state', models.CharField(max_length=255, verbose_name='State/County', blank=True)),\n                ('postcode', oscar.models.fields.UppercaseCharField(max_length=64, verbose_name='Post/Zip-code', blank=True)),\n                ('search_text', models.TextField(editable=False, verbose_name='Search text - used only for searching addresses')),\n                ('phone_number', oscar.models.fields.PhoneNumberField(verbose_name='Phone number', help_text='In case we need to call you about your order', blank=True)),\n                ('notes', models.TextField(verbose_name='Instructions', help_text='Tell us anything we should know when delivering your order.', blank=True)),\n                ('is_default_for_shipping', models.BooleanField(default=False, verbose_name='Default shipping address?')),\n                ('is_default_for_billing', models.BooleanField(default=False, verbose_name='Default billing address?')),\n                ('num_orders', models.PositiveIntegerField(default=0, verbose_name='Number of Orders')),\n                ('hash', models.CharField(max_length=255, editable=False, db_index=True, verbose_name='Address Hash')),\n                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date Created')),\n                ('country', models.ForeignKey(verbose_name='Country', to='address.Country', on_delete=models.CASCADE)),\n                ('user', models.ForeignKey(verbose_name='User', related_name='addresses', to=settings.AUTH_USER_MODEL, on_delete=models.CASCADE)),\n            ],\n            options={\n                'ordering': ['-num_orders'],\n                'verbose_name_plural': 'User addresses',\n                'verbose_name': 'User address',\n                'abstract': False,\n            },\n            bases=(models.Model,),\n        ),\n        migrations.AlterUniqueTogether(\n            name='useraddress',\n            unique_together=set([('user', 'hash')]),\n        ),\n    ]\n",
    "output": "import pytest\nfrom django.core.exceptions import ValidationError\n\nfrom oscar.apps.catalogue import models\n\n\ndef test_product_attributes_can_contain_underscores():\n    attr = models.ProductAttribute(name=\"A\", code=\"a_b\")\n    attr.full_clean()\n\n\ndef test_product_attributes_cant_contain_hyphens():\n    attr = models.ProductAttribute(name=\"A\", code=\"a-b\")\n    with pytest.raises(ValidationError):\n        attr.full_clean()\n\n\ndef test_product_attributes_cant_be_python_keywords():\n    attr = models.ProductAttribute(name=\"A\", code=\"import\")\n    with pytest.raises(ValidationError):\n        attr.full_clean()\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\nimport oscar.models.fields\nfrom django.conf import settings\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Country',\n            fields=[\n                ('iso_3166_1_a2', models.CharField(primary_key=True, max_length=2, verbose_name='ISO 3166-1 alpha-2', serialize=False)),\n                ('iso_3166_1_a3', models.CharField(max_length=3, verbose_name='ISO 3166-1 alpha-3', blank=True)),\n                ('iso_3166_1_numeric', models.CharField(max_length=3, verbose_name='ISO 3166-1 numeric', blank=True)),\n                ('printable_name', models.CharField(max_length=128, verbose_name='Country name')),\n                ('name', models.CharField(max_length=128, verbose_name='Official name')),\n                ('display_order', models.PositiveSmallIntegerField(default=0, verbose_name='Display order', db_index=True, help_text='Higher the number, higher the country in the list.')),\n                ('is_shipping_country', models.BooleanField(default=False, db_index=True, verbose_name='Is shipping country')),\n            ],\n            options={\n                'ordering': ('-display_order', 'printable_name'),\n                'verbose_name_plural': 'Countries',\n                'verbose_name': 'Country',\n                'abstract': False,\n            },\n            bases=(models.Model,),\n        ),\n        migrations.CreateModel(\n            name='UserAddress',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(verbose_name='Title', max_length=64, blank=True, choices=[('Mr', 'Mr'), ('Miss', 'Miss'), ('Mrs', 'Mrs'), ('Ms', 'Ms'), ('Dr', 'Dr')])),\n                ('first_name', models.CharField(max_length=255, verbose_name='First name', blank=True)),\n                ('last_name', models.CharField(max_length=255, verbose_name='Last name', blank=True)),\n                ('line1', models.CharField(max_length=255, verbose_name='First line of address')),\n                ('line2', models.CharField(max_length=255, verbose_name='Second line of address', blank=True)),\n                ('line3', models.CharField(max_length=255, verbose_name='Third line of address', blank=True)),\n                ('line4', models.CharField(max_length=255, verbose_name='City', blank=True)),\n                ('state', models.CharField(max_length=255, verbose_name='State/County', blank=True)),\n                ('postcode', oscar.models.fields.UppercaseCharField(max_length=64, verbose_name='Post/Zip-code', blank=True)),\n                ('search_text', models.TextField(editable=False, verbose_name='Search text - used only for searching addresses')),\n                ('phone_number', oscar.models.fields.PhoneNumberField(verbose_name='Phone number', help_text='In case we need to call you about your order', blank=True)),\n                ('notes', models.TextField(verbose_name='Instructions', help_text='Tell us anything we should know when delivering your order.', blank=True)),\n                ('is_default_for_shipping', models.BooleanField(default=False, verbose_name='Default shipping address?')),\n                ('is_default_for_billing', models.BooleanField(default=False, verbose_name='Default billing address?')),\n                ('num_orders', models.PositiveIntegerField(default=0, verbose_name='Number of Orders')),\n                ('hash', models.CharField(max_length=255, editable=False, db_index=True, verbose_name='Address Hash')),\n                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date Created')),\n                ('country', models.ForeignKey(verbose_name='Country', to='address.Country', on_delete=models.CASCADE)),\n                ('user', models.ForeignKey(verbose_name='User', related_name='addresses', to=settings.AUTH_USER_MODEL, on_delete=models.CASCADE)),\n            ],\n            options={\n                'ordering': ['-num_orders'],\n                'verbose_name_plural': 'User addresses',\n                'verbose_name': 'User address',\n                'abstract': False,\n            },\n            bases=(models.Model,),\n        ),\n        migrations.AlterUniqueTogether(\n            name='useraddress',\n            unique_together=set([('user', 'hash')]),\n        ),\n    ]\n",
    "output": "from django.test import TestCase\n\nfrom oscar.test import factories\nfrom oscar.core.loading import get_model\n\n\nProduct = get_model('catalogue', 'Product')\n\n\nclass ProductOptionTests(TestCase):\n    def setUp(self):\n        self.product_class = factories.ProductClassFactory()\n        self.product = factories.create_product(product_class=self.product_class)\n        self.option = factories.OptionFactory()\n\n    def test_product_has_options_per_product_class(self):\n        self.product_class.options.add(self.option)\n        self.assertTrue(self.product.has_options)\n\n    def test_product_has_options_per_product(self):\n        self.product.product_options.add(self.option)\n        self.assertTrue(self.product.has_options)\n\n    def test_queryset_per_product_class(self):\n        self.product_class.options.add(self.option)\n        qs = Product.browsable.base_queryset().filter(id=self.product.id)\n        product = qs.first()\n        self.assertTrue(product.has_options)\n        self.assertEquals(product.num_product_class_options, 1)\n\n    def test_queryset_per_product(self):\n        self.product.product_options.add(self.option)\n        qs = Product.browsable.base_queryset().filter(id=self.product.id)\n        product = qs.first()\n        self.assertTrue(product.has_options)\n        self.assertEquals(product.num_product_options, 1)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\nimport oscar.models.fields\nfrom django.conf import settings\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Country',\n            fields=[\n                ('iso_3166_1_a2', models.CharField(primary_key=True, max_length=2, verbose_name='ISO 3166-1 alpha-2', serialize=False)),\n                ('iso_3166_1_a3', models.CharField(max_length=3, verbose_name='ISO 3166-1 alpha-3', blank=True)),\n                ('iso_3166_1_numeric', models.CharField(max_length=3, verbose_name='ISO 3166-1 numeric', blank=True)),\n                ('printable_name', models.CharField(max_length=128, verbose_name='Country name')),\n                ('name', models.CharField(max_length=128, verbose_name='Official name')),\n                ('display_order', models.PositiveSmallIntegerField(default=0, verbose_name='Display order', db_index=True, help_text='Higher the number, higher the country in the list.')),\n                ('is_shipping_country', models.BooleanField(default=False, db_index=True, verbose_name='Is shipping country')),\n            ],\n            options={\n                'ordering': ('-display_order', 'printable_name'),\n                'verbose_name_plural': 'Countries',\n                'verbose_name': 'Country',\n                'abstract': False,\n            },\n            bases=(models.Model,),\n        ),\n        migrations.CreateModel(\n            name='UserAddress',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(verbose_name='Title', max_length=64, blank=True, choices=[('Mr', 'Mr'), ('Miss', 'Miss'), ('Mrs', 'Mrs'), ('Ms', 'Ms'), ('Dr', 'Dr')])),\n                ('first_name', models.CharField(max_length=255, verbose_name='First name', blank=True)),\n                ('last_name', models.CharField(max_length=255, verbose_name='Last name', blank=True)),\n                ('line1', models.CharField(max_length=255, verbose_name='First line of address')),\n                ('line2', models.CharField(max_length=255, verbose_name='Second line of address', blank=True)),\n                ('line3', models.CharField(max_length=255, verbose_name='Third line of address', blank=True)),\n                ('line4', models.CharField(max_length=255, verbose_name='City', blank=True)),\n                ('state', models.CharField(max_length=255, verbose_name='State/County', blank=True)),\n                ('postcode', oscar.models.fields.UppercaseCharField(max_length=64, verbose_name='Post/Zip-code', blank=True)),\n                ('search_text', models.TextField(editable=False, verbose_name='Search text - used only for searching addresses')),\n                ('phone_number', oscar.models.fields.PhoneNumberField(verbose_name='Phone number', help_text='In case we need to call you about your order', blank=True)),\n                ('notes', models.TextField(verbose_name='Instructions', help_text='Tell us anything we should know when delivering your order.', blank=True)),\n                ('is_default_for_shipping', models.BooleanField(default=False, verbose_name='Default shipping address?')),\n                ('is_default_for_billing', models.BooleanField(default=False, verbose_name='Default billing address?')),\n                ('num_orders', models.PositiveIntegerField(default=0, verbose_name='Number of Orders')),\n                ('hash', models.CharField(max_length=255, editable=False, db_index=True, verbose_name='Address Hash')),\n                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date Created')),\n                ('country', models.ForeignKey(verbose_name='Country', to='address.Country', on_delete=models.CASCADE)),\n                ('user', models.ForeignKey(verbose_name='User', related_name='addresses', to=settings.AUTH_USER_MODEL, on_delete=models.CASCADE)),\n            ],\n            options={\n                'ordering': ['-num_orders'],\n                'verbose_name_plural': 'User addresses',\n                'verbose_name': 'User address',\n                'abstract': False,\n            },\n            bases=(models.Model,),\n        ),\n        migrations.AlterUniqueTogether(\n            name='useraddress',\n            unique_together=set([('user', 'hash')]),\n        ),\n    ]\n",
    "output": "# coding=utf-8\nfrom django.db import IntegrityError\nfrom django.test import TestCase\nfrom django.core.exceptions import ValidationError\n\nfrom oscar.apps.catalogue.models import (Product, ProductClass,\n                                         ProductAttribute,\n                                         AttributeOption,\n                                         ProductRecommendation)\nfrom oscar.test import factories\n\n\nclass ProductTests(TestCase):\n\n    def setUp(self):\n        self.product_class, _ = ProductClass.objects.get_or_create(\n            name='Clothing')\n\n\nclass ProductCreationTests(ProductTests):\n\n    def setUp(self):\n        super().setUp()\n        ProductAttribute.objects.create(product_class=self.product_class,\n                                        name='Number of pages',\n                                        code='num_pages',\n                                        type='integer')\n        Product.ENABLE_ATTRIBUTE_BINDING = True\n\n    def tearDown(self):\n        Product.ENABLE_ATTRIBUTE_BINDING = False\n\n    def test_create_products_with_attributes(self):\n        product = Product(upc='1234',\n                          product_class=self.product_class,\n                          title='testing')\n        product.attr.num_pages = 100\n        product.save()\n\n    def test_none_upc_is_represented_as_empty_string(self):\n        product = Product(product_class=self.product_class,\n                          title='testing', upc=None)\n        product.save()\n        product.refresh_from_db()\n        self.assertEqual(product.upc, '')\n\n    def test_upc_uniqueness_enforced(self):\n        Product.objects.create(product_class=self.product_class,\n                               title='testing', upc='bah')\n        self.assertRaises(IntegrityError, Product.objects.create,\n                          product_class=self.product_class,\n                          title='testing', upc='bah')\n\n    def test_allow_two_products_without_upc(self):\n        for x in range(2):\n            Product.objects.create(product_class=self.product_class,\n                                   title='testing', upc=None)\n\n\nclass TopLevelProductTests(ProductTests):\n\n    def test_top_level_products_must_have_titles(self):\n        product = Product(product_class=self.product_class)\n        self.assertRaises(ValidationError, product.clean)\n\n    def test_top_level_products_must_have_product_class(self):\n        product = Product(title=\"Kopfh\u00f6rer\")\n        self.assertRaises(ValidationError, product.clean)\n\n    def test_top_level_products_are_part_of_browsable_set(self):\n        product = Product.objects.create(\n            product_class=self.product_class, title=\"Kopfh\u00f6rer\")\n        self.assertEqual(set([product]), set(Product.browsable.all()))\n\n\nclass ChildProductTests(ProductTests):\n\n    def setUp(self):\n        super().setUp()\n        self.parent = Product.objects.create(\n            title=\"Parent product\",\n            product_class=self.product_class,\n            structure=Product.PARENT,\n            is_discountable=False)\n\n    def test_child_products_dont_need_titles(self):\n        Product.objects.create(\n            parent=self.parent, structure=Product.CHILD)\n\n    def test_child_products_dont_need_a_product_class(self):\n        Product.objects.create(parent=self.parent, structure=Product.CHILD)\n\n    def test_child_products_inherit_fields(self):\n        p = Product.objects.create(\n            parent=self.parent,\n            structure=Product.CHILD,\n            is_discountable=True)\n        self.assertEqual(\"Parent product\", p.get_title())\n        self.assertEqual(\"Clothing\", p.get_product_class().name)\n        self.assertEqual(False, p.get_is_discountable())\n\n    def test_child_products_are_not_part_of_browsable_set(self):\n        Product.objects.create(\n            product_class=self.product_class, parent=self.parent,\n            structure=Product.CHILD)\n        self.assertEqual(set([self.parent]), set(Product.browsable.all()))\n\n\nclass TestAChildProduct(TestCase):\n\n    def setUp(self):\n        clothing = ProductClass.objects.create(\n            name='Clothing', requires_shipping=True)\n        self.parent = clothing.products.create(\n            title=\"Parent\", structure=Product.PARENT)\n        self.child = self.parent.children.create(structure=Product.CHILD)\n\n    def test_delegates_requires_shipping_logic(self):\n        self.assertTrue(self.child.is_shipping_required)\n\n\nclass ProductAttributeCreationTests(TestCase):\n\n    def test_validating_option_attribute(self):\n        option_group = factories.AttributeOptionGroupFactory()\n        option_1 = factories.AttributeOptionFactory(group=option_group)\n        option_2 = factories.AttributeOptionFactory(group=option_group)\n        pa = factories.ProductAttribute(\n            type='option', option_group=option_group)\n\n        self.assertRaises(ValidationError, pa.validate_value, 'invalid')\n        pa.validate_value(option_1)\n        pa.validate_value(option_2)\n\n        invalid_option = AttributeOption(option='invalid option')\n        self.assertRaises(\n            ValidationError, pa.validate_value, invalid_option)\n\n    def test_entity_attributes(self):\n        unrelated_object = factories.PartnerFactory()\n        attribute = factories.ProductAttributeFactory(type='entity')\n\n        attribute_value = factories.ProductAttributeValueFactory(\n            attribute=attribute, value_entity=unrelated_object)\n\n        self.assertEqual(attribute_value.value, unrelated_object)\n\n\nclass ProductRecommendationTests(ProductTests):\n\n    def setUp(self):\n        super().setUp()\n        self.primary_product = Product.objects.create(\n            upc='1234', product_class=self.product_class, title='Primary Product'\n        )\n\n    def test_recommended_products_ordering(self):\n        secondary_products = []\n        for i in range(5):\n            secondary_products.append(Product.objects.create(\n                upc='secondary%s' % i, product_class=self.product_class, title='Secondary Product #%s' % i\n            ))\n\n        ProductRecommendation.objects.create(\n            primary=self.primary_product, recommendation=secondary_products[3], ranking=5)\n        ProductRecommendation.objects.create(\n            primary=self.primary_product, recommendation=secondary_products[1], ranking=2)\n        ProductRecommendation.objects.create(\n            primary=self.primary_product, recommendation=secondary_products[2], ranking=4)\n        ProductRecommendation.objects.create(\n            primary=self.primary_product, recommendation=secondary_products[4], ranking=1)\n        ProductRecommendation.objects.create(\n            primary=self.primary_product, recommendation=secondary_products[0], ranking=3)\n        recommended_products = [\n            secondary_products[3], secondary_products[2], secondary_products[0],\n            secondary_products[1], secondary_products[4]\n        ]\n        self.assertEqual(self.primary_product.sorted_recommended_products, recommended_products)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\nimport oscar.models.fields\nfrom django.conf import settings\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Country',\n            fields=[\n                ('iso_3166_1_a2', models.CharField(primary_key=True, max_length=2, verbose_name='ISO 3166-1 alpha-2', serialize=False)),\n                ('iso_3166_1_a3', models.CharField(max_length=3, verbose_name='ISO 3166-1 alpha-3', blank=True)),\n                ('iso_3166_1_numeric', models.CharField(max_length=3, verbose_name='ISO 3166-1 numeric', blank=True)),\n                ('printable_name', models.CharField(max_length=128, verbose_name='Country name')),\n                ('name', models.CharField(max_length=128, verbose_name='Official name')),\n                ('display_order', models.PositiveSmallIntegerField(default=0, verbose_name='Display order', db_index=True, help_text='Higher the number, higher the country in the list.')),\n                ('is_shipping_country', models.BooleanField(default=False, db_index=True, verbose_name='Is shipping country')),\n            ],\n            options={\n                'ordering': ('-display_order', 'printable_name'),\n                'verbose_name_plural': 'Countries',\n                'verbose_name': 'Country',\n                'abstract': False,\n            },\n            bases=(models.Model,),\n        ),\n        migrations.CreateModel(\n            name='UserAddress',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(verbose_name='Title', max_length=64, blank=True, choices=[('Mr', 'Mr'), ('Miss', 'Miss'), ('Mrs', 'Mrs'), ('Ms', 'Ms'), ('Dr', 'Dr')])),\n                ('first_name', models.CharField(max_length=255, verbose_name='First name', blank=True)),\n                ('last_name', models.CharField(max_length=255, verbose_name='Last name', blank=True)),\n                ('line1', models.CharField(max_length=255, verbose_name='First line of address')),\n                ('line2', models.CharField(max_length=255, verbose_name='Second line of address', blank=True)),\n                ('line3', models.CharField(max_length=255, verbose_name='Third line of address', blank=True)),\n                ('line4', models.CharField(max_length=255, verbose_name='City', blank=True)),\n                ('state', models.CharField(max_length=255, verbose_name='State/County', blank=True)),\n                ('postcode', oscar.models.fields.UppercaseCharField(max_length=64, verbose_name='Post/Zip-code', blank=True)),\n                ('search_text', models.TextField(editable=False, verbose_name='Search text - used only for searching addresses')),\n                ('phone_number', oscar.models.fields.PhoneNumberField(verbose_name='Phone number', help_text='In case we need to call you about your order', blank=True)),\n                ('notes', models.TextField(verbose_name='Instructions', help_text='Tell us anything we should know when delivering your order.', blank=True)),\n                ('is_default_for_shipping', models.BooleanField(default=False, verbose_name='Default shipping address?')),\n                ('is_default_for_billing', models.BooleanField(default=False, verbose_name='Default billing address?')),\n                ('num_orders', models.PositiveIntegerField(default=0, verbose_name='Number of Orders')),\n                ('hash', models.CharField(max_length=255, editable=False, db_index=True, verbose_name='Address Hash')),\n                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date Created')),\n                ('country', models.ForeignKey(verbose_name='Country', to='address.Country', on_delete=models.CASCADE)),\n                ('user', models.ForeignKey(verbose_name='User', related_name='addresses', to=settings.AUTH_USER_MODEL, on_delete=models.CASCADE)),\n            ],\n            options={\n                'ordering': ['-num_orders'],\n                'verbose_name_plural': 'User addresses',\n                'verbose_name': 'User address',\n                'abstract': False,\n            },\n            bases=(models.Model,),\n        ),\n        migrations.AlterUniqueTogether(\n            name='useraddress',\n            unique_together=set([('user', 'hash')]),\n        ),\n    ]\n",
    "output": "from django.test import TestCase\n\nfrom oscar.apps.catalogue import models\n\n\nclass TestProductClassModel(TestCase):\n\n    def test_slug_is_auto_created(self):\n        books = models.ProductClass.objects.create(\n            name=\"Book\",\n        )\n        self.assertEqual('book', books.slug)\n\n    def test_has_attribute_for_whether_shipping_is_required(self):\n        models.ProductClass.objects.create(\n            name=\"Download\",\n            requires_shipping=False,\n        )\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\nimport oscar.models.fields\nfrom django.conf import settings\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Country',\n            fields=[\n                ('iso_3166_1_a2', models.CharField(primary_key=True, max_length=2, verbose_name='ISO 3166-1 alpha-2', serialize=False)),\n                ('iso_3166_1_a3', models.CharField(max_length=3, verbose_name='ISO 3166-1 alpha-3', blank=True)),\n                ('iso_3166_1_numeric', models.CharField(max_length=3, verbose_name='ISO 3166-1 numeric', blank=True)),\n                ('printable_name', models.CharField(max_length=128, verbose_name='Country name')),\n                ('name', models.CharField(max_length=128, verbose_name='Official name')),\n                ('display_order', models.PositiveSmallIntegerField(default=0, verbose_name='Display order', db_index=True, help_text='Higher the number, higher the country in the list.')),\n                ('is_shipping_country', models.BooleanField(default=False, db_index=True, verbose_name='Is shipping country')),\n            ],\n            options={\n                'ordering': ('-display_order', 'printable_name'),\n                'verbose_name_plural': 'Countries',\n                'verbose_name': 'Country',\n                'abstract': False,\n            },\n            bases=(models.Model,),\n        ),\n        migrations.CreateModel(\n            name='UserAddress',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(verbose_name='Title', max_length=64, blank=True, choices=[('Mr', 'Mr'), ('Miss', 'Miss'), ('Mrs', 'Mrs'), ('Ms', 'Ms'), ('Dr', 'Dr')])),\n                ('first_name', models.CharField(max_length=255, verbose_name='First name', blank=True)),\n                ('last_name', models.CharField(max_length=255, verbose_name='Last name', blank=True)),\n                ('line1', models.CharField(max_length=255, verbose_name='First line of address')),\n                ('line2', models.CharField(max_length=255, verbose_name='Second line of address', blank=True)),\n                ('line3', models.CharField(max_length=255, verbose_name='Third line of address', blank=True)),\n                ('line4', models.CharField(max_length=255, verbose_name='City', blank=True)),\n                ('state', models.CharField(max_length=255, verbose_name='State/County', blank=True)),\n                ('postcode', oscar.models.fields.UppercaseCharField(max_length=64, verbose_name='Post/Zip-code', blank=True)),\n                ('search_text', models.TextField(editable=False, verbose_name='Search text - used only for searching addresses')),\n                ('phone_number', oscar.models.fields.PhoneNumberField(verbose_name='Phone number', help_text='In case we need to call you about your order', blank=True)),\n                ('notes', models.TextField(verbose_name='Instructions', help_text='Tell us anything we should know when delivering your order.', blank=True)),\n                ('is_default_for_shipping', models.BooleanField(default=False, verbose_name='Default shipping address?')),\n                ('is_default_for_billing', models.BooleanField(default=False, verbose_name='Default billing address?')),\n                ('num_orders', models.PositiveIntegerField(default=0, verbose_name='Number of Orders')),\n                ('hash', models.CharField(max_length=255, editable=False, db_index=True, verbose_name='Address Hash')),\n                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date Created')),\n                ('country', models.ForeignKey(verbose_name='Country', to='address.Country', on_delete=models.CASCADE)),\n                ('user', models.ForeignKey(verbose_name='User', related_name='addresses', to=settings.AUTH_USER_MODEL, on_delete=models.CASCADE)),\n            ],\n            options={\n                'ordering': ['-num_orders'],\n                'verbose_name_plural': 'User addresses',\n                'verbose_name': 'User address',\n                'abstract': False,\n            },\n            bases=(models.Model,),\n        ),\n        migrations.AlterUniqueTogether(\n            name='useraddress',\n            unique_together=set([('user', 'hash')]),\n        ),\n    ]\n",
    "output": "import os\nimport tempfile\nfrom unittest import mock\n\nfrom django.contrib.staticfiles.testing import StaticLiveServerTestCase\nfrom django.test import TestCase, override_settings\n\nfrom oscar.apps.catalogue.abstract_models import MissingProductImage\nfrom oscar.test import factories\n\n\nclass TestProductImages(TestCase):\n\n    def test_images_are_in_consecutive_order(self):\n        product = factories.create_product()\n        for i in range(4):\n            factories.create_product_image(product=product, display_order=i)\n\n        product.images.all()[2].delete()\n\n        for idx, im in enumerate(product.images.all()):\n            self.assertEqual(im.display_order, idx)\n\n    def test_variant_images(self):\n        parent = factories.ProductFactory(structure='parent')\n        variant = factories.create_product(parent=parent)\n        factories.create_product_image(product=variant, caption='Variant Image')\n        all_images = variant.get_all_images()\n        self.assertEquals(all_images.count(), 1)\n        product_image = all_images.first()\n        self.assertEquals(product_image.caption, 'Variant Image')\n\n    def test_variant_images_fallback_to_parent(self):\n        parent = factories.ProductFactory(structure='parent')\n        variant = factories.create_product(parent=parent)\n        factories.create_product_image(product=parent, caption='Parent Product Image')\n        all_images = variant.get_all_images()\n        self.assertEquals(all_images.count(), 1)\n        product_image = all_images.first()\n        self.assertEquals(product_image.caption, 'Parent Product Image')\n\n\nclass TestMissingProductImage(StaticLiveServerTestCase):\n\n    TEMP_MEDIA_ROOT = tempfile.mkdtemp()\n\n    @override_settings(MEDIA_ROOT=TEMP_MEDIA_ROOT)\n    @mock.patch('oscar.apps.catalogue.abstract_models.find')\n    def test_symlink_creates_directories(self, mock_find):\n        # Create a fake empty file to symlink\n        img = tempfile.NamedTemporaryFile(delete=False)\n        img.close()\n\n        mock_find.return_value = img.name\n        # Initialise the class with a nested path\n        path = 'image/path.jpg'\n        MissingProductImage(path)\n        # Check that the directory exists\n        image_path = os.path.join(self.TEMP_MEDIA_ROOT, path)\n        self.assertTrue(os.path.exists(image_path))\n\n        # Clean up\n        for f in [image_path, img.name]:\n            os.unlink(f)\n        for d in [os.path.join(self.TEMP_MEDIA_ROOT, 'image'), self.TEMP_MEDIA_ROOT]:\n            os.rmdir(d)\n\n    @mock.patch('oscar.apps.catalogue.abstract_models.MissingProductImage.symlink_missing_image')\n    def test_no_symlink_when_no_media_root(self, mock_symlink):\n        MissingProductImage()\n        self.assertEqual(mock_symlink.call_count, 0)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\nimport oscar.models.fields\nfrom django.conf import settings\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Country',\n            fields=[\n                ('iso_3166_1_a2', models.CharField(primary_key=True, max_length=2, verbose_name='ISO 3166-1 alpha-2', serialize=False)),\n                ('iso_3166_1_a3', models.CharField(max_length=3, verbose_name='ISO 3166-1 alpha-3', blank=True)),\n                ('iso_3166_1_numeric', models.CharField(max_length=3, verbose_name='ISO 3166-1 numeric', blank=True)),\n                ('printable_name', models.CharField(max_length=128, verbose_name='Country name')),\n                ('name', models.CharField(max_length=128, verbose_name='Official name')),\n                ('display_order', models.PositiveSmallIntegerField(default=0, verbose_name='Display order', db_index=True, help_text='Higher the number, higher the country in the list.')),\n                ('is_shipping_country', models.BooleanField(default=False, db_index=True, verbose_name='Is shipping country')),\n            ],\n            options={\n                'ordering': ('-display_order', 'printable_name'),\n                'verbose_name_plural': 'Countries',\n                'verbose_name': 'Country',\n                'abstract': False,\n            },\n            bases=(models.Model,),\n        ),\n        migrations.CreateModel(\n            name='UserAddress',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(verbose_name='Title', max_length=64, blank=True, choices=[('Mr', 'Mr'), ('Miss', 'Miss'), ('Mrs', 'Mrs'), ('Ms', 'Ms'), ('Dr', 'Dr')])),\n                ('first_name', models.CharField(max_length=255, verbose_name='First name', blank=True)),\n                ('last_name', models.CharField(max_length=255, verbose_name='Last name', blank=True)),\n                ('line1', models.CharField(max_length=255, verbose_name='First line of address')),\n                ('line2', models.CharField(max_length=255, verbose_name='Second line of address', blank=True)),\n                ('line3', models.CharField(max_length=255, verbose_name='Third line of address', blank=True)),\n                ('line4', models.CharField(max_length=255, verbose_name='City', blank=True)),\n                ('state', models.CharField(max_length=255, verbose_name='State/County', blank=True)),\n                ('postcode', oscar.models.fields.UppercaseCharField(max_length=64, verbose_name='Post/Zip-code', blank=True)),\n                ('search_text', models.TextField(editable=False, verbose_name='Search text - used only for searching addresses')),\n                ('phone_number', oscar.models.fields.PhoneNumberField(verbose_name='Phone number', help_text='In case we need to call you about your order', blank=True)),\n                ('notes', models.TextField(verbose_name='Instructions', help_text='Tell us anything we should know when delivering your order.', blank=True)),\n                ('is_default_for_shipping', models.BooleanField(default=False, verbose_name='Default shipping address?')),\n                ('is_default_for_billing', models.BooleanField(default=False, verbose_name='Default billing address?')),\n                ('num_orders', models.PositiveIntegerField(default=0, verbose_name='Number of Orders')),\n                ('hash', models.CharField(max_length=255, editable=False, db_index=True, verbose_name='Address Hash')),\n                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date Created')),\n                ('country', models.ForeignKey(verbose_name='Country', to='address.Country', on_delete=models.CASCADE)),\n                ('user', models.ForeignKey(verbose_name='User', related_name='addresses', to=settings.AUTH_USER_MODEL, on_delete=models.CASCADE)),\n            ],\n            options={\n                'ordering': ['-num_orders'],\n                'verbose_name_plural': 'User addresses',\n                'verbose_name': 'User address',\n                'abstract': False,\n            },\n            bases=(models.Model,),\n        ),\n        migrations.AlterUniqueTogether(\n            name='useraddress',\n            unique_together=set([('user', 'hash')]),\n        ),\n    ]\n",
    "output": "from django.test import TestCase\nfrom django.test.utils import override_settings\n\nfrom oscar.apps.catalogue.search_handlers import (\n    get_product_search_handler_class,\n)\n\n\nclass TestSearchHandler(object):\n    pass\n\n\nclass TestProductSearchHandlerSetting(TestCase):\n    def test_product_search_handler_setting(self):\n        \"\"\"\n        Test that the `OSCAR_PRODUCT_SEARCH_HANDLER` setting, when set,\n        dictates the return value of the `get_product_search_handler_class`\n        function.\n        \"\"\"\n        handler_override = 'tests.integration.catalogue.test_product_search_handler_setting.TestSearchHandler'\n        with override_settings(OSCAR_PRODUCT_SEARCH_HANDLER=handler_override):\n            handler_class = get_product_search_handler_class()\n\n        self.assertEqual(handler_class, TestSearchHandler)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\nimport oscar.models.fields\nfrom django.conf import settings\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Country',\n            fields=[\n                ('iso_3166_1_a2', models.CharField(primary_key=True, max_length=2, verbose_name='ISO 3166-1 alpha-2', serialize=False)),\n                ('iso_3166_1_a3', models.CharField(max_length=3, verbose_name='ISO 3166-1 alpha-3', blank=True)),\n                ('iso_3166_1_numeric', models.CharField(max_length=3, verbose_name='ISO 3166-1 numeric', blank=True)),\n                ('printable_name', models.CharField(max_length=128, verbose_name='Country name')),\n                ('name', models.CharField(max_length=128, verbose_name='Official name')),\n                ('display_order', models.PositiveSmallIntegerField(default=0, verbose_name='Display order', db_index=True, help_text='Higher the number, higher the country in the list.')),\n                ('is_shipping_country', models.BooleanField(default=False, db_index=True, verbose_name='Is shipping country')),\n            ],\n            options={\n                'ordering': ('-display_order', 'printable_name'),\n                'verbose_name_plural': 'Countries',\n                'verbose_name': 'Country',\n                'abstract': False,\n            },\n            bases=(models.Model,),\n        ),\n        migrations.CreateModel(\n            name='UserAddress',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(verbose_name='Title', max_length=64, blank=True, choices=[('Mr', 'Mr'), ('Miss', 'Miss'), ('Mrs', 'Mrs'), ('Ms', 'Ms'), ('Dr', 'Dr')])),\n                ('first_name', models.CharField(max_length=255, verbose_name='First name', blank=True)),\n                ('last_name', models.CharField(max_length=255, verbose_name='Last name', blank=True)),\n                ('line1', models.CharField(max_length=255, verbose_name='First line of address')),\n                ('line2', models.CharField(max_length=255, verbose_name='Second line of address', blank=True)),\n                ('line3', models.CharField(max_length=255, verbose_name='Third line of address', blank=True)),\n                ('line4', models.CharField(max_length=255, verbose_name='City', blank=True)),\n                ('state', models.CharField(max_length=255, verbose_name='State/County', blank=True)),\n                ('postcode', oscar.models.fields.UppercaseCharField(max_length=64, verbose_name='Post/Zip-code', blank=True)),\n                ('search_text', models.TextField(editable=False, verbose_name='Search text - used only for searching addresses')),\n                ('phone_number', oscar.models.fields.PhoneNumberField(verbose_name='Phone number', help_text='In case we need to call you about your order', blank=True)),\n                ('notes', models.TextField(verbose_name='Instructions', help_text='Tell us anything we should know when delivering your order.', blank=True)),\n                ('is_default_for_shipping', models.BooleanField(default=False, verbose_name='Default shipping address?')),\n                ('is_default_for_billing', models.BooleanField(default=False, verbose_name='Default billing address?')),\n                ('num_orders', models.PositiveIntegerField(default=0, verbose_name='Number of Orders')),\n                ('hash', models.CharField(max_length=255, editable=False, db_index=True, verbose_name='Address Hash')),\n                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date Created')),\n                ('country', models.ForeignKey(verbose_name='Country', to='address.Country', on_delete=models.CASCADE)),\n                ('user', models.ForeignKey(verbose_name='User', related_name='addresses', to=settings.AUTH_USER_MODEL, on_delete=models.CASCADE)),\n            ],\n            options={\n                'ordering': ['-num_orders'],\n                'verbose_name_plural': 'User addresses',\n                'verbose_name': 'User address',\n                'abstract': False,\n            },\n            bases=(models.Model,),\n        ),\n        migrations.AlterUniqueTogether(\n            name='useraddress',\n            unique_together=set([('user', 'hash')]),\n        ),\n    ]\n",
    "output": ""
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\nimport oscar.models.fields\nfrom django.conf import settings\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Country',\n            fields=[\n                ('iso_3166_1_a2', models.CharField(primary_key=True, max_length=2, verbose_name='ISO 3166-1 alpha-2', serialize=False)),\n                ('iso_3166_1_a3', models.CharField(max_length=3, verbose_name='ISO 3166-1 alpha-3', blank=True)),\n                ('iso_3166_1_numeric', models.CharField(max_length=3, verbose_name='ISO 3166-1 numeric', blank=True)),\n                ('printable_name', models.CharField(max_length=128, verbose_name='Country name')),\n                ('name', models.CharField(max_length=128, verbose_name='Official name')),\n                ('display_order', models.PositiveSmallIntegerField(default=0, verbose_name='Display order', db_index=True, help_text='Higher the number, higher the country in the list.')),\n                ('is_shipping_country', models.BooleanField(default=False, db_index=True, verbose_name='Is shipping country')),\n            ],\n            options={\n                'ordering': ('-display_order', 'printable_name'),\n                'verbose_name_plural': 'Countries',\n                'verbose_name': 'Country',\n                'abstract': False,\n            },\n            bases=(models.Model,),\n        ),\n        migrations.CreateModel(\n            name='UserAddress',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(verbose_name='Title', max_length=64, blank=True, choices=[('Mr', 'Mr'), ('Miss', 'Miss'), ('Mrs', 'Mrs'), ('Ms', 'Ms'), ('Dr', 'Dr')])),\n                ('first_name', models.CharField(max_length=255, verbose_name='First name', blank=True)),\n                ('last_name', models.CharField(max_length=255, verbose_name='Last name', blank=True)),\n                ('line1', models.CharField(max_length=255, verbose_name='First line of address')),\n                ('line2', models.CharField(max_length=255, verbose_name='Second line of address', blank=True)),\n                ('line3', models.CharField(max_length=255, verbose_name='Third line of address', blank=True)),\n                ('line4', models.CharField(max_length=255, verbose_name='City', blank=True)),\n                ('state', models.CharField(max_length=255, verbose_name='State/County', blank=True)),\n                ('postcode', oscar.models.fields.UppercaseCharField(max_length=64, verbose_name='Post/Zip-code', blank=True)),\n                ('search_text', models.TextField(editable=False, verbose_name='Search text - used only for searching addresses')),\n                ('phone_number', oscar.models.fields.PhoneNumberField(verbose_name='Phone number', help_text='In case we need to call you about your order', blank=True)),\n                ('notes', models.TextField(verbose_name='Instructions', help_text='Tell us anything we should know when delivering your order.', blank=True)),\n                ('is_default_for_shipping', models.BooleanField(default=False, verbose_name='Default shipping address?')),\n                ('is_default_for_billing', models.BooleanField(default=False, verbose_name='Default billing address?')),\n                ('num_orders', models.PositiveIntegerField(default=0, verbose_name='Number of Orders')),\n                ('hash', models.CharField(max_length=255, editable=False, db_index=True, verbose_name='Address Hash')),\n                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date Created')),\n                ('country', models.ForeignKey(verbose_name='Country', to='address.Country', on_delete=models.CASCADE)),\n                ('user', models.ForeignKey(verbose_name='User', related_name='addresses', to=settings.AUTH_USER_MODEL, on_delete=models.CASCADE)),\n            ],\n            options={\n                'ordering': ['-num_orders'],\n                'verbose_name_plural': 'User addresses',\n                'verbose_name': 'User address',\n                'abstract': False,\n            },\n            bases=(models.Model,),\n        ),\n        migrations.AlterUniqueTogether(\n            name='useraddress',\n            unique_together=set([('user', 'hash')]),\n        ),\n    ]\n",
    "output": "from django.test import TestCase\n\nfrom oscar.apps.catalogue.reviews import forms\nfrom oscar.test.factories import UserFactory, create_product\n\n\nclass TestReviewForm(TestCase):\n\n    def test_cleans_title(self):\n        product = create_product()\n        reviewer = UserFactory()\n        data = {\n            'title': '  This product is lovely',\n            'body': 'I really like this cheese',\n            'score': 0,\n            'name': 'JR Hartley',\n            'email': 'hartley@example.com'\n        }\n        form = forms.ProductReviewForm(\n            product=product, user=reviewer, data=data)\n\n        assert form.is_valid()\n\n        review = form.save()\n        assert review.title == \"This product is lovely\"\n\n    def test_validates_empty_data_correctly(self):\n        form = forms.ProductReviewForm(product=None, user=None, data={})\n        assert form.is_valid() is False\n\n    def test_validates_correctly(self):\n        data = {\n            'title': 'This product is lovely',\n            'body': 'I really like this cheese',\n            'score': 0,\n            'name': 'JR Hartley',\n            'email': 'hartley@example.com'\n        }\n        form = forms.ProductReviewForm(product=None, user=None, data=data)\n        assert form.is_valid()\n\n\nclass TestVoteForm(TestCase):\n\n    def setUp(self):\n        self.product = create_product()\n        self.reviewer = UserFactory()\n        self.voter = UserFactory()\n        self.review = self.product.reviews.create(\n            title='This is nice',\n            score=3,\n            body=\"This is the body\",\n            user=self.reviewer)\n\n    def test_allows_real_users_to_vote(self):\n        form = forms.VoteForm(self.review, self.voter, data={'delta': 1})\n        self.assertTrue(form.is_valid())\n\n    def test_prevents_users_from_voting_more_than_once(self):\n        self.review.vote_up(self.voter)\n        form = forms.VoteForm(self.review, self.voter, data={'delta': 1})\n        self.assertFalse(form.is_valid())\n        self.assertTrue(len(form.errors['__all__']) > 0)\n\n    def test_prevents_users_voting_on_their_own_reviews(self):\n        form = forms.VoteForm(self.review, self.reviewer, data={'delta': 1})\n        self.assertFalse(form.is_valid())\n        self.assertTrue(len(form.errors['__all__']) > 0)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\nimport oscar.models.fields\nfrom django.conf import settings\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Country',\n            fields=[\n                ('iso_3166_1_a2', models.CharField(primary_key=True, max_length=2, verbose_name='ISO 3166-1 alpha-2', serialize=False)),\n                ('iso_3166_1_a3', models.CharField(max_length=3, verbose_name='ISO 3166-1 alpha-3', blank=True)),\n                ('iso_3166_1_numeric', models.CharField(max_length=3, verbose_name='ISO 3166-1 numeric', blank=True)),\n                ('printable_name', models.CharField(max_length=128, verbose_name='Country name')),\n                ('name', models.CharField(max_length=128, verbose_name='Official name')),\n                ('display_order', models.PositiveSmallIntegerField(default=0, verbose_name='Display order', db_index=True, help_text='Higher the number, higher the country in the list.')),\n                ('is_shipping_country', models.BooleanField(default=False, db_index=True, verbose_name='Is shipping country')),\n            ],\n            options={\n                'ordering': ('-display_order', 'printable_name'),\n                'verbose_name_plural': 'Countries',\n                'verbose_name': 'Country',\n                'abstract': False,\n            },\n            bases=(models.Model,),\n        ),\n        migrations.CreateModel(\n            name='UserAddress',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(verbose_name='Title', max_length=64, blank=True, choices=[('Mr', 'Mr'), ('Miss', 'Miss'), ('Mrs', 'Mrs'), ('Ms', 'Ms'), ('Dr', 'Dr')])),\n                ('first_name', models.CharField(max_length=255, verbose_name='First name', blank=True)),\n                ('last_name', models.CharField(max_length=255, verbose_name='Last name', blank=True)),\n                ('line1', models.CharField(max_length=255, verbose_name='First line of address')),\n                ('line2', models.CharField(max_length=255, verbose_name='Second line of address', blank=True)),\n                ('line3', models.CharField(max_length=255, verbose_name='Third line of address', blank=True)),\n                ('line4', models.CharField(max_length=255, verbose_name='City', blank=True)),\n                ('state', models.CharField(max_length=255, verbose_name='State/County', blank=True)),\n                ('postcode', oscar.models.fields.UppercaseCharField(max_length=64, verbose_name='Post/Zip-code', blank=True)),\n                ('search_text', models.TextField(editable=False, verbose_name='Search text - used only for searching addresses')),\n                ('phone_number', oscar.models.fields.PhoneNumberField(verbose_name='Phone number', help_text='In case we need to call you about your order', blank=True)),\n                ('notes', models.TextField(verbose_name='Instructions', help_text='Tell us anything we should know when delivering your order.', blank=True)),\n                ('is_default_for_shipping', models.BooleanField(default=False, verbose_name='Default shipping address?')),\n                ('is_default_for_billing', models.BooleanField(default=False, verbose_name='Default billing address?')),\n                ('num_orders', models.PositiveIntegerField(default=0, verbose_name='Number of Orders')),\n                ('hash', models.CharField(max_length=255, editable=False, db_index=True, verbose_name='Address Hash')),\n                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date Created')),\n                ('country', models.ForeignKey(verbose_name='Country', to='address.Country', on_delete=models.CASCADE)),\n                ('user', models.ForeignKey(verbose_name='User', related_name='addresses', to=settings.AUTH_USER_MODEL, on_delete=models.CASCADE)),\n            ],\n            options={\n                'ordering': ['-num_orders'],\n                'verbose_name_plural': 'User addresses',\n                'verbose_name': 'User address',\n                'abstract': False,\n            },\n            bases=(models.Model,),\n        ),\n        migrations.AlterUniqueTogether(\n            name='useraddress',\n            unique_together=set([('user', 'hash')]),\n        ),\n    ]\n",
    "output": "from django.test import TestCase\nfrom django.core.exceptions import ValidationError\n\nfrom oscar.core.compat import get_user_model\nfrom oscar.apps.catalogue.reviews import models\nfrom oscar.test.factories import create_product\nfrom oscar.test.factories import UserFactory\n\nUser = get_user_model()\n\n\nclass TestAnAnonymousReview(TestCase):\n\n    def setUp(self):\n        self.product = create_product()\n        self.data = {\n            'product': self.product,\n            'title': 'This product is lovely',\n            'body': 'I really like this cheese',\n            'score': 0,\n            'name': 'JR Hartley',\n            'email': 'hartley@example.com'\n        }\n\n    def review(self, **kwargs):\n        if kwargs:\n            data = self.data.copy()\n            data.update(kwargs)\n        else:\n            data = self.data\n        return models.ProductReview(**data)\n\n    def test_can_be_created(self):\n        review = self.review()\n        review.full_clean()\n\n    def test_requires_a_title(self):\n        review = self.review(title=\"\")\n        self.assertRaises(ValidationError, review.full_clean)\n\n    def test_requires_a_body(self):\n        review = self.review(body=\"\")\n        self.assertRaises(ValidationError, review.full_clean)\n\n    def test_requires_a_name(self):\n        review = self.review(name=\"\")\n        self.assertRaises(ValidationError, review.full_clean)\n\n    def test_requires_an_email_address(self):\n        review = self.review(email=\"\")\n        self.assertRaises(ValidationError, review.full_clean)\n\n    def test_requires_non_whitespace_title(self):\n        review = self.review(title=\"    \")\n        self.assertRaises(ValidationError, review.full_clean)\n\n    def test_starts_with_no_votes(self):\n        review = self.review()\n        review.save()\n        self.assertFalse(review.has_votes)\n        self.assertEqual(0, review.num_up_votes)\n        self.assertEqual(0, review.num_down_votes)\n\n    def test_has_reviewer_name_property(self):\n        review = self.review(name=\"Dave\")\n        self.assertEqual(\"Dave\", review.reviewer_name)\n\n    def test_review_moderate_setting_false(self):\n        with self.settings(OSCAR_MODERATE_REVIEWS=False):\n            review = self.review()\n            self.assertEqual(1, review.status)\n\n    def test_review_moderate_setting_true(self):\n        with self.settings(OSCAR_MODERATE_REVIEWS=True):\n            review = self.review()\n            self.assertEqual(0, review.status)\n\n\nclass TestAUserReview(TestCase):\n\n    def setUp(self):\n        self.product = create_product()\n        self.user = UserFactory(first_name=\"Tom\", last_name=\"Thumb\")\n        self.data = {\n            'product': self.product,\n            'title': 'This product is lovely',\n            'body': 'I really like this cheese',\n            'score': 0,\n            'user': self.user\n        }\n\n    def review(self, **kwargs):\n        if kwargs:\n            data = self.data.copy()\n            data.update(kwargs)\n        else:\n            data = self.data\n        return models.ProductReview(**data)\n\n    def test_can_be_created(self):\n        review = self.review()\n        review.full_clean()\n\n    def test_requires_a_title(self):\n        review = self.review(title=\"\")\n        self.assertRaises(ValidationError, review.full_clean)\n\n    def test_requires_a_body(self):\n        review = self.review(body=\"\")\n        self.assertRaises(ValidationError, review.full_clean)\n\n    def test_has_reviewer_name_property(self):\n        review = self.review()\n        self.assertEqual(\"Tom Thumb\", review.reviewer_name)\n\n    def test_num_approved_reviews(self):\n        review = self.review()\n        review.save()\n        self.assertEqual(self.product.num_approved_reviews, 1)\n        self.assertEqual(self.product.reviews.approved().first(), review)\n\n    def test_review_moderate_setting_false(self):\n        with self.settings(OSCAR_MODERATE_REVIEWS=False):\n            review = self.review()\n            self.assertEqual(1, review.status)\n\n    def test_review_moderate_setting_true(self):\n        with self.settings(OSCAR_MODERATE_REVIEWS=True):\n            review = self.review()\n            self.assertEqual(0, review.status)\n\n\nclass TestVotingOnAReview(TestCase):\n\n    def setUp(self):\n        self.product = create_product()\n        self.user = UserFactory()\n        self.voter = UserFactory()\n        self.review = self.product.reviews.create(\n            title='This is nice',\n            score=3,\n            body=\"This is the body\",\n            user=self.user)\n\n    def test_updates_totals_for_upvote(self):\n        self.review.vote_up(self.voter)\n        self.assertTrue(self.review.has_votes)\n        self.assertEqual(1, self.review.total_votes)\n        self.assertEqual(1, self.review.delta_votes)\n\n    def test_updates_totals_for_downvote(self):\n        self.review.vote_down(self.voter)\n        self.assertTrue(self.review.has_votes)\n        self.assertEqual(1, self.review.total_votes)\n        self.assertEqual(-1, self.review.delta_votes)\n\n    def test_is_permitted_for_normal_user(self):\n        is_allowed, reason = self.review.can_user_vote(self.voter)\n        self.assertTrue(is_allowed, reason)\n\n    def test_is_not_permitted_for_reviewer(self):\n        is_allowed, reason = self.review.can_user_vote(self.user)\n        self.assertFalse(is_allowed, reason)\n\n    def test_is_not_permitted_for_previous_voter(self):\n        self.review.vote_up(self.voter)\n        is_allowed, reason = self.review.can_user_vote(self.voter)\n        self.assertFalse(is_allowed, reason)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\nimport oscar.models.fields\nfrom django.conf import settings\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Country',\n            fields=[\n                ('iso_3166_1_a2', models.CharField(primary_key=True, max_length=2, verbose_name='ISO 3166-1 alpha-2', serialize=False)),\n                ('iso_3166_1_a3', models.CharField(max_length=3, verbose_name='ISO 3166-1 alpha-3', blank=True)),\n                ('iso_3166_1_numeric', models.CharField(max_length=3, verbose_name='ISO 3166-1 numeric', blank=True)),\n                ('printable_name', models.CharField(max_length=128, verbose_name='Country name')),\n                ('name', models.CharField(max_length=128, verbose_name='Official name')),\n                ('display_order', models.PositiveSmallIntegerField(default=0, verbose_name='Display order', db_index=True, help_text='Higher the number, higher the country in the list.')),\n                ('is_shipping_country', models.BooleanField(default=False, db_index=True, verbose_name='Is shipping country')),\n            ],\n            options={\n                'ordering': ('-display_order', 'printable_name'),\n                'verbose_name_plural': 'Countries',\n                'verbose_name': 'Country',\n                'abstract': False,\n            },\n            bases=(models.Model,),\n        ),\n        migrations.CreateModel(\n            name='UserAddress',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(verbose_name='Title', max_length=64, blank=True, choices=[('Mr', 'Mr'), ('Miss', 'Miss'), ('Mrs', 'Mrs'), ('Ms', 'Ms'), ('Dr', 'Dr')])),\n                ('first_name', models.CharField(max_length=255, verbose_name='First name', blank=True)),\n                ('last_name', models.CharField(max_length=255, verbose_name='Last name', blank=True)),\n                ('line1', models.CharField(max_length=255, verbose_name='First line of address')),\n                ('line2', models.CharField(max_length=255, verbose_name='Second line of address', blank=True)),\n                ('line3', models.CharField(max_length=255, verbose_name='Third line of address', blank=True)),\n                ('line4', models.CharField(max_length=255, verbose_name='City', blank=True)),\n                ('state', models.CharField(max_length=255, verbose_name='State/County', blank=True)),\n                ('postcode', oscar.models.fields.UppercaseCharField(max_length=64, verbose_name='Post/Zip-code', blank=True)),\n                ('search_text', models.TextField(editable=False, verbose_name='Search text - used only for searching addresses')),\n                ('phone_number', oscar.models.fields.PhoneNumberField(verbose_name='Phone number', help_text='In case we need to call you about your order', blank=True)),\n                ('notes', models.TextField(verbose_name='Instructions', help_text='Tell us anything we should know when delivering your order.', blank=True)),\n                ('is_default_for_shipping', models.BooleanField(default=False, verbose_name='Default shipping address?')),\n                ('is_default_for_billing', models.BooleanField(default=False, verbose_name='Default billing address?')),\n                ('num_orders', models.PositiveIntegerField(default=0, verbose_name='Number of Orders')),\n                ('hash', models.CharField(max_length=255, editable=False, db_index=True, verbose_name='Address Hash')),\n                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date Created')),\n                ('country', models.ForeignKey(verbose_name='Country', to='address.Country', on_delete=models.CASCADE)),\n                ('user', models.ForeignKey(verbose_name='User', related_name='addresses', to=settings.AUTH_USER_MODEL, on_delete=models.CASCADE)),\n            ],\n            options={\n                'ordering': ['-num_orders'],\n                'verbose_name_plural': 'User addresses',\n                'verbose_name': 'User address',\n                'abstract': False,\n            },\n            bases=(models.Model,),\n        ),\n        migrations.AlterUniqueTogether(\n            name='useraddress',\n            unique_together=set([('user', 'hash')]),\n        ),\n    ]\n",
    "output": ""
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\nimport oscar.models.fields\nfrom django.conf import settings\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Country',\n            fields=[\n                ('iso_3166_1_a2', models.CharField(primary_key=True, max_length=2, verbose_name='ISO 3166-1 alpha-2', serialize=False)),\n                ('iso_3166_1_a3', models.CharField(max_length=3, verbose_name='ISO 3166-1 alpha-3', blank=True)),\n                ('iso_3166_1_numeric', models.CharField(max_length=3, verbose_name='ISO 3166-1 numeric', blank=True)),\n                ('printable_name', models.CharField(max_length=128, verbose_name='Country name')),\n                ('name', models.CharField(max_length=128, verbose_name='Official name')),\n                ('display_order', models.PositiveSmallIntegerField(default=0, verbose_name='Display order', db_index=True, help_text='Higher the number, higher the country in the list.')),\n                ('is_shipping_country', models.BooleanField(default=False, db_index=True, verbose_name='Is shipping country')),\n            ],\n            options={\n                'ordering': ('-display_order', 'printable_name'),\n                'verbose_name_plural': 'Countries',\n                'verbose_name': 'Country',\n                'abstract': False,\n            },\n            bases=(models.Model,),\n        ),\n        migrations.CreateModel(\n            name='UserAddress',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(verbose_name='Title', max_length=64, blank=True, choices=[('Mr', 'Mr'), ('Miss', 'Miss'), ('Mrs', 'Mrs'), ('Ms', 'Ms'), ('Dr', 'Dr')])),\n                ('first_name', models.CharField(max_length=255, verbose_name='First name', blank=True)),\n                ('last_name', models.CharField(max_length=255, verbose_name='Last name', blank=True)),\n                ('line1', models.CharField(max_length=255, verbose_name='First line of address')),\n                ('line2', models.CharField(max_length=255, verbose_name='Second line of address', blank=True)),\n                ('line3', models.CharField(max_length=255, verbose_name='Third line of address', blank=True)),\n                ('line4', models.CharField(max_length=255, verbose_name='City', blank=True)),\n                ('state', models.CharField(max_length=255, verbose_name='State/County', blank=True)),\n                ('postcode', oscar.models.fields.UppercaseCharField(max_length=64, verbose_name='Post/Zip-code', blank=True)),\n                ('search_text', models.TextField(editable=False, verbose_name='Search text - used only for searching addresses')),\n                ('phone_number', oscar.models.fields.PhoneNumberField(verbose_name='Phone number', help_text='In case we need to call you about your order', blank=True)),\n                ('notes', models.TextField(verbose_name='Instructions', help_text='Tell us anything we should know when delivering your order.', blank=True)),\n                ('is_default_for_shipping', models.BooleanField(default=False, verbose_name='Default shipping address?')),\n                ('is_default_for_billing', models.BooleanField(default=False, verbose_name='Default billing address?')),\n                ('num_orders', models.PositiveIntegerField(default=0, verbose_name='Number of Orders')),\n                ('hash', models.CharField(max_length=255, editable=False, db_index=True, verbose_name='Address Hash')),\n                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date Created')),\n                ('country', models.ForeignKey(verbose_name='Country', to='address.Country', on_delete=models.CASCADE)),\n                ('user', models.ForeignKey(verbose_name='User', related_name='addresses', to=settings.AUTH_USER_MODEL, on_delete=models.CASCADE)),\n            ],\n            options={\n                'ordering': ['-num_orders'],\n                'verbose_name_plural': 'User addresses',\n                'verbose_name': 'User address',\n                'abstract': False,\n            },\n            bases=(models.Model,),\n        ),\n        migrations.AlterUniqueTogether(\n            name='useraddress',\n            unique_together=set([('user', 'hash')]),\n        ),\n    ]\n",
    "output": "from decimal import Decimal as D\nfrom unittest import mock\n\nfrom django.test import TestCase, override_settings\nfrom django.conf import settings\n\nfrom oscar.apps.basket import forms, formsets\nfrom oscar.apps.offer.utils import Applicator\nfrom oscar.core.loading import get_model\nfrom oscar.test import factories\nfrom oscar.test.basket import add_product\nfrom oscar.test.factories import (\n    BenefitFactory, ConditionalOfferFactory, ConditionFactory, RangeFactory)\n\n\nLine = get_model('basket', 'Line')\n\n\nclass TestBasketLineForm(TestCase):\n\n    def setUp(self):\n        self.applicator = Applicator()\n        rng = RangeFactory(includes_all_products=True)\n        self.condition = ConditionFactory(\n            range=rng, type=ConditionFactory._meta.model.VALUE,\n            value=D('100'), proxy_class=None)\n        self.benefit = BenefitFactory(\n            range=rng, type=BenefitFactory._meta.model.FIXED,\n            value=D('10'), max_affected_items=1)\n        self.basket = factories.create_basket()\n        self.line = self.basket.all_lines()[0]\n\n    def mock_availability_return_value(self, is_available, reason=''):\n        policy = self.line.purchase_info.availability\n        policy.is_purchase_permitted = mock.MagicMock(\n            return_value=(is_available, reason))\n\n    def build_form(self, quantity=None):\n        if quantity is None:\n            quantity = self.line.quantity\n        return forms.BasketLineForm(\n            strategy=self.basket.strategy,\n            data={'quantity': quantity},\n            instance=self.line)\n\n    def test_enforces_availability_policy_for_valid_quantities(self):\n        self.mock_availability_return_value(True)\n        form = self.build_form()\n        self.assertTrue(form.is_valid())\n\n    def test_enforces_availability_policy_for_invalid_quantities(self):\n        self.mock_availability_return_value(False, \"Some reason\")\n        form = self.build_form()\n        self.assertFalse(form.is_valid())\n        self.assertEqual(\n            form.errors['quantity'], ['Some reason'])\n\n    def test_skips_availability_policy_for_zero_quantities(self):\n        self.mock_availability_return_value(True)\n        form = self.build_form(quantity=0)\n        self.assertTrue(form.is_valid())\n\n    def test_enforces_max_line_quantity_for_new_product(self):\n        invalid_qty = settings.OSCAR_MAX_BASKET_QUANTITY_THRESHOLD + 1\n        form = self.build_form(quantity=invalid_qty)\n        self.assertFalse(form.is_valid())\n\n    @override_settings(OSCAR_MAX_BASKET_QUANTITY_THRESHOLD=10)\n    def test_enforce_max_line_quantity_for_existing_product(self):\n        self.basket.flush()\n        product = factories.create_product(num_in_stock=20)\n        add_product(self.basket, D('100'), 4, product)\n        self.line = self.basket.all_lines()[0]\n        form = self.build_form(quantity=6)\n        self.assertTrue(form.is_valid())\n        form.save()\n        form = self.build_form(quantity=11)\n        self.assertFalse(form.is_valid())\n\n    def test_line_quantity_max_attribute_per_num_available(self):\n        self.basket.flush()\n        product = factories.create_product(num_in_stock=20)\n        add_product(self.basket, D('100'), 4, product)\n        self.line = self.basket.all_lines()[0]\n        form = self.build_form()\n        self.assertIn('max=\"20\"', str(form['quantity']))\n\n    @override_settings(OSCAR_MAX_BASKET_QUANTITY_THRESHOLD=10)\n    def test_line_quantity_max_attribute_per_basket_threshold(self):\n        self.basket.flush()\n        product = factories.create_product(num_in_stock=20)\n        add_product(self.basket, D('100'), 4, product)\n        self.line = self.basket.all_lines()[0]\n        form = self.build_form()\n        self.assertIn('max=\"6\"', str(form['quantity']))\n\n    def test_basketline_formset_ordering(self):\n        # when we use a unordered queryset in the Basketlineformset, the\n        # discounts will be lost because django will query the database\n        # again to enforce ordered results\n        add_product(self.basket, D('100'), 5)\n        offer = ConditionalOfferFactory(\n            pk=1, condition=self.condition, benefit=self.benefit)\n\n        # now we force an unordered queryset so we can see that our discounts\n        # will disappear due to a new ordering query (see django/forms/model.py)\n        default_line_ordering = Line._meta.ordering\n        Line._meta.ordering = []\n        self.basket._lines = self.basket.lines.all()\n\n        self.applicator.apply_offers(self.basket, [offer])\n        formset = formsets.BasketLineFormSet(\n            strategy=self.basket.strategy,\n            queryset=self.basket.all_lines())\n\n        # the discount is in all_lines():\n        self.assertTrue(self.basket.all_lines()[0].has_discount)\n\n        # but not in the formset\n        self.assertFalse(formset.forms[0].instance.has_discount)\n\n        # Restore the ordering on the line\n        Line._meta.ordering = default_line_ordering\n\n        # clear the cached lines and apply the offer again\n        self.basket._lines = None\n        self.applicator.apply_offers(self.basket, [offer])\n\n        formset = formsets.BasketLineFormSet(\n            strategy=self.basket.strategy,\n            queryset=self.basket.all_lines())\n        self.assertTrue(formset.forms[0].instance.has_discount)\n\n\nclass TestAddToBasketForm(TestCase):\n\n    def test_allows_a_product_quantity_to_be_increased(self):\n        basket = factories.create_basket()\n        product = basket.all_lines()[0].product\n\n        # Add more of the same product\n        data = {'quantity': 1}\n        form = forms.AddToBasketForm(\n            basket=basket, product=product, data=data)\n        self.assertTrue(form.is_valid())\n\n    def test_checks_whether_passed_product_id_matches_a_real_product(self):\n        basket = factories.create_basket()\n        product = basket.all_lines()[0].product\n\n        # Add more of the same product\n        data = {'quantity': -1}\n        form = forms.AddToBasketForm(\n            basket=basket, product=product, data=data)\n        self.assertFalse(form.is_valid())\n\n    def test_checks_if_purchase_is_permitted(self):\n        basket = factories.BasketFactory()\n        product = factories.ProductFactory()\n\n        # Build a 4-level mock monster so we can force the return value of\n        # whether the product is available to buy. This is a serious code smell\n        # and needs to be remedied.\n        info = mock.Mock()\n        info.availability = mock.Mock()\n        info.availability.is_purchase_permitted = mock.Mock(\n            return_value=(False, \"Not on your nelly!\"))\n        basket.strategy.fetch_for_product = mock.Mock(\n            return_value=info)\n\n        data = {'quantity': 1}\n        form = forms.AddToBasketForm(\n            basket=basket, product=product, data=data)\n        self.assertFalse(form.is_valid())\n        self.assertEqual('Not on your nelly!', form.errors['__all__'][0])\n\n    def test_mixed_currency_baskets_are_not_permitted(self):\n        # Ensure basket is one currency\n        basket = mock.Mock()\n        basket.currency = 'GBP'\n        basket.num_items = 1\n\n        # Ensure new product has different currency\n        info = mock.Mock()\n        info.price.currency = 'EUR'\n        basket.strategy.fetch_for_product = mock.Mock(\n            return_value=info)\n\n        product = factories.ProductFactory()\n\n        data = {'quantity': 1}\n        form = forms.AddToBasketForm(\n            basket=basket, product=product, data=data)\n        self.assertFalse(form.is_valid())\n\n    def test_cannot_add_a_product_without_price(self):\n        basket = factories.BasketFactory()\n        product = factories.create_product(price=None)\n\n        data = {'quantity': 1}\n        form = forms.AddToBasketForm(\n            basket=basket, product=product, data=data)\n        self.assertFalse(form.is_valid())\n        self.assertEqual(\n            form.errors['__all__'][0],\n            'This product cannot be added to the basket because a price '\n            'could not be determined for it.',\n        )\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\nimport oscar.models.fields\nfrom django.conf import settings\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Country',\n            fields=[\n                ('iso_3166_1_a2', models.CharField(primary_key=True, max_length=2, verbose_name='ISO 3166-1 alpha-2', serialize=False)),\n                ('iso_3166_1_a3', models.CharField(max_length=3, verbose_name='ISO 3166-1 alpha-3', blank=True)),\n                ('iso_3166_1_numeric', models.CharField(max_length=3, verbose_name='ISO 3166-1 numeric', blank=True)),\n                ('printable_name', models.CharField(max_length=128, verbose_name='Country name')),\n                ('name', models.CharField(max_length=128, verbose_name='Official name')),\n                ('display_order', models.PositiveSmallIntegerField(default=0, verbose_name='Display order', db_index=True, help_text='Higher the number, higher the country in the list.')),\n                ('is_shipping_country', models.BooleanField(default=False, db_index=True, verbose_name='Is shipping country')),\n            ],\n            options={\n                'ordering': ('-display_order', 'printable_name'),\n                'verbose_name_plural': 'Countries',\n                'verbose_name': 'Country',\n                'abstract': False,\n            },\n            bases=(models.Model,),\n        ),\n        migrations.CreateModel(\n            name='UserAddress',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(verbose_name='Title', max_length=64, blank=True, choices=[('Mr', 'Mr'), ('Miss', 'Miss'), ('Mrs', 'Mrs'), ('Ms', 'Ms'), ('Dr', 'Dr')])),\n                ('first_name', models.CharField(max_length=255, verbose_name='First name', blank=True)),\n                ('last_name', models.CharField(max_length=255, verbose_name='Last name', blank=True)),\n                ('line1', models.CharField(max_length=255, verbose_name='First line of address')),\n                ('line2', models.CharField(max_length=255, verbose_name='Second line of address', blank=True)),\n                ('line3', models.CharField(max_length=255, verbose_name='Third line of address', blank=True)),\n                ('line4', models.CharField(max_length=255, verbose_name='City', blank=True)),\n                ('state', models.CharField(max_length=255, verbose_name='State/County', blank=True)),\n                ('postcode', oscar.models.fields.UppercaseCharField(max_length=64, verbose_name='Post/Zip-code', blank=True)),\n                ('search_text', models.TextField(editable=False, verbose_name='Search text - used only for searching addresses')),\n                ('phone_number', oscar.models.fields.PhoneNumberField(verbose_name='Phone number', help_text='In case we need to call you about your order', blank=True)),\n                ('notes', models.TextField(verbose_name='Instructions', help_text='Tell us anything we should know when delivering your order.', blank=True)),\n                ('is_default_for_shipping', models.BooleanField(default=False, verbose_name='Default shipping address?')),\n                ('is_default_for_billing', models.BooleanField(default=False, verbose_name='Default billing address?')),\n                ('num_orders', models.PositiveIntegerField(default=0, verbose_name='Number of Orders')),\n                ('hash', models.CharField(max_length=255, editable=False, db_index=True, verbose_name='Address Hash')),\n                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date Created')),\n                ('country', models.ForeignKey(verbose_name='Country', to='address.Country', on_delete=models.CASCADE)),\n                ('user', models.ForeignKey(verbose_name='User', related_name='addresses', to=settings.AUTH_USER_MODEL, on_delete=models.CASCADE)),\n            ],\n            options={\n                'ordering': ['-num_orders'],\n                'verbose_name_plural': 'User addresses',\n                'verbose_name': 'User address',\n                'abstract': False,\n            },\n            bases=(models.Model,),\n        ),\n        migrations.AlterUniqueTogether(\n            name='useraddress',\n            unique_together=set([('user', 'hash')]),\n        ),\n    ]\n",
    "output": "from django.http import HttpResponse\nfrom django.test import TestCase\nfrom django.test.client import RequestFactory\nfrom django.contrib.auth.models import AnonymousUser\n\nfrom oscar.apps.basket import middleware\n\n\nclass TestBasketMiddleware(TestCase):\n\n    @staticmethod\n    def get_response_for_test(request):\n        return HttpResponse()\n\n    def setUp(self):\n        self.middleware = middleware.BasketMiddleware(self.get_response_for_test)\n        self.request = RequestFactory().get('/')\n        self.request.user = AnonymousUser()\n        self.middleware(self.request)\n\n    def test_basket_is_attached_to_request(self):\n        self.assertTrue(hasattr(self.request, 'basket'))\n\n    def test_strategy_is_attached_to_basket(self):\n        self.assertTrue(hasattr(self.request.basket, 'strategy'))\n\n    def test_strategy_is_attached_to_request(self):\n        self.assertTrue(hasattr(self.request, 'strategy'))\n\n    def test_get_cookie_basket_handles_invalid_signatures(self):\n        request_factory = RequestFactory()\n        request_factory.cookies['oscar_open_basket'] = '1:NOTAVALIDHASH'\n        request = request_factory.get('/')\n        request.cookies_to_delete = []\n\n        cookie_basket = self.middleware.get_cookie_basket(\"oscar_open_basket\", request, None)\n\n        self.assertEqual(None, cookie_basket)\n        self.assertIn(\"oscar_open_basket\", request.cookies_to_delete)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\nimport oscar.models.fields\nfrom django.conf import settings\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Country',\n            fields=[\n                ('iso_3166_1_a2', models.CharField(primary_key=True, max_length=2, verbose_name='ISO 3166-1 alpha-2', serialize=False)),\n                ('iso_3166_1_a3', models.CharField(max_length=3, verbose_name='ISO 3166-1 alpha-3', blank=True)),\n                ('iso_3166_1_numeric', models.CharField(max_length=3, verbose_name='ISO 3166-1 numeric', blank=True)),\n                ('printable_name', models.CharField(max_length=128, verbose_name='Country name')),\n                ('name', models.CharField(max_length=128, verbose_name='Official name')),\n                ('display_order', models.PositiveSmallIntegerField(default=0, verbose_name='Display order', db_index=True, help_text='Higher the number, higher the country in the list.')),\n                ('is_shipping_country', models.BooleanField(default=False, db_index=True, verbose_name='Is shipping country')),\n            ],\n            options={\n                'ordering': ('-display_order', 'printable_name'),\n                'verbose_name_plural': 'Countries',\n                'verbose_name': 'Country',\n                'abstract': False,\n            },\n            bases=(models.Model,),\n        ),\n        migrations.CreateModel(\n            name='UserAddress',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(verbose_name='Title', max_length=64, blank=True, choices=[('Mr', 'Mr'), ('Miss', 'Miss'), ('Mrs', 'Mrs'), ('Ms', 'Ms'), ('Dr', 'Dr')])),\n                ('first_name', models.CharField(max_length=255, verbose_name='First name', blank=True)),\n                ('last_name', models.CharField(max_length=255, verbose_name='Last name', blank=True)),\n                ('line1', models.CharField(max_length=255, verbose_name='First line of address')),\n                ('line2', models.CharField(max_length=255, verbose_name='Second line of address', blank=True)),\n                ('line3', models.CharField(max_length=255, verbose_name='Third line of address', blank=True)),\n                ('line4', models.CharField(max_length=255, verbose_name='City', blank=True)),\n                ('state', models.CharField(max_length=255, verbose_name='State/County', blank=True)),\n                ('postcode', oscar.models.fields.UppercaseCharField(max_length=64, verbose_name='Post/Zip-code', blank=True)),\n                ('search_text', models.TextField(editable=False, verbose_name='Search text - used only for searching addresses')),\n                ('phone_number', oscar.models.fields.PhoneNumberField(verbose_name='Phone number', help_text='In case we need to call you about your order', blank=True)),\n                ('notes', models.TextField(verbose_name='Instructions', help_text='Tell us anything we should know when delivering your order.', blank=True)),\n                ('is_default_for_shipping', models.BooleanField(default=False, verbose_name='Default shipping address?')),\n                ('is_default_for_billing', models.BooleanField(default=False, verbose_name='Default billing address?')),\n                ('num_orders', models.PositiveIntegerField(default=0, verbose_name='Number of Orders')),\n                ('hash', models.CharField(max_length=255, editable=False, db_index=True, verbose_name='Address Hash')),\n                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date Created')),\n                ('country', models.ForeignKey(verbose_name='Country', to='address.Country', on_delete=models.CASCADE)),\n                ('user', models.ForeignKey(verbose_name='User', related_name='addresses', to=settings.AUTH_USER_MODEL, on_delete=models.CASCADE)),\n            ],\n            options={\n                'ordering': ['-num_orders'],\n                'verbose_name_plural': 'User addresses',\n                'verbose_name': 'User address',\n                'abstract': False,\n            },\n            bases=(models.Model,),\n        ),\n        migrations.AlterUniqueTogether(\n            name='useraddress',\n            unique_together=set([('user', 'hash')]),\n        ),\n    ]\n",
    "output": "# -*- coding: utf-8 -*-\nfrom decimal import Decimal as D\n\nfrom django.test import TestCase\n\nfrom oscar.apps.basket.models import Basket\nfrom oscar.apps.catalogue.models import Option\nfrom oscar.apps.partner import availability, prices, strategy\nfrom oscar.test import factories\nfrom oscar.test.factories import (\n    BasketFactory, BasketLineAttributeFactory, OptionFactory, ProductFactory)\n\n\nclass TestANewBasket(TestCase):\n\n    def setUp(self):\n        self.basket = Basket()\n        self.basket.strategy = strategy.Default()\n\n    def test_has_zero_lines(self):\n        self.assertEqual(0, self.basket.num_lines)\n\n    def test_has_zero_items(self):\n        self.assertEqual(0, self.basket.num_items)\n\n    def test_doesnt_contain_vouchers(self):\n        self.assertFalse(self.basket.contains_a_voucher)\n\n    def test_can_be_edited(self):\n        self.assertTrue(self.basket.can_be_edited)\n\n    def test_is_empty(self):\n        self.assertTrue(self.basket.is_empty)\n\n    def test_is_not_submitted(self):\n        self.assertFalse(self.basket.is_submitted)\n\n    def test_has_no_applied_offers(self):\n        self.assertEqual({}, self.basket.applied_offers())\n\n\nclass TestBasketLine(TestCase):\n\n    def test_description(self):\n        basket = BasketFactory()\n        product = ProductFactory(title=\"A product\")\n        basket.add_product(product)\n\n        line = basket.lines.first()\n        self.assertEqual(line.description, \"A product\")\n\n    def test_description_with_attributes(self):\n        basket = BasketFactory()\n        product = ProductFactory(title=\"A product\")\n        basket.add_product(product)\n\n        line = basket.lines.first()\n        BasketLineAttributeFactory(\n            line=line, value='\\u2603', option__name='with')\n        self.assertEqual(line.description, \"A product (with = '\\u2603')\")\n\n    def test_create_line_reference(self):\n        basket = BasketFactory()\n        product = ProductFactory(title=\"A product\")\n        option = OptionFactory(name=\"product_option\", code=\"product_option\")\n        option_product = ProductFactory(title='Asunci\u00f3n')\n        options = [{'option': option, 'value': option_product}]\n        basket.add_product(product, options=options)\n\n    def test_basket_lines_queryset_is_ordered(self):\n        # This is needed to make sure a formset is not performing the query\n        # again with an order_by clause (losing all calculated discounts)\n        basket = BasketFactory()\n        product = ProductFactory(title=\"A product\")\n        another_product = ProductFactory(title=\"Another product\")\n        basket.add_product(product)\n        basket.add_product(another_product)\n        queryset = basket.all_lines()\n        self.assertTrue(queryset.ordered)\n\n    def test_line_tax_for_zero_tax_strategies(self):\n        basket = Basket()\n        basket.strategy = strategy.Default()\n        product = factories.create_product()\n        # Tax for the default strategy will be 0\n        factories.create_stockrecord(\n            product, price_excl_tax=D('75.00'), num_in_stock=10)\n        basket.add(product, 1)\n\n        self.assertEqual(basket.lines.first().line_tax, D('0'))\n\n    def test_line_tax_for_unknown_tax_strategies(self):\n\n        class UnknownTaxStrategy(strategy.Default):\n            \"\"\" A test strategy where the tax is not known \"\"\"\n\n            def pricing_policy(self, product, stockrecord):\n                return prices.FixedPrice('GBP', stockrecord.price_excl_tax, tax=None)\n\n        basket = Basket()\n        basket.strategy = UnknownTaxStrategy()\n        product = factories.create_product()\n        factories.create_stockrecord(product, num_in_stock=10)\n        basket.add(product, 1)\n\n        self.assertEqual(basket.lines.first().line_tax, None)\n\n\nclass TestAddingAProductToABasket(TestCase):\n\n    def setUp(self):\n        self.basket = Basket()\n        self.basket.strategy = strategy.Default()\n        self.product = factories.create_product()\n        self.record = factories.create_stockrecord(\n            currency='GBP',\n            product=self.product, price_excl_tax=D('10.00'))\n        self.purchase_info = factories.create_purchase_info(self.record)\n        self.basket.add(self.product)\n\n    def test_creates_a_line(self):\n        self.assertEqual(1, self.basket.num_lines)\n\n    def test_sets_line_prices(self):\n        line = self.basket.lines.all()[0]\n        self.assertEqual(line.price_incl_tax, self.purchase_info.price.incl_tax)\n        self.assertEqual(line.price_excl_tax, self.purchase_info.price.excl_tax)\n\n    def test_adding_negative_quantity(self):\n        self.assertEqual(1, self.basket.num_lines)\n        self.basket.add(self.product, quantity=4)\n        self.assertEqual(5, self.basket.line_quantity(self.product, self.record))\n        self.basket.add(self.product, quantity=-10)\n        self.assertEqual(0, self.basket.line_quantity(self.product, self.record))\n\n    def test_means_another_currency_product_cannot_be_added(self):\n        product = factories.create_product()\n        factories.create_stockrecord(\n            currency='USD', product=product, price_excl_tax=D('20.00'))\n        with self.assertRaises(ValueError):\n            self.basket.add(product)\n\n    def test_cannot_add_a_product_without_price(self):\n        product = factories.create_product(price=None)\n        with self.assertRaises(ValueError):\n            self.basket.add(product)\n\n\nclass TestANonEmptyBasket(TestCase):\n\n    def setUp(self):\n        self.basket = Basket()\n        self.basket.strategy = strategy.Default()\n        self.product = factories.create_product()\n        self.record = factories.create_stockrecord(\n            self.product, price_excl_tax=D('10.00'))\n        self.purchase_info = factories.create_purchase_info(self.record)\n        self.basket.add(self.product, 10)\n\n    def test_can_be_flushed(self):\n        self.basket.flush()\n        self.assertEqual(self.basket.num_items, 0)\n\n    def test_returns_correct_product_quantity(self):\n        self.assertEqual(10, self.basket.product_quantity(\n            self.product))\n\n    def test_returns_correct_line_quantity_for_existing_product_and_stockrecord(self):\n        self.assertEqual(10, self.basket.line_quantity(\n            self.product, self.record))\n\n    def test_returns_zero_line_quantity_for_alternative_stockrecord(self):\n        record = factories.create_stockrecord(\n            self.product, price_excl_tax=D('5.00'))\n        self.assertEqual(0, self.basket.line_quantity(\n            self.product, record))\n\n    def test_returns_zero_line_quantity_for_missing_product_and_stockrecord(self):\n        product = factories.create_product()\n        record = factories.create_stockrecord(\n            product, price_excl_tax=D('5.00'))\n        self.assertEqual(0, self.basket.line_quantity(\n            product, record))\n\n    def test_returns_correct_quantity_for_existing_product_and_stockrecord_and_options(self):\n        product = factories.create_product()\n        record = factories.create_stockrecord(\n            product, price_excl_tax=D('5.00'))\n        option = Option.objects.create(name=\"Message\")\n        options = [{\"option\": option, \"value\": \"2\"}]\n\n        self.basket.add(product, options=options)\n        self.assertEqual(0, self.basket.line_quantity(\n            product, record))\n        self.assertEqual(1, self.basket.line_quantity(\n            product, record, options))\n\n    def test_total_sums_product_totals(self):\n        product = factories.create_product()\n        factories.create_stockrecord(\n            product, price_excl_tax=D('5.00'))\n        self.basket.add(product, 1)\n        self.assertEqual(self.basket.total_excl_tax, 105)\n\n    def test_totals_for_free_products(self):\n        basket = Basket()\n        basket.strategy = strategy.Default()\n        # Add a zero-priced product to the basket\n        product = factories.create_product()\n        factories.create_stockrecord(\n            product, price_excl_tax=D('0.00'), num_in_stock=10)\n        basket.add(product, 1)\n\n        self.assertEqual(basket.lines.count(), 1)\n        self.assertEqual(basket.total_excl_tax, 0)\n        self.assertEqual(basket.total_incl_tax, 0)\n\n    def test_basket_prices_calculation_for_unavailable_pricing(self):\n        new_product = factories.create_product()\n        factories.create_stockrecord(\n            new_product, price_excl_tax=D('5.00'))\n        self.basket.add(new_product, 1)\n\n        class UnavailableProductStrategy(strategy.Default):\n            \"\"\" A test strategy that makes a specific product unavailable \"\"\"\n\n            def availability_policy(self, product, stockrecord):\n                if product == new_product:\n                    return availability.Unavailable()\n                return super().availability_policy(product, stockrecord)\n\n            def pricing_policy(self, product, stockrecord):\n                if product == new_product:\n                    return prices.Unavailable()\n                return super().pricing_policy(product, stockrecord)\n\n        self.basket.strategy = UnavailableProductStrategy()\n        line = self.basket.all_lines()[1]\n        self.assertEqual(line.get_warning(), \"'D\\xf9\\uff4d\\u03fb\\u03d2 title' is no longer available\")\n        self.assertIsNone(line.line_price_excl_tax)\n        self.assertIsNone(line.line_price_incl_tax)\n        self.assertIsNone(line.line_price_excl_tax_incl_discounts)\n        self.assertIsNone(line.line_price_incl_tax_incl_discounts)\n        self.assertIsNone(line.line_tax)\n        self.assertEqual(self.basket.total_excl_tax, 100)\n        self.assertEqual(self.basket.total_incl_tax, 100)\n        self.assertEqual(self.basket.total_excl_tax_excl_discounts, 100)\n        self.assertEqual(self.basket.total_incl_tax_excl_discounts, 100)\n\n    def test_max_allowed_quantity(self):\n        self.basket.add_product(self.product, quantity=3)\n\n        # max allowed here is 7 (20-10+3)\n        with self.settings(OSCAR_MAX_BASKET_QUANTITY_THRESHOLD=20):\n            max_allowed, basket_threshold = self.basket.max_allowed_quantity()\n            self.assertEqual(max_allowed, 7)\n            self.assertEqual(basket_threshold, 20)\n\n        # but we can also completely disable the threshold\n        with self.settings(OSCAR_MAX_BASKET_QUANTITY_THRESHOLD=None):\n            max_allowed, basket_threshold = self.basket.max_allowed_quantity()\n            self.assertEqual(max_allowed, None)\n            self.assertEqual(basket_threshold, None)\n\n    def test_is_quantity_allowed(self):\n        with self.settings(OSCAR_MAX_BASKET_QUANTITY_THRESHOLD=20):\n            # 7 or below is possible\n            allowed, message = self.basket.is_quantity_allowed(qty=7)\n            self.assertTrue(allowed)\n            self.assertIsNone(message)\n            # but above it's not\n            allowed, message = self.basket.is_quantity_allowed(qty=11)\n            self.assertFalse(allowed)\n            self.assertIsNotNone(message)\n\n        with self.settings(OSCAR_MAX_BASKET_QUANTITY_THRESHOLD=None):\n            # with the treshold disabled all quantities are possible\n            allowed, message = self.basket.is_quantity_allowed(qty=7)\n            self.assertTrue(allowed)\n            self.assertIsNone(message)\n            allowed, message = self.basket.is_quantity_allowed(qty=5000)\n            self.assertTrue(allowed)\n            self.assertIsNone(message)\n\n\nclass TestMergingTwoBaskets(TestCase):\n\n    def setUp(self):\n        self.product = factories.create_product()\n        self.record = factories.create_stockrecord(\n            self.product, price_excl_tax=D('10.00'))\n        self.purchase_info = factories.create_purchase_info(self.record)\n\n        self.main_basket = Basket()\n        self.main_basket.strategy = strategy.Default()\n        self.main_basket.add(self.product, quantity=2)\n\n        self.merge_basket = Basket()\n        self.merge_basket.strategy = strategy.Default()\n        self.merge_basket.add(self.product, quantity=1)\n\n        self.main_basket.merge(self.merge_basket)\n\n    def test_doesnt_sum_quantities(self):\n        self.assertEqual(1, self.main_basket.num_lines)\n\n    def test_changes_status_of_merge_basket(self):\n        self.assertEqual(Basket.MERGED, self.merge_basket.status)\n\n\nclass TestASubmittedBasket(TestCase):\n\n    def setUp(self):\n        self.basket = Basket()\n        self.basket.strategy = strategy.Default()\n        self.basket.submit()\n\n    def test_has_correct_status(self):\n        self.assertTrue(self.basket.is_submitted)\n\n    def test_can_be_edited(self):\n        self.assertFalse(self.basket.can_be_edited)\n\n\nclass TestMergingAVoucherBasket(TestCase):\n\n    def test_transfers_vouchers_to_new_basket(self):\n        baskets = [factories.BasketFactory(), factories.BasketFactory()]\n        voucher = factories.VoucherFactory()\n        baskets[0].vouchers.add(voucher)\n        baskets[1].merge(baskets[0])\n\n        self.assertEqual(1, baskets[1].vouchers.all().count())\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\nimport oscar.models.fields\nfrom django.conf import settings\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Country',\n            fields=[\n                ('iso_3166_1_a2', models.CharField(primary_key=True, max_length=2, verbose_name='ISO 3166-1 alpha-2', serialize=False)),\n                ('iso_3166_1_a3', models.CharField(max_length=3, verbose_name='ISO 3166-1 alpha-3', blank=True)),\n                ('iso_3166_1_numeric', models.CharField(max_length=3, verbose_name='ISO 3166-1 numeric', blank=True)),\n                ('printable_name', models.CharField(max_length=128, verbose_name='Country name')),\n                ('name', models.CharField(max_length=128, verbose_name='Official name')),\n                ('display_order', models.PositiveSmallIntegerField(default=0, verbose_name='Display order', db_index=True, help_text='Higher the number, higher the country in the list.')),\n                ('is_shipping_country', models.BooleanField(default=False, db_index=True, verbose_name='Is shipping country')),\n            ],\n            options={\n                'ordering': ('-display_order', 'printable_name'),\n                'verbose_name_plural': 'Countries',\n                'verbose_name': 'Country',\n                'abstract': False,\n            },\n            bases=(models.Model,),\n        ),\n        migrations.CreateModel(\n            name='UserAddress',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(verbose_name='Title', max_length=64, blank=True, choices=[('Mr', 'Mr'), ('Miss', 'Miss'), ('Mrs', 'Mrs'), ('Ms', 'Ms'), ('Dr', 'Dr')])),\n                ('first_name', models.CharField(max_length=255, verbose_name='First name', blank=True)),\n                ('last_name', models.CharField(max_length=255, verbose_name='Last name', blank=True)),\n                ('line1', models.CharField(max_length=255, verbose_name='First line of address')),\n                ('line2', models.CharField(max_length=255, verbose_name='Second line of address', blank=True)),\n                ('line3', models.CharField(max_length=255, verbose_name='Third line of address', blank=True)),\n                ('line4', models.CharField(max_length=255, verbose_name='City', blank=True)),\n                ('state', models.CharField(max_length=255, verbose_name='State/County', blank=True)),\n                ('postcode', oscar.models.fields.UppercaseCharField(max_length=64, verbose_name='Post/Zip-code', blank=True)),\n                ('search_text', models.TextField(editable=False, verbose_name='Search text - used only for searching addresses')),\n                ('phone_number', oscar.models.fields.PhoneNumberField(verbose_name='Phone number', help_text='In case we need to call you about your order', blank=True)),\n                ('notes', models.TextField(verbose_name='Instructions', help_text='Tell us anything we should know when delivering your order.', blank=True)),\n                ('is_default_for_shipping', models.BooleanField(default=False, verbose_name='Default shipping address?')),\n                ('is_default_for_billing', models.BooleanField(default=False, verbose_name='Default billing address?')),\n                ('num_orders', models.PositiveIntegerField(default=0, verbose_name='Number of Orders')),\n                ('hash', models.CharField(max_length=255, editable=False, db_index=True, verbose_name='Address Hash')),\n                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date Created')),\n                ('country', models.ForeignKey(verbose_name='Country', to='address.Country', on_delete=models.CASCADE)),\n                ('user', models.ForeignKey(verbose_name='User', related_name='addresses', to=settings.AUTH_USER_MODEL, on_delete=models.CASCADE)),\n            ],\n            options={\n                'ordering': ['-num_orders'],\n                'verbose_name_plural': 'User addresses',\n                'verbose_name': 'User address',\n                'abstract': False,\n            },\n            bases=(models.Model,),\n        ),\n        migrations.AlterUniqueTogether(\n            name='useraddress',\n            unique_together=set([('user', 'hash')]),\n        ),\n    ]\n",
    "output": "import datetime\n\nfrom django.test import TestCase\n\nfrom oscar.apps.basket.reports import (\n    OpenBasketReportGenerator, SubmittedBasketReportGenerator)\n\n\nclass TestBasketReports(TestCase):\n\n    def test_open_report_doesnt_error(self):\n        data = {\n            'start_date': datetime.date(2012, 5, 1),\n            'end_date': datetime.date(2012, 5, 17),\n            'formatter': 'CSV'\n        }\n        generator = OpenBasketReportGenerator(**data)\n        generator.generate()\n\n    def test_submitted_report_doesnt_error(self):\n        data = {\n            'start_date': datetime.date(2012, 5, 1),\n            'end_date': datetime.date(2012, 5, 17),\n            'formatter': 'CSV'\n        }\n        generator = SubmittedBasketReportGenerator(**data)\n        generator.generate()\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\nimport oscar.models.fields\nfrom django.conf import settings\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Country',\n            fields=[\n                ('iso_3166_1_a2', models.CharField(primary_key=True, max_length=2, verbose_name='ISO 3166-1 alpha-2', serialize=False)),\n                ('iso_3166_1_a3', models.CharField(max_length=3, verbose_name='ISO 3166-1 alpha-3', blank=True)),\n                ('iso_3166_1_numeric', models.CharField(max_length=3, verbose_name='ISO 3166-1 numeric', blank=True)),\n                ('printable_name', models.CharField(max_length=128, verbose_name='Country name')),\n                ('name', models.CharField(max_length=128, verbose_name='Official name')),\n                ('display_order', models.PositiveSmallIntegerField(default=0, verbose_name='Display order', db_index=True, help_text='Higher the number, higher the country in the list.')),\n                ('is_shipping_country', models.BooleanField(default=False, db_index=True, verbose_name='Is shipping country')),\n            ],\n            options={\n                'ordering': ('-display_order', 'printable_name'),\n                'verbose_name_plural': 'Countries',\n                'verbose_name': 'Country',\n                'abstract': False,\n            },\n            bases=(models.Model,),\n        ),\n        migrations.CreateModel(\n            name='UserAddress',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(verbose_name='Title', max_length=64, blank=True, choices=[('Mr', 'Mr'), ('Miss', 'Miss'), ('Mrs', 'Mrs'), ('Ms', 'Ms'), ('Dr', 'Dr')])),\n                ('first_name', models.CharField(max_length=255, verbose_name='First name', blank=True)),\n                ('last_name', models.CharField(max_length=255, verbose_name='Last name', blank=True)),\n                ('line1', models.CharField(max_length=255, verbose_name='First line of address')),\n                ('line2', models.CharField(max_length=255, verbose_name='Second line of address', blank=True)),\n                ('line3', models.CharField(max_length=255, verbose_name='Third line of address', blank=True)),\n                ('line4', models.CharField(max_length=255, verbose_name='City', blank=True)),\n                ('state', models.CharField(max_length=255, verbose_name='State/County', blank=True)),\n                ('postcode', oscar.models.fields.UppercaseCharField(max_length=64, verbose_name='Post/Zip-code', blank=True)),\n                ('search_text', models.TextField(editable=False, verbose_name='Search text - used only for searching addresses')),\n                ('phone_number', oscar.models.fields.PhoneNumberField(verbose_name='Phone number', help_text='In case we need to call you about your order', blank=True)),\n                ('notes', models.TextField(verbose_name='Instructions', help_text='Tell us anything we should know when delivering your order.', blank=True)),\n                ('is_default_for_shipping', models.BooleanField(default=False, verbose_name='Default shipping address?')),\n                ('is_default_for_billing', models.BooleanField(default=False, verbose_name='Default billing address?')),\n                ('num_orders', models.PositiveIntegerField(default=0, verbose_name='Number of Orders')),\n                ('hash', models.CharField(max_length=255, editable=False, db_index=True, verbose_name='Address Hash')),\n                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date Created')),\n                ('country', models.ForeignKey(verbose_name='Country', to='address.Country', on_delete=models.CASCADE)),\n                ('user', models.ForeignKey(verbose_name='User', related_name='addresses', to=settings.AUTH_USER_MODEL, on_delete=models.CASCADE)),\n            ],\n            options={\n                'ordering': ['-num_orders'],\n                'verbose_name_plural': 'User addresses',\n                'verbose_name': 'User address',\n                'abstract': False,\n            },\n            bases=(models.Model,),\n        ),\n        migrations.AlterUniqueTogether(\n            name='useraddress',\n            unique_together=set([('user', 'hash')]),\n        ),\n    ]\n",
    "output": "\nimport pytest\nfrom oscar.test.factories import (\n    BasketFactory, ConditionalOfferFactory, ProductFactory)\n\n\n@pytest.fixture\ndef filled_basket():\n    basket = BasketFactory()\n    product1 = ProductFactory()\n    product2 = ProductFactory()\n    basket.add_product(product1, quantity=10)\n    basket.add_product(product2, quantity=20)\n    return basket\n\n\n@pytest.mark.django_db\nclass TestLineOfferConsumer(object):\n\n    def test_consumed_no_offer(self, filled_basket):\n        for line in filled_basket.all_lines():\n            assert line.consumer.consumed() == 0\n\n    def test_consumed_with_offer(self, filled_basket):\n        offer1 = ConditionalOfferFactory(name='offer1')\n        offer2 = ConditionalOfferFactory(name='offer2')\n        offer1.exclusive = False\n        offer2.exclusive = False\n\n        for line in filled_basket.all_lines():\n            assert line.consumer.consumed(offer1) == 0\n            assert line.consumer.consumed(offer2) == 0\n\n        line1 = filled_basket.all_lines()[0]\n        line2 = filled_basket.all_lines()[1]\n\n        line1.consumer.consume(1, offer1)\n        assert line1.consumer.consumed() == 1\n        assert line1.consumer.consumed(offer1) == 1\n        assert line1.consumer.consumed(offer2) == 0\n\n        line1.consumer.consume(9, offer1)\n        assert line1.consumer.consumed() == line1.quantity\n        assert line1.consumer.consumed(offer1) == line1.quantity\n        assert line1.consumer.consumed(offer2) == 0\n\n        line1.consumer.consume(99, offer1)\n        assert line1.consumer.consumed(offer1) == line1.quantity\n        assert line1.consumer.consumed(offer2) == 0\n\n        line1.consumer.consume(1, offer2)\n        line2.consumer.consume(1, offer2)\n\n        assert line1.consumer.consumed(offer2) == 1\n        assert line2.consumer.consumed(offer2) == 1\n\n    def test_consume(self, filled_basket):\n        line = filled_basket.all_lines()[0]\n        line.consume(1)\n        assert line.quantity_with_discount == 1\n        line.consume(99)\n        assert line.quantity_with_discount == 10\n\n    def test_consumed_with_exclusive_offer(self, filled_basket):\n        offer1 = ConditionalOfferFactory(name='offer1')\n        offer2 = ConditionalOfferFactory(name='offer2')\n        offer3 = ConditionalOfferFactory(name='offer3')\n        offer1.exclusive = True\n        offer2.exclusive = False\n        offer3.exclusive = False\n\n        for line in filled_basket.all_lines():\n            assert line.consumer.consumed(offer1) == 0\n            assert line.consumer.consumed(offer2) == 0\n\n        line1 = filled_basket.all_lines()[0]\n        line2 = filled_basket.all_lines()[1]\n\n        line1.consumer.consume(1, offer1)\n        assert line1.is_available_for_offer_discount(offer2) is True\n\n        line1.consumer.consume(99, offer1)\n        assert line1.is_available_for_offer_discount(offer2) is False\n\n        line2.consumer.consume(1, offer2)\n        assert line2.is_available_for_offer_discount(offer1) is True\n\n        line2.consumer.consume(99, offer2)\n        assert line2.is_available_for_offer_discount(offer1) is False\n        assert line2.is_available_for_offer_discount(offer3) is True\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\nimport oscar.models.fields\nfrom django.conf import settings\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Country',\n            fields=[\n                ('iso_3166_1_a2', models.CharField(primary_key=True, max_length=2, verbose_name='ISO 3166-1 alpha-2', serialize=False)),\n                ('iso_3166_1_a3', models.CharField(max_length=3, verbose_name='ISO 3166-1 alpha-3', blank=True)),\n                ('iso_3166_1_numeric', models.CharField(max_length=3, verbose_name='ISO 3166-1 numeric', blank=True)),\n                ('printable_name', models.CharField(max_length=128, verbose_name='Country name')),\n                ('name', models.CharField(max_length=128, verbose_name='Official name')),\n                ('display_order', models.PositiveSmallIntegerField(default=0, verbose_name='Display order', db_index=True, help_text='Higher the number, higher the country in the list.')),\n                ('is_shipping_country', models.BooleanField(default=False, db_index=True, verbose_name='Is shipping country')),\n            ],\n            options={\n                'ordering': ('-display_order', 'printable_name'),\n                'verbose_name_plural': 'Countries',\n                'verbose_name': 'Country',\n                'abstract': False,\n            },\n            bases=(models.Model,),\n        ),\n        migrations.CreateModel(\n            name='UserAddress',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(verbose_name='Title', max_length=64, blank=True, choices=[('Mr', 'Mr'), ('Miss', 'Miss'), ('Mrs', 'Mrs'), ('Ms', 'Ms'), ('Dr', 'Dr')])),\n                ('first_name', models.CharField(max_length=255, verbose_name='First name', blank=True)),\n                ('last_name', models.CharField(max_length=255, verbose_name='Last name', blank=True)),\n                ('line1', models.CharField(max_length=255, verbose_name='First line of address')),\n                ('line2', models.CharField(max_length=255, verbose_name='Second line of address', blank=True)),\n                ('line3', models.CharField(max_length=255, verbose_name='Third line of address', blank=True)),\n                ('line4', models.CharField(max_length=255, verbose_name='City', blank=True)),\n                ('state', models.CharField(max_length=255, verbose_name='State/County', blank=True)),\n                ('postcode', oscar.models.fields.UppercaseCharField(max_length=64, verbose_name='Post/Zip-code', blank=True)),\n                ('search_text', models.TextField(editable=False, verbose_name='Search text - used only for searching addresses')),\n                ('phone_number', oscar.models.fields.PhoneNumberField(verbose_name='Phone number', help_text='In case we need to call you about your order', blank=True)),\n                ('notes', models.TextField(verbose_name='Instructions', help_text='Tell us anything we should know when delivering your order.', blank=True)),\n                ('is_default_for_shipping', models.BooleanField(default=False, verbose_name='Default shipping address?')),\n                ('is_default_for_billing', models.BooleanField(default=False, verbose_name='Default billing address?')),\n                ('num_orders', models.PositiveIntegerField(default=0, verbose_name='Number of Orders')),\n                ('hash', models.CharField(max_length=255, editable=False, db_index=True, verbose_name='Address Hash')),\n                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date Created')),\n                ('country', models.ForeignKey(verbose_name='Country', to='address.Country', on_delete=models.CASCADE)),\n                ('user', models.ForeignKey(verbose_name='User', related_name='addresses', to=settings.AUTH_USER_MODEL, on_delete=models.CASCADE)),\n            ],\n            options={\n                'ordering': ['-num_orders'],\n                'verbose_name_plural': 'User addresses',\n                'verbose_name': 'User address',\n                'abstract': False,\n            },\n            bases=(models.Model,),\n        ),\n        migrations.AlterUniqueTogether(\n            name='useraddress',\n            unique_together=set([('user', 'hash')]),\n        ),\n    ]\n",
    "output": "from django.contrib.messages import get_messages\nfrom django.test import TestCase\nfrom django.urls import reverse\n\nfrom oscar.apps.basket import views\nfrom oscar.test import factories\nfrom tests.fixtures import RequestFactory\n\n\nclass TestVoucherAddView(TestCase):\n    def test_get(self):\n        request = RequestFactory().get('/')\n\n        view = views.VoucherAddView.as_view()\n        response = view(request)\n\n        self.assertEqual(response.status_code, 302)\n\n    def _get_voucher_message(self, request):\n        return '\\n'.join(str(m.message) for m in get_messages(request))\n\n    def test_post_valid(self):\n        voucher = factories.VoucherFactory()\n        self.assertTrue(voucher.is_active())\n\n        data = {\n            'code': voucher.code\n        }\n        request = RequestFactory().post('/', data=data)\n        request.basket.save()\n\n        view = views.VoucherAddView.as_view()\n        response = view(request)\n        self.assertEqual(response.status_code, 302)\n\n        voucher = voucher.__class__.objects.get(pk=voucher.pk)\n        self.assertEqual(voucher.num_basket_additions, 1, msg=self._get_voucher_message(request))\n\n    def test_post_valid_from_set(self):\n        voucherset = factories.VoucherSetFactory()\n        voucher = voucherset.vouchers.first()\n\n        self.assertTrue(voucher.is_active())\n\n        data = {\n            'code': voucher.code\n        }\n        request = RequestFactory().post('/', data=data)\n        request.basket.save()\n\n        view = views.VoucherAddView.as_view()\n        response = view(request)\n        self.assertEqual(response.status_code, 302)\n\n        voucher = voucher.__class__.objects.get(pk=voucher.pk)\n        self.assertEqual(voucher.num_basket_additions, 1, msg=self._get_voucher_message(request))\n\n        self.assertEqual(voucherset.num_basket_additions, 1)\n\n\nclass TestVoucherRemoveView(TestCase):\n    def test_post_valid(self):\n        voucher = factories.VoucherFactory(num_basket_additions=5)\n\n        data = {\n            'code': voucher.code\n        }\n        request = RequestFactory().post('/', data=data)\n        request.basket.save()\n        request.basket.vouchers.add(voucher)\n\n        view = views.VoucherRemoveView.as_view()\n        response = view(request, pk=voucher.pk)\n        self.assertEqual(response.status_code, 302)\n\n        voucher = voucher.__class__.objects.get(pk=voucher.pk)\n        self.assertEqual(voucher.num_basket_additions, 4)\n\n    def test_post_with_missing_voucher(self):\n        \"\"\" If the voucher is missing, verify the view queues a message and redirects. \"\"\"\n        pk = '12345'\n        view = views.VoucherRemoveView.as_view()\n        request = RequestFactory().post('/')\n        request.basket.save()\n        response = view(request, pk=pk)\n\n        self.assertEqual(response.status_code, 302)\n\n        actual = list(get_messages(request))[-1].message\n        expected = \"No voucher found with id '{}'\".format(pk)\n        self.assertEqual(actual, expected)\n\n\nclass TestBasketSummaryView(TestCase):\n    def setUp(self):\n        self.url = reverse('basket:summary')\n        self.country = factories.CountryFactory()\n        self.user = factories.UserFactory()\n\n    def test_default_shipping_address(self):\n        user_address = factories.UserAddressFactory(\n            country=self.country, user=self.user, is_default_for_shipping=True\n        )\n        request = RequestFactory().get(self.url, user=self.user)\n        view = views.BasketView(request=request)\n        self.assertEquals(view.get_default_shipping_address(), user_address)\n\n    def test_default_shipping_address_for_anonymous_user(self):\n        request = RequestFactory().get(self.url)\n        view = views.BasketView(request=request)\n        self.assertIsNone(view.get_default_shipping_address())\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\nimport oscar.models.fields\nfrom django.conf import settings\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Country',\n            fields=[\n                ('iso_3166_1_a2', models.CharField(primary_key=True, max_length=2, verbose_name='ISO 3166-1 alpha-2', serialize=False)),\n                ('iso_3166_1_a3', models.CharField(max_length=3, verbose_name='ISO 3166-1 alpha-3', blank=True)),\n                ('iso_3166_1_numeric', models.CharField(max_length=3, verbose_name='ISO 3166-1 numeric', blank=True)),\n                ('printable_name', models.CharField(max_length=128, verbose_name='Country name')),\n                ('name', models.CharField(max_length=128, verbose_name='Official name')),\n                ('display_order', models.PositiveSmallIntegerField(default=0, verbose_name='Display order', db_index=True, help_text='Higher the number, higher the country in the list.')),\n                ('is_shipping_country', models.BooleanField(default=False, db_index=True, verbose_name='Is shipping country')),\n            ],\n            options={\n                'ordering': ('-display_order', 'printable_name'),\n                'verbose_name_plural': 'Countries',\n                'verbose_name': 'Country',\n                'abstract': False,\n            },\n            bases=(models.Model,),\n        ),\n        migrations.CreateModel(\n            name='UserAddress',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(verbose_name='Title', max_length=64, blank=True, choices=[('Mr', 'Mr'), ('Miss', 'Miss'), ('Mrs', 'Mrs'), ('Ms', 'Ms'), ('Dr', 'Dr')])),\n                ('first_name', models.CharField(max_length=255, verbose_name='First name', blank=True)),\n                ('last_name', models.CharField(max_length=255, verbose_name='Last name', blank=True)),\n                ('line1', models.CharField(max_length=255, verbose_name='First line of address')),\n                ('line2', models.CharField(max_length=255, verbose_name='Second line of address', blank=True)),\n                ('line3', models.CharField(max_length=255, verbose_name='Third line of address', blank=True)),\n                ('line4', models.CharField(max_length=255, verbose_name='City', blank=True)),\n                ('state', models.CharField(max_length=255, verbose_name='State/County', blank=True)),\n                ('postcode', oscar.models.fields.UppercaseCharField(max_length=64, verbose_name='Post/Zip-code', blank=True)),\n                ('search_text', models.TextField(editable=False, verbose_name='Search text - used only for searching addresses')),\n                ('phone_number', oscar.models.fields.PhoneNumberField(verbose_name='Phone number', help_text='In case we need to call you about your order', blank=True)),\n                ('notes', models.TextField(verbose_name='Instructions', help_text='Tell us anything we should know when delivering your order.', blank=True)),\n                ('is_default_for_shipping', models.BooleanField(default=False, verbose_name='Default shipping address?')),\n                ('is_default_for_billing', models.BooleanField(default=False, verbose_name='Default billing address?')),\n                ('num_orders', models.PositiveIntegerField(default=0, verbose_name='Number of Orders')),\n                ('hash', models.CharField(max_length=255, editable=False, db_index=True, verbose_name='Address Hash')),\n                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date Created')),\n                ('country', models.ForeignKey(verbose_name='Country', to='address.Country', on_delete=models.CASCADE)),\n                ('user', models.ForeignKey(verbose_name='User', related_name='addresses', to=settings.AUTH_USER_MODEL, on_delete=models.CASCADE)),\n            ],\n            options={\n                'ordering': ['-num_orders'],\n                'verbose_name_plural': 'User addresses',\n                'verbose_name': 'User address',\n                'abstract': False,\n            },\n            bases=(models.Model,),\n        ),\n        migrations.AlterUniqueTogether(\n            name='useraddress',\n            unique_together=set([('user', 'hash')]),\n        ),\n    ]\n",
    "output": ""
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\nimport oscar.models.fields\nfrom django.conf import settings\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Country',\n            fields=[\n                ('iso_3166_1_a2', models.CharField(primary_key=True, max_length=2, verbose_name='ISO 3166-1 alpha-2', serialize=False)),\n                ('iso_3166_1_a3', models.CharField(max_length=3, verbose_name='ISO 3166-1 alpha-3', blank=True)),\n                ('iso_3166_1_numeric', models.CharField(max_length=3, verbose_name='ISO 3166-1 numeric', blank=True)),\n                ('printable_name', models.CharField(max_length=128, verbose_name='Country name')),\n                ('name', models.CharField(max_length=128, verbose_name='Official name')),\n                ('display_order', models.PositiveSmallIntegerField(default=0, verbose_name='Display order', db_index=True, help_text='Higher the number, higher the country in the list.')),\n                ('is_shipping_country', models.BooleanField(default=False, db_index=True, verbose_name='Is shipping country')),\n            ],\n            options={\n                'ordering': ('-display_order', 'printable_name'),\n                'verbose_name_plural': 'Countries',\n                'verbose_name': 'Country',\n                'abstract': False,\n            },\n            bases=(models.Model,),\n        ),\n        migrations.CreateModel(\n            name='UserAddress',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(verbose_name='Title', max_length=64, blank=True, choices=[('Mr', 'Mr'), ('Miss', 'Miss'), ('Mrs', 'Mrs'), ('Ms', 'Ms'), ('Dr', 'Dr')])),\n                ('first_name', models.CharField(max_length=255, verbose_name='First name', blank=True)),\n                ('last_name', models.CharField(max_length=255, verbose_name='Last name', blank=True)),\n                ('line1', models.CharField(max_length=255, verbose_name='First line of address')),\n                ('line2', models.CharField(max_length=255, verbose_name='Second line of address', blank=True)),\n                ('line3', models.CharField(max_length=255, verbose_name='Third line of address', blank=True)),\n                ('line4', models.CharField(max_length=255, verbose_name='City', blank=True)),\n                ('state', models.CharField(max_length=255, verbose_name='State/County', blank=True)),\n                ('postcode', oscar.models.fields.UppercaseCharField(max_length=64, verbose_name='Post/Zip-code', blank=True)),\n                ('search_text', models.TextField(editable=False, verbose_name='Search text - used only for searching addresses')),\n                ('phone_number', oscar.models.fields.PhoneNumberField(verbose_name='Phone number', help_text='In case we need to call you about your order', blank=True)),\n                ('notes', models.TextField(verbose_name='Instructions', help_text='Tell us anything we should know when delivering your order.', blank=True)),\n                ('is_default_for_shipping', models.BooleanField(default=False, verbose_name='Default shipping address?')),\n                ('is_default_for_billing', models.BooleanField(default=False, verbose_name='Default billing address?')),\n                ('num_orders', models.PositiveIntegerField(default=0, verbose_name='Number of Orders')),\n                ('hash', models.CharField(max_length=255, editable=False, db_index=True, verbose_name='Address Hash')),\n                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date Created')),\n                ('country', models.ForeignKey(verbose_name='Country', to='address.Country', on_delete=models.CASCADE)),\n                ('user', models.ForeignKey(verbose_name='User', related_name='addresses', to=settings.AUTH_USER_MODEL, on_delete=models.CASCADE)),\n            ],\n            options={\n                'ordering': ['-num_orders'],\n                'verbose_name_plural': 'User addresses',\n                'verbose_name': 'User address',\n                'abstract': False,\n            },\n            bases=(models.Model,),\n        ),\n        migrations.AlterUniqueTogether(\n            name='useraddress',\n            unique_together=set([('user', 'hash')]),\n        ),\n    ]\n",
    "output": "from decimal import Decimal as D\nfrom unittest import mock\n\nfrom django.test import TestCase\n\nfrom oscar.apps.checkout import calculators\nfrom oscar.core import prices\n\n\nclass TestOrderTotalCalculator(TestCase):\n\n    def setUp(self):\n        self.calculator = calculators.OrderTotalCalculator()\n\n    def test_returns_correct_totals_when_tax_is_not_known(self):\n        basket = mock.Mock()\n        basket.total_excl_tax = D('10.00')\n        basket.is_tax_known = False\n\n        shipping_charge = prices.Price(\n            currency=basket.currency, excl_tax=D('5.00'))\n\n        total = self.calculator.calculate(basket, shipping_charge)\n\n        self.assertIsInstance(total, prices.Price)\n        self.assertEqual(D('10.00') + D('5.00'), total.excl_tax)\n        self.assertFalse(total.is_tax_known)\n\n    def test_returns_correct_totals_when_tax_is_known(self):\n        basket = mock.Mock()\n        basket.total_excl_tax = D('10.00')\n        basket.total_incl_tax = D('12.00')\n        basket.is_tax_known = True\n\n        shipping_charge = prices.Price(\n            currency=basket.currency, excl_tax=D('5.00'),\n            tax=D('0.50'))\n\n        total = self.calculator.calculate(basket, shipping_charge)\n\n        self.assertIsInstance(total, prices.Price)\n        self.assertEqual(D('10.00') + D('5.00'), total.excl_tax)\n        self.assertTrue(total.is_tax_known)\n        self.assertEqual(D('12.00') + D('5.50'), total.incl_tax)\n        self.assertEqual(D('2.00') + D('0.50'), total.tax)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\nimport oscar.models.fields\nfrom django.conf import settings\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Country',\n            fields=[\n                ('iso_3166_1_a2', models.CharField(primary_key=True, max_length=2, verbose_name='ISO 3166-1 alpha-2', serialize=False)),\n                ('iso_3166_1_a3', models.CharField(max_length=3, verbose_name='ISO 3166-1 alpha-3', blank=True)),\n                ('iso_3166_1_numeric', models.CharField(max_length=3, verbose_name='ISO 3166-1 numeric', blank=True)),\n                ('printable_name', models.CharField(max_length=128, verbose_name='Country name')),\n                ('name', models.CharField(max_length=128, verbose_name='Official name')),\n                ('display_order', models.PositiveSmallIntegerField(default=0, verbose_name='Display order', db_index=True, help_text='Higher the number, higher the country in the list.')),\n                ('is_shipping_country', models.BooleanField(default=False, db_index=True, verbose_name='Is shipping country')),\n            ],\n            options={\n                'ordering': ('-display_order', 'printable_name'),\n                'verbose_name_plural': 'Countries',\n                'verbose_name': 'Country',\n                'abstract': False,\n            },\n            bases=(models.Model,),\n        ),\n        migrations.CreateModel(\n            name='UserAddress',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(verbose_name='Title', max_length=64, blank=True, choices=[('Mr', 'Mr'), ('Miss', 'Miss'), ('Mrs', 'Mrs'), ('Ms', 'Ms'), ('Dr', 'Dr')])),\n                ('first_name', models.CharField(max_length=255, verbose_name='First name', blank=True)),\n                ('last_name', models.CharField(max_length=255, verbose_name='Last name', blank=True)),\n                ('line1', models.CharField(max_length=255, verbose_name='First line of address')),\n                ('line2', models.CharField(max_length=255, verbose_name='Second line of address', blank=True)),\n                ('line3', models.CharField(max_length=255, verbose_name='Third line of address', blank=True)),\n                ('line4', models.CharField(max_length=255, verbose_name='City', blank=True)),\n                ('state', models.CharField(max_length=255, verbose_name='State/County', blank=True)),\n                ('postcode', oscar.models.fields.UppercaseCharField(max_length=64, verbose_name='Post/Zip-code', blank=True)),\n                ('search_text', models.TextField(editable=False, verbose_name='Search text - used only for searching addresses')),\n                ('phone_number', oscar.models.fields.PhoneNumberField(verbose_name='Phone number', help_text='In case we need to call you about your order', blank=True)),\n                ('notes', models.TextField(verbose_name='Instructions', help_text='Tell us anything we should know when delivering your order.', blank=True)),\n                ('is_default_for_shipping', models.BooleanField(default=False, verbose_name='Default shipping address?')),\n                ('is_default_for_billing', models.BooleanField(default=False, verbose_name='Default billing address?')),\n                ('num_orders', models.PositiveIntegerField(default=0, verbose_name='Number of Orders')),\n                ('hash', models.CharField(max_length=255, editable=False, db_index=True, verbose_name='Address Hash')),\n                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date Created')),\n                ('country', models.ForeignKey(verbose_name='Country', to='address.Country', on_delete=models.CASCADE)),\n                ('user', models.ForeignKey(verbose_name='User', related_name='addresses', to=settings.AUTH_USER_MODEL, on_delete=models.CASCADE)),\n            ],\n            options={\n                'ordering': ['-num_orders'],\n                'verbose_name_plural': 'User addresses',\n                'verbose_name': 'User address',\n                'abstract': False,\n            },\n            bases=(models.Model,),\n        ),\n        migrations.AlterUniqueTogether(\n            name='useraddress',\n            unique_together=set([('user', 'hash')]),\n        ),\n    ]\n",
    "output": "# coding=utf-8\nfrom django.test import TestCase\nfrom django.test.utils import override_settings\n\nfrom oscar.apps.address.models import Country\nfrom oscar.apps.checkout.forms import ShippingAddressForm\nfrom oscar.test.factories import CountryFactory\n\n\nclass AnotherShippingAddressForm(ShippingAddressForm):\n    phone_number_fields = {\n        'phone_number': {\n            'required': False,\n            'help_text': '',\n            'max_length': 32,\n            'label': 'Phone number'\n        },\n        'another_phone_number': {\n            'required': False,\n            'help_text': 'Another phone number help text',\n            'max_length': 32,\n            'label': 'Another phone number'\n        },\n    }\n\n\nclass TestShippingAddressForm(TestCase):\n    minimal_data = {\n        'first_name': 'B\u00e4rry',\n        'last_name': 'Chuckle',\n        'line1': '1 King St',\n        'line4': 'Goth\u00e1m',\n        'postcode': 'N1 7RR'\n    }\n\n    def setUp(self):\n        CountryFactory(iso_3166_1_a2='GB', is_shipping_country=True)\n\n    def test_removes_country_field(self):\n        self.assertTrue('country' not in ShippingAddressForm().fields)\n\n    def test_keeps_country_field(self):\n        CountryFactory(iso_3166_1_a2='DE', is_shipping_country=True)\n        self.assertTrue('country' in ShippingAddressForm().fields)\n\n    @override_settings(OSCAR_REQUIRED_ADDRESS_FIELDS=('last_name', 'postcode'))\n    def test_required_fields_validated(self):\n        form = ShippingAddressForm()\n        self.assertTrue(form.fields['last_name'].required)\n        self.assertTrue(form.fields['postcode'].required)\n        self.assertFalse(form.fields['first_name'].required)\n        self.assertFalse(form.fields['line2'].required)\n        self.assertFalse(form.fields['line3'].required)\n        self.assertFalse(form.fields['line4'].required)\n\n    @override_settings(OSCAR_REQUIRED_ADDRESS_FIELDS=('phone_number',))\n    def test_required_phone_number_validated(self):\n        # This needs a separate test because of the logic in PhoneNumberMixin\n        form = ShippingAddressForm()\n        self.assertTrue(form.fields['phone_number'].required)\n\n    # Tests where the country field is hidden\n\n    def test_is_valid_without_phone_number(self):\n        self.assertTrue(ShippingAddressForm(self.minimal_data).is_valid())\n\n    def test_only_accepts_british_local_phone_number(self):\n        data = self.minimal_data.copy()\n        data['phone_number'] = '07 914721389'  # local UK number\n        self.assertTrue(ShippingAddressForm(data).is_valid())\n\n        data['phone_number'] = '0176 968 426 71'  # local German number\n        self.assertFalse(ShippingAddressForm(data).is_valid())\n\n    def test_only_accepts_british_local_phone_numbers(self):\n        data = self.minimal_data.copy()\n        # Both numbers are British local numbers\n        data['phone_number'] = '07 914721389'\n        data['another_phone_number'] = '0344493 0787'  # British Airways\n        self.assertTrue(AnotherShippingAddressForm(data).is_valid())\n\n        # Both numbers are local German numbers\n        data['phone_number'] = '0176 968 426 71'\n        data['another_phone_number'] = '07032 15 49225'  # IBM Germany\n        self.assertFalse(AnotherShippingAddressForm(data).is_valid())\n\n        # One number is British number, another is German number\n        data['phone_number'] = '07 914721389'\n        data['another_phone_number'] = '0176 968 426 71'\n        self.assertFalse(AnotherShippingAddressForm(data).is_valid())\n\n        # As previous case, but numbers are reversed\n        data['phone_number'] = '0176 968 426 71'\n        data['another_phone_number'] = '07 914721389'\n        self.assertFalse(AnotherShippingAddressForm(data).is_valid())\n\n    def test_is_valid_with_international_phone_number(self):\n        data = self.minimal_data.copy()\n        data['phone_number'] = '+49 176 968426 71'\n        form = ShippingAddressForm(data)\n        self.assertTrue(form.is_valid())\n\n    def test_is_valid_with_international_phone_numbers(self):\n        data = self.minimal_data.copy()\n        data['phone_number'] = '+49 176 968426 71'\n        data['another_phone_number'] = '+49-1805-426452'\n        form = AnotherShippingAddressForm(data)\n        self.assertTrue(form.is_valid())\n\n    # Tests where the country field exists\n\n    def test_needs_country_data(self):\n        CountryFactory(iso_3166_1_a2='DE', is_shipping_country=True)\n\n        self.assertFalse(ShippingAddressForm(self.minimal_data).is_valid())\n\n        data = self.minimal_data.copy()\n        data['country'] = Country.objects.get(iso_3166_1_a2='GB').pk\n        self.assertTrue(ShippingAddressForm(data).is_valid())\n\n    def test_only_accepts_local_phone_number_when_country_matches(self):\n        CountryFactory(iso_3166_1_a2='DE', is_shipping_country=True)\n\n        data = self.minimal_data.copy()\n        data['phone_number'] = '07 914721389'  # local UK number\n\n        data['country'] = Country.objects.get(iso_3166_1_a2='DE').pk\n        self.assertFalse(ShippingAddressForm(data).is_valid())\n\n        data['country'] = Country.objects.get(iso_3166_1_a2='GB').pk\n        self.assertTrue(ShippingAddressForm(data).is_valid())\n\n    def test_only_accepts_local_phone_numbers_when_country_matches(self):\n        CountryFactory(iso_3166_1_a2='DE', is_shipping_country=True)\n        data = self.minimal_data.copy()\n        # Local UK numbers\n        data['phone_number'] = '07 914721389'\n        data['another_phone_number'] = '0344493 0787'\n\n        data['country'] = Country.objects.get(iso_3166_1_a2='DE').pk\n        self.assertFalse(ShippingAddressForm(data).is_valid())\n\n        data['country'] = Country.objects.get(iso_3166_1_a2='GB').pk\n        self.assertTrue(ShippingAddressForm(data).is_valid())\n\n    @override_settings(OSCAR_REQUIRED_ADDRESS_FIELDS=('phone_number',))\n    def test_local_phone_number_invalid_without_country(self):\n        # Add another country, so we have two.\n        CountryFactory(iso_3166_1_a2='DE', is_shipping_country=True)\n        data = self.minimal_data.copy()\n        data['phone_number'] = '07 914721389'\n        # User hasn't selected a country. Because there are multiple country\n        # choices we should not accept the local number.\n        form = ShippingAddressForm(data)\n        self.assertFalse(form.is_valid())\n        self.assertIn('phone_number', form.errors)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\nimport oscar.models.fields\nfrom django.conf import settings\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Country',\n            fields=[\n                ('iso_3166_1_a2', models.CharField(primary_key=True, max_length=2, verbose_name='ISO 3166-1 alpha-2', serialize=False)),\n                ('iso_3166_1_a3', models.CharField(max_length=3, verbose_name='ISO 3166-1 alpha-3', blank=True)),\n                ('iso_3166_1_numeric', models.CharField(max_length=3, verbose_name='ISO 3166-1 numeric', blank=True)),\n                ('printable_name', models.CharField(max_length=128, verbose_name='Country name')),\n                ('name', models.CharField(max_length=128, verbose_name='Official name')),\n                ('display_order', models.PositiveSmallIntegerField(default=0, verbose_name='Display order', db_index=True, help_text='Higher the number, higher the country in the list.')),\n                ('is_shipping_country', models.BooleanField(default=False, db_index=True, verbose_name='Is shipping country')),\n            ],\n            options={\n                'ordering': ('-display_order', 'printable_name'),\n                'verbose_name_plural': 'Countries',\n                'verbose_name': 'Country',\n                'abstract': False,\n            },\n            bases=(models.Model,),\n        ),\n        migrations.CreateModel(\n            name='UserAddress',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(verbose_name='Title', max_length=64, blank=True, choices=[('Mr', 'Mr'), ('Miss', 'Miss'), ('Mrs', 'Mrs'), ('Ms', 'Ms'), ('Dr', 'Dr')])),\n                ('first_name', models.CharField(max_length=255, verbose_name='First name', blank=True)),\n                ('last_name', models.CharField(max_length=255, verbose_name='Last name', blank=True)),\n                ('line1', models.CharField(max_length=255, verbose_name='First line of address')),\n                ('line2', models.CharField(max_length=255, verbose_name='Second line of address', blank=True)),\n                ('line3', models.CharField(max_length=255, verbose_name='Third line of address', blank=True)),\n                ('line4', models.CharField(max_length=255, verbose_name='City', blank=True)),\n                ('state', models.CharField(max_length=255, verbose_name='State/County', blank=True)),\n                ('postcode', oscar.models.fields.UppercaseCharField(max_length=64, verbose_name='Post/Zip-code', blank=True)),\n                ('search_text', models.TextField(editable=False, verbose_name='Search text - used only for searching addresses')),\n                ('phone_number', oscar.models.fields.PhoneNumberField(verbose_name='Phone number', help_text='In case we need to call you about your order', blank=True)),\n                ('notes', models.TextField(verbose_name='Instructions', help_text='Tell us anything we should know when delivering your order.', blank=True)),\n                ('is_default_for_shipping', models.BooleanField(default=False, verbose_name='Default shipping address?')),\n                ('is_default_for_billing', models.BooleanField(default=False, verbose_name='Default billing address?')),\n                ('num_orders', models.PositiveIntegerField(default=0, verbose_name='Number of Orders')),\n                ('hash', models.CharField(max_length=255, editable=False, db_index=True, verbose_name='Address Hash')),\n                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date Created')),\n                ('country', models.ForeignKey(verbose_name='Country', to='address.Country', on_delete=models.CASCADE)),\n                ('user', models.ForeignKey(verbose_name='User', related_name='addresses', to=settings.AUTH_USER_MODEL, on_delete=models.CASCADE)),\n            ],\n            options={\n                'ordering': ['-num_orders'],\n                'verbose_name_plural': 'User addresses',\n                'verbose_name': 'User address',\n                'abstract': False,\n            },\n            bases=(models.Model,),\n        ),\n        migrations.AlterUniqueTogether(\n            name='useraddress',\n            unique_together=set([('user', 'hash')]),\n        ),\n    ]\n",
    "output": "from decimal import Decimal as D\nfrom unittest import mock\n\nfrom django.http import HttpRequest\nfrom django.test import TestCase\nfrom django.test.utils import override_settings\n\nfrom oscar.apps.checkout.calculators import OrderTotalCalculator\nfrom oscar.apps.checkout.mixins import CheckoutSessionMixin, OrderPlacementMixin\nfrom oscar.apps.checkout.exceptions import FailedPreCondition\nfrom oscar.core.loading import get_model\nfrom oscar.test import factories\nfrom oscar.test.basket import add_product\nfrom oscar.test.utils import RequestFactory\nfrom oscar.apps.shipping.methods import FixedPrice, Free\n\n\nOrder = get_model('order', 'Order')\n\n\nclass TestOrderPlacementMixin(TestCase):\n\n    def test_returns_none_when_no_shipping_address_passed_to_creation_method(self):\n        address = OrderPlacementMixin().create_shipping_address(\n            user=mock.Mock(), shipping_address=None)\n        self.assertEqual(address, None)\n\n    def test_update_address_book(self):\n        basket = factories.create_basket(empty=True)\n        user = factories.UserFactory()\n        add_product(basket, D('12.00'))\n        shipping_method = FixedPrice(D('5.00'), D('5.00'))\n\n        billing_address = factories.BillingAddressFactory(line1='1 Boardwalk Place',\n                                                          line2='Trafalgar Way',\n                                                          line3='Tower Hamlets',\n                                                          line4='London')\n        shipping_address = factories.ShippingAddressFactory(line1='Knightsbridge',\n                                                            line2='159',\n                                                            line4='London')\n        shipping_charge = shipping_method.calculate(basket)\n        order_total = OrderTotalCalculator().calculate(basket, shipping_charge)\n\n        order_submission_data = {'user': user,\n                                 'order_number': '12345',\n                                 'basket': basket,\n                                 'shipping_address': shipping_address,\n                                 'shipping_method': shipping_method,\n                                 'shipping_charge': shipping_charge,\n                                 'billing_address': billing_address,\n                                 'order_total': order_total}\n        OrderPlacementMixin().place_order(**order_submission_data)\n\n        self.assertEqual(user.addresses.filter(hash=billing_address.generate_hash()).count(), 1)\n        self.assertEqual(user.addresses.filter(hash=shipping_address.generate_hash()).count(), 1)\n\n        user_billing_address = user.addresses.get(hash=billing_address.generate_hash())\n        user_shipping_address = user.addresses.get(hash=shipping_address.generate_hash())\n        self.assertEqual(user_billing_address.num_orders_as_billing_address, 1)\n        self.assertEqual(user_shipping_address.num_orders_as_shipping_address, 1)\n\n        order_submission_data['order_number'] = '12346'\n\n        OrderPlacementMixin().place_order(**order_submission_data)\n\n        user_billing_address = user.addresses.get(hash=billing_address.generate_hash())\n        user_shipping_address = user.addresses.get(hash=shipping_address.generate_hash())\n        self.assertEqual(user_billing_address.num_orders_as_billing_address, 2)\n        self.assertEqual(user_shipping_address.num_orders_as_shipping_address, 2)\n\n        order_submission_data.pop('billing_address', None)\n        order_submission_data['order_number'] = '123457'\n        OrderPlacementMixin().place_order(**order_submission_data)\n\n        user_billing_address = user.addresses.get(hash=billing_address.generate_hash())\n        user_shipping_address = user.addresses.get(hash=shipping_address.generate_hash())\n        self.assertEqual(user_billing_address.num_orders_as_billing_address, 2)\n        self.assertEqual(user_shipping_address.num_orders_as_shipping_address, 3)\n\n        shipping_address.line2 = '160'\n        order_submission_data['billing_address'] = billing_address\n        order_submission_data['order_number'] = '123458'\n        OrderPlacementMixin().place_order(**order_submission_data)\n\n        user_billing_address = user.addresses.get(hash=billing_address.generate_hash())\n        user_shipping_address = user.addresses.get(hash=shipping_address.generate_hash())\n        self.assertEqual(user_billing_address.num_orders_as_billing_address, 3)\n        self.assertEqual(user_shipping_address.num_orders_as_shipping_address, 1)\n\n    @override_settings(SITE_ID='')\n    def test_multi_site(self):\n        basket = factories.create_basket(empty=True)\n        site1 = factories.SiteFactory()\n        site2 = factories.SiteFactory()\n        request = HttpRequest()\n        request.META['SERVER_PORT'] = 80\n        request.META['SERVER_NAME'] = site1.domain\n        user = factories.UserFactory()\n        add_product(basket, D('12.00'))\n        shipping_method = Free()\n        shipping_charge = shipping_method.calculate(basket)\n        order_total = OrderTotalCalculator().calculate(basket, shipping_charge)\n\n        billing_address = factories.BillingAddressFactory()\n        shipping_address = factories.ShippingAddressFactory()\n        order_submission_data = {'user': user,\n                                 'order_number': '12345',\n                                 'basket': basket,\n                                 'shipping_method': shipping_method,\n                                 'shipping_charge': shipping_charge,\n                                 'order_total': order_total,\n                                 'billing_address': billing_address,\n                                 'shipping_address': shipping_address,\n                                 'request': request}\n        OrderPlacementMixin().place_order(**order_submission_data)\n        order1 = Order.objects.get(number='12345')\n        self.assertEqual(order1.site, site1)\n\n        add_product(basket, D('12.00'))\n        request.META['SERVER_NAME'] = site2.domain\n        order_submission_data['order_number'] = '12346'\n        order_submission_data['request'] = request\n        OrderPlacementMixin().place_order(**order_submission_data)\n        order2 = Order.objects.get(number='12346')\n        self.assertEqual(order2.site, site2)\n\n    def test_multiple_payment_events(self):\n        basket = factories.create_basket(empty=True)\n        user = factories.UserFactory()\n        add_product(basket, D('100.00'))\n        order_placement = OrderPlacementMixin()\n        order_placement.add_payment_event('Gift Card Payment', D('10'))\n        order_placement.add_payment_event('Credit Card Payment', D('90'))\n        shipping_method = Free()\n        shipping_charge = shipping_method.calculate(basket)\n        order_total = OrderTotalCalculator().calculate(basket, shipping_charge)\n\n        billing_address = factories.BillingAddressFactory()\n        shipping_address = factories.ShippingAddressFactory()\n        order_submission_data = {'user': user,\n                                 'order_number': '12345',\n                                 'basket': basket,\n                                 'shipping_method': shipping_method,\n                                 'shipping_charge': shipping_charge,\n                                 'order_total': order_total,\n                                 'billing_address': billing_address,\n                                 'shipping_address': shipping_address}\n        order_placement.place_order(**order_submission_data)\n        order1 = Order.objects.get(number='12345')\n        self.assertEqual(order1.payment_events.count(), 2)\n        event1 = order1.payment_events.all()[0]\n        event2 = order1.payment_events.all()[1]\n        self.assertEqual(event1.event_type.name, 'Credit Card Payment')\n        self.assertEqual(event1.amount, D('90'))\n        self.assertEqual(event1.lines.count(), 1)\n        self.assertEqual(event2.event_type.name, 'Gift Card Payment')\n        self.assertEqual(event2.amount, D('10'))\n        self.assertEqual(event2.lines.count(), 1)\n\n\nclass TestCheckoutSessionMixin(TestCase):\n\n    def setUp(self):\n        self.request = RequestFactory().get('/')\n        self.product = factories.create_product(num_in_stock=10)\n        self.stock_record = self.product.stockrecords.first()\n\n    def add_product_to_basket(self, product, quantity=1):\n        self.request.basket.add_product(product, quantity=quantity)\n        self.assertEqual(len(self.request.basket.all_lines()), 1)\n        self.assertEqual(self.request.basket.all_lines()[0].product, product)\n\n    def test_check_basket_is_valid_no_stock_available(self):\n        self.add_product_to_basket(self.product)\n        CheckoutSessionMixin().check_basket_is_valid(self.request)\n        self.stock_record.allocate(10)\n        self.stock_record.save()\n        with self.assertRaises(FailedPreCondition):\n            CheckoutSessionMixin().check_basket_is_valid(self.request)\n\n    def test_check_basket_is_valid_stock_exceeded(self):\n        self.add_product_to_basket(self.product)\n        CheckoutSessionMixin().check_basket_is_valid(self.request)\n        self.request.basket.add_product(self.product, quantity=11)\n        with self.assertRaises(FailedPreCondition):\n            CheckoutSessionMixin().check_basket_is_valid(self.request)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\nimport oscar.models.fields\nfrom django.conf import settings\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Country',\n            fields=[\n                ('iso_3166_1_a2', models.CharField(primary_key=True, max_length=2, verbose_name='ISO 3166-1 alpha-2', serialize=False)),\n                ('iso_3166_1_a3', models.CharField(max_length=3, verbose_name='ISO 3166-1 alpha-3', blank=True)),\n                ('iso_3166_1_numeric', models.CharField(max_length=3, verbose_name='ISO 3166-1 numeric', blank=True)),\n                ('printable_name', models.CharField(max_length=128, verbose_name='Country name')),\n                ('name', models.CharField(max_length=128, verbose_name='Official name')),\n                ('display_order', models.PositiveSmallIntegerField(default=0, verbose_name='Display order', db_index=True, help_text='Higher the number, higher the country in the list.')),\n                ('is_shipping_country', models.BooleanField(default=False, db_index=True, verbose_name='Is shipping country')),\n            ],\n            options={\n                'ordering': ('-display_order', 'printable_name'),\n                'verbose_name_plural': 'Countries',\n                'verbose_name': 'Country',\n                'abstract': False,\n            },\n            bases=(models.Model,),\n        ),\n        migrations.CreateModel(\n            name='UserAddress',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(verbose_name='Title', max_length=64, blank=True, choices=[('Mr', 'Mr'), ('Miss', 'Miss'), ('Mrs', 'Mrs'), ('Ms', 'Ms'), ('Dr', 'Dr')])),\n                ('first_name', models.CharField(max_length=255, verbose_name='First name', blank=True)),\n                ('last_name', models.CharField(max_length=255, verbose_name='Last name', blank=True)),\n                ('line1', models.CharField(max_length=255, verbose_name='First line of address')),\n                ('line2', models.CharField(max_length=255, verbose_name='Second line of address', blank=True)),\n                ('line3', models.CharField(max_length=255, verbose_name='Third line of address', blank=True)),\n                ('line4', models.CharField(max_length=255, verbose_name='City', blank=True)),\n                ('state', models.CharField(max_length=255, verbose_name='State/County', blank=True)),\n                ('postcode', oscar.models.fields.UppercaseCharField(max_length=64, verbose_name='Post/Zip-code', blank=True)),\n                ('search_text', models.TextField(editable=False, verbose_name='Search text - used only for searching addresses')),\n                ('phone_number', oscar.models.fields.PhoneNumberField(verbose_name='Phone number', help_text='In case we need to call you about your order', blank=True)),\n                ('notes', models.TextField(verbose_name='Instructions', help_text='Tell us anything we should know when delivering your order.', blank=True)),\n                ('is_default_for_shipping', models.BooleanField(default=False, verbose_name='Default shipping address?')),\n                ('is_default_for_billing', models.BooleanField(default=False, verbose_name='Default billing address?')),\n                ('num_orders', models.PositiveIntegerField(default=0, verbose_name='Number of Orders')),\n                ('hash', models.CharField(max_length=255, editable=False, db_index=True, verbose_name='Address Hash')),\n                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date Created')),\n                ('country', models.ForeignKey(verbose_name='Country', to='address.Country', on_delete=models.CASCADE)),\n                ('user', models.ForeignKey(verbose_name='User', related_name='addresses', to=settings.AUTH_USER_MODEL, on_delete=models.CASCADE)),\n            ],\n            options={\n                'ordering': ['-num_orders'],\n                'verbose_name_plural': 'User addresses',\n                'verbose_name': 'User address',\n                'abstract': False,\n            },\n            bases=(models.Model,),\n        ),\n        migrations.AlterUniqueTogether(\n            name='useraddress',\n            unique_together=set([('user', 'hash')]),\n        ),\n    ]\n",
    "output": "from unittest import mock\n\nfrom django.test import TestCase\nfrom django.test.client import RequestFactory\nfrom django.contrib.sessions.middleware import SessionMiddleware\n\nfrom oscar.apps.checkout.utils import CheckoutSessionData\n\n\nclass TestCheckoutSession(TestCase):\n    \"\"\"\n    oscar.apps.checkout.utils.CheckoutSessionData\n    \"\"\"\n\n    def setUp(self):\n        request = RequestFactory().get('/')\n        SessionMiddleware().process_request(request)\n        self.session_data = CheckoutSessionData(request)\n\n    def test_allows_data_to_be_written_and_read_out(self):\n        self.session_data._set('namespace', 'key', 'value')\n        self.assertEqual('value', self.session_data._get('namespace', 'key'))\n\n    def test_allows_set_data_can_be_unset(self):\n        self.session_data._set('namespace', 'key', 'value')\n        self.session_data._unset('namespace', 'key')\n        self.assertIsNone(self.session_data._get('namespace', 'key'))\n\n    def test_stores_guest_email(self):\n        self.session_data.set_guest_email('a@a.com')\n        self.assertEqual('a@a.com', self.session_data.get_guest_email())\n\n    def test_allows_a_namespace_to_be_flushed(self):\n        self.session_data._set('ns', 'a', 1)\n        self.session_data._set('ns', 'b', 2)\n        self.session_data._flush_namespace('ns')\n        self.assertIsNone(self.session_data._get('ns', 'a'))\n        self.assertIsNone(self.session_data._get('ns', 'b'))\n\n    def test_allows_bill_to_user_address(self):\n        address = mock.Mock()\n        address.id = 1\n        self.session_data.bill_to_user_address(address)\n        self.assertEqual(1, self.session_data.billing_user_address_id())\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\nimport oscar.models.fields\nfrom django.conf import settings\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Country',\n            fields=[\n                ('iso_3166_1_a2', models.CharField(primary_key=True, max_length=2, verbose_name='ISO 3166-1 alpha-2', serialize=False)),\n                ('iso_3166_1_a3', models.CharField(max_length=3, verbose_name='ISO 3166-1 alpha-3', blank=True)),\n                ('iso_3166_1_numeric', models.CharField(max_length=3, verbose_name='ISO 3166-1 numeric', blank=True)),\n                ('printable_name', models.CharField(max_length=128, verbose_name='Country name')),\n                ('name', models.CharField(max_length=128, verbose_name='Official name')),\n                ('display_order', models.PositiveSmallIntegerField(default=0, verbose_name='Display order', db_index=True, help_text='Higher the number, higher the country in the list.')),\n                ('is_shipping_country', models.BooleanField(default=False, db_index=True, verbose_name='Is shipping country')),\n            ],\n            options={\n                'ordering': ('-display_order', 'printable_name'),\n                'verbose_name_plural': 'Countries',\n                'verbose_name': 'Country',\n                'abstract': False,\n            },\n            bases=(models.Model,),\n        ),\n        migrations.CreateModel(\n            name='UserAddress',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(verbose_name='Title', max_length=64, blank=True, choices=[('Mr', 'Mr'), ('Miss', 'Miss'), ('Mrs', 'Mrs'), ('Ms', 'Ms'), ('Dr', 'Dr')])),\n                ('first_name', models.CharField(max_length=255, verbose_name='First name', blank=True)),\n                ('last_name', models.CharField(max_length=255, verbose_name='Last name', blank=True)),\n                ('line1', models.CharField(max_length=255, verbose_name='First line of address')),\n                ('line2', models.CharField(max_length=255, verbose_name='Second line of address', blank=True)),\n                ('line3', models.CharField(max_length=255, verbose_name='Third line of address', blank=True)),\n                ('line4', models.CharField(max_length=255, verbose_name='City', blank=True)),\n                ('state', models.CharField(max_length=255, verbose_name='State/County', blank=True)),\n                ('postcode', oscar.models.fields.UppercaseCharField(max_length=64, verbose_name='Post/Zip-code', blank=True)),\n                ('search_text', models.TextField(editable=False, verbose_name='Search text - used only for searching addresses')),\n                ('phone_number', oscar.models.fields.PhoneNumberField(verbose_name='Phone number', help_text='In case we need to call you about your order', blank=True)),\n                ('notes', models.TextField(verbose_name='Instructions', help_text='Tell us anything we should know when delivering your order.', blank=True)),\n                ('is_default_for_shipping', models.BooleanField(default=False, verbose_name='Default shipping address?')),\n                ('is_default_for_billing', models.BooleanField(default=False, verbose_name='Default billing address?')),\n                ('num_orders', models.PositiveIntegerField(default=0, verbose_name='Number of Orders')),\n                ('hash', models.CharField(max_length=255, editable=False, db_index=True, verbose_name='Address Hash')),\n                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date Created')),\n                ('country', models.ForeignKey(verbose_name='Country', to='address.Country', on_delete=models.CASCADE)),\n                ('user', models.ForeignKey(verbose_name='User', related_name='addresses', to=settings.AUTH_USER_MODEL, on_delete=models.CASCADE)),\n            ],\n            options={\n                'ordering': ['-num_orders'],\n                'verbose_name_plural': 'User addresses',\n                'verbose_name': 'User address',\n                'abstract': False,\n            },\n            bases=(models.Model,),\n        ),\n        migrations.AlterUniqueTogether(\n            name='useraddress',\n            unique_together=set([('user', 'hash')]),\n        ),\n    ]\n",
    "output": "from django.test import TestCase\nfrom django.test.utils import override_settings\nfrom django.urls import reverse\n\nfrom oscar.test.factories import OrderFactory\n\n\nclass ThankYouViewTestCase(TestCase):\n\n    @override_settings(OSCAR_ALLOW_ANON_CHECKOUT=True)\n    def test_analytics_event_triggered_only_on_first_view(self):\n        order = OrderFactory()\n        session = self.client.session\n        # Put the order ID in the session, mimicking a completed order,\n        # so that we can reach the thank you page.\n        session['checkout_order_id'] = order.pk\n        session.save()\n\n        r1 = self.client.get(reverse('checkout:thank-you'), follow=True)\n        self.assertTrue(r1.context['send_analytics_event'])\n\n        # Request the view a second time\n        r2 = self.client.get(reverse('checkout:thank-you'), follow=True)\n        self.assertFalse(r2.context['send_analytics_event'])\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\nimport oscar.models.fields\nfrom django.conf import settings\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Country',\n            fields=[\n                ('iso_3166_1_a2', models.CharField(primary_key=True, max_length=2, verbose_name='ISO 3166-1 alpha-2', serialize=False)),\n                ('iso_3166_1_a3', models.CharField(max_length=3, verbose_name='ISO 3166-1 alpha-3', blank=True)),\n                ('iso_3166_1_numeric', models.CharField(max_length=3, verbose_name='ISO 3166-1 numeric', blank=True)),\n                ('printable_name', models.CharField(max_length=128, verbose_name='Country name')),\n                ('name', models.CharField(max_length=128, verbose_name='Official name')),\n                ('display_order', models.PositiveSmallIntegerField(default=0, verbose_name='Display order', db_index=True, help_text='Higher the number, higher the country in the list.')),\n                ('is_shipping_country', models.BooleanField(default=False, db_index=True, verbose_name='Is shipping country')),\n            ],\n            options={\n                'ordering': ('-display_order', 'printable_name'),\n                'verbose_name_plural': 'Countries',\n                'verbose_name': 'Country',\n                'abstract': False,\n            },\n            bases=(models.Model,),\n        ),\n        migrations.CreateModel(\n            name='UserAddress',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(verbose_name='Title', max_length=64, blank=True, choices=[('Mr', 'Mr'), ('Miss', 'Miss'), ('Mrs', 'Mrs'), ('Ms', 'Ms'), ('Dr', 'Dr')])),\n                ('first_name', models.CharField(max_length=255, verbose_name='First name', blank=True)),\n                ('last_name', models.CharField(max_length=255, verbose_name='Last name', blank=True)),\n                ('line1', models.CharField(max_length=255, verbose_name='First line of address')),\n                ('line2', models.CharField(max_length=255, verbose_name='Second line of address', blank=True)),\n                ('line3', models.CharField(max_length=255, verbose_name='Third line of address', blank=True)),\n                ('line4', models.CharField(max_length=255, verbose_name='City', blank=True)),\n                ('state', models.CharField(max_length=255, verbose_name='State/County', blank=True)),\n                ('postcode', oscar.models.fields.UppercaseCharField(max_length=64, verbose_name='Post/Zip-code', blank=True)),\n                ('search_text', models.TextField(editable=False, verbose_name='Search text - used only for searching addresses')),\n                ('phone_number', oscar.models.fields.PhoneNumberField(verbose_name='Phone number', help_text='In case we need to call you about your order', blank=True)),\n                ('notes', models.TextField(verbose_name='Instructions', help_text='Tell us anything we should know when delivering your order.', blank=True)),\n                ('is_default_for_shipping', models.BooleanField(default=False, verbose_name='Default shipping address?')),\n                ('is_default_for_billing', models.BooleanField(default=False, verbose_name='Default billing address?')),\n                ('num_orders', models.PositiveIntegerField(default=0, verbose_name='Number of Orders')),\n                ('hash', models.CharField(max_length=255, editable=False, db_index=True, verbose_name='Address Hash')),\n                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date Created')),\n                ('country', models.ForeignKey(verbose_name='Country', to='address.Country', on_delete=models.CASCADE)),\n                ('user', models.ForeignKey(verbose_name='User', related_name='addresses', to=settings.AUTH_USER_MODEL, on_delete=models.CASCADE)),\n            ],\n            options={\n                'ordering': ['-num_orders'],\n                'verbose_name_plural': 'User addresses',\n                'verbose_name': 'User address',\n                'abstract': False,\n            },\n            bases=(models.Model,),\n        ),\n        migrations.AlterUniqueTogether(\n            name='useraddress',\n            unique_together=set([('user', 'hash')]),\n        ),\n    ]\n",
    "output": ""
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\nimport oscar.models.fields\nfrom django.conf import settings\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Country',\n            fields=[\n                ('iso_3166_1_a2', models.CharField(primary_key=True, max_length=2, verbose_name='ISO 3166-1 alpha-2', serialize=False)),\n                ('iso_3166_1_a3', models.CharField(max_length=3, verbose_name='ISO 3166-1 alpha-3', blank=True)),\n                ('iso_3166_1_numeric', models.CharField(max_length=3, verbose_name='ISO 3166-1 numeric', blank=True)),\n                ('printable_name', models.CharField(max_length=128, verbose_name='Country name')),\n                ('name', models.CharField(max_length=128, verbose_name='Official name')),\n                ('display_order', models.PositiveSmallIntegerField(default=0, verbose_name='Display order', db_index=True, help_text='Higher the number, higher the country in the list.')),\n                ('is_shipping_country', models.BooleanField(default=False, db_index=True, verbose_name='Is shipping country')),\n            ],\n            options={\n                'ordering': ('-display_order', 'printable_name'),\n                'verbose_name_plural': 'Countries',\n                'verbose_name': 'Country',\n                'abstract': False,\n            },\n            bases=(models.Model,),\n        ),\n        migrations.CreateModel(\n            name='UserAddress',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(verbose_name='Title', max_length=64, blank=True, choices=[('Mr', 'Mr'), ('Miss', 'Miss'), ('Mrs', 'Mrs'), ('Ms', 'Ms'), ('Dr', 'Dr')])),\n                ('first_name', models.CharField(max_length=255, verbose_name='First name', blank=True)),\n                ('last_name', models.CharField(max_length=255, verbose_name='Last name', blank=True)),\n                ('line1', models.CharField(max_length=255, verbose_name='First line of address')),\n                ('line2', models.CharField(max_length=255, verbose_name='Second line of address', blank=True)),\n                ('line3', models.CharField(max_length=255, verbose_name='Third line of address', blank=True)),\n                ('line4', models.CharField(max_length=255, verbose_name='City', blank=True)),\n                ('state', models.CharField(max_length=255, verbose_name='State/County', blank=True)),\n                ('postcode', oscar.models.fields.UppercaseCharField(max_length=64, verbose_name='Post/Zip-code', blank=True)),\n                ('search_text', models.TextField(editable=False, verbose_name='Search text - used only for searching addresses')),\n                ('phone_number', oscar.models.fields.PhoneNumberField(verbose_name='Phone number', help_text='In case we need to call you about your order', blank=True)),\n                ('notes', models.TextField(verbose_name='Instructions', help_text='Tell us anything we should know when delivering your order.', blank=True)),\n                ('is_default_for_shipping', models.BooleanField(default=False, verbose_name='Default shipping address?')),\n                ('is_default_for_billing', models.BooleanField(default=False, verbose_name='Default billing address?')),\n                ('num_orders', models.PositiveIntegerField(default=0, verbose_name='Number of Orders')),\n                ('hash', models.CharField(max_length=255, editable=False, db_index=True, verbose_name='Address Hash')),\n                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date Created')),\n                ('country', models.ForeignKey(verbose_name='Country', to='address.Country', on_delete=models.CASCADE)),\n                ('user', models.ForeignKey(verbose_name='User', related_name='addresses', to=settings.AUTH_USER_MODEL, on_delete=models.CASCADE)),\n            ],\n            options={\n                'ordering': ['-num_orders'],\n                'verbose_name_plural': 'User addresses',\n                'verbose_name': 'User address',\n                'abstract': False,\n            },\n            bases=(models.Model,),\n        ),\n        migrations.AlterUniqueTogether(\n            name='useraddress',\n            unique_together=set([('user', 'hash')]),\n        ),\n    ]\n",
    "output": "# coding=utf-8\n\"\"\"\nAutoSlugField taken from django-extensions at\n15d3eb305957cee4768dd86e44df1bdad341a10e\nUses Oscar's slugify function instead of Django's\n\nCopyright (c) 2007 Michael Trier\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\"\"\nfrom django.db import models\nfrom django.test import TestCase\nfrom django.test.utils import override_settings\n\nfrom oscar.core.loading import get_model\n\nSluggedTestModel = get_model('model_tests_app', 'sluggedtestmodel')\nChildSluggedTestModel = get_model('model_tests_app', 'childsluggedtestmodel')\nCustomSluggedTestModel = get_model('model_tests_app', 'CustomSluggedTestModel')\n\n\nclass AutoSlugFieldTest(TestCase):\n    def tearDown(self):\n        super().tearDown()\n\n        SluggedTestModel.objects.all().delete()\n\n    def test_auto_create_slug(self):\n        m = SluggedTestModel(title='foo')\n        m.save()\n        self.assertEqual(m.slug, 'foo')\n\n    def test_auto_create_next_slug(self):\n        m = SluggedTestModel(title='foo')\n        m.save()\n\n        m = SluggedTestModel(title='foo')\n        m.save()\n        self.assertEqual(m.slug, 'foo-2')\n\n    def test_auto_create_slug_with_number(self):\n        m = SluggedTestModel(title='foo 2012')\n        m.save()\n        self.assertEqual(m.slug, 'foo-2012')\n\n    def test_auto_update_slug_with_number(self):\n        m = SluggedTestModel(title='foo 2012')\n        m.save()\n        m.save()\n        self.assertEqual(m.slug, 'foo-2012')\n\n    def test_auto_create_unicode_slug(self):\n        with override_settings(OSCAR_SLUG_ALLOW_UNICODE=True):\n            m = SluggedTestModel(title='Ch\u00e2teau Margaux 1960')\n            m.save()\n            self.assertEqual(m.slug, 'ch\u00e2teau-margaux-1960')\n\n    def test_auto_create_next_unicode_slug(self):\n        with override_settings(OSCAR_SLUG_ALLOW_UNICODE=True):\n            m1 = SluggedTestModel(title='Ch\u00e2teau Margaux 1960')\n            m1.save()\n\n            m2 = SluggedTestModel(title='Ch\u00e2teau Margaux 1960')\n            m2.save()\n\n            self.assertEqual(m2.slug, 'ch\u00e2teau-margaux-1960-2')\n\n    def test_switch_to_unicode_slug(self):\n        m = SluggedTestModel(title='Ch\u00e2teau Margaux 1960')\n        m.save()\n        self.assertEqual(m.slug, 'chateau-margaux-1960')\n        with override_settings(OSCAR_SLUG_ALLOW_UNICODE=True):\n            m = SluggedTestModel(title='Ch\u00e2teau Margaux 1960')\n            m.save()\n            self.assertEqual(m.slug, 'ch\u00e2teau-margaux-1960')\n\n    def test_autoslugfield_allow_unicode_kwargs_precedence(self):\n        from oscar.models.fields import AutoSlugField\n        with override_settings(OSCAR_SLUG_ALLOW_UNICODE=True):\n            autoslug_field = AutoSlugField(populate_from='title', allow_unicode=False)\n            self.assertFalse(autoslug_field.allow_unicode)\n            autoslug_field = AutoSlugField(populate_from='title')\n            self.assertTrue(autoslug_field.allow_unicode)\n\n    def test_update_slug(self):\n        m = SluggedTestModel(title='foo')\n        m.save()\n        self.assertEqual(m.slug, 'foo')\n\n        # update m instance without using `save'\n        SluggedTestModel.objects.filter(pk=m.pk).update(slug='foo-2012')\n        # update m instance with new data from the db\n        m = SluggedTestModel.objects.get(pk=m.pk)\n        self.assertEqual(m.slug, 'foo-2012')\n\n        m.save()\n        self.assertEqual(m.title, 'foo')\n        self.assertEqual(m.slug, 'foo-2012')\n\n        # Check slug is not overwrite\n        m.title = 'bar'\n        m.save()\n        self.assertEqual(m.title, 'bar')\n        self.assertEqual(m.slug, 'foo-2012')\n\n    def test_simple_slug_source(self):\n        m = SluggedTestModel(title='-foo')\n        m.save()\n        self.assertEqual(m.slug, 'foo')\n\n        n = SluggedTestModel(title='-foo')\n        n.save()\n        self.assertEqual(n.slug, 'foo-2')\n\n        n.save()\n        self.assertEqual(n.slug, 'foo-2')\n\n    def test_empty_slug_source(self):\n        # regression test\n\n        m = SluggedTestModel(title='')\n        m.save()\n        self.assertEqual(m.slug, '-2')\n\n        n = SluggedTestModel(title='')\n        n.save()\n        self.assertEqual(n.slug, '-3')\n\n        n.save()\n        self.assertEqual(n.slug, '-3')\n\n    def test_inheritance_creates_next_slug(self):\n        m = SluggedTestModel(title='foo')\n        m.save()\n\n        n = ChildSluggedTestModel(title='foo')\n        n.save()\n        self.assertEqual(n.slug, 'foo-2')\n\n        o = SluggedTestModel(title='foo')\n        o.save()\n        self.assertEqual(o.slug, 'foo-3')\n\n    def test_separator_and_uppercase_options(self):\n        m = CustomSluggedTestModel(title=\"Password reset\")\n        m.save()\n        self.assertEqual(m.slug, 'PASSWORD_RESET')\n\n        m = CustomSluggedTestModel(title=\"Password reset\")\n        m.save()\n        self.assertEqual(m.slug, 'PASSWORD_RESET_2')\n\n    def test_migration(self):\n        \"\"\"\n        Tests making migrations with Django 1.7+'s migration framework\n        \"\"\"\n\n        import oscar\n        from django.db import migrations\n        from django.db.migrations.writer import MigrationWriter\n        from oscar.models.fields import AutoSlugField\n        fields = {\n            'autoslugfield': AutoSlugField(populate_from='otherfield'),\n        }\n\n        migration = type(str(\"Migration\"), (migrations.Migration,), {\n            \"operations\": [\n                migrations.CreateModel(\"MyModel\", tuple(fields.items()),\n                                       {'populate_from': 'otherfield'},\n                                       (models.Model,)),\n            ],\n        })\n        writer = MigrationWriter(migration)\n        output = writer.as_string()\n\n        if isinstance(output, str):\n            output = output.encode('utf-8')\n\n        # We don't test the output formatting - that's too fragile.\n        # Just make sure it runs for now, and that things look alright.\n        context = {\n            'migrations': migrations,\n            'oscar': oscar,\n        }\n        result = self.safe_exec(output, context=context)\n        self.assertIn(\"Migration\", result)\n\n    def safe_exec(self, string, value=None, context=None):\n        loc = {}\n        g = globals()\n        g.update(context)\n        try:\n            exec(string, g, loc)\n        except Exception as e:\n            if value:\n                self.fail(\"Could not exec %r (from value %r): %s\" % (\n                    string.strip(), value, e))\n            else:\n                self.fail(\"Could not exec %r: %s\" % (string.strip(), e))\n        return loc\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\nimport oscar.models.fields\nfrom django.conf import settings\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Country',\n            fields=[\n                ('iso_3166_1_a2', models.CharField(primary_key=True, max_length=2, verbose_name='ISO 3166-1 alpha-2', serialize=False)),\n                ('iso_3166_1_a3', models.CharField(max_length=3, verbose_name='ISO 3166-1 alpha-3', blank=True)),\n                ('iso_3166_1_numeric', models.CharField(max_length=3, verbose_name='ISO 3166-1 numeric', blank=True)),\n                ('printable_name', models.CharField(max_length=128, verbose_name='Country name')),\n                ('name', models.CharField(max_length=128, verbose_name='Official name')),\n                ('display_order', models.PositiveSmallIntegerField(default=0, verbose_name='Display order', db_index=True, help_text='Higher the number, higher the country in the list.')),\n                ('is_shipping_country', models.BooleanField(default=False, db_index=True, verbose_name='Is shipping country')),\n            ],\n            options={\n                'ordering': ('-display_order', 'printable_name'),\n                'verbose_name_plural': 'Countries',\n                'verbose_name': 'Country',\n                'abstract': False,\n            },\n            bases=(models.Model,),\n        ),\n        migrations.CreateModel(\n            name='UserAddress',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(verbose_name='Title', max_length=64, blank=True, choices=[('Mr', 'Mr'), ('Miss', 'Miss'), ('Mrs', 'Mrs'), ('Ms', 'Ms'), ('Dr', 'Dr')])),\n                ('first_name', models.CharField(max_length=255, verbose_name='First name', blank=True)),\n                ('last_name', models.CharField(max_length=255, verbose_name='Last name', blank=True)),\n                ('line1', models.CharField(max_length=255, verbose_name='First line of address')),\n                ('line2', models.CharField(max_length=255, verbose_name='Second line of address', blank=True)),\n                ('line3', models.CharField(max_length=255, verbose_name='Third line of address', blank=True)),\n                ('line4', models.CharField(max_length=255, verbose_name='City', blank=True)),\n                ('state', models.CharField(max_length=255, verbose_name='State/County', blank=True)),\n                ('postcode', oscar.models.fields.UppercaseCharField(max_length=64, verbose_name='Post/Zip-code', blank=True)),\n                ('search_text', models.TextField(editable=False, verbose_name='Search text - used only for searching addresses')),\n                ('phone_number', oscar.models.fields.PhoneNumberField(verbose_name='Phone number', help_text='In case we need to call you about your order', blank=True)),\n                ('notes', models.TextField(verbose_name='Instructions', help_text='Tell us anything we should know when delivering your order.', blank=True)),\n                ('is_default_for_shipping', models.BooleanField(default=False, verbose_name='Default shipping address?')),\n                ('is_default_for_billing', models.BooleanField(default=False, verbose_name='Default billing address?')),\n                ('num_orders', models.PositiveIntegerField(default=0, verbose_name='Number of Orders')),\n                ('hash', models.CharField(max_length=255, editable=False, db_index=True, verbose_name='Address Hash')),\n                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date Created')),\n                ('country', models.ForeignKey(verbose_name='Country', to='address.Country', on_delete=models.CASCADE)),\n                ('user', models.ForeignKey(verbose_name='User', related_name='addresses', to=settings.AUTH_USER_MODEL, on_delete=models.CASCADE)),\n            ],\n            options={\n                'ordering': ['-num_orders'],\n                'verbose_name_plural': 'User addresses',\n                'verbose_name': 'User address',\n                'abstract': False,\n            },\n            bases=(models.Model,),\n        ),\n        migrations.AlterUniqueTogether(\n            name='useraddress',\n            unique_together=set([('user', 'hash')]),\n        ),\n    ]\n",
    "output": "# -*- coding: utf-8 -*-\nimport codecs\nimport datetime\nimport io\nimport os\nfrom tempfile import NamedTemporaryFile\nfrom django.utils.encoding import smart_text\n\nfrom django.test import TestCase, override_settings\n\nfrom oscar.core.compat import UnicodeCSVWriter, existing_user_fields\n\n\nclass unicodeobj(object):\n\n    def __init__(self, s):\n        self.s = s\n\n    def __str__(self):\n        return self.s\n\n\nclass TestExistingUserFields(TestCase):\n\n    def test_order(self):\n        fields = existing_user_fields(['email', 'first_name', 'last_name'])\n        self.assertEqual(fields, ['email', 'first_name', 'last_name'])\n\n\nclass TestUnicodeCSVWriter(TestCase):\n\n    def test_can_write_different_values(self):\n        writer = UnicodeCSVWriter(open_file=io.StringIO())\n        s = '\u00fcn\u012fcod\u0113'\n        rows = [[s, unicodeobj(s), 123, datetime.date.today()], ]\n        writer.writerows(rows)\n        self.assertRaises(TypeError, writer.writerows, [object()])\n\n    def test_context_manager(self):\n        tmp_file = NamedTemporaryFile()\n        with UnicodeCSVWriter(filename=tmp_file.name) as writer:\n            s = '\u00fcn\u012fcod\u0113'\n            rows = [[s, unicodeobj(s), 123, datetime.date.today()], ]\n            writer.writerows(rows)\n\n    def test_csv_write_output(self):\n        tmp_file = NamedTemporaryFile(delete=False)\n        with UnicodeCSVWriter(filename=tmp_file.name) as writer:\n            s = '\u00fcn\u012fcod\u0113'\n            row = [s, 123, 'foo-bar']\n            writer.writerows([row])\n\n        with open(tmp_file.name, 'r') as read_file:\n            content = smart_text(read_file.read(), encoding='utf-8').strip()\n            self.assertEqual(content, '\u00fcn\u012fcod\u0113,123,foo-bar')\n\n        # Clean up\n        os.unlink(tmp_file.name)\n\n    @override_settings(OSCAR_CSV_INCLUDE_BOM=True)\n    def test_bom_write_with_open_file(self):\n        csv_file = NamedTemporaryFile(delete=False)\n        with open(csv_file.name, 'w') as open_file:\n            writer = UnicodeCSVWriter(open_file=open_file, encoding=\"utf-8\")\n            s = '\u00fcn\u012fcod\u0113'\n            row = [s, 123, datetime.date.today()]\n            writer.writerows([row])\n\n        with open(csv_file.name, 'rb') as read_file:\n            self.assertTrue(read_file.read().startswith(codecs.BOM_UTF8))\n\n        # Clean up\n        os.unlink(csv_file.name)\n\n    @override_settings(OSCAR_CSV_INCLUDE_BOM=True)\n    def test_bom_write_with_filename(self):\n        csv_file = NamedTemporaryFile(delete=False)\n        with UnicodeCSVWriter(filename=csv_file.name, encoding=\"utf-8\") as writer:\n            s = '\u00fcn\u012fcod\u0113'\n            row = [s, 123, datetime.date.today()]\n            writer.writerows([row])\n\n        with open(csv_file.name, 'rb') as read_file:\n            self.assertTrue(read_file.read().startswith(codecs.BOM_UTF8))\n\n        # Clean up\n        os.unlink(csv_file.name)\n\n    @override_settings(OSCAR_CSV_INCLUDE_BOM=True)\n    def test_bom_not_written_for_other_encodings(self):\n        csv_file = NamedTemporaryFile(delete=False)\n        with UnicodeCSVWriter(filename=csv_file.name, encoding=\"ascii\") as writer:\n            s = 'boring ascii'\n            row = [s, 123, datetime.date.today()]\n            writer.writerows([row])\n\n        with open(csv_file.name, 'rb') as read_file:\n            self.assertFalse(read_file.read().startswith(codecs.BOM_UTF8))\n\n        # Clean up\n        os.unlink(csv_file.name)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\nimport oscar.models.fields\nfrom django.conf import settings\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Country',\n            fields=[\n                ('iso_3166_1_a2', models.CharField(primary_key=True, max_length=2, verbose_name='ISO 3166-1 alpha-2', serialize=False)),\n                ('iso_3166_1_a3', models.CharField(max_length=3, verbose_name='ISO 3166-1 alpha-3', blank=True)),\n                ('iso_3166_1_numeric', models.CharField(max_length=3, verbose_name='ISO 3166-1 numeric', blank=True)),\n                ('printable_name', models.CharField(max_length=128, verbose_name='Country name')),\n                ('name', models.CharField(max_length=128, verbose_name='Official name')),\n                ('display_order', models.PositiveSmallIntegerField(default=0, verbose_name='Display order', db_index=True, help_text='Higher the number, higher the country in the list.')),\n                ('is_shipping_country', models.BooleanField(default=False, db_index=True, verbose_name='Is shipping country')),\n            ],\n            options={\n                'ordering': ('-display_order', 'printable_name'),\n                'verbose_name_plural': 'Countries',\n                'verbose_name': 'Country',\n                'abstract': False,\n            },\n            bases=(models.Model,),\n        ),\n        migrations.CreateModel(\n            name='UserAddress',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(verbose_name='Title', max_length=64, blank=True, choices=[('Mr', 'Mr'), ('Miss', 'Miss'), ('Mrs', 'Mrs'), ('Ms', 'Ms'), ('Dr', 'Dr')])),\n                ('first_name', models.CharField(max_length=255, verbose_name='First name', blank=True)),\n                ('last_name', models.CharField(max_length=255, verbose_name='Last name', blank=True)),\n                ('line1', models.CharField(max_length=255, verbose_name='First line of address')),\n                ('line2', models.CharField(max_length=255, verbose_name='Second line of address', blank=True)),\n                ('line3', models.CharField(max_length=255, verbose_name='Third line of address', blank=True)),\n                ('line4', models.CharField(max_length=255, verbose_name='City', blank=True)),\n                ('state', models.CharField(max_length=255, verbose_name='State/County', blank=True)),\n                ('postcode', oscar.models.fields.UppercaseCharField(max_length=64, verbose_name='Post/Zip-code', blank=True)),\n                ('search_text', models.TextField(editable=False, verbose_name='Search text - used only for searching addresses')),\n                ('phone_number', oscar.models.fields.PhoneNumberField(verbose_name='Phone number', help_text='In case we need to call you about your order', blank=True)),\n                ('notes', models.TextField(verbose_name='Instructions', help_text='Tell us anything we should know when delivering your order.', blank=True)),\n                ('is_default_for_shipping', models.BooleanField(default=False, verbose_name='Default shipping address?')),\n                ('is_default_for_billing', models.BooleanField(default=False, verbose_name='Default billing address?')),\n                ('num_orders', models.PositiveIntegerField(default=0, verbose_name='Number of Orders')),\n                ('hash', models.CharField(max_length=255, editable=False, db_index=True, verbose_name='Address Hash')),\n                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date Created')),\n                ('country', models.ForeignKey(verbose_name='Country', to='address.Country', on_delete=models.CASCADE)),\n                ('user', models.ForeignKey(verbose_name='User', related_name='addresses', to=settings.AUTH_USER_MODEL, on_delete=models.CASCADE)),\n            ],\n            options={\n                'ordering': ['-num_orders'],\n                'verbose_name_plural': 'User addresses',\n                'verbose_name': 'User address',\n                'abstract': False,\n            },\n            bases=(models.Model,),\n        ),\n        migrations.AlterUniqueTogether(\n            name='useraddress',\n            unique_together=set([('user', 'hash')]),\n        ),\n    ]\n",
    "output": "import pytest\nfrom django.conf import settings\nfrom django.test import TestCase\n\nfrom oscar.core import customisation\n\nVALID_FOLDER_PATH = 'tests/_site/apps'\n\n\nclass TestUtilities(TestCase):\n\n    def test_subfolder_extraction(self):\n        folders = list(customisation.subfolders('/var/www/eggs'))\n        self.assertEqual(folders, ['/var', '/var/www', '/var/www/eggs'])\n\n\ndef test_raises_exception_for_nonexistant_app_label():\n    with pytest.raises(ValueError):\n        customisation.fork_app('sillytown', 'somefolder')\n\n\ndef test_raises_exception_if_app_has_already_been_forked():\n    # We piggyback on another test which means a custom app is already in\n    # the settings we use for the test suite. We just check that's still\n    # the case here.\n    assert 'tests._site.apps.partner' in settings.INSTALLED_APPS\n    with pytest.raises(ValueError):\n        customisation.fork_app('partner', VALID_FOLDER_PATH)\n\n\ndef test_creates_new_folder(tmpdir):\n    path = tmpdir.mkdir('fork')\n    customisation.fork_app('order', str(path))\n    path.join('order').ensure_dir()\n\n\ndef test_creates_init_file(tmpdir):\n    path = tmpdir.mkdir('fork')\n    customisation.fork_app('order', str(path))\n\n    path.join('order').join('__init__.py').ensure()\n\n\ndef test_handles_dashboard_app(tmpdir):\n    # Dashboard apps are fiddly as they aren't identified by a single app\n    # label.\n    path = tmpdir.mkdir('fork')\n    customisation.fork_app('dashboard.catalogue', str(path))\n    # Check __init__.py created (and supporting folders)\n\n    path.join('dashboard').join('catalogue').join('__init__.py').ensure()\n\n\ndef test_creates_models_and_admin_file(tmpdir):\n    path = tmpdir.mkdir('fork')\n    customisation.fork_app('order', str(path))\n    for module, expected_string in [\n        ('models', 'from oscar.apps.order.models import *'),\n        ('admin', 'from oscar.apps.order.admin import *'),\n        ('config', 'OrderConfig')\n    ]:\n        filepath = path.join('order').join('%s.py' % module)\n        filepath.ensure()\n        contents = filepath.read()\n        assert expected_string in contents\n\n\ndef test_copies_in_migrations_when_needed(tmpdir):\n    path = tmpdir.mkdir('fork')\n    for app, has_models in [('order', True), ('search', False)]:\n        customisation.fork_app(app, str(path))\n\n        native_migration_path = path.join(app).join('migrations')\n        assert has_models == native_migration_path.check()\n\n\ndef test_dashboard_app_config(tmpdir, monkeypatch):\n    path = tmpdir.mkdir('fork')\n    customisation.fork_app('dashboard', str(path))\n\n    path.join('__init__.py').write('')\n    monkeypatch.syspath_prepend(str(tmpdir))\n\n    config_module = __import__(\n        '%s.dashboard.config' % path.basename, fromlist=['DashboardConfig']\n    )\n\n    assert hasattr(config_module, 'DashboardConfig')\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\nimport oscar.models.fields\nfrom django.conf import settings\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Country',\n            fields=[\n                ('iso_3166_1_a2', models.CharField(primary_key=True, max_length=2, verbose_name='ISO 3166-1 alpha-2', serialize=False)),\n                ('iso_3166_1_a3', models.CharField(max_length=3, verbose_name='ISO 3166-1 alpha-3', blank=True)),\n                ('iso_3166_1_numeric', models.CharField(max_length=3, verbose_name='ISO 3166-1 numeric', blank=True)),\n                ('printable_name', models.CharField(max_length=128, verbose_name='Country name')),\n                ('name', models.CharField(max_length=128, verbose_name='Official name')),\n                ('display_order', models.PositiveSmallIntegerField(default=0, verbose_name='Display order', db_index=True, help_text='Higher the number, higher the country in the list.')),\n                ('is_shipping_country', models.BooleanField(default=False, db_index=True, verbose_name='Is shipping country')),\n            ],\n            options={\n                'ordering': ('-display_order', 'printable_name'),\n                'verbose_name_plural': 'Countries',\n                'verbose_name': 'Country',\n                'abstract': False,\n            },\n            bases=(models.Model,),\n        ),\n        migrations.CreateModel(\n            name='UserAddress',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(verbose_name='Title', max_length=64, blank=True, choices=[('Mr', 'Mr'), ('Miss', 'Miss'), ('Mrs', 'Mrs'), ('Ms', 'Ms'), ('Dr', 'Dr')])),\n                ('first_name', models.CharField(max_length=255, verbose_name='First name', blank=True)),\n                ('last_name', models.CharField(max_length=255, verbose_name='Last name', blank=True)),\n                ('line1', models.CharField(max_length=255, verbose_name='First line of address')),\n                ('line2', models.CharField(max_length=255, verbose_name='Second line of address', blank=True)),\n                ('line3', models.CharField(max_length=255, verbose_name='Third line of address', blank=True)),\n                ('line4', models.CharField(max_length=255, verbose_name='City', blank=True)),\n                ('state', models.CharField(max_length=255, verbose_name='State/County', blank=True)),\n                ('postcode', oscar.models.fields.UppercaseCharField(max_length=64, verbose_name='Post/Zip-code', blank=True)),\n                ('search_text', models.TextField(editable=False, verbose_name='Search text - used only for searching addresses')),\n                ('phone_number', oscar.models.fields.PhoneNumberField(verbose_name='Phone number', help_text='In case we need to call you about your order', blank=True)),\n                ('notes', models.TextField(verbose_name='Instructions', help_text='Tell us anything we should know when delivering your order.', blank=True)),\n                ('is_default_for_shipping', models.BooleanField(default=False, verbose_name='Default shipping address?')),\n                ('is_default_for_billing', models.BooleanField(default=False, verbose_name='Default billing address?')),\n                ('num_orders', models.PositiveIntegerField(default=0, verbose_name='Number of Orders')),\n                ('hash', models.CharField(max_length=255, editable=False, db_index=True, verbose_name='Address Hash')),\n                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date Created')),\n                ('country', models.ForeignKey(verbose_name='Country', to='address.Country', on_delete=models.CASCADE)),\n                ('user', models.ForeignKey(verbose_name='User', related_name='addresses', to=settings.AUTH_USER_MODEL, on_delete=models.CASCADE)),\n            ],\n            options={\n                'ordering': ['-num_orders'],\n                'verbose_name_plural': 'User addresses',\n                'verbose_name': 'User address',\n                'abstract': False,\n            },\n            bases=(models.Model,),\n        ),\n        migrations.AlterUniqueTogether(\n            name='useraddress',\n            unique_together=set([('user', 'hash')]),\n        ),\n    ]\n",
    "output": "import warnings\n\nfrom django.contrib.auth.models import AnonymousUser, Permission\nfrom django.test import TestCase\n\nfrom oscar.core.decorators import deprecated\nfrom oscar.test import factories\nfrom oscar.views.decorators import check_permissions\n\n\nclass TestPermissionsDecorator(TestCase):\n\n    def test_empty_permissions_passes(self):\n        user = factories.UserFactory.build()\n        self.assertTrue(check_permissions(user, []))\n\n    def test_properties_are_checked(self):\n        staff_user = factories.UserFactory.build(is_staff=True)\n        non_staff_user = factories.UserFactory.build(is_staff=False)\n        self.assertTrue(check_permissions(staff_user, ['is_staff']))\n        self.assertFalse(check_permissions(non_staff_user, ['is_staff']))\n\n    def test_methods_are_checked(self):\n        anonymous_user = AnonymousUser()\n        known_user = factories.UserFactory.build()\n        self.assertTrue(check_permissions(anonymous_user, ['is_anonymous']))\n        self.assertFalse(check_permissions(known_user, ['is_anonymous']))\n\n    def test_permissions_are_checked(self):\n        user_with_perm = factories.UserFactory()\n        user_without_perm = factories.UserFactory()\n        perm = Permission.objects.get(\n            content_type__app_label='address', codename='add_country')\n        user_with_perm.user_permissions.add(perm)\n        self.assertTrue(\n            check_permissions(user_with_perm, ['address.add_country']))\n        self.assertFalse(\n            check_permissions(user_without_perm, ['address.add_country']))\n\n\nclass TestDeprecatedDecorator(TestCase):\n\n    def test_decorate_function(self):\n\n        @deprecated\n        def func():\n            return True\n\n        with warnings.catch_warnings(record=True) as caught:\n            warnings.simplefilter(\"always\")\n            self.assertTrue(func())\n            assert len(caught) == 1\n            assert issubclass(caught[0].category, DeprecationWarning)\n\n    def test_decorate_class(self):\n\n        class Cls(object):\n            val = False\n\n            def __init__(self):\n                self.val = True\n\n        Deprecated = deprecated(Cls)  # noqa\n\n        with warnings.catch_warnings(record=True) as caught:\n            warnings.simplefilter(\"always\")\n            obj = Deprecated()\n            self.assertTrue(obj.val)\n            assert len(caught) == 1\n            assert issubclass(caught[0].category, DeprecationWarning)\n\n    def test_subclass_decorated(self):\n\n        class Cls(object):\n            val = False\n\n            def __init__(self):\n                self.val = True\n\n        Deprecated = deprecated(Cls)  # noqa\n\n        class SubCls(Deprecated):\n            pass\n\n        with warnings.catch_warnings(record=True) as caught:\n            warnings.simplefilter(\"always\")\n            obj = SubCls()\n            self.assertTrue(obj.val)\n            assert len(caught) == 1\n            assert issubclass(caught[0].category, DeprecationWarning)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\nimport oscar.models.fields\nfrom django.conf import settings\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Country',\n            fields=[\n                ('iso_3166_1_a2', models.CharField(primary_key=True, max_length=2, verbose_name='ISO 3166-1 alpha-2', serialize=False)),\n                ('iso_3166_1_a3', models.CharField(max_length=3, verbose_name='ISO 3166-1 alpha-3', blank=True)),\n                ('iso_3166_1_numeric', models.CharField(max_length=3, verbose_name='ISO 3166-1 numeric', blank=True)),\n                ('printable_name', models.CharField(max_length=128, verbose_name='Country name')),\n                ('name', models.CharField(max_length=128, verbose_name='Official name')),\n                ('display_order', models.PositiveSmallIntegerField(default=0, verbose_name='Display order', db_index=True, help_text='Higher the number, higher the country in the list.')),\n                ('is_shipping_country', models.BooleanField(default=False, db_index=True, verbose_name='Is shipping country')),\n            ],\n            options={\n                'ordering': ('-display_order', 'printable_name'),\n                'verbose_name_plural': 'Countries',\n                'verbose_name': 'Country',\n                'abstract': False,\n            },\n            bases=(models.Model,),\n        ),\n        migrations.CreateModel(\n            name='UserAddress',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(verbose_name='Title', max_length=64, blank=True, choices=[('Mr', 'Mr'), ('Miss', 'Miss'), ('Mrs', 'Mrs'), ('Ms', 'Ms'), ('Dr', 'Dr')])),\n                ('first_name', models.CharField(max_length=255, verbose_name='First name', blank=True)),\n                ('last_name', models.CharField(max_length=255, verbose_name='Last name', blank=True)),\n                ('line1', models.CharField(max_length=255, verbose_name='First line of address')),\n                ('line2', models.CharField(max_length=255, verbose_name='Second line of address', blank=True)),\n                ('line3', models.CharField(max_length=255, verbose_name='Third line of address', blank=True)),\n                ('line4', models.CharField(max_length=255, verbose_name='City', blank=True)),\n                ('state', models.CharField(max_length=255, verbose_name='State/County', blank=True)),\n                ('postcode', oscar.models.fields.UppercaseCharField(max_length=64, verbose_name='Post/Zip-code', blank=True)),\n                ('search_text', models.TextField(editable=False, verbose_name='Search text - used only for searching addresses')),\n                ('phone_number', oscar.models.fields.PhoneNumberField(verbose_name='Phone number', help_text='In case we need to call you about your order', blank=True)),\n                ('notes', models.TextField(verbose_name='Instructions', help_text='Tell us anything we should know when delivering your order.', blank=True)),\n                ('is_default_for_shipping', models.BooleanField(default=False, verbose_name='Default shipping address?')),\n                ('is_default_for_billing', models.BooleanField(default=False, verbose_name='Default billing address?')),\n                ('num_orders', models.PositiveIntegerField(default=0, verbose_name='Number of Orders')),\n                ('hash', models.CharField(max_length=255, editable=False, db_index=True, verbose_name='Address Hash')),\n                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date Created')),\n                ('country', models.ForeignKey(verbose_name='Country', to='address.Country', on_delete=models.CASCADE)),\n                ('user', models.ForeignKey(verbose_name='User', related_name='addresses', to=settings.AUTH_USER_MODEL, on_delete=models.CASCADE)),\n            ],\n            options={\n                'ordering': ['-num_orders'],\n                'verbose_name_plural': 'User addresses',\n                'verbose_name': 'User address',\n                'abstract': False,\n            },\n            bases=(models.Model,),\n        ),\n        migrations.AlterUniqueTogether(\n            name='useraddress',\n            unique_together=set([('user', 'hash')]),\n        ),\n    ]\n",
    "output": "from os.path import dirname\nimport sys\n\nfrom django.test import override_settings, TestCase\nfrom django.conf import settings\n\nimport oscar\nfrom oscar.core.loading import (\n    get_model, AppNotFoundError, get_classes, get_class, get_class_loader,\n    ClassNotFoundError)\nfrom tests import temporary_python_path\nfrom tests._site.loader import DummyClass\n\n\nclass TestClassLoading(TestCase):\n    \"\"\"\n    Oscar's class loading utilities\n    \"\"\"\n\n    def test_load_oscar_classes_correctly(self):\n        Product, Category = get_classes('catalogue.models', ('Product', 'Category'))\n        self.assertEqual('oscar.apps.catalogue.models', Product.__module__)\n        self.assertEqual('oscar.apps.catalogue.models', Category.__module__)\n\n    def test_load_oscar_class_correctly(self):\n        Product = get_class('catalogue.models', 'Product')\n        self.assertEqual('oscar.apps.catalogue.models', Product.__module__)\n\n    def test_load_oscar_class_from_dashboard_subapp(self):\n        ReportForm = get_class('dashboard.reports.forms', 'ReportForm')\n        self.assertEqual('oscar.apps.dashboard.reports.forms', ReportForm.__module__)\n\n    def test_raise_exception_when_bad_appname_used(self):\n        with self.assertRaises(AppNotFoundError):\n            get_classes('fridge.models', ('Product', 'Category'))\n\n    def test_raise_exception_when_bad_classname_used(self):\n        with self.assertRaises(ClassNotFoundError):\n            get_class('catalogue.models', 'Monkey')\n\n    def test_raise_importerror_if_app_raises_importerror(self):\n        \"\"\"\n        This tests that Oscar doesn't fall back to using the Oscar catalogue\n        app if the overriding app throws an ImportError.\n        \"\"\"\n        apps = list(settings.INSTALLED_APPS)\n        apps[apps.index('oscar.apps.catalogue')] = 'tests._site.import_error_app.catalogue'\n        with override_settings(INSTALLED_APPS=apps):\n            with self.assertRaises(ImportError):\n                get_class('catalogue.app', 'CatalogueApplication')\n\n\nclass ClassLoadingWithLocalOverrideTests(TestCase):\n\n    def setUp(self):\n        self.installed_apps = list(settings.INSTALLED_APPS)\n        self.installed_apps[self.installed_apps.index('oscar.apps.shipping')] = 'tests._site.shipping'\n\n    def test_loading_class_defined_in_local_module(self):\n        with override_settings(INSTALLED_APPS=self.installed_apps):\n            (Free,) = get_classes('shipping.methods', ('Free',))\n            self.assertEqual('tests._site.shipping.methods', Free.__module__)\n\n    def test_loading_class_which_is_not_defined_in_local_module(self):\n        with override_settings(INSTALLED_APPS=self.installed_apps):\n            (FixedPrice,) = get_classes('shipping.methods', ('FixedPrice',))\n            self.assertEqual('oscar.apps.shipping.methods', FixedPrice.__module__)\n\n    def test_loading_class_from_module_not_defined_in_local_app(self):\n        with override_settings(INSTALLED_APPS=self.installed_apps):\n            (Repository,) = get_classes('shipping.repository', ('Repository',))\n            self.assertEqual('oscar.apps.shipping.repository', Repository.__module__)\n\n    def test_loading_classes_defined_in_both_local_and_oscar_modules(self):\n        with override_settings(INSTALLED_APPS=self.installed_apps):\n            (Free, FixedPrice) = get_classes('shipping.methods', ('Free', 'FixedPrice'))\n            self.assertEqual('tests._site.shipping.methods', Free.__module__)\n            self.assertEqual('oscar.apps.shipping.methods', FixedPrice.__module__)\n\n    def test_loading_classes_with_root_app(self):\n        import tests._site.shipping\n        path = dirname(dirname(tests._site.shipping.__file__))\n        with temporary_python_path([path]):\n            self.installed_apps[\n                self.installed_apps.index('tests._site.shipping')] = 'shipping'\n            with override_settings(INSTALLED_APPS=self.installed_apps):\n                (Free,) = get_classes('shipping.methods', ('Free',))\n                self.assertEqual('shipping.methods', Free.__module__)\n\n    def test_overriding_view_is_possible_without_overriding_app(self):\n        from oscar.apps.customer.app import application, CustomerApplication\n        # If test fails, it's helpful to know if it's caused by order of\n        # execution\n        self.assertEqual(CustomerApplication().summary_view.__module__,\n                         'tests._site.apps.customer.views')\n        self.assertEqual(application.summary_view.__module__,\n                         'tests._site.apps.customer.views')\n\n\nclass ClassLoadingWithLocalOverrideWithMultipleSegmentsTests(TestCase):\n\n    def setUp(self):\n        self.installed_apps = list(settings.INSTALLED_APPS)\n        self.installed_apps[self.installed_apps.index('oscar.apps.shipping')] = 'tests._site.apps.shipping'\n\n    def test_loading_class_defined_in_local_module(self):\n        with override_settings(INSTALLED_APPS=self.installed_apps):\n            (Free,) = get_classes('shipping.methods', ('Free',))\n            self.assertEqual('tests._site.apps.shipping.methods', Free.__module__)\n\n\nclass TestGetCoreAppsFunction(TestCase):\n    \"\"\"\n    oscar.get_core_apps function\n    \"\"\"\n\n    def test_returns_core_apps_when_no_overrides_specified(self):\n        apps = oscar.get_core_apps()\n        self.assertEqual(oscar.OSCAR_CORE_APPS, apps)\n\n    def test_uses_non_dashboard_override_when_specified(self):\n        apps = oscar.get_core_apps(overrides=['apps.shipping'])\n        self.assertTrue('apps.shipping' in apps)\n        self.assertTrue('oscar.apps.shipping' not in apps)\n\n    def test_uses_dashboard_override_when_specified(self):\n        apps = oscar.get_core_apps(overrides=['apps.dashboard.catalogue'])\n        self.assertTrue('apps.dashboard.catalogue' in apps)\n        self.assertTrue('oscar.apps.dashboard.catalogue' not in apps)\n        self.assertTrue('oscar.apps.catalogue' in apps)\n\n\nclass TestOverridingCoreApps(TestCase):\n\n    def test_means_the_overriding_model_is_registered_first(self):\n        klass = get_model('partner', 'StockRecord')\n        self.assertEqual(\n            'tests._site.apps.partner.models', klass.__module__)\n\n\nclass TestAppLabelsForModels(TestCase):\n\n    def test_all_oscar_models_have_app_labels(self):\n        from django.apps import apps\n        models = apps.get_models()\n        missing = []\n        for model in models:\n            # Ignore non-Oscar models\n            if 'oscar' not in repr(model):\n                continue\n            # Don't know how to get the actual model's Meta class. But if\n            # the parent doesn't have a Meta class, it's doesn't have an\n            # base in Oscar anyway and is not intended to be overridden\n            abstract_model = model.__base__\n            meta_class = getattr(abstract_model, 'Meta', None)\n            if meta_class is None:\n                continue\n\n            if not hasattr(meta_class, 'app_label'):\n                missing.append(model)\n        if missing:\n            self.fail(\"Those models don't have an app_label set: %s\" % missing)\n\n\nclass TestDynamicLoadingOn3rdPartyApps(TestCase):\n\n    core_app_prefix = 'thirdparty_package.apps'\n\n    def setUp(self):\n        self.installed_apps = list(settings.INSTALLED_APPS)\n        sys.path.append('./tests/_site/')\n\n    def tearDown(self):\n        sys.path.remove('./tests/_site/')\n\n    def test_load_core_3rd_party_class_correctly(self):\n        self.installed_apps.append('thirdparty_package.apps.myapp')\n        with override_settings(INSTALLED_APPS=self.installed_apps):\n            Cow, Goat = get_classes('myapp.models', ('Cow', 'Goat'), self.core_app_prefix)\n            self.assertEqual('thirdparty_package.apps.myapp.models', Cow.__module__)\n            self.assertEqual('thirdparty_package.apps.myapp.models', Goat.__module__)\n\n    def test_load_overriden_3rd_party_class_correctly(self):\n        self.installed_apps.append('apps.myapp')\n        with override_settings(INSTALLED_APPS=self.installed_apps):\n            Cow, Goat = get_classes('myapp.models', ('Cow', 'Goat'), self.core_app_prefix)\n            self.assertEqual('thirdparty_package.apps.myapp.models', Cow.__module__)\n            self.assertEqual('apps.myapp.models', Goat.__module__)\n\n\nclass OverriddenClassLoadingTestCase(TestCase):\n\n    def test_non_override_class_loader(self):\n        from oscar.apps.catalogue.views import ProductDetailView\n        View = get_class('catalogue.views', 'ProductDetailView')\n        self.assertEqual(View, ProductDetailView)\n\n    @override_settings(OSCAR_DYNAMIC_CLASS_LOADER='tests._site.loader.custom_class_loader')\n    def test_override_class_loader(self):\n        # Clear lru cache for the class loader\n        get_class_loader.cache_clear()\n\n        View = get_class('catalogue.views', 'ProductDetailView')\n        self.assertEqual(View, DummyClass)\n\n        # Clear lru cache for the class loader again\n        get_class_loader.cache_clear()\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\nimport oscar.models.fields\nfrom django.conf import settings\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Country',\n            fields=[\n                ('iso_3166_1_a2', models.CharField(primary_key=True, max_length=2, verbose_name='ISO 3166-1 alpha-2', serialize=False)),\n                ('iso_3166_1_a3', models.CharField(max_length=3, verbose_name='ISO 3166-1 alpha-3', blank=True)),\n                ('iso_3166_1_numeric', models.CharField(max_length=3, verbose_name='ISO 3166-1 numeric', blank=True)),\n                ('printable_name', models.CharField(max_length=128, verbose_name='Country name')),\n                ('name', models.CharField(max_length=128, verbose_name='Official name')),\n                ('display_order', models.PositiveSmallIntegerField(default=0, verbose_name='Display order', db_index=True, help_text='Higher the number, higher the country in the list.')),\n                ('is_shipping_country', models.BooleanField(default=False, db_index=True, verbose_name='Is shipping country')),\n            ],\n            options={\n                'ordering': ('-display_order', 'printable_name'),\n                'verbose_name_plural': 'Countries',\n                'verbose_name': 'Country',\n                'abstract': False,\n            },\n            bases=(models.Model,),\n        ),\n        migrations.CreateModel(\n            name='UserAddress',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(verbose_name='Title', max_length=64, blank=True, choices=[('Mr', 'Mr'), ('Miss', 'Miss'), ('Mrs', 'Mrs'), ('Ms', 'Ms'), ('Dr', 'Dr')])),\n                ('first_name', models.CharField(max_length=255, verbose_name='First name', blank=True)),\n                ('last_name', models.CharField(max_length=255, verbose_name='Last name', blank=True)),\n                ('line1', models.CharField(max_length=255, verbose_name='First line of address')),\n                ('line2', models.CharField(max_length=255, verbose_name='Second line of address', blank=True)),\n                ('line3', models.CharField(max_length=255, verbose_name='Third line of address', blank=True)),\n                ('line4', models.CharField(max_length=255, verbose_name='City', blank=True)),\n                ('state', models.CharField(max_length=255, verbose_name='State/County', blank=True)),\n                ('postcode', oscar.models.fields.UppercaseCharField(max_length=64, verbose_name='Post/Zip-code', blank=True)),\n                ('search_text', models.TextField(editable=False, verbose_name='Search text - used only for searching addresses')),\n                ('phone_number', oscar.models.fields.PhoneNumberField(verbose_name='Phone number', help_text='In case we need to call you about your order', blank=True)),\n                ('notes', models.TextField(verbose_name='Instructions', help_text='Tell us anything we should know when delivering your order.', blank=True)),\n                ('is_default_for_shipping', models.BooleanField(default=False, verbose_name='Default shipping address?')),\n                ('is_default_for_billing', models.BooleanField(default=False, verbose_name='Default billing address?')),\n                ('num_orders', models.PositiveIntegerField(default=0, verbose_name='Number of Orders')),\n                ('hash', models.CharField(max_length=255, editable=False, db_index=True, verbose_name='Address Hash')),\n                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date Created')),\n                ('country', models.ForeignKey(verbose_name='Country', to='address.Country', on_delete=models.CASCADE)),\n                ('user', models.ForeignKey(verbose_name='User', related_name='addresses', to=settings.AUTH_USER_MODEL, on_delete=models.CASCADE)),\n            ],\n            options={\n                'ordering': ['-num_orders'],\n                'verbose_name_plural': 'User addresses',\n                'verbose_name': 'User address',\n                'abstract': False,\n            },\n            bases=(models.Model,),\n        ),\n        migrations.AlterUniqueTogether(\n            name='useraddress',\n            unique_together=set([('user', 'hash')]),\n        ),\n    ]\n",
    "output": "from django import forms\nfrom django.test import TestCase, override_settings\n\nfrom oscar.apps.address.forms import AbstractAddressForm\nfrom oscar.apps.address.models import UserAddress\nfrom oscar.apps.order.models import ShippingAddress\nfrom oscar.forms.mixins import PhoneNumberMixin\nfrom oscar.test.factories import CountryFactory\n\n\nclass PhoneNumberMixinTestCase(TestCase):\n\n    def test_mixin_adds_phone_number_field(self):\n\n        class TestForm(PhoneNumberMixin, forms.Form):\n            pass\n\n        form = TestForm()\n        self.assertIn('phone_number', form.fields)\n\n    def test_mixin_adds_all_phone_number_fields(self):\n\n        class TestForm(PhoneNumberMixin, forms.Form):\n            phone_number_fields = {\n                'phone_number': {\n                    'required': False,\n                    'help_text': '',\n                    'max_length': 32,\n                    'label': 'Phone number'\n                },\n                'another_phone_number': {\n                    'required': False,\n                    'help_text': 'Another phone number help text',\n                    'max_length': 32,\n                    'label': 'Another phone number'\n                },\n                'one_more_phone_number': {\n                    'required': False,\n                    'help_text': '',\n                    'max_length': 32,\n                    'label': 'One more phone number'\n                },\n            }\n\n        form = TestForm()\n        self.assertIn('phone_number', form.fields)\n        self.assertIn('another_phone_number', form.fields)\n        self.assertIn('one_more_phone_number', form.fields)\n\n        field = form.fields['another_phone_number']\n        self.assertEqual(field.help_text, 'Another phone number help text')\n\n    def test_mixin_retains_existing_field_properties(self):\n\n        class TestForm(PhoneNumberMixin, forms.ModelForm):\n\n            class Meta:\n                model = UserAddress\n                fields = ['country', 'phone_number']\n                # Override default label and help text\n                labels = {'phone_number': 'Special number'}\n                help_texts = {'phone_number': 'Special help text'}\n\n        form = TestForm()\n        field = form.fields['phone_number']\n        self.assertEqual(field.label, 'Special number')\n        self.assertEqual(field.help_text, 'Special help text')\n\n    @override_settings(OSCAR_REQUIRED_ADDRESS_FIELDS=('phone_number',))\n    def test_required_empty_field_raises_validation_error(self):\n\n        class TestForm(PhoneNumberMixin, AbstractAddressForm):\n            phone_number_fields = {\n                'phone_number': {\n                    'required': True,\n                    'help_text': '',\n                    'max_length': 32,\n                    'label': 'Phone number'\n                }\n            }\n\n            class Meta:\n                model = ShippingAddress\n                fields = ['country', 'phone_number', 'postcode']\n\n        CountryFactory(iso_3166_1_a2='GB', is_shipping_country=True)\n        form = TestForm(data={'phone_number': '', 'country': 'GB', 'postcode': 'WW1 2BB'})\n        self.assertFalse(form.is_valid())\n        self.assertEqual(form.errors['phone_number'], ['This field is required.'])\n\n    @override_settings(OSCAR_REQUIRED_ADDRESS_FIELDS=[])\n    def test_optional_empty_field_validates(self):\n\n        class TestForm(PhoneNumberMixin, AbstractAddressForm):\n            phone_number_fields = {\n                'phone_number': {\n                    'required': False,\n                    'help_text': '',\n                    'max_length': 32,\n                    'label': 'Phone number'\n                }\n            }\n\n            class Meta:\n                model = ShippingAddress\n                fields = ['country', 'phone_number', 'postcode']\n\n        CountryFactory(iso_3166_1_a2='GB', is_shipping_country=True)\n        form = TestForm(data={'phone_number': '', 'country': 'GB', 'postcode': 'WW1 2BB'})\n        self.assertTrue(form.is_valid())\n\n    @override_settings(OSCAR_REQUIRED_ADDRESS_FIELDS=[])\n    def test_invalid_number_fails_validation(self):\n\n        class TestForm(PhoneNumberMixin, AbstractAddressForm):\n            phone_number_fields = {\n                'phone_number': {\n                    'required': False,\n                    'help_text': '',\n                    'max_length': 32,\n                    'label': 'Phone number'\n                }\n            }\n\n            class Meta:\n                model = ShippingAddress\n                fields = ['country', 'phone_number', 'postcode']\n\n        CountryFactory(iso_3166_1_a2='GB', is_shipping_country=True)\n        form = TestForm(data={'phone_number': '123456', 'country': 'GB', 'postcode': 'WW1 2BB'})\n        self.assertFalse(form.is_valid())\n        self.assertEqual(form.errors['phone_number'], ['This is not a valid local phone format for UNITED KINGDOM.'])\n\n    @override_settings(OSCAR_REQUIRED_ADDRESS_FIELDS=[])\n    def test_valid_number_passes_validation(self):\n\n        class TestForm(PhoneNumberMixin, AbstractAddressForm):\n            phone_number_fields = {\n                'phone_number': {\n                    'required': False,\n                    'help_text': '',\n                    'max_length': 32,\n                    'label': 'Phone number'\n                }\n            }\n\n            class Meta:\n                model = ShippingAddress\n                fields = ['country', 'phone_number', 'postcode']\n\n        CountryFactory(iso_3166_1_a2='GB', is_shipping_country=True)\n        form = TestForm(data={'phone_number': '02089001234', 'country': 'GB', 'postcode': 'WW1 2BB'})\n        self.assertTrue(form.is_valid())\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\nimport oscar.models.fields\nfrom django.conf import settings\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Country',\n            fields=[\n                ('iso_3166_1_a2', models.CharField(primary_key=True, max_length=2, verbose_name='ISO 3166-1 alpha-2', serialize=False)),\n                ('iso_3166_1_a3', models.CharField(max_length=3, verbose_name='ISO 3166-1 alpha-3', blank=True)),\n                ('iso_3166_1_numeric', models.CharField(max_length=3, verbose_name='ISO 3166-1 numeric', blank=True)),\n                ('printable_name', models.CharField(max_length=128, verbose_name='Country name')),\n                ('name', models.CharField(max_length=128, verbose_name='Official name')),\n                ('display_order', models.PositiveSmallIntegerField(default=0, verbose_name='Display order', db_index=True, help_text='Higher the number, higher the country in the list.')),\n                ('is_shipping_country', models.BooleanField(default=False, db_index=True, verbose_name='Is shipping country')),\n            ],\n            options={\n                'ordering': ('-display_order', 'printable_name'),\n                'verbose_name_plural': 'Countries',\n                'verbose_name': 'Country',\n                'abstract': False,\n            },\n            bases=(models.Model,),\n        ),\n        migrations.CreateModel(\n            name='UserAddress',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(verbose_name='Title', max_length=64, blank=True, choices=[('Mr', 'Mr'), ('Miss', 'Miss'), ('Mrs', 'Mrs'), ('Ms', 'Ms'), ('Dr', 'Dr')])),\n                ('first_name', models.CharField(max_length=255, verbose_name='First name', blank=True)),\n                ('last_name', models.CharField(max_length=255, verbose_name='Last name', blank=True)),\n                ('line1', models.CharField(max_length=255, verbose_name='First line of address')),\n                ('line2', models.CharField(max_length=255, verbose_name='Second line of address', blank=True)),\n                ('line3', models.CharField(max_length=255, verbose_name='Third line of address', blank=True)),\n                ('line4', models.CharField(max_length=255, verbose_name='City', blank=True)),\n                ('state', models.CharField(max_length=255, verbose_name='State/County', blank=True)),\n                ('postcode', oscar.models.fields.UppercaseCharField(max_length=64, verbose_name='Post/Zip-code', blank=True)),\n                ('search_text', models.TextField(editable=False, verbose_name='Search text - used only for searching addresses')),\n                ('phone_number', oscar.models.fields.PhoneNumberField(verbose_name='Phone number', help_text='In case we need to call you about your order', blank=True)),\n                ('notes', models.TextField(verbose_name='Instructions', help_text='Tell us anything we should know when delivering your order.', blank=True)),\n                ('is_default_for_shipping', models.BooleanField(default=False, verbose_name='Default shipping address?')),\n                ('is_default_for_billing', models.BooleanField(default=False, verbose_name='Default billing address?')),\n                ('num_orders', models.PositiveIntegerField(default=0, verbose_name='Number of Orders')),\n                ('hash', models.CharField(max_length=255, editable=False, db_index=True, verbose_name='Address Hash')),\n                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date Created')),\n                ('country', models.ForeignKey(verbose_name='Country', to='address.Country', on_delete=models.CASCADE)),\n                ('user', models.ForeignKey(verbose_name='User', related_name='addresses', to=settings.AUTH_USER_MODEL, on_delete=models.CASCADE)),\n            ],\n            options={\n                'ordering': ['-num_orders'],\n                'verbose_name_plural': 'User addresses',\n                'verbose_name': 'User address',\n                'abstract': False,\n            },\n            bases=(models.Model,),\n        ),\n        migrations.AlterUniqueTogether(\n            name='useraddress',\n            unique_together=set([('user', 'hash')]),\n        ),\n    ]\n",
    "output": "from django.core.exceptions import ImproperlyConfigured\nfrom django.test import TestCase\n\nfrom oscar.models.fields import NullCharField\n\n\nclass NullCharFieldTest(TestCase):\n\n    def test_from_db_value_converts_null_to_string(self):\n        field = NullCharField()\n        self.assertEqual('', field.from_db_value(None, expression=None, connection=None, context=None))\n\n    def test_get_prep_value_converts_empty_string_to_null(self):\n        field = NullCharField()\n        self.assertEqual(None, field.get_prep_value(''))\n\n    def test_raises_exception_for_invalid_null_blank_combo(self):\n        with self.assertRaises(ImproperlyConfigured):\n            NullCharField(null=True, blank=False)\n\n        with self.assertRaises(ImproperlyConfigured):\n            NullCharField(null=False, blank=True)\n\n        with self.assertRaises(ImproperlyConfigured):\n            NullCharField(null=False, blank=False)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\nimport oscar.models.fields\nfrom django.conf import settings\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Country',\n            fields=[\n                ('iso_3166_1_a2', models.CharField(primary_key=True, max_length=2, verbose_name='ISO 3166-1 alpha-2', serialize=False)),\n                ('iso_3166_1_a3', models.CharField(max_length=3, verbose_name='ISO 3166-1 alpha-3', blank=True)),\n                ('iso_3166_1_numeric', models.CharField(max_length=3, verbose_name='ISO 3166-1 numeric', blank=True)),\n                ('printable_name', models.CharField(max_length=128, verbose_name='Country name')),\n                ('name', models.CharField(max_length=128, verbose_name='Official name')),\n                ('display_order', models.PositiveSmallIntegerField(default=0, verbose_name='Display order', db_index=True, help_text='Higher the number, higher the country in the list.')),\n                ('is_shipping_country', models.BooleanField(default=False, db_index=True, verbose_name='Is shipping country')),\n            ],\n            options={\n                'ordering': ('-display_order', 'printable_name'),\n                'verbose_name_plural': 'Countries',\n                'verbose_name': 'Country',\n                'abstract': False,\n            },\n            bases=(models.Model,),\n        ),\n        migrations.CreateModel(\n            name='UserAddress',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(verbose_name='Title', max_length=64, blank=True, choices=[('Mr', 'Mr'), ('Miss', 'Miss'), ('Mrs', 'Mrs'), ('Ms', 'Ms'), ('Dr', 'Dr')])),\n                ('first_name', models.CharField(max_length=255, verbose_name='First name', blank=True)),\n                ('last_name', models.CharField(max_length=255, verbose_name='Last name', blank=True)),\n                ('line1', models.CharField(max_length=255, verbose_name='First line of address')),\n                ('line2', models.CharField(max_length=255, verbose_name='Second line of address', blank=True)),\n                ('line3', models.CharField(max_length=255, verbose_name='Third line of address', blank=True)),\n                ('line4', models.CharField(max_length=255, verbose_name='City', blank=True)),\n                ('state', models.CharField(max_length=255, verbose_name='State/County', blank=True)),\n                ('postcode', oscar.models.fields.UppercaseCharField(max_length=64, verbose_name='Post/Zip-code', blank=True)),\n                ('search_text', models.TextField(editable=False, verbose_name='Search text - used only for searching addresses')),\n                ('phone_number', oscar.models.fields.PhoneNumberField(verbose_name='Phone number', help_text='In case we need to call you about your order', blank=True)),\n                ('notes', models.TextField(verbose_name='Instructions', help_text='Tell us anything we should know when delivering your order.', blank=True)),\n                ('is_default_for_shipping', models.BooleanField(default=False, verbose_name='Default shipping address?')),\n                ('is_default_for_billing', models.BooleanField(default=False, verbose_name='Default billing address?')),\n                ('num_orders', models.PositiveIntegerField(default=0, verbose_name='Number of Orders')),\n                ('hash', models.CharField(max_length=255, editable=False, db_index=True, verbose_name='Address Hash')),\n                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date Created')),\n                ('country', models.ForeignKey(verbose_name='Country', to='address.Country', on_delete=models.CASCADE)),\n                ('user', models.ForeignKey(verbose_name='User', related_name='addresses', to=settings.AUTH_USER_MODEL, on_delete=models.CASCADE)),\n            ],\n            options={\n                'ordering': ['-num_orders'],\n                'verbose_name_plural': 'User addresses',\n                'verbose_name': 'User address',\n                'abstract': False,\n            },\n            bases=(models.Model,),\n        ),\n        migrations.AlterUniqueTogether(\n            name='useraddress',\n            unique_together=set([('user', 'hash')]),\n        ),\n    ]\n",
    "output": "from decimal import Decimal as D\nfrom itertools import product\nfrom django.test import TestCase\n\nfrom oscar.core.prices import Price\n\n\nclass TestPriceObject(TestCase):\n\n    def test_can_be_instantiated_with_tax_amount(self):\n        price = Price('USD', D('10.00'), tax=D('2.00'))\n        self.assertTrue(price.is_tax_known)\n        self.assertEqual(D('12.00'), price.incl_tax)\n\n    def test_can_have_tax_set_later(self):\n        price = Price('USD', D('10.00'))\n        price.tax = D('2.00')\n        self.assertEqual(D('12.00'), price.incl_tax)\n\n    def test_price_equals_reflexivity(self):\n        for price in (\n            Price(currency='USD', excl_tax=D('10.00')),\n            Price(currency='USD', excl_tax=D('10.00'), tax=D('2.00')),\n            Price(currency='USD', excl_tax=D('10.00'), incl_tax=D('12.00')),\n        ):\n            self.assertEqual(price, price)\n\n    def test_price_equals_formats(self):\n        price1 = Price(currency='USD', excl_tax=D('10.00'), tax=D('2.00'))\n        price2 = Price(currency='USD', excl_tax=D('10.00'), incl_tax=D('12.00'))\n        self.assertEqual(price1, price2)\n\n    def test_price_equals_currency_matters(self):\n        price1 = Price(currency='EUR', excl_tax=D('10.00'), tax=D('2.00'))\n        price2 = Price(currency='USD', excl_tax=D('10.00'), tax=D('2.00'))\n        self.assertNotEqual(price1, price2)\n\n    def test_price_equals_transitivity(self):\n        prices = (\n            Price(currency='EUR', excl_tax=D('10.00'), tax=D('2.00')),\n            Price(currency='USD', excl_tax=D('10.00'), tax=D('2.00')),\n            Price(currency='USD', excl_tax=D('10.00'), incl_tax=D('12.00')),\n            Price(currency='USD', excl_tax=D('10.00'), tax=D('8.00'))\n        )\n        prices_product = product(prices, prices)\n        for price1, price2 in prices_product:\n            self.assertEqual(price1 == price2, price2 == price1)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\nimport oscar.models.fields\nfrom django.conf import settings\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Country',\n            fields=[\n                ('iso_3166_1_a2', models.CharField(primary_key=True, max_length=2, verbose_name='ISO 3166-1 alpha-2', serialize=False)),\n                ('iso_3166_1_a3', models.CharField(max_length=3, verbose_name='ISO 3166-1 alpha-3', blank=True)),\n                ('iso_3166_1_numeric', models.CharField(max_length=3, verbose_name='ISO 3166-1 numeric', blank=True)),\n                ('printable_name', models.CharField(max_length=128, verbose_name='Country name')),\n                ('name', models.CharField(max_length=128, verbose_name='Official name')),\n                ('display_order', models.PositiveSmallIntegerField(default=0, verbose_name='Display order', db_index=True, help_text='Higher the number, higher the country in the list.')),\n                ('is_shipping_country', models.BooleanField(default=False, db_index=True, verbose_name='Is shipping country')),\n            ],\n            options={\n                'ordering': ('-display_order', 'printable_name'),\n                'verbose_name_plural': 'Countries',\n                'verbose_name': 'Country',\n                'abstract': False,\n            },\n            bases=(models.Model,),\n        ),\n        migrations.CreateModel(\n            name='UserAddress',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(verbose_name='Title', max_length=64, blank=True, choices=[('Mr', 'Mr'), ('Miss', 'Miss'), ('Mrs', 'Mrs'), ('Ms', 'Ms'), ('Dr', 'Dr')])),\n                ('first_name', models.CharField(max_length=255, verbose_name='First name', blank=True)),\n                ('last_name', models.CharField(max_length=255, verbose_name='Last name', blank=True)),\n                ('line1', models.CharField(max_length=255, verbose_name='First line of address')),\n                ('line2', models.CharField(max_length=255, verbose_name='Second line of address', blank=True)),\n                ('line3', models.CharField(max_length=255, verbose_name='Third line of address', blank=True)),\n                ('line4', models.CharField(max_length=255, verbose_name='City', blank=True)),\n                ('state', models.CharField(max_length=255, verbose_name='State/County', blank=True)),\n                ('postcode', oscar.models.fields.UppercaseCharField(max_length=64, verbose_name='Post/Zip-code', blank=True)),\n                ('search_text', models.TextField(editable=False, verbose_name='Search text - used only for searching addresses')),\n                ('phone_number', oscar.models.fields.PhoneNumberField(verbose_name='Phone number', help_text='In case we need to call you about your order', blank=True)),\n                ('notes', models.TextField(verbose_name='Instructions', help_text='Tell us anything we should know when delivering your order.', blank=True)),\n                ('is_default_for_shipping', models.BooleanField(default=False, verbose_name='Default shipping address?')),\n                ('is_default_for_billing', models.BooleanField(default=False, verbose_name='Default billing address?')),\n                ('num_orders', models.PositiveIntegerField(default=0, verbose_name='Number of Orders')),\n                ('hash', models.CharField(max_length=255, editable=False, db_index=True, verbose_name='Address Hash')),\n                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date Created')),\n                ('country', models.ForeignKey(verbose_name='Country', to='address.Country', on_delete=models.CASCADE)),\n                ('user', models.ForeignKey(verbose_name='User', related_name='addresses', to=settings.AUTH_USER_MODEL, on_delete=models.CASCADE)),\n            ],\n            options={\n                'ordering': ['-num_orders'],\n                'verbose_name_plural': 'User addresses',\n                'verbose_name': 'User address',\n                'abstract': False,\n            },\n            bases=(models.Model,),\n        ),\n        migrations.AlterUniqueTogether(\n            name='useraddress',\n            unique_together=set([('user', 'hash')]),\n        ),\n    ]\n",
    "output": "# coding=utf-8\n\nfrom django.test import TestCase\nfrom django.test.utils import override_settings\n\n\nclass SlugFieldTest(TestCase):\n\n    def test_slugfield_allow_unicode_kwargs_precedence(self):\n        from oscar.models.fields.slugfield import SlugField\n        with override_settings(OSCAR_SLUG_ALLOW_UNICODE=True):\n            slug_field = SlugField(allow_unicode=False)\n            self.assertFalse(slug_field.allow_unicode)\n            slug_field = SlugField()\n            self.assertTrue(slug_field.allow_unicode)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\nimport oscar.models.fields\nfrom django.conf import settings\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Country',\n            fields=[\n                ('iso_3166_1_a2', models.CharField(primary_key=True, max_length=2, verbose_name='ISO 3166-1 alpha-2', serialize=False)),\n                ('iso_3166_1_a3', models.CharField(max_length=3, verbose_name='ISO 3166-1 alpha-3', blank=True)),\n                ('iso_3166_1_numeric', models.CharField(max_length=3, verbose_name='ISO 3166-1 numeric', blank=True)),\n                ('printable_name', models.CharField(max_length=128, verbose_name='Country name')),\n                ('name', models.CharField(max_length=128, verbose_name='Official name')),\n                ('display_order', models.PositiveSmallIntegerField(default=0, verbose_name='Display order', db_index=True, help_text='Higher the number, higher the country in the list.')),\n                ('is_shipping_country', models.BooleanField(default=False, db_index=True, verbose_name='Is shipping country')),\n            ],\n            options={\n                'ordering': ('-display_order', 'printable_name'),\n                'verbose_name_plural': 'Countries',\n                'verbose_name': 'Country',\n                'abstract': False,\n            },\n            bases=(models.Model,),\n        ),\n        migrations.CreateModel(\n            name='UserAddress',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(verbose_name='Title', max_length=64, blank=True, choices=[('Mr', 'Mr'), ('Miss', 'Miss'), ('Mrs', 'Mrs'), ('Ms', 'Ms'), ('Dr', 'Dr')])),\n                ('first_name', models.CharField(max_length=255, verbose_name='First name', blank=True)),\n                ('last_name', models.CharField(max_length=255, verbose_name='Last name', blank=True)),\n                ('line1', models.CharField(max_length=255, verbose_name='First line of address')),\n                ('line2', models.CharField(max_length=255, verbose_name='Second line of address', blank=True)),\n                ('line3', models.CharField(max_length=255, verbose_name='Third line of address', blank=True)),\n                ('line4', models.CharField(max_length=255, verbose_name='City', blank=True)),\n                ('state', models.CharField(max_length=255, verbose_name='State/County', blank=True)),\n                ('postcode', oscar.models.fields.UppercaseCharField(max_length=64, verbose_name='Post/Zip-code', blank=True)),\n                ('search_text', models.TextField(editable=False, verbose_name='Search text - used only for searching addresses')),\n                ('phone_number', oscar.models.fields.PhoneNumberField(verbose_name='Phone number', help_text='In case we need to call you about your order', blank=True)),\n                ('notes', models.TextField(verbose_name='Instructions', help_text='Tell us anything we should know when delivering your order.', blank=True)),\n                ('is_default_for_shipping', models.BooleanField(default=False, verbose_name='Default shipping address?')),\n                ('is_default_for_billing', models.BooleanField(default=False, verbose_name='Default billing address?')),\n                ('num_orders', models.PositiveIntegerField(default=0, verbose_name='Number of Orders')),\n                ('hash', models.CharField(max_length=255, editable=False, db_index=True, verbose_name='Address Hash')),\n                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date Created')),\n                ('country', models.ForeignKey(verbose_name='Country', to='address.Country', on_delete=models.CASCADE)),\n                ('user', models.ForeignKey(verbose_name='User', related_name='addresses', to=settings.AUTH_USER_MODEL, on_delete=models.CASCADE)),\n            ],\n            options={\n                'ordering': ['-num_orders'],\n                'verbose_name_plural': 'User addresses',\n                'verbose_name': 'User address',\n                'abstract': False,\n            },\n            bases=(models.Model,),\n        ),\n        migrations.AlterUniqueTogether(\n            name='useraddress',\n            unique_together=set([('user', 'hash')]),\n        ),\n    ]\n",
    "output": "# coding=utf-8\nfrom django.test import TestCase\nfrom django.test.utils import override_settings\n\nfrom oscar.core import utils\n\n\ndef sluggish(value, allow_unicode=False):\n    return value.upper()\n\n\nclass TestSlugify(TestCase):\n\n    def test_default_unicode_to_ascii(self):\n        self.assertEqual('konig-der-straxdfe', utils.slugify('K\u00f6nig der Stra\u00dfe'))\n        self.assertEqual('not-fancy', utils.slugify('Not fancy'))\n        self.assertEqual('u4e01u4e02-u4e03u4e04u4e05', utils.slugify('\u4e01\u4e02 \u4e03\u4e04\u4e05'))\n\n    @override_settings(OSCAR_SLUG_ALLOW_UNICODE=True)\n    def test_allow_unicode(self):\n        self.assertEqual('k\u00f6nig-der-stra\u00dfe', utils.slugify('K\u00f6nig der Stra\u00dfe'))\n        self.assertEqual('\u4e01\u4e02-\u4e03\u4e04\u4e05', utils.slugify('\u4e01\u4e02 \u4e03\u4e04\u4e05'))\n        self.assertEqual('not-fancy', utils.slugify('Not fancy'))\n\n    @override_settings(OSCAR_SLUG_FUNCTION='tests.integration.core.test_utils.sluggish')\n    def test_custom_slugifier(self):\n        self.assertEqual('HAM AND EGGS', utils.slugify('Ham and eggs'))\n\n    @override_settings(OSCAR_SLUG_MAP={'c++': 'cpp'})\n    def test_uses_custom_mappings(self):\n        self.assertEqual('cpp', utils.slugify('c++'))\n\n    @override_settings(OSCAR_SLUG_BLACKLIST=['the'])\n    def test_uses_blacklist(self):\n        self.assertEqual('bible', utils.slugify('The Bible'))\n\n    @override_settings(OSCAR_SLUG_BLACKLIST=['the', 'bible'])\n    def test_uses_blacklist_doesnt_reduce_to_nothing(self):\n        self.assertEqual('bible', utils.slugify('The Bible'))\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\nimport oscar.models.fields\nfrom django.conf import settings\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Country',\n            fields=[\n                ('iso_3166_1_a2', models.CharField(primary_key=True, max_length=2, verbose_name='ISO 3166-1 alpha-2', serialize=False)),\n                ('iso_3166_1_a3', models.CharField(max_length=3, verbose_name='ISO 3166-1 alpha-3', blank=True)),\n                ('iso_3166_1_numeric', models.CharField(max_length=3, verbose_name='ISO 3166-1 numeric', blank=True)),\n                ('printable_name', models.CharField(max_length=128, verbose_name='Country name')),\n                ('name', models.CharField(max_length=128, verbose_name='Official name')),\n                ('display_order', models.PositiveSmallIntegerField(default=0, verbose_name='Display order', db_index=True, help_text='Higher the number, higher the country in the list.')),\n                ('is_shipping_country', models.BooleanField(default=False, db_index=True, verbose_name='Is shipping country')),\n            ],\n            options={\n                'ordering': ('-display_order', 'printable_name'),\n                'verbose_name_plural': 'Countries',\n                'verbose_name': 'Country',\n                'abstract': False,\n            },\n            bases=(models.Model,),\n        ),\n        migrations.CreateModel(\n            name='UserAddress',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(verbose_name='Title', max_length=64, blank=True, choices=[('Mr', 'Mr'), ('Miss', 'Miss'), ('Mrs', 'Mrs'), ('Ms', 'Ms'), ('Dr', 'Dr')])),\n                ('first_name', models.CharField(max_length=255, verbose_name='First name', blank=True)),\n                ('last_name', models.CharField(max_length=255, verbose_name='Last name', blank=True)),\n                ('line1', models.CharField(max_length=255, verbose_name='First line of address')),\n                ('line2', models.CharField(max_length=255, verbose_name='Second line of address', blank=True)),\n                ('line3', models.CharField(max_length=255, verbose_name='Third line of address', blank=True)),\n                ('line4', models.CharField(max_length=255, verbose_name='City', blank=True)),\n                ('state', models.CharField(max_length=255, verbose_name='State/County', blank=True)),\n                ('postcode', oscar.models.fields.UppercaseCharField(max_length=64, verbose_name='Post/Zip-code', blank=True)),\n                ('search_text', models.TextField(editable=False, verbose_name='Search text - used only for searching addresses')),\n                ('phone_number', oscar.models.fields.PhoneNumberField(verbose_name='Phone number', help_text='In case we need to call you about your order', blank=True)),\n                ('notes', models.TextField(verbose_name='Instructions', help_text='Tell us anything we should know when delivering your order.', blank=True)),\n                ('is_default_for_shipping', models.BooleanField(default=False, verbose_name='Default shipping address?')),\n                ('is_default_for_billing', models.BooleanField(default=False, verbose_name='Default billing address?')),\n                ('num_orders', models.PositiveIntegerField(default=0, verbose_name='Number of Orders')),\n                ('hash', models.CharField(max_length=255, editable=False, db_index=True, verbose_name='Address Hash')),\n                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date Created')),\n                ('country', models.ForeignKey(verbose_name='Country', to='address.Country', on_delete=models.CASCADE)),\n                ('user', models.ForeignKey(verbose_name='User', related_name='addresses', to=settings.AUTH_USER_MODEL, on_delete=models.CASCADE)),\n            ],\n            options={\n                'ordering': ['-num_orders'],\n                'verbose_name_plural': 'User addresses',\n                'verbose_name': 'User address',\n                'abstract': False,\n            },\n            bases=(models.Model,),\n        ),\n        migrations.AlterUniqueTogether(\n            name='useraddress',\n            unique_together=set([('user', 'hash')]),\n        ),\n    ]\n",
    "output": "from django.core.exceptions import ValidationError\nfrom django.contrib.flatpages.models import FlatPage\nfrom django.test import TestCase, override_settings\nfrom django.utils.translation import activate\n\nfrom oscar.core.validators import ExtendedURLValidator, URLDoesNotExistValidator\n\n\nclass TestExtendedURLValidator(TestCase):\n\n    def setUp(self):\n        self.validator = ExtendedURLValidator()\n\n    def test_validates_local_url(self):\n        try:\n            self.validator('/')\n        except ValidationError:\n            self.fail('ExtendedURLValidator raised ValidationError'\n                      'unexpectedly!')\n\n    def test_validates_local_url_with_query_strings(self):\n        try:\n            self.validator('/?q=test')  # Query strings shouldn't affect validation\n        except ValidationError:\n            self.fail('ExtendedURLValidator raised ValidationError'\n                      'unexpectedly!')\n\n    def test_raises_validation_error_for_missing_urls(self):\n        with self.assertRaises(ValidationError):\n            self.validator('/invalid/')\n\n    def test_validates_urls_missing_preceding_slash(self):\n        try:\n            self.validator('catalogue/')\n        except ValidationError:\n            self.fail('ExtendedURLValidator raised ValidationError'\n                      'unexpectedly!')\n\n    def test_raises_validation_error_for_urls_without_trailing_slash(self):\n        with self.assertRaises(ValidationError):\n            self.validator('/catalogue')  # Missing the / is bad\n\n    def test_validates_flatpages_urls(self):\n        FlatPage.objects.create(title='test page', url='/test/page/')\n        try:\n            self.validator('/test/page/')\n        except ValidationError:\n            self.fail('ExtendedURLValidator raises ValidationError'\n                      'unexpectedly!')\n\n\n@override_settings(\n    LANGUAGES=(\n        ('de', 'German'),\n        ('en-gb', 'British English'),\n    )\n)\nclass TestExtendedURLValidatorForLocalePrefixURLS(TestCase):\n    def setUp(self):\n        self.validator = ExtendedURLValidator()\n\n    def test_validate_same_locals(self):\n        \"\"\"\n        Current locale is default (\"en-gb\"), URL has locale prefix\n        of default and current locale (\"en-gb\").\n        \"\"\"\n        try:\n            self.validator('/en-gb/test/')\n        except ValidationError:\n            self.fail('ExtendedURLValidator raised ValidationError'\n                      'unexpectedly!')\n\n    def test_validate_prefix_locale_is_non_default(self):\n        \"\"\"\n        Current locale is default (\"en-gb\"), URL has locale prefix\n        of non-default locale (\"de\").\n        \"\"\"\n        try:\n            self.validator('/de/test/')\n        except ValidationError:\n            self.fail('ExtendedURLValidator raised ValidationError'\n                      'unexpectedly!')\n\n    def test_validate_current_locale_is_non_default(self):\n        \"\"\"\n        Current locale is non-default (\"de\"), URL has locale prefix\n        of default locale (\"en-gb\").\n        \"\"\"\n        activate('de')\n        try:\n            self.validator('/en-gb/test/')\n        except ValidationError:\n            self.fail('ExtendedURLValidator raised ValidationError'\n                      'unexpectedly!')\n\n    def test_validate_current_and_prefix_locales_are_non_default_and_same(self):\n        \"\"\"\n        Current locale is non-default (\"de\"), URL has locale prefix\n        of non-default locale (\"de\").\n        \"\"\"\n        activate('de')\n        try:\n            self.validator('/de/test/')\n        except ValidationError:\n            self.fail('ExtendedURLValidator raised ValidationError'\n                      'unexpectedly!')\n\n    def test_validate_current_and_prefix_locales_are_non_default_and_different(self):\n        \"\"\"\n        Current locale is non-default (\"it\"), URL has locale prefix\n        of non-default locale (\"de\").\n        \"\"\"\n        activate('it')\n        try:\n            self.validator('/de/test/')\n        except ValidationError:\n            self.fail('ExtendedURLValidator raised ValidationError'\n                      'unexpectedly!')\n\n\nclass TestURLDoesNotExistValidator(TestCase):\n\n    def setUp(self):\n        self.validator = URLDoesNotExistValidator()\n\n    def test_raises_exception_for_local_urls(self):\n        self.assertRaises(ValidationError, self.validator, '/')\n\n    def test_raises_exception_for_flatpages(self):\n        FlatPage.objects.create(title='test page', url='/test/page/')\n        self.assertRaises(ValidationError, self.validator, '/test/page/')\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\nimport oscar.models.fields\nfrom django.conf import settings\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Country',\n            fields=[\n                ('iso_3166_1_a2', models.CharField(primary_key=True, max_length=2, verbose_name='ISO 3166-1 alpha-2', serialize=False)),\n                ('iso_3166_1_a3', models.CharField(max_length=3, verbose_name='ISO 3166-1 alpha-3', blank=True)),\n                ('iso_3166_1_numeric', models.CharField(max_length=3, verbose_name='ISO 3166-1 numeric', blank=True)),\n                ('printable_name', models.CharField(max_length=128, verbose_name='Country name')),\n                ('name', models.CharField(max_length=128, verbose_name='Official name')),\n                ('display_order', models.PositiveSmallIntegerField(default=0, verbose_name='Display order', db_index=True, help_text='Higher the number, higher the country in the list.')),\n                ('is_shipping_country', models.BooleanField(default=False, db_index=True, verbose_name='Is shipping country')),\n            ],\n            options={\n                'ordering': ('-display_order', 'printable_name'),\n                'verbose_name_plural': 'Countries',\n                'verbose_name': 'Country',\n                'abstract': False,\n            },\n            bases=(models.Model,),\n        ),\n        migrations.CreateModel(\n            name='UserAddress',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(verbose_name='Title', max_length=64, blank=True, choices=[('Mr', 'Mr'), ('Miss', 'Miss'), ('Mrs', 'Mrs'), ('Ms', 'Ms'), ('Dr', 'Dr')])),\n                ('first_name', models.CharField(max_length=255, verbose_name='First name', blank=True)),\n                ('last_name', models.CharField(max_length=255, verbose_name='Last name', blank=True)),\n                ('line1', models.CharField(max_length=255, verbose_name='First line of address')),\n                ('line2', models.CharField(max_length=255, verbose_name='Second line of address', blank=True)),\n                ('line3', models.CharField(max_length=255, verbose_name='Third line of address', blank=True)),\n                ('line4', models.CharField(max_length=255, verbose_name='City', blank=True)),\n                ('state', models.CharField(max_length=255, verbose_name='State/County', blank=True)),\n                ('postcode', oscar.models.fields.UppercaseCharField(max_length=64, verbose_name='Post/Zip-code', blank=True)),\n                ('search_text', models.TextField(editable=False, verbose_name='Search text - used only for searching addresses')),\n                ('phone_number', oscar.models.fields.PhoneNumberField(verbose_name='Phone number', help_text='In case we need to call you about your order', blank=True)),\n                ('notes', models.TextField(verbose_name='Instructions', help_text='Tell us anything we should know when delivering your order.', blank=True)),\n                ('is_default_for_shipping', models.BooleanField(default=False, verbose_name='Default shipping address?')),\n                ('is_default_for_billing', models.BooleanField(default=False, verbose_name='Default billing address?')),\n                ('num_orders', models.PositiveIntegerField(default=0, verbose_name='Number of Orders')),\n                ('hash', models.CharField(max_length=255, editable=False, db_index=True, verbose_name='Address Hash')),\n                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date Created')),\n                ('country', models.ForeignKey(verbose_name='Country', to='address.Country', on_delete=models.CASCADE)),\n                ('user', models.ForeignKey(verbose_name='User', related_name='addresses', to=settings.AUTH_USER_MODEL, on_delete=models.CASCADE)),\n            ],\n            options={\n                'ordering': ['-num_orders'],\n                'verbose_name_plural': 'User addresses',\n                'verbose_name': 'User address',\n                'abstract': False,\n            },\n            bases=(models.Model,),\n        ),\n        migrations.AlterUniqueTogether(\n            name='useraddress',\n            unique_together=set([('user', 'hash')]),\n        ),\n    ]\n",
    "output": "import pytest\n\nfrom oscar.views import handler403, handler404, handler500\n\n\n@pytest.mark.django_db\ndef test_handler403_response_status(rf):\n    request = rf.get('/')\n    response = handler403(request, exception=None)\n    assert response.status_code == 403\n\n\n@pytest.mark.django_db\ndef test_handler404_response_status(rf):\n    request = rf.get('/')\n    response = handler404(request, exception=None)\n    assert response.status_code == 404\n\n\n@pytest.mark.django_db\ndef test_handler500_response_status(rf):\n    request = rf.get('/')\n    response = handler500(request)\n    assert response.status_code == 500\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\nimport oscar.models.fields\nfrom django.conf import settings\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Country',\n            fields=[\n                ('iso_3166_1_a2', models.CharField(primary_key=True, max_length=2, verbose_name='ISO 3166-1 alpha-2', serialize=False)),\n                ('iso_3166_1_a3', models.CharField(max_length=3, verbose_name='ISO 3166-1 alpha-3', blank=True)),\n                ('iso_3166_1_numeric', models.CharField(max_length=3, verbose_name='ISO 3166-1 numeric', blank=True)),\n                ('printable_name', models.CharField(max_length=128, verbose_name='Country name')),\n                ('name', models.CharField(max_length=128, verbose_name='Official name')),\n                ('display_order', models.PositiveSmallIntegerField(default=0, verbose_name='Display order', db_index=True, help_text='Higher the number, higher the country in the list.')),\n                ('is_shipping_country', models.BooleanField(default=False, db_index=True, verbose_name='Is shipping country')),\n            ],\n            options={\n                'ordering': ('-display_order', 'printable_name'),\n                'verbose_name_plural': 'Countries',\n                'verbose_name': 'Country',\n                'abstract': False,\n            },\n            bases=(models.Model,),\n        ),\n        migrations.CreateModel(\n            name='UserAddress',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(verbose_name='Title', max_length=64, blank=True, choices=[('Mr', 'Mr'), ('Miss', 'Miss'), ('Mrs', 'Mrs'), ('Ms', 'Ms'), ('Dr', 'Dr')])),\n                ('first_name', models.CharField(max_length=255, verbose_name='First name', blank=True)),\n                ('last_name', models.CharField(max_length=255, verbose_name='Last name', blank=True)),\n                ('line1', models.CharField(max_length=255, verbose_name='First line of address')),\n                ('line2', models.CharField(max_length=255, verbose_name='Second line of address', blank=True)),\n                ('line3', models.CharField(max_length=255, verbose_name='Third line of address', blank=True)),\n                ('line4', models.CharField(max_length=255, verbose_name='City', blank=True)),\n                ('state', models.CharField(max_length=255, verbose_name='State/County', blank=True)),\n                ('postcode', oscar.models.fields.UppercaseCharField(max_length=64, verbose_name='Post/Zip-code', blank=True)),\n                ('search_text', models.TextField(editable=False, verbose_name='Search text - used only for searching addresses')),\n                ('phone_number', oscar.models.fields.PhoneNumberField(verbose_name='Phone number', help_text='In case we need to call you about your order', blank=True)),\n                ('notes', models.TextField(verbose_name='Instructions', help_text='Tell us anything we should know when delivering your order.', blank=True)),\n                ('is_default_for_shipping', models.BooleanField(default=False, verbose_name='Default shipping address?')),\n                ('is_default_for_billing', models.BooleanField(default=False, verbose_name='Default billing address?')),\n                ('num_orders', models.PositiveIntegerField(default=0, verbose_name='Number of Orders')),\n                ('hash', models.CharField(max_length=255, editable=False, db_index=True, verbose_name='Address Hash')),\n                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date Created')),\n                ('country', models.ForeignKey(verbose_name='Country', to='address.Country', on_delete=models.CASCADE)),\n                ('user', models.ForeignKey(verbose_name='User', related_name='addresses', to=settings.AUTH_USER_MODEL, on_delete=models.CASCADE)),\n            ],\n            options={\n                'ordering': ['-num_orders'],\n                'verbose_name_plural': 'User addresses',\n                'verbose_name': 'User address',\n                'abstract': False,\n            },\n            bases=(models.Model,),\n        ),\n        migrations.AlterUniqueTogether(\n            name='useraddress',\n            unique_together=set([('user', 'hash')]),\n        ),\n    ]\n",
    "output": ""
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0001_initial'),\n    ]\n\n    operations = [\n        migrations.RenameField(\n            model_name='useraddress',\n            old_name='num_orders',\n            new_name='num_orders_as_shipping_address',\n        ),\n        migrations.AddField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n    ]\n",
    "output": "from django.test import TestCase\n\nfrom oscar.apps.address import models, forms\nfrom oscar.test.factories import UserFactory\n\n\nclass TestUserAddressForm(TestCase):\n\n    def setUp(self):\n        self.user = UserFactory()\n        self.country = models.Country.objects.create(\n            iso_3166_1_a2='GB', name=\"UNITED KINGDOM\")\n\n    def test_merges_addresses_with_same_hash(self):\n        data = {\n            'user': self.user,\n            'first_name': \"Matus\",\n            'last_name': \"Moravcik\",\n            'line1': \"1 Egg Street\",\n            'line4': \"London\",\n            'postcode': \"N12 9RE\",\n            'country': self.country}\n\n        # Create two addresses, which are slightly different\n        models.UserAddress.objects.create(**data)\n        other = data.copy()\n        other['first_name'] = 'Izidor'\n        duplicate = models.UserAddress.objects.create(**other)\n\n        # Edit duplicate to be same as original and check that the two\n        # addresses are merged when the form saves.\n        post_data = data.copy()\n        post_data['country'] = self.country.iso_3166_1_a2\n        form = forms.UserAddressForm(self.user, post_data, instance=duplicate)\n        self.assertFalse(form.is_valid())\n        self.assertTrue(len(form.errors['__all__']) > 0)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0001_initial'),\n    ]\n\n    operations = [\n        migrations.RenameField(\n            model_name='useraddress',\n            old_name='num_orders',\n            new_name='num_orders_as_shipping_address',\n        ),\n        migrations.AddField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n    ]\n",
    "output": "# -*- coding: utf-8 -*-\nimport pytest\nfrom django.test import TestCase\nfrom django.core import exceptions\n\nfrom oscar.apps.order.models import ShippingAddress\nfrom oscar.core.compat import get_user_model\nfrom oscar.apps.address import models\nfrom oscar.test import factories\n\nfrom tests._site.model_tests_app.models import (\n    UserAddressModelWithCustomBaseFields, UserAddressModelWithCustomHashFields\n)\n\nUser = get_user_model()\n\n\nclass UserAddressModelWithCustomBaseFieldsFactory(factories.UserAddressFactory):\n    class Meta:\n        model = UserAddressModelWithCustomBaseFields\n\n\nclass UserAddressModelWithCustomHashFieldsFactory(factories.UserAddressFactory):\n    class Meta:\n        model = UserAddressModelWithCustomHashFields\n\n\nclass TestUserAddress(TestCase):\n\n    def setUp(self):\n        self.country = factories.CountryFactory.build()\n        self.user = factories.UserFactory()\n\n    def test_uses_title_firstname_and_lastname_in_salutation(self):\n        a = factories.UserAddressFactory.build(\n            country=self.country,\n            title='Dr',\n            first_name='Barry',\n            last_name='Barrington',\n            user=self.user)\n        self.assertEqual(\"Dr Barry Barrington\", a.salutation)\n\n    def test_strips_whitespace_from_salutation(self):\n        a = factories.UserAddressFactory.build(\n            title='',\n            first_name='',\n            last_name='Barrington',\n            country=self.country,\n            user=self.user)\n        self.assertEqual(\"Barrington\", a.salutation)\n\n    def test_has_name_property(self):\n        a = factories.UserAddressFactory.build(\n            country=self.country,\n            first_name='Barry',\n            last_name='Barrington',\n            user=self.user)\n        self.assertEqual(\"Barry Barrington\", a.name)\n\n    def test_has_summary_property(self):\n        c = factories.CountryFactory(name='')\n        a = factories.UserAddressFactory(\n            country=c,\n            title='Dr',\n            first_name='Barry',\n            last_name='Barrington',\n            line1='1 King Road',\n            line4='London',\n            postcode='SW1 9RE')\n        self.assertEqual(\n            \"Dr Barry Barrington, 1 King Road, London, SW1 9RE, UNITED KINGDOM\",\n            a.summary)\n\n    def test_summary_includes_country(self):\n        c = factories.CountryFactory.build(name='UNITED KINGDOM')\n        a = factories.UserAddressFactory.build(\n            country=c,\n            title='Dr',\n            first_name='Barry',\n            last_name='Barrington',\n            line1='1 King Road',\n            line4='London',\n            postcode='SW1 9RE',\n            user=self.user)\n        self.assertEqual(\n            \"Dr Barry Barrington, 1 King Road, London, SW1 9RE, UNITED KINGDOM\",\n            a.summary)\n\n    def test_hash_value(self):\n        a = factories.UserAddressFactory.build(\n            country=self.country,\n            user=self.user)\n        self.assertEqual(a.generate_hash(), 2668616117)\n\n    def test_hash_and_summary_values_on_model_with_custom_base_fields(self):\n        a = UserAddressModelWithCustomBaseFieldsFactory.build(country=self.country, user=self.user)\n        self.assertEqual(a.summary, '1 King Road, London')\n        self.assertEqual(a.generate_hash(), 2668616117)\n\n    def test_hash_and_summary_values_on_model_with_custom_hash_fields(self):\n        a = UserAddressModelWithCustomHashFieldsFactory.build(country=self.country, user=self.user)\n        self.assertEqual(a.summary, 'Dr Barry Barrington, 1 King Road, London, SW1 9RE, UNITED KINGDOM')\n        self.assertEqual(a.generate_hash(), 2153195893)\n\n    def test_can_be_hashed_including_non_ascii(self):\n        a = factories.UserAddressFactory.build(\n            first_name=\"\\u0141ukasz Smith\",\n            last_name='Smith',\n            line1=\"75 Smith Road\",\n            postcode=\"n4 8ty\",\n            country=self.country,\n            user=self.user)\n        hash = a.generate_hash()\n        self.assertTrue(hash is not None)\n\n    def test_strips_whitespace_in_name_property(self):\n        a = factories.UserAddressFactory.build(\n            first_name='',\n            last_name='Barrington',\n            country=self.country,\n            user=self.user)\n        self.assertEqual(\"Barrington\", a.name)\n\n    def test_uses_city_as_an_alias_of_line4(self):\n        a = factories.UserAddressFactory.build(\n            line4='London',\n            country=self.country,\n            user=self.user)\n        self.assertEqual('London', a.city)\n\n    def test_converts_postcode_to_uppercase_when_cleaning(self):\n        address = factories.UserAddressFactory.build(\n            postcode=\"n4 8ty\",\n            country=self.country,\n            user=self.user)\n        address.clean()\n        self.assertEqual(\"N4 8TY\", address.postcode)\n\n    def test_strips_whitespace_when_cleaning(self):\n        a = factories.UserAddressFactory.build(\n            line1=\"  75 Smith Road  \",\n            postcode=\"  n4 8ty\",\n            country=self.country,\n            user=self.user)\n        a.clean()\n        self.assertEqual(\"N4 8TY\", a.postcode)\n        self.assertEqual(\"75 Smith Road\", a.line1)\n\n    def test_active_address_fields_skips_whitespace_only_fields(self):\n        a = factories.UserAddressFactory.build(\n            first_name='   ',\n            last_name='Barrington',\n            line1='  75 Smith Road  ',\n            postcode='  n4 8ty',\n            title='',\n            country=self.country,\n            user=self.user)\n        active_fields = a.active_address_fields()\n        self.assertEqual(\"Barrington\", active_fields[0])\n\n    def test_ignores_whitespace_when_hashing(self):\n        a1 = factories.UserAddressFactory.build(\n            first_name='Terry',\n            last_name='Barrington',\n            country=self.country,\n            user=self.user)\n        a1.clean()\n        a2 = factories.UserAddressFactory.build(\n            first_name='   Terry  ',\n            last_name='     Barrington',\n            country=self.country,\n            user=self.user)\n        a2.clean()\n        self.assertEqual(a1.generate_hash(), a2.generate_hash())\n\n    def test_populate_shipping_address_doesnt_set_id(self):\n        a = factories.UserAddressFactory.build(\n            country=self.country,\n            user=self.user)\n        a.clean()\n        sa = ShippingAddress()\n        a.populate_alternative_model(sa)\n        self.assertIsNone(sa.id)\n\n    def test_populated_shipping_address_has_same_summary_user_address(self):\n        a = factories.UserAddressFactory.build(\n            country=self.country,\n            user=self.user)\n        a.clean()\n        sa = ShippingAddress()\n        a.populate_alternative_model(sa)\n        self.assertEqual(sa.summary, a.summary)\n\n    def test_summary_value(self):\n        a = factories.UserAddressFactory.build(\n            country=self.country,\n            user=self.user)\n        self.assertEqual(a.summary, 'Dr Barry Barrington, 1 King Road, London, SW1 9RE, UNITED KINGDOM')\n\n    def test_summary_is_property(self):\n        a = factories.UserAddressFactory.build(\n            title='',\n            line4='',\n            first_name=\" Terry  \",\n            last_name='Barrington',\n            line1=\"  75 Smith Road  \",\n            postcode=\"  n4 8ty\",\n            country=self.country,\n            user=self.user)\n        a.clean()\n        self.assertEqual(\n            \"Terry Barrington, 75 Smith Road, N4 8TY, UNITED KINGDOM\",\n            a.summary)\n\n\nVALID_POSTCODES = [\n    ('GB', 'N1 9RT'),\n    ('SK', '991 41'),\n    ('CZ', '612 00'),\n    ('CC', '6799'),\n    ('CY', '8240'),\n    ('MC', '98000'),\n    ('SH', 'STHL 1ZZ'),\n    ('JP', '150-2345'),\n    ('PG', '314'),\n    ('HN', '41202'),\n    ('BN', 'BC3615'),\n    ('TW', '104'),\n    ('TW', '10444'),\n    # It works for small cases as well\n    ('GB', 'sw2 1rw'),\n]\n\n\nINVALID_POSTCODES = [\n    ('GB', 'not-a-postcode'),\n    ('DE', '123b4'),\n]\n\n\n@pytest.mark.parametrize('country_value, postcode_value', VALID_POSTCODES)\ndef test_assert_valid_postcode(country_value, postcode_value):\n    country = models.Country(iso_3166_1_a2=country_value)\n    address = models.UserAddress(country=country, postcode=postcode_value)\n    address.clean()\n\n\n@pytest.mark.parametrize('country_value, postcode_value', INVALID_POSTCODES)\ndef test_assert_invalid_postcode(country_value, postcode_value):\n    country = models.Country(iso_3166_1_a2=country_value)\n    address = models.UserAddress(country=country, postcode=postcode_value)\n\n    with pytest.raises(exceptions.ValidationError):\n        address.clean()\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0001_initial'),\n    ]\n\n    operations = [\n        migrations.RenameField(\n            model_name='useraddress',\n            old_name='num_orders',\n            new_name='num_orders_as_shipping_address',\n        ),\n        migrations.AddField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n    ]\n",
    "output": ""
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0001_initial'),\n    ]\n\n    operations = [\n        migrations.RenameField(\n            model_name='useraddress',\n            old_name='num_orders',\n            new_name='num_orders_as_shipping_address',\n        ),\n        migrations.AddField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n    ]\n",
    "output": "from datetime import datetime, date\n\nfrom django.test import TestCase\nfrom django.core.exceptions import ValidationError\nfrom django.core.files.uploadedfile import SimpleUploadedFile\n\nfrom oscar.test import factories\n\n\nclass TestBooleanAttributes(TestCase):\n\n    def setUp(self):\n        self.attr = factories.ProductAttributeFactory(type=\"boolean\")\n\n    def test_validate_boolean_values(self):\n        self.assertIsNone(self.attr.validate_value(True))\n\n    def test_validate_invalid_boolean_values(self):\n        with self.assertRaises(ValidationError):\n            self.attr.validate_value(1)\n\n\nclass TestMultiOptionAttributes(TestCase):\n\n    def setUp(self):\n        self.option_group = factories.AttributeOptionGroupFactory()\n        self.attr = factories.ProductAttributeFactory(\n            type='multi_option',\n            name='Sizes',\n            code='sizes',\n            option_group=self.option_group,\n        )\n\n        # Add some options to the group\n        self.options = factories.AttributeOptionFactory.create_batch(\n            3, group=self.option_group)\n\n    def test_validate_multi_option_values(self):\n        self.assertIsNone(self.attr.validate_value([\n            self.options[0], self.options[1]]))\n\n    def test_validate_invalid_multi_option_values(self):\n        with self.assertRaises(ValidationError):\n            # value must be an iterable\n            self.attr.validate_value('foobar')\n\n        with self.assertRaises(ValidationError):\n            # Items must all be AttributeOption objects\n            self.attr.validate_value([self.options[0], 'notanOption'])\n\n    def test_save_multi_option_value(self):\n        product = factories.ProductFactory()\n        # We'll save two out of the three available options\n        self.attr.save_value(product, [self.options[0], self.options[2]])\n        product.refresh_from_db()\n        self.assertEqual(list(product.attr.sizes), [self.options[0], self.options[2]])\n\n    def test_delete_multi_option_value(self):\n        product = factories.ProductFactory()\n        self.attr.save_value(product, [self.options[0], self.options[1]])\n        # Now delete these values\n        self.attr.save_value(product, None)\n        product.refresh_from_db()\n        self.assertFalse(hasattr(product.attr, 'sizes'))\n\n    def test_multi_option_value_as_text(self):\n        product = factories.ProductFactory()\n        self.attr.save_value(product, self.options)\n        attr_val = product.attribute_values.get(attribute=self.attr)\n        self.assertEqual(attr_val.value_as_text, \", \".join(o.option for o in self.options))\n\n\nclass TestDatetimeAttributes(TestCase):\n\n    def setUp(self):\n        self.attr = factories.ProductAttributeFactory(type=\"datetime\")\n\n    def test_validate_datetime_values(self):\n        self.assertIsNone(self.attr.validate_value(datetime.now()))\n\n    def test_validate_invalid_datetime_values(self):\n        with self.assertRaises(ValidationError):\n            self.attr.validate_value(1)\n\n\nclass TestDateAttributes(TestCase):\n\n    def setUp(self):\n        self.attr = factories.ProductAttributeFactory(type=\"date\")\n\n    def test_validate_datetime_values(self):\n        self.assertIsNone(self.attr.validate_value(datetime.now()))\n\n    def test_validate_date_values(self):\n        self.assertIsNone(self.attr.validate_value(date.today()))\n\n    def test_validate_invalid_date_values(self):\n        with self.assertRaises(ValidationError):\n            self.attr.validate_value(1)\n\n\nclass TestIntegerAttributes(TestCase):\n\n    def setUp(self):\n        self.attr = factories.ProductAttributeFactory(type=\"integer\")\n\n    def test_validate_integer_values(self):\n        self.assertIsNone(self.attr.validate_value(1))\n\n    def test_validate_str_integer_values(self):\n        self.assertIsNone(self.attr.validate_value('1'))\n\n    def test_validate_invalid_integer_values(self):\n        with self.assertRaises(ValidationError):\n            self.attr.validate_value('notanInteger')\n\n\nclass TestFloatAttributes(TestCase):\n\n    def setUp(self):\n        self.attr = factories.ProductAttributeFactory(type=\"float\")\n\n    def test_validate_integer_values(self):\n        self.assertIsNone(self.attr.validate_value(1))\n\n    def test_validate_float_values(self):\n        self.assertIsNone(self.attr.validate_value(1.2))\n\n    def test_validate_str_float_values(self):\n        self.assertIsNone(self.attr.validate_value('1.2'))\n\n    def test_validate_invalid_float_values(self):\n        with self.assertRaises(ValidationError):\n            self.attr.validate_value('notaFloat')\n\n\nclass TestTextAttributes(TestCase):\n\n    def setUp(self):\n        self.attr = factories.ProductAttributeFactory(type=\"text\")\n\n    def test_validate_string_and_unicode_values(self):\n        self.assertIsNone(self.attr.validate_value('String'))\n\n    def test_validate_invalid_float_values(self):\n        with self.assertRaises(ValidationError):\n            self.attr.validate_value(1)\n\n\nclass TestFileAttributes(TestCase):\n    def setUp(self):\n        self.attr = factories.ProductAttributeFactory(type=\"file\")\n\n    def test_validate_file_values(self):\n        file_field = SimpleUploadedFile('test_file.txt', b'Test')\n        self.assertIsNone(self.attr.validate_value(file_field))\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0001_initial'),\n    ]\n\n    operations = [\n        migrations.RenameField(\n            model_name='useraddress',\n            old_name='num_orders',\n            new_name='num_orders_as_shipping_address',\n        ),\n        migrations.AddField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n    ]\n",
    "output": "# -*- coding: utf-8 -*-\nfrom django.core.cache import cache\nfrom django.test import TestCase\nfrom django.test.utils import override_settings\n\nfrom oscar.apps.catalogue.models import Category\nfrom oscar.apps.catalogue.categories import create_from_breadcrumbs\nfrom oscar.templatetags.category_tags import get_annotated_list\n\n\nclass TestCategory(TestCase):\n\n    def setUp(self):\n        self.products = Category.add_root(name=\"Pr\u00f6ducts\")\n        self.books = self.products.add_child(name=\"B\u00fccher\")\n\n    def tearDown(self):\n        cache.clear()\n\n    def test_includes_parents_name_in_full_name(self):\n        self.assertTrue(self.products.name in self.books.full_name)\n\n    def test_has_children_method(self):\n        self.assertTrue(self.products.has_children())\n\n    def test_slugs_were_autogenerated(self):\n        self.assertTrue(self.products.slug)\n        self.assertTrue(self.books.slug)\n\n    def test_supplied_slug_is_not_altered(self):\n        more_books = self.products.add_child(\n            name=self.books.name, slug=self.books.slug)\n        self.assertEqual(more_books.slug, self.books.slug)\n\n    @override_settings(OSCAR_SLUG_ALLOW_UNICODE=True)\n    def test_unicode_slug(self):\n        root_category = Category.add_root(name=\"Vins fran\u00e7ais\")\n        child_category = root_category.add_child(name=\"Ch\u00e2teau d'Yquem\")\n        self.assertEqual(root_category.slug, 'vins-fran\u00e7ais')\n        self.assertEqual(\n            root_category.get_absolute_url(), '/catalogue/category/vins-fran%C3%A7ais_{}/'.format(root_category.pk)\n        )\n        self.assertEqual(child_category.slug, 'ch\u00e2teau-dyquem')\n        self.assertEqual(\n            child_category.get_absolute_url(),\n            '/catalogue/category/vins-fran%C3%A7ais/ch%C3%A2teau-dyquem_{}/'.format(child_category.pk)\n        )\n\n    @override_settings(OSCAR_SLUG_ALLOW_UNICODE=True)\n    def test_url_caching(self):\n        category = self.products.add_child(name=\"Fromages fran\u00e7ais\")\n        absolute_url = category.get_absolute_url()\n        url = cache.get(category.get_url_cache_key())\n        self.assertEqual(url, '/catalogue/category/products/fromages-fran%C3%A7ais_{}/'.format(category.pk))\n        self.assertEqual(absolute_url, '/catalogue/category/products/fromages-fran%C3%A7ais_{}/'.format(category.pk))\n\n\nclass TestMovingACategory(TestCase):\n\n    def setUp(self):\n        breadcrumbs = (\n            'Books > Fiction > Horror > Teen',\n            'Books > Fiction > Horror > Gothic',\n            'Books > Fiction > Comedy',\n            'Books > Non-fiction > Biography',\n            'Books > Non-fiction > Programming',\n            'Books > Children',\n        )\n        for trail in breadcrumbs:\n            create_from_breadcrumbs(trail)\n\n        horror = Category.objects.get(name=\"Horror\")\n        programming = Category.objects.get(name=\"Programming\")\n        horror.move(programming)\n\n        # Reload horror instance to pick up changes\n        self.horror = Category.objects.get(name=\"Horror\")\n\n    def test_updates_instance_name(self):\n        self.assertEqual('Books > Non-fiction > Horror', self.horror.full_name)\n\n    def test_updates_subtree_names(self):\n        teen = Category.objects.get(name=\"Teen\")\n        self.assertEqual('Books > Non-fiction > Horror > Teen',\n                         teen.full_name)\n        gothic = Category.objects.get(name=\"Gothic\")\n        self.assertEqual('Books > Non-fiction > Horror > Gothic',\n                         gothic.full_name)\n\n\nclass TestCategoryFactory(TestCase):\n\n    def test_can_create_single_level_category(self):\n        trail = 'Books'\n        category = create_from_breadcrumbs(trail)\n        self.assertIsNotNone(category)\n        self.assertEqual(category.name, 'Books')\n        self.assertEqual(category.slug, 'books')\n\n    def test_can_create_parent_and_child_categories(self):\n        trail = 'Books > Science-Fiction'\n        category = create_from_breadcrumbs(trail)\n\n        self.assertIsNotNone(category)\n        self.assertEqual(category.name, 'Science-Fiction')\n        self.assertEqual(category.get_depth(), 2)\n        self.assertEqual(category.get_parent().name, 'Books')\n        self.assertEqual(2, Category.objects.count())\n        self.assertEqual(category.full_slug, 'books/science-fiction')\n\n    def test_can_create_multiple_categories(self):\n        trail = 'Books > Science-Fiction > Star Trek'\n        create_from_breadcrumbs(trail)\n        trail = 'Books > Factual > Popular Science'\n        category = create_from_breadcrumbs(trail)\n\n        self.assertIsNotNone(category)\n        self.assertEqual(category.name, 'Popular Science')\n        self.assertEqual(category.get_depth(), 3)\n        self.assertEqual(category.get_parent().name, 'Factual')\n        self.assertEqual(5, Category.objects.count())\n        self.assertEqual(category.full_slug, 'books/factual/popular-science', )\n\n    def test_can_use_alternative_separator(self):\n        trail = 'Food|Cheese|Blue'\n        create_from_breadcrumbs(trail, separator='|')\n        self.assertEqual(3, len(Category.objects.all()))\n\n    def test_updating_subtree_slugs_when_moving_category_to_new_parent(self):\n        trail = 'A > B > C'\n        create_from_breadcrumbs(trail)\n        trail = 'A > B > D'\n        create_from_breadcrumbs(trail)\n        trail = 'A > E > F'\n        create_from_breadcrumbs(trail)\n        trail = 'A > E > G'\n        create_from_breadcrumbs(trail)\n\n        trail = 'T'\n        target = create_from_breadcrumbs(trail)\n        category = Category.objects.get(name='A')\n\n        category.move(target, pos='first-child')\n\n        c1 = Category.objects.get(name='A')\n        self.assertEqual(c1.full_slug, 't/a')\n        self.assertEqual(c1.full_name, 'T > A')\n\n        child = Category.objects.get(name='F')\n        self.assertEqual(child.full_slug, 't/a/e/f')\n        self.assertEqual(child.full_name, 'T > A > E > F')\n\n        child = Category.objects.get(name='D')\n        self.assertEqual(child.full_slug, 't/a/b/d')\n        self.assertEqual(child.full_name, 'T > A > B > D')\n\n    def test_updating_subtree_when_moving_category_to_new_sibling(self):\n        trail = 'A > B > C'\n        create_from_breadcrumbs(trail)\n        trail = 'A > B > D'\n        create_from_breadcrumbs(trail)\n        trail = 'A > E > F'\n        create_from_breadcrumbs(trail)\n        trail = 'A > E > G'\n        create_from_breadcrumbs(trail)\n\n        category = Category.objects.get(name='E')\n        target = Category.objects.get(name='A')\n\n        category.move(target, pos='right')\n\n        child = Category.objects.get(name='E')\n        self.assertEqual(child.full_slug, 'e')\n        self.assertEqual(child.full_name, 'E')\n\n        child = Category.objects.get(name='F')\n        self.assertEqual(child.full_slug, 'e/f')\n        self.assertEqual(child.full_name, 'E > F')\n\n\nclass TestCategoryTemplateTags(TestCase):\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.template = \"\"\"\n          {% if tree_categories %}\n              <ul>\n              {% for tree_category, info in tree_categories %}\n                  <li>\n                  {% if tree_category.pk == category.pk %}\n                      <strong>{{ tree_category.name }}</strong>\n                  {% else %}\n                      <a href=\"{{ tree_category.get_absolute_url }}\">\n                          {{ tree_category.name }}</a>\n                  {% endif %}\n                  {% if info.has_children %}<ul>{% else %}</li>{% endif %}\n                  {% for n in info.num_to_close %}\n                      </ul></li>\n                  {% endfor %}\n              {% endfor %}\n              </ul>\n          {% endif %}\n        \"\"\"\n\n    def setUp(self):\n        breadcrumbs = (\n            'Books > Fiction > Horror > Teen',\n            'Books > Fiction > Horror > Gothic',\n            'Books > Fiction > Comedy',\n            'Books > Non-fiction > Biography',\n            'Books > Non-fiction > Programming',\n            'Books > Children',\n        )\n        for trail in breadcrumbs:\n            create_from_breadcrumbs(trail)\n\n    def get_category_names(self, depth=None, parent=None):\n        \"\"\"\n        For the tests, we are only interested in the category names returned\n        from the template tag. This helper calls the template tag and\n        returns a list of the included categories.\n        \"\"\"\n        annotated_list = get_annotated_list(depth, parent)\n        names = [category.name for category, __ in annotated_list]\n        names_set = set(names)\n        # We return a set to ease testing, but need to be sure we're not\n        # losing any duplicates through that conversion.\n        self.assertEqual(len(names_set), len(names))\n        return names_set\n\n    def test_all_categories(self):\n        expected_categories = {\n            'Books', 'Fiction', 'Horror', 'Teen', 'Gothic', 'Comedy',\n            'Non-fiction', 'Biography', 'Programming', 'Children'}\n        actual_categories = self.get_category_names()\n        self.assertEqual(expected_categories, actual_categories)\n\n    def test_categories_depth(self):\n        expected_categories = {'Books'}\n        actual_categories = self.get_category_names(depth=1)\n        self.assertEqual(expected_categories, actual_categories)\n\n    def test_categories_parent(self):\n        parent = Category.objects.get(name=\"Fiction\")\n        actual_categories = self.get_category_names(parent=parent)\n        expected_categories = {'Horror', 'Teen', 'Gothic', 'Comedy'}\n        self.assertEqual(expected_categories, actual_categories)\n\n    def test_categories_depth_parent(self):\n        parent = Category.objects.get(name=\"Fiction\")\n        actual_categories = self.get_category_names(depth=1, parent=parent)\n        expected_categories = {'Horror', 'Comedy'}\n        self.assertEqual(expected_categories, actual_categories)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0001_initial'),\n    ]\n\n    operations = [\n        migrations.RenameField(\n            model_name='useraddress',\n            old_name='num_orders',\n            new_name='num_orders_as_shipping_address',\n        ),\n        migrations.AddField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n    ]\n",
    "output": "import pytest\nfrom django.core.exceptions import ValidationError\n\nfrom oscar.apps.catalogue import models\n\n\ndef test_product_attributes_can_contain_underscores():\n    attr = models.ProductAttribute(name=\"A\", code=\"a_b\")\n    attr.full_clean()\n\n\ndef test_product_attributes_cant_contain_hyphens():\n    attr = models.ProductAttribute(name=\"A\", code=\"a-b\")\n    with pytest.raises(ValidationError):\n        attr.full_clean()\n\n\ndef test_product_attributes_cant_be_python_keywords():\n    attr = models.ProductAttribute(name=\"A\", code=\"import\")\n    with pytest.raises(ValidationError):\n        attr.full_clean()\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0001_initial'),\n    ]\n\n    operations = [\n        migrations.RenameField(\n            model_name='useraddress',\n            old_name='num_orders',\n            new_name='num_orders_as_shipping_address',\n        ),\n        migrations.AddField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n    ]\n",
    "output": "from django.test import TestCase\n\nfrom oscar.test import factories\nfrom oscar.core.loading import get_model\n\n\nProduct = get_model('catalogue', 'Product')\n\n\nclass ProductOptionTests(TestCase):\n    def setUp(self):\n        self.product_class = factories.ProductClassFactory()\n        self.product = factories.create_product(product_class=self.product_class)\n        self.option = factories.OptionFactory()\n\n    def test_product_has_options_per_product_class(self):\n        self.product_class.options.add(self.option)\n        self.assertTrue(self.product.has_options)\n\n    def test_product_has_options_per_product(self):\n        self.product.product_options.add(self.option)\n        self.assertTrue(self.product.has_options)\n\n    def test_queryset_per_product_class(self):\n        self.product_class.options.add(self.option)\n        qs = Product.browsable.base_queryset().filter(id=self.product.id)\n        product = qs.first()\n        self.assertTrue(product.has_options)\n        self.assertEquals(product.num_product_class_options, 1)\n\n    def test_queryset_per_product(self):\n        self.product.product_options.add(self.option)\n        qs = Product.browsable.base_queryset().filter(id=self.product.id)\n        product = qs.first()\n        self.assertTrue(product.has_options)\n        self.assertEquals(product.num_product_options, 1)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0001_initial'),\n    ]\n\n    operations = [\n        migrations.RenameField(\n            model_name='useraddress',\n            old_name='num_orders',\n            new_name='num_orders_as_shipping_address',\n        ),\n        migrations.AddField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n    ]\n",
    "output": "# coding=utf-8\nfrom django.db import IntegrityError\nfrom django.test import TestCase\nfrom django.core.exceptions import ValidationError\n\nfrom oscar.apps.catalogue.models import (Product, ProductClass,\n                                         ProductAttribute,\n                                         AttributeOption,\n                                         ProductRecommendation)\nfrom oscar.test import factories\n\n\nclass ProductTests(TestCase):\n\n    def setUp(self):\n        self.product_class, _ = ProductClass.objects.get_or_create(\n            name='Clothing')\n\n\nclass ProductCreationTests(ProductTests):\n\n    def setUp(self):\n        super().setUp()\n        ProductAttribute.objects.create(product_class=self.product_class,\n                                        name='Number of pages',\n                                        code='num_pages',\n                                        type='integer')\n        Product.ENABLE_ATTRIBUTE_BINDING = True\n\n    def tearDown(self):\n        Product.ENABLE_ATTRIBUTE_BINDING = False\n\n    def test_create_products_with_attributes(self):\n        product = Product(upc='1234',\n                          product_class=self.product_class,\n                          title='testing')\n        product.attr.num_pages = 100\n        product.save()\n\n    def test_none_upc_is_represented_as_empty_string(self):\n        product = Product(product_class=self.product_class,\n                          title='testing', upc=None)\n        product.save()\n        product.refresh_from_db()\n        self.assertEqual(product.upc, '')\n\n    def test_upc_uniqueness_enforced(self):\n        Product.objects.create(product_class=self.product_class,\n                               title='testing', upc='bah')\n        self.assertRaises(IntegrityError, Product.objects.create,\n                          product_class=self.product_class,\n                          title='testing', upc='bah')\n\n    def test_allow_two_products_without_upc(self):\n        for x in range(2):\n            Product.objects.create(product_class=self.product_class,\n                                   title='testing', upc=None)\n\n\nclass TopLevelProductTests(ProductTests):\n\n    def test_top_level_products_must_have_titles(self):\n        product = Product(product_class=self.product_class)\n        self.assertRaises(ValidationError, product.clean)\n\n    def test_top_level_products_must_have_product_class(self):\n        product = Product(title=\"Kopfh\u00f6rer\")\n        self.assertRaises(ValidationError, product.clean)\n\n    def test_top_level_products_are_part_of_browsable_set(self):\n        product = Product.objects.create(\n            product_class=self.product_class, title=\"Kopfh\u00f6rer\")\n        self.assertEqual(set([product]), set(Product.browsable.all()))\n\n\nclass ChildProductTests(ProductTests):\n\n    def setUp(self):\n        super().setUp()\n        self.parent = Product.objects.create(\n            title=\"Parent product\",\n            product_class=self.product_class,\n            structure=Product.PARENT,\n            is_discountable=False)\n\n    def test_child_products_dont_need_titles(self):\n        Product.objects.create(\n            parent=self.parent, structure=Product.CHILD)\n\n    def test_child_products_dont_need_a_product_class(self):\n        Product.objects.create(parent=self.parent, structure=Product.CHILD)\n\n    def test_child_products_inherit_fields(self):\n        p = Product.objects.create(\n            parent=self.parent,\n            structure=Product.CHILD,\n            is_discountable=True)\n        self.assertEqual(\"Parent product\", p.get_title())\n        self.assertEqual(\"Clothing\", p.get_product_class().name)\n        self.assertEqual(False, p.get_is_discountable())\n\n    def test_child_products_are_not_part_of_browsable_set(self):\n        Product.objects.create(\n            product_class=self.product_class, parent=self.parent,\n            structure=Product.CHILD)\n        self.assertEqual(set([self.parent]), set(Product.browsable.all()))\n\n\nclass TestAChildProduct(TestCase):\n\n    def setUp(self):\n        clothing = ProductClass.objects.create(\n            name='Clothing', requires_shipping=True)\n        self.parent = clothing.products.create(\n            title=\"Parent\", structure=Product.PARENT)\n        self.child = self.parent.children.create(structure=Product.CHILD)\n\n    def test_delegates_requires_shipping_logic(self):\n        self.assertTrue(self.child.is_shipping_required)\n\n\nclass ProductAttributeCreationTests(TestCase):\n\n    def test_validating_option_attribute(self):\n        option_group = factories.AttributeOptionGroupFactory()\n        option_1 = factories.AttributeOptionFactory(group=option_group)\n        option_2 = factories.AttributeOptionFactory(group=option_group)\n        pa = factories.ProductAttribute(\n            type='option', option_group=option_group)\n\n        self.assertRaises(ValidationError, pa.validate_value, 'invalid')\n        pa.validate_value(option_1)\n        pa.validate_value(option_2)\n\n        invalid_option = AttributeOption(option='invalid option')\n        self.assertRaises(\n            ValidationError, pa.validate_value, invalid_option)\n\n    def test_entity_attributes(self):\n        unrelated_object = factories.PartnerFactory()\n        attribute = factories.ProductAttributeFactory(type='entity')\n\n        attribute_value = factories.ProductAttributeValueFactory(\n            attribute=attribute, value_entity=unrelated_object)\n\n        self.assertEqual(attribute_value.value, unrelated_object)\n\n\nclass ProductRecommendationTests(ProductTests):\n\n    def setUp(self):\n        super().setUp()\n        self.primary_product = Product.objects.create(\n            upc='1234', product_class=self.product_class, title='Primary Product'\n        )\n\n    def test_recommended_products_ordering(self):\n        secondary_products = []\n        for i in range(5):\n            secondary_products.append(Product.objects.create(\n                upc='secondary%s' % i, product_class=self.product_class, title='Secondary Product #%s' % i\n            ))\n\n        ProductRecommendation.objects.create(\n            primary=self.primary_product, recommendation=secondary_products[3], ranking=5)\n        ProductRecommendation.objects.create(\n            primary=self.primary_product, recommendation=secondary_products[1], ranking=2)\n        ProductRecommendation.objects.create(\n            primary=self.primary_product, recommendation=secondary_products[2], ranking=4)\n        ProductRecommendation.objects.create(\n            primary=self.primary_product, recommendation=secondary_products[4], ranking=1)\n        ProductRecommendation.objects.create(\n            primary=self.primary_product, recommendation=secondary_products[0], ranking=3)\n        recommended_products = [\n            secondary_products[3], secondary_products[2], secondary_products[0],\n            secondary_products[1], secondary_products[4]\n        ]\n        self.assertEqual(self.primary_product.sorted_recommended_products, recommended_products)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0001_initial'),\n    ]\n\n    operations = [\n        migrations.RenameField(\n            model_name='useraddress',\n            old_name='num_orders',\n            new_name='num_orders_as_shipping_address',\n        ),\n        migrations.AddField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n    ]\n",
    "output": "from django.test import TestCase\n\nfrom oscar.apps.catalogue import models\n\n\nclass TestProductClassModel(TestCase):\n\n    def test_slug_is_auto_created(self):\n        books = models.ProductClass.objects.create(\n            name=\"Book\",\n        )\n        self.assertEqual('book', books.slug)\n\n    def test_has_attribute_for_whether_shipping_is_required(self):\n        models.ProductClass.objects.create(\n            name=\"Download\",\n            requires_shipping=False,\n        )\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0001_initial'),\n    ]\n\n    operations = [\n        migrations.RenameField(\n            model_name='useraddress',\n            old_name='num_orders',\n            new_name='num_orders_as_shipping_address',\n        ),\n        migrations.AddField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n    ]\n",
    "output": "import os\nimport tempfile\nfrom unittest import mock\n\nfrom django.contrib.staticfiles.testing import StaticLiveServerTestCase\nfrom django.test import TestCase, override_settings\n\nfrom oscar.apps.catalogue.abstract_models import MissingProductImage\nfrom oscar.test import factories\n\n\nclass TestProductImages(TestCase):\n\n    def test_images_are_in_consecutive_order(self):\n        product = factories.create_product()\n        for i in range(4):\n            factories.create_product_image(product=product, display_order=i)\n\n        product.images.all()[2].delete()\n\n        for idx, im in enumerate(product.images.all()):\n            self.assertEqual(im.display_order, idx)\n\n    def test_variant_images(self):\n        parent = factories.ProductFactory(structure='parent')\n        variant = factories.create_product(parent=parent)\n        factories.create_product_image(product=variant, caption='Variant Image')\n        all_images = variant.get_all_images()\n        self.assertEquals(all_images.count(), 1)\n        product_image = all_images.first()\n        self.assertEquals(product_image.caption, 'Variant Image')\n\n    def test_variant_images_fallback_to_parent(self):\n        parent = factories.ProductFactory(structure='parent')\n        variant = factories.create_product(parent=parent)\n        factories.create_product_image(product=parent, caption='Parent Product Image')\n        all_images = variant.get_all_images()\n        self.assertEquals(all_images.count(), 1)\n        product_image = all_images.first()\n        self.assertEquals(product_image.caption, 'Parent Product Image')\n\n\nclass TestMissingProductImage(StaticLiveServerTestCase):\n\n    TEMP_MEDIA_ROOT = tempfile.mkdtemp()\n\n    @override_settings(MEDIA_ROOT=TEMP_MEDIA_ROOT)\n    @mock.patch('oscar.apps.catalogue.abstract_models.find')\n    def test_symlink_creates_directories(self, mock_find):\n        # Create a fake empty file to symlink\n        img = tempfile.NamedTemporaryFile(delete=False)\n        img.close()\n\n        mock_find.return_value = img.name\n        # Initialise the class with a nested path\n        path = 'image/path.jpg'\n        MissingProductImage(path)\n        # Check that the directory exists\n        image_path = os.path.join(self.TEMP_MEDIA_ROOT, path)\n        self.assertTrue(os.path.exists(image_path))\n\n        # Clean up\n        for f in [image_path, img.name]:\n            os.unlink(f)\n        for d in [os.path.join(self.TEMP_MEDIA_ROOT, 'image'), self.TEMP_MEDIA_ROOT]:\n            os.rmdir(d)\n\n    @mock.patch('oscar.apps.catalogue.abstract_models.MissingProductImage.symlink_missing_image')\n    def test_no_symlink_when_no_media_root(self, mock_symlink):\n        MissingProductImage()\n        self.assertEqual(mock_symlink.call_count, 0)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0001_initial'),\n    ]\n\n    operations = [\n        migrations.RenameField(\n            model_name='useraddress',\n            old_name='num_orders',\n            new_name='num_orders_as_shipping_address',\n        ),\n        migrations.AddField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n    ]\n",
    "output": "from django.test import TestCase\nfrom django.test.utils import override_settings\n\nfrom oscar.apps.catalogue.search_handlers import (\n    get_product_search_handler_class,\n)\n\n\nclass TestSearchHandler(object):\n    pass\n\n\nclass TestProductSearchHandlerSetting(TestCase):\n    def test_product_search_handler_setting(self):\n        \"\"\"\n        Test that the `OSCAR_PRODUCT_SEARCH_HANDLER` setting, when set,\n        dictates the return value of the `get_product_search_handler_class`\n        function.\n        \"\"\"\n        handler_override = 'tests.integration.catalogue.test_product_search_handler_setting.TestSearchHandler'\n        with override_settings(OSCAR_PRODUCT_SEARCH_HANDLER=handler_override):\n            handler_class = get_product_search_handler_class()\n\n        self.assertEqual(handler_class, TestSearchHandler)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0001_initial'),\n    ]\n\n    operations = [\n        migrations.RenameField(\n            model_name='useraddress',\n            old_name='num_orders',\n            new_name='num_orders_as_shipping_address',\n        ),\n        migrations.AddField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n    ]\n",
    "output": ""
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0001_initial'),\n    ]\n\n    operations = [\n        migrations.RenameField(\n            model_name='useraddress',\n            old_name='num_orders',\n            new_name='num_orders_as_shipping_address',\n        ),\n        migrations.AddField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n    ]\n",
    "output": "from django.test import TestCase\n\nfrom oscar.apps.catalogue.reviews import forms\nfrom oscar.test.factories import UserFactory, create_product\n\n\nclass TestReviewForm(TestCase):\n\n    def test_cleans_title(self):\n        product = create_product()\n        reviewer = UserFactory()\n        data = {\n            'title': '  This product is lovely',\n            'body': 'I really like this cheese',\n            'score': 0,\n            'name': 'JR Hartley',\n            'email': 'hartley@example.com'\n        }\n        form = forms.ProductReviewForm(\n            product=product, user=reviewer, data=data)\n\n        assert form.is_valid()\n\n        review = form.save()\n        assert review.title == \"This product is lovely\"\n\n    def test_validates_empty_data_correctly(self):\n        form = forms.ProductReviewForm(product=None, user=None, data={})\n        assert form.is_valid() is False\n\n    def test_validates_correctly(self):\n        data = {\n            'title': 'This product is lovely',\n            'body': 'I really like this cheese',\n            'score': 0,\n            'name': 'JR Hartley',\n            'email': 'hartley@example.com'\n        }\n        form = forms.ProductReviewForm(product=None, user=None, data=data)\n        assert form.is_valid()\n\n\nclass TestVoteForm(TestCase):\n\n    def setUp(self):\n        self.product = create_product()\n        self.reviewer = UserFactory()\n        self.voter = UserFactory()\n        self.review = self.product.reviews.create(\n            title='This is nice',\n            score=3,\n            body=\"This is the body\",\n            user=self.reviewer)\n\n    def test_allows_real_users_to_vote(self):\n        form = forms.VoteForm(self.review, self.voter, data={'delta': 1})\n        self.assertTrue(form.is_valid())\n\n    def test_prevents_users_from_voting_more_than_once(self):\n        self.review.vote_up(self.voter)\n        form = forms.VoteForm(self.review, self.voter, data={'delta': 1})\n        self.assertFalse(form.is_valid())\n        self.assertTrue(len(form.errors['__all__']) > 0)\n\n    def test_prevents_users_voting_on_their_own_reviews(self):\n        form = forms.VoteForm(self.review, self.reviewer, data={'delta': 1})\n        self.assertFalse(form.is_valid())\n        self.assertTrue(len(form.errors['__all__']) > 0)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0001_initial'),\n    ]\n\n    operations = [\n        migrations.RenameField(\n            model_name='useraddress',\n            old_name='num_orders',\n            new_name='num_orders_as_shipping_address',\n        ),\n        migrations.AddField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n    ]\n",
    "output": "from django.test import TestCase\nfrom django.core.exceptions import ValidationError\n\nfrom oscar.core.compat import get_user_model\nfrom oscar.apps.catalogue.reviews import models\nfrom oscar.test.factories import create_product\nfrom oscar.test.factories import UserFactory\n\nUser = get_user_model()\n\n\nclass TestAnAnonymousReview(TestCase):\n\n    def setUp(self):\n        self.product = create_product()\n        self.data = {\n            'product': self.product,\n            'title': 'This product is lovely',\n            'body': 'I really like this cheese',\n            'score': 0,\n            'name': 'JR Hartley',\n            'email': 'hartley@example.com'\n        }\n\n    def review(self, **kwargs):\n        if kwargs:\n            data = self.data.copy()\n            data.update(kwargs)\n        else:\n            data = self.data\n        return models.ProductReview(**data)\n\n    def test_can_be_created(self):\n        review = self.review()\n        review.full_clean()\n\n    def test_requires_a_title(self):\n        review = self.review(title=\"\")\n        self.assertRaises(ValidationError, review.full_clean)\n\n    def test_requires_a_body(self):\n        review = self.review(body=\"\")\n        self.assertRaises(ValidationError, review.full_clean)\n\n    def test_requires_a_name(self):\n        review = self.review(name=\"\")\n        self.assertRaises(ValidationError, review.full_clean)\n\n    def test_requires_an_email_address(self):\n        review = self.review(email=\"\")\n        self.assertRaises(ValidationError, review.full_clean)\n\n    def test_requires_non_whitespace_title(self):\n        review = self.review(title=\"    \")\n        self.assertRaises(ValidationError, review.full_clean)\n\n    def test_starts_with_no_votes(self):\n        review = self.review()\n        review.save()\n        self.assertFalse(review.has_votes)\n        self.assertEqual(0, review.num_up_votes)\n        self.assertEqual(0, review.num_down_votes)\n\n    def test_has_reviewer_name_property(self):\n        review = self.review(name=\"Dave\")\n        self.assertEqual(\"Dave\", review.reviewer_name)\n\n    def test_review_moderate_setting_false(self):\n        with self.settings(OSCAR_MODERATE_REVIEWS=False):\n            review = self.review()\n            self.assertEqual(1, review.status)\n\n    def test_review_moderate_setting_true(self):\n        with self.settings(OSCAR_MODERATE_REVIEWS=True):\n            review = self.review()\n            self.assertEqual(0, review.status)\n\n\nclass TestAUserReview(TestCase):\n\n    def setUp(self):\n        self.product = create_product()\n        self.user = UserFactory(first_name=\"Tom\", last_name=\"Thumb\")\n        self.data = {\n            'product': self.product,\n            'title': 'This product is lovely',\n            'body': 'I really like this cheese',\n            'score': 0,\n            'user': self.user\n        }\n\n    def review(self, **kwargs):\n        if kwargs:\n            data = self.data.copy()\n            data.update(kwargs)\n        else:\n            data = self.data\n        return models.ProductReview(**data)\n\n    def test_can_be_created(self):\n        review = self.review()\n        review.full_clean()\n\n    def test_requires_a_title(self):\n        review = self.review(title=\"\")\n        self.assertRaises(ValidationError, review.full_clean)\n\n    def test_requires_a_body(self):\n        review = self.review(body=\"\")\n        self.assertRaises(ValidationError, review.full_clean)\n\n    def test_has_reviewer_name_property(self):\n        review = self.review()\n        self.assertEqual(\"Tom Thumb\", review.reviewer_name)\n\n    def test_num_approved_reviews(self):\n        review = self.review()\n        review.save()\n        self.assertEqual(self.product.num_approved_reviews, 1)\n        self.assertEqual(self.product.reviews.approved().first(), review)\n\n    def test_review_moderate_setting_false(self):\n        with self.settings(OSCAR_MODERATE_REVIEWS=False):\n            review = self.review()\n            self.assertEqual(1, review.status)\n\n    def test_review_moderate_setting_true(self):\n        with self.settings(OSCAR_MODERATE_REVIEWS=True):\n            review = self.review()\n            self.assertEqual(0, review.status)\n\n\nclass TestVotingOnAReview(TestCase):\n\n    def setUp(self):\n        self.product = create_product()\n        self.user = UserFactory()\n        self.voter = UserFactory()\n        self.review = self.product.reviews.create(\n            title='This is nice',\n            score=3,\n            body=\"This is the body\",\n            user=self.user)\n\n    def test_updates_totals_for_upvote(self):\n        self.review.vote_up(self.voter)\n        self.assertTrue(self.review.has_votes)\n        self.assertEqual(1, self.review.total_votes)\n        self.assertEqual(1, self.review.delta_votes)\n\n    def test_updates_totals_for_downvote(self):\n        self.review.vote_down(self.voter)\n        self.assertTrue(self.review.has_votes)\n        self.assertEqual(1, self.review.total_votes)\n        self.assertEqual(-1, self.review.delta_votes)\n\n    def test_is_permitted_for_normal_user(self):\n        is_allowed, reason = self.review.can_user_vote(self.voter)\n        self.assertTrue(is_allowed, reason)\n\n    def test_is_not_permitted_for_reviewer(self):\n        is_allowed, reason = self.review.can_user_vote(self.user)\n        self.assertFalse(is_allowed, reason)\n\n    def test_is_not_permitted_for_previous_voter(self):\n        self.review.vote_up(self.voter)\n        is_allowed, reason = self.review.can_user_vote(self.voter)\n        self.assertFalse(is_allowed, reason)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0001_initial'),\n    ]\n\n    operations = [\n        migrations.RenameField(\n            model_name='useraddress',\n            old_name='num_orders',\n            new_name='num_orders_as_shipping_address',\n        ),\n        migrations.AddField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n    ]\n",
    "output": ""
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0001_initial'),\n    ]\n\n    operations = [\n        migrations.RenameField(\n            model_name='useraddress',\n            old_name='num_orders',\n            new_name='num_orders_as_shipping_address',\n        ),\n        migrations.AddField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n    ]\n",
    "output": "from decimal import Decimal as D\nfrom unittest import mock\n\nfrom django.test import TestCase, override_settings\nfrom django.conf import settings\n\nfrom oscar.apps.basket import forms, formsets\nfrom oscar.apps.offer.utils import Applicator\nfrom oscar.core.loading import get_model\nfrom oscar.test import factories\nfrom oscar.test.basket import add_product\nfrom oscar.test.factories import (\n    BenefitFactory, ConditionalOfferFactory, ConditionFactory, RangeFactory)\n\n\nLine = get_model('basket', 'Line')\n\n\nclass TestBasketLineForm(TestCase):\n\n    def setUp(self):\n        self.applicator = Applicator()\n        rng = RangeFactory(includes_all_products=True)\n        self.condition = ConditionFactory(\n            range=rng, type=ConditionFactory._meta.model.VALUE,\n            value=D('100'), proxy_class=None)\n        self.benefit = BenefitFactory(\n            range=rng, type=BenefitFactory._meta.model.FIXED,\n            value=D('10'), max_affected_items=1)\n        self.basket = factories.create_basket()\n        self.line = self.basket.all_lines()[0]\n\n    def mock_availability_return_value(self, is_available, reason=''):\n        policy = self.line.purchase_info.availability\n        policy.is_purchase_permitted = mock.MagicMock(\n            return_value=(is_available, reason))\n\n    def build_form(self, quantity=None):\n        if quantity is None:\n            quantity = self.line.quantity\n        return forms.BasketLineForm(\n            strategy=self.basket.strategy,\n            data={'quantity': quantity},\n            instance=self.line)\n\n    def test_enforces_availability_policy_for_valid_quantities(self):\n        self.mock_availability_return_value(True)\n        form = self.build_form()\n        self.assertTrue(form.is_valid())\n\n    def test_enforces_availability_policy_for_invalid_quantities(self):\n        self.mock_availability_return_value(False, \"Some reason\")\n        form = self.build_form()\n        self.assertFalse(form.is_valid())\n        self.assertEqual(\n            form.errors['quantity'], ['Some reason'])\n\n    def test_skips_availability_policy_for_zero_quantities(self):\n        self.mock_availability_return_value(True)\n        form = self.build_form(quantity=0)\n        self.assertTrue(form.is_valid())\n\n    def test_enforces_max_line_quantity_for_new_product(self):\n        invalid_qty = settings.OSCAR_MAX_BASKET_QUANTITY_THRESHOLD + 1\n        form = self.build_form(quantity=invalid_qty)\n        self.assertFalse(form.is_valid())\n\n    @override_settings(OSCAR_MAX_BASKET_QUANTITY_THRESHOLD=10)\n    def test_enforce_max_line_quantity_for_existing_product(self):\n        self.basket.flush()\n        product = factories.create_product(num_in_stock=20)\n        add_product(self.basket, D('100'), 4, product)\n        self.line = self.basket.all_lines()[0]\n        form = self.build_form(quantity=6)\n        self.assertTrue(form.is_valid())\n        form.save()\n        form = self.build_form(quantity=11)\n        self.assertFalse(form.is_valid())\n\n    def test_line_quantity_max_attribute_per_num_available(self):\n        self.basket.flush()\n        product = factories.create_product(num_in_stock=20)\n        add_product(self.basket, D('100'), 4, product)\n        self.line = self.basket.all_lines()[0]\n        form = self.build_form()\n        self.assertIn('max=\"20\"', str(form['quantity']))\n\n    @override_settings(OSCAR_MAX_BASKET_QUANTITY_THRESHOLD=10)\n    def test_line_quantity_max_attribute_per_basket_threshold(self):\n        self.basket.flush()\n        product = factories.create_product(num_in_stock=20)\n        add_product(self.basket, D('100'), 4, product)\n        self.line = self.basket.all_lines()[0]\n        form = self.build_form()\n        self.assertIn('max=\"6\"', str(form['quantity']))\n\n    def test_basketline_formset_ordering(self):\n        # when we use a unordered queryset in the Basketlineformset, the\n        # discounts will be lost because django will query the database\n        # again to enforce ordered results\n        add_product(self.basket, D('100'), 5)\n        offer = ConditionalOfferFactory(\n            pk=1, condition=self.condition, benefit=self.benefit)\n\n        # now we force an unordered queryset so we can see that our discounts\n        # will disappear due to a new ordering query (see django/forms/model.py)\n        default_line_ordering = Line._meta.ordering\n        Line._meta.ordering = []\n        self.basket._lines = self.basket.lines.all()\n\n        self.applicator.apply_offers(self.basket, [offer])\n        formset = formsets.BasketLineFormSet(\n            strategy=self.basket.strategy,\n            queryset=self.basket.all_lines())\n\n        # the discount is in all_lines():\n        self.assertTrue(self.basket.all_lines()[0].has_discount)\n\n        # but not in the formset\n        self.assertFalse(formset.forms[0].instance.has_discount)\n\n        # Restore the ordering on the line\n        Line._meta.ordering = default_line_ordering\n\n        # clear the cached lines and apply the offer again\n        self.basket._lines = None\n        self.applicator.apply_offers(self.basket, [offer])\n\n        formset = formsets.BasketLineFormSet(\n            strategy=self.basket.strategy,\n            queryset=self.basket.all_lines())\n        self.assertTrue(formset.forms[0].instance.has_discount)\n\n\nclass TestAddToBasketForm(TestCase):\n\n    def test_allows_a_product_quantity_to_be_increased(self):\n        basket = factories.create_basket()\n        product = basket.all_lines()[0].product\n\n        # Add more of the same product\n        data = {'quantity': 1}\n        form = forms.AddToBasketForm(\n            basket=basket, product=product, data=data)\n        self.assertTrue(form.is_valid())\n\n    def test_checks_whether_passed_product_id_matches_a_real_product(self):\n        basket = factories.create_basket()\n        product = basket.all_lines()[0].product\n\n        # Add more of the same product\n        data = {'quantity': -1}\n        form = forms.AddToBasketForm(\n            basket=basket, product=product, data=data)\n        self.assertFalse(form.is_valid())\n\n    def test_checks_if_purchase_is_permitted(self):\n        basket = factories.BasketFactory()\n        product = factories.ProductFactory()\n\n        # Build a 4-level mock monster so we can force the return value of\n        # whether the product is available to buy. This is a serious code smell\n        # and needs to be remedied.\n        info = mock.Mock()\n        info.availability = mock.Mock()\n        info.availability.is_purchase_permitted = mock.Mock(\n            return_value=(False, \"Not on your nelly!\"))\n        basket.strategy.fetch_for_product = mock.Mock(\n            return_value=info)\n\n        data = {'quantity': 1}\n        form = forms.AddToBasketForm(\n            basket=basket, product=product, data=data)\n        self.assertFalse(form.is_valid())\n        self.assertEqual('Not on your nelly!', form.errors['__all__'][0])\n\n    def test_mixed_currency_baskets_are_not_permitted(self):\n        # Ensure basket is one currency\n        basket = mock.Mock()\n        basket.currency = 'GBP'\n        basket.num_items = 1\n\n        # Ensure new product has different currency\n        info = mock.Mock()\n        info.price.currency = 'EUR'\n        basket.strategy.fetch_for_product = mock.Mock(\n            return_value=info)\n\n        product = factories.ProductFactory()\n\n        data = {'quantity': 1}\n        form = forms.AddToBasketForm(\n            basket=basket, product=product, data=data)\n        self.assertFalse(form.is_valid())\n\n    def test_cannot_add_a_product_without_price(self):\n        basket = factories.BasketFactory()\n        product = factories.create_product(price=None)\n\n        data = {'quantity': 1}\n        form = forms.AddToBasketForm(\n            basket=basket, product=product, data=data)\n        self.assertFalse(form.is_valid())\n        self.assertEqual(\n            form.errors['__all__'][0],\n            'This product cannot be added to the basket because a price '\n            'could not be determined for it.',\n        )\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0001_initial'),\n    ]\n\n    operations = [\n        migrations.RenameField(\n            model_name='useraddress',\n            old_name='num_orders',\n            new_name='num_orders_as_shipping_address',\n        ),\n        migrations.AddField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n    ]\n",
    "output": "from django.http import HttpResponse\nfrom django.test import TestCase\nfrom django.test.client import RequestFactory\nfrom django.contrib.auth.models import AnonymousUser\n\nfrom oscar.apps.basket import middleware\n\n\nclass TestBasketMiddleware(TestCase):\n\n    @staticmethod\n    def get_response_for_test(request):\n        return HttpResponse()\n\n    def setUp(self):\n        self.middleware = middleware.BasketMiddleware(self.get_response_for_test)\n        self.request = RequestFactory().get('/')\n        self.request.user = AnonymousUser()\n        self.middleware(self.request)\n\n    def test_basket_is_attached_to_request(self):\n        self.assertTrue(hasattr(self.request, 'basket'))\n\n    def test_strategy_is_attached_to_basket(self):\n        self.assertTrue(hasattr(self.request.basket, 'strategy'))\n\n    def test_strategy_is_attached_to_request(self):\n        self.assertTrue(hasattr(self.request, 'strategy'))\n\n    def test_get_cookie_basket_handles_invalid_signatures(self):\n        request_factory = RequestFactory()\n        request_factory.cookies['oscar_open_basket'] = '1:NOTAVALIDHASH'\n        request = request_factory.get('/')\n        request.cookies_to_delete = []\n\n        cookie_basket = self.middleware.get_cookie_basket(\"oscar_open_basket\", request, None)\n\n        self.assertEqual(None, cookie_basket)\n        self.assertIn(\"oscar_open_basket\", request.cookies_to_delete)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0001_initial'),\n    ]\n\n    operations = [\n        migrations.RenameField(\n            model_name='useraddress',\n            old_name='num_orders',\n            new_name='num_orders_as_shipping_address',\n        ),\n        migrations.AddField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n    ]\n",
    "output": "# -*- coding: utf-8 -*-\nfrom decimal import Decimal as D\n\nfrom django.test import TestCase\n\nfrom oscar.apps.basket.models import Basket\nfrom oscar.apps.catalogue.models import Option\nfrom oscar.apps.partner import availability, prices, strategy\nfrom oscar.test import factories\nfrom oscar.test.factories import (\n    BasketFactory, BasketLineAttributeFactory, OptionFactory, ProductFactory)\n\n\nclass TestANewBasket(TestCase):\n\n    def setUp(self):\n        self.basket = Basket()\n        self.basket.strategy = strategy.Default()\n\n    def test_has_zero_lines(self):\n        self.assertEqual(0, self.basket.num_lines)\n\n    def test_has_zero_items(self):\n        self.assertEqual(0, self.basket.num_items)\n\n    def test_doesnt_contain_vouchers(self):\n        self.assertFalse(self.basket.contains_a_voucher)\n\n    def test_can_be_edited(self):\n        self.assertTrue(self.basket.can_be_edited)\n\n    def test_is_empty(self):\n        self.assertTrue(self.basket.is_empty)\n\n    def test_is_not_submitted(self):\n        self.assertFalse(self.basket.is_submitted)\n\n    def test_has_no_applied_offers(self):\n        self.assertEqual({}, self.basket.applied_offers())\n\n\nclass TestBasketLine(TestCase):\n\n    def test_description(self):\n        basket = BasketFactory()\n        product = ProductFactory(title=\"A product\")\n        basket.add_product(product)\n\n        line = basket.lines.first()\n        self.assertEqual(line.description, \"A product\")\n\n    def test_description_with_attributes(self):\n        basket = BasketFactory()\n        product = ProductFactory(title=\"A product\")\n        basket.add_product(product)\n\n        line = basket.lines.first()\n        BasketLineAttributeFactory(\n            line=line, value='\\u2603', option__name='with')\n        self.assertEqual(line.description, \"A product (with = '\\u2603')\")\n\n    def test_create_line_reference(self):\n        basket = BasketFactory()\n        product = ProductFactory(title=\"A product\")\n        option = OptionFactory(name=\"product_option\", code=\"product_option\")\n        option_product = ProductFactory(title='Asunci\u00f3n')\n        options = [{'option': option, 'value': option_product}]\n        basket.add_product(product, options=options)\n\n    def test_basket_lines_queryset_is_ordered(self):\n        # This is needed to make sure a formset is not performing the query\n        # again with an order_by clause (losing all calculated discounts)\n        basket = BasketFactory()\n        product = ProductFactory(title=\"A product\")\n        another_product = ProductFactory(title=\"Another product\")\n        basket.add_product(product)\n        basket.add_product(another_product)\n        queryset = basket.all_lines()\n        self.assertTrue(queryset.ordered)\n\n    def test_line_tax_for_zero_tax_strategies(self):\n        basket = Basket()\n        basket.strategy = strategy.Default()\n        product = factories.create_product()\n        # Tax for the default strategy will be 0\n        factories.create_stockrecord(\n            product, price_excl_tax=D('75.00'), num_in_stock=10)\n        basket.add(product, 1)\n\n        self.assertEqual(basket.lines.first().line_tax, D('0'))\n\n    def test_line_tax_for_unknown_tax_strategies(self):\n\n        class UnknownTaxStrategy(strategy.Default):\n            \"\"\" A test strategy where the tax is not known \"\"\"\n\n            def pricing_policy(self, product, stockrecord):\n                return prices.FixedPrice('GBP', stockrecord.price_excl_tax, tax=None)\n\n        basket = Basket()\n        basket.strategy = UnknownTaxStrategy()\n        product = factories.create_product()\n        factories.create_stockrecord(product, num_in_stock=10)\n        basket.add(product, 1)\n\n        self.assertEqual(basket.lines.first().line_tax, None)\n\n\nclass TestAddingAProductToABasket(TestCase):\n\n    def setUp(self):\n        self.basket = Basket()\n        self.basket.strategy = strategy.Default()\n        self.product = factories.create_product()\n        self.record = factories.create_stockrecord(\n            currency='GBP',\n            product=self.product, price_excl_tax=D('10.00'))\n        self.purchase_info = factories.create_purchase_info(self.record)\n        self.basket.add(self.product)\n\n    def test_creates_a_line(self):\n        self.assertEqual(1, self.basket.num_lines)\n\n    def test_sets_line_prices(self):\n        line = self.basket.lines.all()[0]\n        self.assertEqual(line.price_incl_tax, self.purchase_info.price.incl_tax)\n        self.assertEqual(line.price_excl_tax, self.purchase_info.price.excl_tax)\n\n    def test_adding_negative_quantity(self):\n        self.assertEqual(1, self.basket.num_lines)\n        self.basket.add(self.product, quantity=4)\n        self.assertEqual(5, self.basket.line_quantity(self.product, self.record))\n        self.basket.add(self.product, quantity=-10)\n        self.assertEqual(0, self.basket.line_quantity(self.product, self.record))\n\n    def test_means_another_currency_product_cannot_be_added(self):\n        product = factories.create_product()\n        factories.create_stockrecord(\n            currency='USD', product=product, price_excl_tax=D('20.00'))\n        with self.assertRaises(ValueError):\n            self.basket.add(product)\n\n    def test_cannot_add_a_product_without_price(self):\n        product = factories.create_product(price=None)\n        with self.assertRaises(ValueError):\n            self.basket.add(product)\n\n\nclass TestANonEmptyBasket(TestCase):\n\n    def setUp(self):\n        self.basket = Basket()\n        self.basket.strategy = strategy.Default()\n        self.product = factories.create_product()\n        self.record = factories.create_stockrecord(\n            self.product, price_excl_tax=D('10.00'))\n        self.purchase_info = factories.create_purchase_info(self.record)\n        self.basket.add(self.product, 10)\n\n    def test_can_be_flushed(self):\n        self.basket.flush()\n        self.assertEqual(self.basket.num_items, 0)\n\n    def test_returns_correct_product_quantity(self):\n        self.assertEqual(10, self.basket.product_quantity(\n            self.product))\n\n    def test_returns_correct_line_quantity_for_existing_product_and_stockrecord(self):\n        self.assertEqual(10, self.basket.line_quantity(\n            self.product, self.record))\n\n    def test_returns_zero_line_quantity_for_alternative_stockrecord(self):\n        record = factories.create_stockrecord(\n            self.product, price_excl_tax=D('5.00'))\n        self.assertEqual(0, self.basket.line_quantity(\n            self.product, record))\n\n    def test_returns_zero_line_quantity_for_missing_product_and_stockrecord(self):\n        product = factories.create_product()\n        record = factories.create_stockrecord(\n            product, price_excl_tax=D('5.00'))\n        self.assertEqual(0, self.basket.line_quantity(\n            product, record))\n\n    def test_returns_correct_quantity_for_existing_product_and_stockrecord_and_options(self):\n        product = factories.create_product()\n        record = factories.create_stockrecord(\n            product, price_excl_tax=D('5.00'))\n        option = Option.objects.create(name=\"Message\")\n        options = [{\"option\": option, \"value\": \"2\"}]\n\n        self.basket.add(product, options=options)\n        self.assertEqual(0, self.basket.line_quantity(\n            product, record))\n        self.assertEqual(1, self.basket.line_quantity(\n            product, record, options))\n\n    def test_total_sums_product_totals(self):\n        product = factories.create_product()\n        factories.create_stockrecord(\n            product, price_excl_tax=D('5.00'))\n        self.basket.add(product, 1)\n        self.assertEqual(self.basket.total_excl_tax, 105)\n\n    def test_totals_for_free_products(self):\n        basket = Basket()\n        basket.strategy = strategy.Default()\n        # Add a zero-priced product to the basket\n        product = factories.create_product()\n        factories.create_stockrecord(\n            product, price_excl_tax=D('0.00'), num_in_stock=10)\n        basket.add(product, 1)\n\n        self.assertEqual(basket.lines.count(), 1)\n        self.assertEqual(basket.total_excl_tax, 0)\n        self.assertEqual(basket.total_incl_tax, 0)\n\n    def test_basket_prices_calculation_for_unavailable_pricing(self):\n        new_product = factories.create_product()\n        factories.create_stockrecord(\n            new_product, price_excl_tax=D('5.00'))\n        self.basket.add(new_product, 1)\n\n        class UnavailableProductStrategy(strategy.Default):\n            \"\"\" A test strategy that makes a specific product unavailable \"\"\"\n\n            def availability_policy(self, product, stockrecord):\n                if product == new_product:\n                    return availability.Unavailable()\n                return super().availability_policy(product, stockrecord)\n\n            def pricing_policy(self, product, stockrecord):\n                if product == new_product:\n                    return prices.Unavailable()\n                return super().pricing_policy(product, stockrecord)\n\n        self.basket.strategy = UnavailableProductStrategy()\n        line = self.basket.all_lines()[1]\n        self.assertEqual(line.get_warning(), \"'D\\xf9\\uff4d\\u03fb\\u03d2 title' is no longer available\")\n        self.assertIsNone(line.line_price_excl_tax)\n        self.assertIsNone(line.line_price_incl_tax)\n        self.assertIsNone(line.line_price_excl_tax_incl_discounts)\n        self.assertIsNone(line.line_price_incl_tax_incl_discounts)\n        self.assertIsNone(line.line_tax)\n        self.assertEqual(self.basket.total_excl_tax, 100)\n        self.assertEqual(self.basket.total_incl_tax, 100)\n        self.assertEqual(self.basket.total_excl_tax_excl_discounts, 100)\n        self.assertEqual(self.basket.total_incl_tax_excl_discounts, 100)\n\n    def test_max_allowed_quantity(self):\n        self.basket.add_product(self.product, quantity=3)\n\n        # max allowed here is 7 (20-10+3)\n        with self.settings(OSCAR_MAX_BASKET_QUANTITY_THRESHOLD=20):\n            max_allowed, basket_threshold = self.basket.max_allowed_quantity()\n            self.assertEqual(max_allowed, 7)\n            self.assertEqual(basket_threshold, 20)\n\n        # but we can also completely disable the threshold\n        with self.settings(OSCAR_MAX_BASKET_QUANTITY_THRESHOLD=None):\n            max_allowed, basket_threshold = self.basket.max_allowed_quantity()\n            self.assertEqual(max_allowed, None)\n            self.assertEqual(basket_threshold, None)\n\n    def test_is_quantity_allowed(self):\n        with self.settings(OSCAR_MAX_BASKET_QUANTITY_THRESHOLD=20):\n            # 7 or below is possible\n            allowed, message = self.basket.is_quantity_allowed(qty=7)\n            self.assertTrue(allowed)\n            self.assertIsNone(message)\n            # but above it's not\n            allowed, message = self.basket.is_quantity_allowed(qty=11)\n            self.assertFalse(allowed)\n            self.assertIsNotNone(message)\n\n        with self.settings(OSCAR_MAX_BASKET_QUANTITY_THRESHOLD=None):\n            # with the treshold disabled all quantities are possible\n            allowed, message = self.basket.is_quantity_allowed(qty=7)\n            self.assertTrue(allowed)\n            self.assertIsNone(message)\n            allowed, message = self.basket.is_quantity_allowed(qty=5000)\n            self.assertTrue(allowed)\n            self.assertIsNone(message)\n\n\nclass TestMergingTwoBaskets(TestCase):\n\n    def setUp(self):\n        self.product = factories.create_product()\n        self.record = factories.create_stockrecord(\n            self.product, price_excl_tax=D('10.00'))\n        self.purchase_info = factories.create_purchase_info(self.record)\n\n        self.main_basket = Basket()\n        self.main_basket.strategy = strategy.Default()\n        self.main_basket.add(self.product, quantity=2)\n\n        self.merge_basket = Basket()\n        self.merge_basket.strategy = strategy.Default()\n        self.merge_basket.add(self.product, quantity=1)\n\n        self.main_basket.merge(self.merge_basket)\n\n    def test_doesnt_sum_quantities(self):\n        self.assertEqual(1, self.main_basket.num_lines)\n\n    def test_changes_status_of_merge_basket(self):\n        self.assertEqual(Basket.MERGED, self.merge_basket.status)\n\n\nclass TestASubmittedBasket(TestCase):\n\n    def setUp(self):\n        self.basket = Basket()\n        self.basket.strategy = strategy.Default()\n        self.basket.submit()\n\n    def test_has_correct_status(self):\n        self.assertTrue(self.basket.is_submitted)\n\n    def test_can_be_edited(self):\n        self.assertFalse(self.basket.can_be_edited)\n\n\nclass TestMergingAVoucherBasket(TestCase):\n\n    def test_transfers_vouchers_to_new_basket(self):\n        baskets = [factories.BasketFactory(), factories.BasketFactory()]\n        voucher = factories.VoucherFactory()\n        baskets[0].vouchers.add(voucher)\n        baskets[1].merge(baskets[0])\n\n        self.assertEqual(1, baskets[1].vouchers.all().count())\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0001_initial'),\n    ]\n\n    operations = [\n        migrations.RenameField(\n            model_name='useraddress',\n            old_name='num_orders',\n            new_name='num_orders_as_shipping_address',\n        ),\n        migrations.AddField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n    ]\n",
    "output": "import datetime\n\nfrom django.test import TestCase\n\nfrom oscar.apps.basket.reports import (\n    OpenBasketReportGenerator, SubmittedBasketReportGenerator)\n\n\nclass TestBasketReports(TestCase):\n\n    def test_open_report_doesnt_error(self):\n        data = {\n            'start_date': datetime.date(2012, 5, 1),\n            'end_date': datetime.date(2012, 5, 17),\n            'formatter': 'CSV'\n        }\n        generator = OpenBasketReportGenerator(**data)\n        generator.generate()\n\n    def test_submitted_report_doesnt_error(self):\n        data = {\n            'start_date': datetime.date(2012, 5, 1),\n            'end_date': datetime.date(2012, 5, 17),\n            'formatter': 'CSV'\n        }\n        generator = SubmittedBasketReportGenerator(**data)\n        generator.generate()\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0001_initial'),\n    ]\n\n    operations = [\n        migrations.RenameField(\n            model_name='useraddress',\n            old_name='num_orders',\n            new_name='num_orders_as_shipping_address',\n        ),\n        migrations.AddField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n    ]\n",
    "output": "\nimport pytest\nfrom oscar.test.factories import (\n    BasketFactory, ConditionalOfferFactory, ProductFactory)\n\n\n@pytest.fixture\ndef filled_basket():\n    basket = BasketFactory()\n    product1 = ProductFactory()\n    product2 = ProductFactory()\n    basket.add_product(product1, quantity=10)\n    basket.add_product(product2, quantity=20)\n    return basket\n\n\n@pytest.mark.django_db\nclass TestLineOfferConsumer(object):\n\n    def test_consumed_no_offer(self, filled_basket):\n        for line in filled_basket.all_lines():\n            assert line.consumer.consumed() == 0\n\n    def test_consumed_with_offer(self, filled_basket):\n        offer1 = ConditionalOfferFactory(name='offer1')\n        offer2 = ConditionalOfferFactory(name='offer2')\n        offer1.exclusive = False\n        offer2.exclusive = False\n\n        for line in filled_basket.all_lines():\n            assert line.consumer.consumed(offer1) == 0\n            assert line.consumer.consumed(offer2) == 0\n\n        line1 = filled_basket.all_lines()[0]\n        line2 = filled_basket.all_lines()[1]\n\n        line1.consumer.consume(1, offer1)\n        assert line1.consumer.consumed() == 1\n        assert line1.consumer.consumed(offer1) == 1\n        assert line1.consumer.consumed(offer2) == 0\n\n        line1.consumer.consume(9, offer1)\n        assert line1.consumer.consumed() == line1.quantity\n        assert line1.consumer.consumed(offer1) == line1.quantity\n        assert line1.consumer.consumed(offer2) == 0\n\n        line1.consumer.consume(99, offer1)\n        assert line1.consumer.consumed(offer1) == line1.quantity\n        assert line1.consumer.consumed(offer2) == 0\n\n        line1.consumer.consume(1, offer2)\n        line2.consumer.consume(1, offer2)\n\n        assert line1.consumer.consumed(offer2) == 1\n        assert line2.consumer.consumed(offer2) == 1\n\n    def test_consume(self, filled_basket):\n        line = filled_basket.all_lines()[0]\n        line.consume(1)\n        assert line.quantity_with_discount == 1\n        line.consume(99)\n        assert line.quantity_with_discount == 10\n\n    def test_consumed_with_exclusive_offer(self, filled_basket):\n        offer1 = ConditionalOfferFactory(name='offer1')\n        offer2 = ConditionalOfferFactory(name='offer2')\n        offer3 = ConditionalOfferFactory(name='offer3')\n        offer1.exclusive = True\n        offer2.exclusive = False\n        offer3.exclusive = False\n\n        for line in filled_basket.all_lines():\n            assert line.consumer.consumed(offer1) == 0\n            assert line.consumer.consumed(offer2) == 0\n\n        line1 = filled_basket.all_lines()[0]\n        line2 = filled_basket.all_lines()[1]\n\n        line1.consumer.consume(1, offer1)\n        assert line1.is_available_for_offer_discount(offer2) is True\n\n        line1.consumer.consume(99, offer1)\n        assert line1.is_available_for_offer_discount(offer2) is False\n\n        line2.consumer.consume(1, offer2)\n        assert line2.is_available_for_offer_discount(offer1) is True\n\n        line2.consumer.consume(99, offer2)\n        assert line2.is_available_for_offer_discount(offer1) is False\n        assert line2.is_available_for_offer_discount(offer3) is True\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0001_initial'),\n    ]\n\n    operations = [\n        migrations.RenameField(\n            model_name='useraddress',\n            old_name='num_orders',\n            new_name='num_orders_as_shipping_address',\n        ),\n        migrations.AddField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n    ]\n",
    "output": "from django.contrib.messages import get_messages\nfrom django.test import TestCase\nfrom django.urls import reverse\n\nfrom oscar.apps.basket import views\nfrom oscar.test import factories\nfrom tests.fixtures import RequestFactory\n\n\nclass TestVoucherAddView(TestCase):\n    def test_get(self):\n        request = RequestFactory().get('/')\n\n        view = views.VoucherAddView.as_view()\n        response = view(request)\n\n        self.assertEqual(response.status_code, 302)\n\n    def _get_voucher_message(self, request):\n        return '\\n'.join(str(m.message) for m in get_messages(request))\n\n    def test_post_valid(self):\n        voucher = factories.VoucherFactory()\n        self.assertTrue(voucher.is_active())\n\n        data = {\n            'code': voucher.code\n        }\n        request = RequestFactory().post('/', data=data)\n        request.basket.save()\n\n        view = views.VoucherAddView.as_view()\n        response = view(request)\n        self.assertEqual(response.status_code, 302)\n\n        voucher = voucher.__class__.objects.get(pk=voucher.pk)\n        self.assertEqual(voucher.num_basket_additions, 1, msg=self._get_voucher_message(request))\n\n    def test_post_valid_from_set(self):\n        voucherset = factories.VoucherSetFactory()\n        voucher = voucherset.vouchers.first()\n\n        self.assertTrue(voucher.is_active())\n\n        data = {\n            'code': voucher.code\n        }\n        request = RequestFactory().post('/', data=data)\n        request.basket.save()\n\n        view = views.VoucherAddView.as_view()\n        response = view(request)\n        self.assertEqual(response.status_code, 302)\n\n        voucher = voucher.__class__.objects.get(pk=voucher.pk)\n        self.assertEqual(voucher.num_basket_additions, 1, msg=self._get_voucher_message(request))\n\n        self.assertEqual(voucherset.num_basket_additions, 1)\n\n\nclass TestVoucherRemoveView(TestCase):\n    def test_post_valid(self):\n        voucher = factories.VoucherFactory(num_basket_additions=5)\n\n        data = {\n            'code': voucher.code\n        }\n        request = RequestFactory().post('/', data=data)\n        request.basket.save()\n        request.basket.vouchers.add(voucher)\n\n        view = views.VoucherRemoveView.as_view()\n        response = view(request, pk=voucher.pk)\n        self.assertEqual(response.status_code, 302)\n\n        voucher = voucher.__class__.objects.get(pk=voucher.pk)\n        self.assertEqual(voucher.num_basket_additions, 4)\n\n    def test_post_with_missing_voucher(self):\n        \"\"\" If the voucher is missing, verify the view queues a message and redirects. \"\"\"\n        pk = '12345'\n        view = views.VoucherRemoveView.as_view()\n        request = RequestFactory().post('/')\n        request.basket.save()\n        response = view(request, pk=pk)\n\n        self.assertEqual(response.status_code, 302)\n\n        actual = list(get_messages(request))[-1].message\n        expected = \"No voucher found with id '{}'\".format(pk)\n        self.assertEqual(actual, expected)\n\n\nclass TestBasketSummaryView(TestCase):\n    def setUp(self):\n        self.url = reverse('basket:summary')\n        self.country = factories.CountryFactory()\n        self.user = factories.UserFactory()\n\n    def test_default_shipping_address(self):\n        user_address = factories.UserAddressFactory(\n            country=self.country, user=self.user, is_default_for_shipping=True\n        )\n        request = RequestFactory().get(self.url, user=self.user)\n        view = views.BasketView(request=request)\n        self.assertEquals(view.get_default_shipping_address(), user_address)\n\n    def test_default_shipping_address_for_anonymous_user(self):\n        request = RequestFactory().get(self.url)\n        view = views.BasketView(request=request)\n        self.assertIsNone(view.get_default_shipping_address())\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0001_initial'),\n    ]\n\n    operations = [\n        migrations.RenameField(\n            model_name='useraddress',\n            old_name='num_orders',\n            new_name='num_orders_as_shipping_address',\n        ),\n        migrations.AddField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n    ]\n",
    "output": ""
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0001_initial'),\n    ]\n\n    operations = [\n        migrations.RenameField(\n            model_name='useraddress',\n            old_name='num_orders',\n            new_name='num_orders_as_shipping_address',\n        ),\n        migrations.AddField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n    ]\n",
    "output": "from decimal import Decimal as D\nfrom unittest import mock\n\nfrom django.test import TestCase\n\nfrom oscar.apps.checkout import calculators\nfrom oscar.core import prices\n\n\nclass TestOrderTotalCalculator(TestCase):\n\n    def setUp(self):\n        self.calculator = calculators.OrderTotalCalculator()\n\n    def test_returns_correct_totals_when_tax_is_not_known(self):\n        basket = mock.Mock()\n        basket.total_excl_tax = D('10.00')\n        basket.is_tax_known = False\n\n        shipping_charge = prices.Price(\n            currency=basket.currency, excl_tax=D('5.00'))\n\n        total = self.calculator.calculate(basket, shipping_charge)\n\n        self.assertIsInstance(total, prices.Price)\n        self.assertEqual(D('10.00') + D('5.00'), total.excl_tax)\n        self.assertFalse(total.is_tax_known)\n\n    def test_returns_correct_totals_when_tax_is_known(self):\n        basket = mock.Mock()\n        basket.total_excl_tax = D('10.00')\n        basket.total_incl_tax = D('12.00')\n        basket.is_tax_known = True\n\n        shipping_charge = prices.Price(\n            currency=basket.currency, excl_tax=D('5.00'),\n            tax=D('0.50'))\n\n        total = self.calculator.calculate(basket, shipping_charge)\n\n        self.assertIsInstance(total, prices.Price)\n        self.assertEqual(D('10.00') + D('5.00'), total.excl_tax)\n        self.assertTrue(total.is_tax_known)\n        self.assertEqual(D('12.00') + D('5.50'), total.incl_tax)\n        self.assertEqual(D('2.00') + D('0.50'), total.tax)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0001_initial'),\n    ]\n\n    operations = [\n        migrations.RenameField(\n            model_name='useraddress',\n            old_name='num_orders',\n            new_name='num_orders_as_shipping_address',\n        ),\n        migrations.AddField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n    ]\n",
    "output": "# coding=utf-8\nfrom django.test import TestCase\nfrom django.test.utils import override_settings\n\nfrom oscar.apps.address.models import Country\nfrom oscar.apps.checkout.forms import ShippingAddressForm\nfrom oscar.test.factories import CountryFactory\n\n\nclass AnotherShippingAddressForm(ShippingAddressForm):\n    phone_number_fields = {\n        'phone_number': {\n            'required': False,\n            'help_text': '',\n            'max_length': 32,\n            'label': 'Phone number'\n        },\n        'another_phone_number': {\n            'required': False,\n            'help_text': 'Another phone number help text',\n            'max_length': 32,\n            'label': 'Another phone number'\n        },\n    }\n\n\nclass TestShippingAddressForm(TestCase):\n    minimal_data = {\n        'first_name': 'B\u00e4rry',\n        'last_name': 'Chuckle',\n        'line1': '1 King St',\n        'line4': 'Goth\u00e1m',\n        'postcode': 'N1 7RR'\n    }\n\n    def setUp(self):\n        CountryFactory(iso_3166_1_a2='GB', is_shipping_country=True)\n\n    def test_removes_country_field(self):\n        self.assertTrue('country' not in ShippingAddressForm().fields)\n\n    def test_keeps_country_field(self):\n        CountryFactory(iso_3166_1_a2='DE', is_shipping_country=True)\n        self.assertTrue('country' in ShippingAddressForm().fields)\n\n    @override_settings(OSCAR_REQUIRED_ADDRESS_FIELDS=('last_name', 'postcode'))\n    def test_required_fields_validated(self):\n        form = ShippingAddressForm()\n        self.assertTrue(form.fields['last_name'].required)\n        self.assertTrue(form.fields['postcode'].required)\n        self.assertFalse(form.fields['first_name'].required)\n        self.assertFalse(form.fields['line2'].required)\n        self.assertFalse(form.fields['line3'].required)\n        self.assertFalse(form.fields['line4'].required)\n\n    @override_settings(OSCAR_REQUIRED_ADDRESS_FIELDS=('phone_number',))\n    def test_required_phone_number_validated(self):\n        # This needs a separate test because of the logic in PhoneNumberMixin\n        form = ShippingAddressForm()\n        self.assertTrue(form.fields['phone_number'].required)\n\n    # Tests where the country field is hidden\n\n    def test_is_valid_without_phone_number(self):\n        self.assertTrue(ShippingAddressForm(self.minimal_data).is_valid())\n\n    def test_only_accepts_british_local_phone_number(self):\n        data = self.minimal_data.copy()\n        data['phone_number'] = '07 914721389'  # local UK number\n        self.assertTrue(ShippingAddressForm(data).is_valid())\n\n        data['phone_number'] = '0176 968 426 71'  # local German number\n        self.assertFalse(ShippingAddressForm(data).is_valid())\n\n    def test_only_accepts_british_local_phone_numbers(self):\n        data = self.minimal_data.copy()\n        # Both numbers are British local numbers\n        data['phone_number'] = '07 914721389'\n        data['another_phone_number'] = '0344493 0787'  # British Airways\n        self.assertTrue(AnotherShippingAddressForm(data).is_valid())\n\n        # Both numbers are local German numbers\n        data['phone_number'] = '0176 968 426 71'\n        data['another_phone_number'] = '07032 15 49225'  # IBM Germany\n        self.assertFalse(AnotherShippingAddressForm(data).is_valid())\n\n        # One number is British number, another is German number\n        data['phone_number'] = '07 914721389'\n        data['another_phone_number'] = '0176 968 426 71'\n        self.assertFalse(AnotherShippingAddressForm(data).is_valid())\n\n        # As previous case, but numbers are reversed\n        data['phone_number'] = '0176 968 426 71'\n        data['another_phone_number'] = '07 914721389'\n        self.assertFalse(AnotherShippingAddressForm(data).is_valid())\n\n    def test_is_valid_with_international_phone_number(self):\n        data = self.minimal_data.copy()\n        data['phone_number'] = '+49 176 968426 71'\n        form = ShippingAddressForm(data)\n        self.assertTrue(form.is_valid())\n\n    def test_is_valid_with_international_phone_numbers(self):\n        data = self.minimal_data.copy()\n        data['phone_number'] = '+49 176 968426 71'\n        data['another_phone_number'] = '+49-1805-426452'\n        form = AnotherShippingAddressForm(data)\n        self.assertTrue(form.is_valid())\n\n    # Tests where the country field exists\n\n    def test_needs_country_data(self):\n        CountryFactory(iso_3166_1_a2='DE', is_shipping_country=True)\n\n        self.assertFalse(ShippingAddressForm(self.minimal_data).is_valid())\n\n        data = self.minimal_data.copy()\n        data['country'] = Country.objects.get(iso_3166_1_a2='GB').pk\n        self.assertTrue(ShippingAddressForm(data).is_valid())\n\n    def test_only_accepts_local_phone_number_when_country_matches(self):\n        CountryFactory(iso_3166_1_a2='DE', is_shipping_country=True)\n\n        data = self.minimal_data.copy()\n        data['phone_number'] = '07 914721389'  # local UK number\n\n        data['country'] = Country.objects.get(iso_3166_1_a2='DE').pk\n        self.assertFalse(ShippingAddressForm(data).is_valid())\n\n        data['country'] = Country.objects.get(iso_3166_1_a2='GB').pk\n        self.assertTrue(ShippingAddressForm(data).is_valid())\n\n    def test_only_accepts_local_phone_numbers_when_country_matches(self):\n        CountryFactory(iso_3166_1_a2='DE', is_shipping_country=True)\n        data = self.minimal_data.copy()\n        # Local UK numbers\n        data['phone_number'] = '07 914721389'\n        data['another_phone_number'] = '0344493 0787'\n\n        data['country'] = Country.objects.get(iso_3166_1_a2='DE').pk\n        self.assertFalse(ShippingAddressForm(data).is_valid())\n\n        data['country'] = Country.objects.get(iso_3166_1_a2='GB').pk\n        self.assertTrue(ShippingAddressForm(data).is_valid())\n\n    @override_settings(OSCAR_REQUIRED_ADDRESS_FIELDS=('phone_number',))\n    def test_local_phone_number_invalid_without_country(self):\n        # Add another country, so we have two.\n        CountryFactory(iso_3166_1_a2='DE', is_shipping_country=True)\n        data = self.minimal_data.copy()\n        data['phone_number'] = '07 914721389'\n        # User hasn't selected a country. Because there are multiple country\n        # choices we should not accept the local number.\n        form = ShippingAddressForm(data)\n        self.assertFalse(form.is_valid())\n        self.assertIn('phone_number', form.errors)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0001_initial'),\n    ]\n\n    operations = [\n        migrations.RenameField(\n            model_name='useraddress',\n            old_name='num_orders',\n            new_name='num_orders_as_shipping_address',\n        ),\n        migrations.AddField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n    ]\n",
    "output": "from decimal import Decimal as D\nfrom unittest import mock\n\nfrom django.http import HttpRequest\nfrom django.test import TestCase\nfrom django.test.utils import override_settings\n\nfrom oscar.apps.checkout.calculators import OrderTotalCalculator\nfrom oscar.apps.checkout.mixins import CheckoutSessionMixin, OrderPlacementMixin\nfrom oscar.apps.checkout.exceptions import FailedPreCondition\nfrom oscar.core.loading import get_model\nfrom oscar.test import factories\nfrom oscar.test.basket import add_product\nfrom oscar.test.utils import RequestFactory\nfrom oscar.apps.shipping.methods import FixedPrice, Free\n\n\nOrder = get_model('order', 'Order')\n\n\nclass TestOrderPlacementMixin(TestCase):\n\n    def test_returns_none_when_no_shipping_address_passed_to_creation_method(self):\n        address = OrderPlacementMixin().create_shipping_address(\n            user=mock.Mock(), shipping_address=None)\n        self.assertEqual(address, None)\n\n    def test_update_address_book(self):\n        basket = factories.create_basket(empty=True)\n        user = factories.UserFactory()\n        add_product(basket, D('12.00'))\n        shipping_method = FixedPrice(D('5.00'), D('5.00'))\n\n        billing_address = factories.BillingAddressFactory(line1='1 Boardwalk Place',\n                                                          line2='Trafalgar Way',\n                                                          line3='Tower Hamlets',\n                                                          line4='London')\n        shipping_address = factories.ShippingAddressFactory(line1='Knightsbridge',\n                                                            line2='159',\n                                                            line4='London')\n        shipping_charge = shipping_method.calculate(basket)\n        order_total = OrderTotalCalculator().calculate(basket, shipping_charge)\n\n        order_submission_data = {'user': user,\n                                 'order_number': '12345',\n                                 'basket': basket,\n                                 'shipping_address': shipping_address,\n                                 'shipping_method': shipping_method,\n                                 'shipping_charge': shipping_charge,\n                                 'billing_address': billing_address,\n                                 'order_total': order_total}\n        OrderPlacementMixin().place_order(**order_submission_data)\n\n        self.assertEqual(user.addresses.filter(hash=billing_address.generate_hash()).count(), 1)\n        self.assertEqual(user.addresses.filter(hash=shipping_address.generate_hash()).count(), 1)\n\n        user_billing_address = user.addresses.get(hash=billing_address.generate_hash())\n        user_shipping_address = user.addresses.get(hash=shipping_address.generate_hash())\n        self.assertEqual(user_billing_address.num_orders_as_billing_address, 1)\n        self.assertEqual(user_shipping_address.num_orders_as_shipping_address, 1)\n\n        order_submission_data['order_number'] = '12346'\n\n        OrderPlacementMixin().place_order(**order_submission_data)\n\n        user_billing_address = user.addresses.get(hash=billing_address.generate_hash())\n        user_shipping_address = user.addresses.get(hash=shipping_address.generate_hash())\n        self.assertEqual(user_billing_address.num_orders_as_billing_address, 2)\n        self.assertEqual(user_shipping_address.num_orders_as_shipping_address, 2)\n\n        order_submission_data.pop('billing_address', None)\n        order_submission_data['order_number'] = '123457'\n        OrderPlacementMixin().place_order(**order_submission_data)\n\n        user_billing_address = user.addresses.get(hash=billing_address.generate_hash())\n        user_shipping_address = user.addresses.get(hash=shipping_address.generate_hash())\n        self.assertEqual(user_billing_address.num_orders_as_billing_address, 2)\n        self.assertEqual(user_shipping_address.num_orders_as_shipping_address, 3)\n\n        shipping_address.line2 = '160'\n        order_submission_data['billing_address'] = billing_address\n        order_submission_data['order_number'] = '123458'\n        OrderPlacementMixin().place_order(**order_submission_data)\n\n        user_billing_address = user.addresses.get(hash=billing_address.generate_hash())\n        user_shipping_address = user.addresses.get(hash=shipping_address.generate_hash())\n        self.assertEqual(user_billing_address.num_orders_as_billing_address, 3)\n        self.assertEqual(user_shipping_address.num_orders_as_shipping_address, 1)\n\n    @override_settings(SITE_ID='')\n    def test_multi_site(self):\n        basket = factories.create_basket(empty=True)\n        site1 = factories.SiteFactory()\n        site2 = factories.SiteFactory()\n        request = HttpRequest()\n        request.META['SERVER_PORT'] = 80\n        request.META['SERVER_NAME'] = site1.domain\n        user = factories.UserFactory()\n        add_product(basket, D('12.00'))\n        shipping_method = Free()\n        shipping_charge = shipping_method.calculate(basket)\n        order_total = OrderTotalCalculator().calculate(basket, shipping_charge)\n\n        billing_address = factories.BillingAddressFactory()\n        shipping_address = factories.ShippingAddressFactory()\n        order_submission_data = {'user': user,\n                                 'order_number': '12345',\n                                 'basket': basket,\n                                 'shipping_method': shipping_method,\n                                 'shipping_charge': shipping_charge,\n                                 'order_total': order_total,\n                                 'billing_address': billing_address,\n                                 'shipping_address': shipping_address,\n                                 'request': request}\n        OrderPlacementMixin().place_order(**order_submission_data)\n        order1 = Order.objects.get(number='12345')\n        self.assertEqual(order1.site, site1)\n\n        add_product(basket, D('12.00'))\n        request.META['SERVER_NAME'] = site2.domain\n        order_submission_data['order_number'] = '12346'\n        order_submission_data['request'] = request\n        OrderPlacementMixin().place_order(**order_submission_data)\n        order2 = Order.objects.get(number='12346')\n        self.assertEqual(order2.site, site2)\n\n    def test_multiple_payment_events(self):\n        basket = factories.create_basket(empty=True)\n        user = factories.UserFactory()\n        add_product(basket, D('100.00'))\n        order_placement = OrderPlacementMixin()\n        order_placement.add_payment_event('Gift Card Payment', D('10'))\n        order_placement.add_payment_event('Credit Card Payment', D('90'))\n        shipping_method = Free()\n        shipping_charge = shipping_method.calculate(basket)\n        order_total = OrderTotalCalculator().calculate(basket, shipping_charge)\n\n        billing_address = factories.BillingAddressFactory()\n        shipping_address = factories.ShippingAddressFactory()\n        order_submission_data = {'user': user,\n                                 'order_number': '12345',\n                                 'basket': basket,\n                                 'shipping_method': shipping_method,\n                                 'shipping_charge': shipping_charge,\n                                 'order_total': order_total,\n                                 'billing_address': billing_address,\n                                 'shipping_address': shipping_address}\n        order_placement.place_order(**order_submission_data)\n        order1 = Order.objects.get(number='12345')\n        self.assertEqual(order1.payment_events.count(), 2)\n        event1 = order1.payment_events.all()[0]\n        event2 = order1.payment_events.all()[1]\n        self.assertEqual(event1.event_type.name, 'Credit Card Payment')\n        self.assertEqual(event1.amount, D('90'))\n        self.assertEqual(event1.lines.count(), 1)\n        self.assertEqual(event2.event_type.name, 'Gift Card Payment')\n        self.assertEqual(event2.amount, D('10'))\n        self.assertEqual(event2.lines.count(), 1)\n\n\nclass TestCheckoutSessionMixin(TestCase):\n\n    def setUp(self):\n        self.request = RequestFactory().get('/')\n        self.product = factories.create_product(num_in_stock=10)\n        self.stock_record = self.product.stockrecords.first()\n\n    def add_product_to_basket(self, product, quantity=1):\n        self.request.basket.add_product(product, quantity=quantity)\n        self.assertEqual(len(self.request.basket.all_lines()), 1)\n        self.assertEqual(self.request.basket.all_lines()[0].product, product)\n\n    def test_check_basket_is_valid_no_stock_available(self):\n        self.add_product_to_basket(self.product)\n        CheckoutSessionMixin().check_basket_is_valid(self.request)\n        self.stock_record.allocate(10)\n        self.stock_record.save()\n        with self.assertRaises(FailedPreCondition):\n            CheckoutSessionMixin().check_basket_is_valid(self.request)\n\n    def test_check_basket_is_valid_stock_exceeded(self):\n        self.add_product_to_basket(self.product)\n        CheckoutSessionMixin().check_basket_is_valid(self.request)\n        self.request.basket.add_product(self.product, quantity=11)\n        with self.assertRaises(FailedPreCondition):\n            CheckoutSessionMixin().check_basket_is_valid(self.request)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0001_initial'),\n    ]\n\n    operations = [\n        migrations.RenameField(\n            model_name='useraddress',\n            old_name='num_orders',\n            new_name='num_orders_as_shipping_address',\n        ),\n        migrations.AddField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n    ]\n",
    "output": "from unittest import mock\n\nfrom django.test import TestCase\nfrom django.test.client import RequestFactory\nfrom django.contrib.sessions.middleware import SessionMiddleware\n\nfrom oscar.apps.checkout.utils import CheckoutSessionData\n\n\nclass TestCheckoutSession(TestCase):\n    \"\"\"\n    oscar.apps.checkout.utils.CheckoutSessionData\n    \"\"\"\n\n    def setUp(self):\n        request = RequestFactory().get('/')\n        SessionMiddleware().process_request(request)\n        self.session_data = CheckoutSessionData(request)\n\n    def test_allows_data_to_be_written_and_read_out(self):\n        self.session_data._set('namespace', 'key', 'value')\n        self.assertEqual('value', self.session_data._get('namespace', 'key'))\n\n    def test_allows_set_data_can_be_unset(self):\n        self.session_data._set('namespace', 'key', 'value')\n        self.session_data._unset('namespace', 'key')\n        self.assertIsNone(self.session_data._get('namespace', 'key'))\n\n    def test_stores_guest_email(self):\n        self.session_data.set_guest_email('a@a.com')\n        self.assertEqual('a@a.com', self.session_data.get_guest_email())\n\n    def test_allows_a_namespace_to_be_flushed(self):\n        self.session_data._set('ns', 'a', 1)\n        self.session_data._set('ns', 'b', 2)\n        self.session_data._flush_namespace('ns')\n        self.assertIsNone(self.session_data._get('ns', 'a'))\n        self.assertIsNone(self.session_data._get('ns', 'b'))\n\n    def test_allows_bill_to_user_address(self):\n        address = mock.Mock()\n        address.id = 1\n        self.session_data.bill_to_user_address(address)\n        self.assertEqual(1, self.session_data.billing_user_address_id())\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0001_initial'),\n    ]\n\n    operations = [\n        migrations.RenameField(\n            model_name='useraddress',\n            old_name='num_orders',\n            new_name='num_orders_as_shipping_address',\n        ),\n        migrations.AddField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n    ]\n",
    "output": "from django.test import TestCase\nfrom django.test.utils import override_settings\nfrom django.urls import reverse\n\nfrom oscar.test.factories import OrderFactory\n\n\nclass ThankYouViewTestCase(TestCase):\n\n    @override_settings(OSCAR_ALLOW_ANON_CHECKOUT=True)\n    def test_analytics_event_triggered_only_on_first_view(self):\n        order = OrderFactory()\n        session = self.client.session\n        # Put the order ID in the session, mimicking a completed order,\n        # so that we can reach the thank you page.\n        session['checkout_order_id'] = order.pk\n        session.save()\n\n        r1 = self.client.get(reverse('checkout:thank-you'), follow=True)\n        self.assertTrue(r1.context['send_analytics_event'])\n\n        # Request the view a second time\n        r2 = self.client.get(reverse('checkout:thank-you'), follow=True)\n        self.assertFalse(r2.context['send_analytics_event'])\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0001_initial'),\n    ]\n\n    operations = [\n        migrations.RenameField(\n            model_name='useraddress',\n            old_name='num_orders',\n            new_name='num_orders_as_shipping_address',\n        ),\n        migrations.AddField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n    ]\n",
    "output": ""
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0001_initial'),\n    ]\n\n    operations = [\n        migrations.RenameField(\n            model_name='useraddress',\n            old_name='num_orders',\n            new_name='num_orders_as_shipping_address',\n        ),\n        migrations.AddField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n    ]\n",
    "output": "# coding=utf-8\n\"\"\"\nAutoSlugField taken from django-extensions at\n15d3eb305957cee4768dd86e44df1bdad341a10e\nUses Oscar's slugify function instead of Django's\n\nCopyright (c) 2007 Michael Trier\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\"\"\nfrom django.db import models\nfrom django.test import TestCase\nfrom django.test.utils import override_settings\n\nfrom oscar.core.loading import get_model\n\nSluggedTestModel = get_model('model_tests_app', 'sluggedtestmodel')\nChildSluggedTestModel = get_model('model_tests_app', 'childsluggedtestmodel')\nCustomSluggedTestModel = get_model('model_tests_app', 'CustomSluggedTestModel')\n\n\nclass AutoSlugFieldTest(TestCase):\n    def tearDown(self):\n        super().tearDown()\n\n        SluggedTestModel.objects.all().delete()\n\n    def test_auto_create_slug(self):\n        m = SluggedTestModel(title='foo')\n        m.save()\n        self.assertEqual(m.slug, 'foo')\n\n    def test_auto_create_next_slug(self):\n        m = SluggedTestModel(title='foo')\n        m.save()\n\n        m = SluggedTestModel(title='foo')\n        m.save()\n        self.assertEqual(m.slug, 'foo-2')\n\n    def test_auto_create_slug_with_number(self):\n        m = SluggedTestModel(title='foo 2012')\n        m.save()\n        self.assertEqual(m.slug, 'foo-2012')\n\n    def test_auto_update_slug_with_number(self):\n        m = SluggedTestModel(title='foo 2012')\n        m.save()\n        m.save()\n        self.assertEqual(m.slug, 'foo-2012')\n\n    def test_auto_create_unicode_slug(self):\n        with override_settings(OSCAR_SLUG_ALLOW_UNICODE=True):\n            m = SluggedTestModel(title='Ch\u00e2teau Margaux 1960')\n            m.save()\n            self.assertEqual(m.slug, 'ch\u00e2teau-margaux-1960')\n\n    def test_auto_create_next_unicode_slug(self):\n        with override_settings(OSCAR_SLUG_ALLOW_UNICODE=True):\n            m1 = SluggedTestModel(title='Ch\u00e2teau Margaux 1960')\n            m1.save()\n\n            m2 = SluggedTestModel(title='Ch\u00e2teau Margaux 1960')\n            m2.save()\n\n            self.assertEqual(m2.slug, 'ch\u00e2teau-margaux-1960-2')\n\n    def test_switch_to_unicode_slug(self):\n        m = SluggedTestModel(title='Ch\u00e2teau Margaux 1960')\n        m.save()\n        self.assertEqual(m.slug, 'chateau-margaux-1960')\n        with override_settings(OSCAR_SLUG_ALLOW_UNICODE=True):\n            m = SluggedTestModel(title='Ch\u00e2teau Margaux 1960')\n            m.save()\n            self.assertEqual(m.slug, 'ch\u00e2teau-margaux-1960')\n\n    def test_autoslugfield_allow_unicode_kwargs_precedence(self):\n        from oscar.models.fields import AutoSlugField\n        with override_settings(OSCAR_SLUG_ALLOW_UNICODE=True):\n            autoslug_field = AutoSlugField(populate_from='title', allow_unicode=False)\n            self.assertFalse(autoslug_field.allow_unicode)\n            autoslug_field = AutoSlugField(populate_from='title')\n            self.assertTrue(autoslug_field.allow_unicode)\n\n    def test_update_slug(self):\n        m = SluggedTestModel(title='foo')\n        m.save()\n        self.assertEqual(m.slug, 'foo')\n\n        # update m instance without using `save'\n        SluggedTestModel.objects.filter(pk=m.pk).update(slug='foo-2012')\n        # update m instance with new data from the db\n        m = SluggedTestModel.objects.get(pk=m.pk)\n        self.assertEqual(m.slug, 'foo-2012')\n\n        m.save()\n        self.assertEqual(m.title, 'foo')\n        self.assertEqual(m.slug, 'foo-2012')\n\n        # Check slug is not overwrite\n        m.title = 'bar'\n        m.save()\n        self.assertEqual(m.title, 'bar')\n        self.assertEqual(m.slug, 'foo-2012')\n\n    def test_simple_slug_source(self):\n        m = SluggedTestModel(title='-foo')\n        m.save()\n        self.assertEqual(m.slug, 'foo')\n\n        n = SluggedTestModel(title='-foo')\n        n.save()\n        self.assertEqual(n.slug, 'foo-2')\n\n        n.save()\n        self.assertEqual(n.slug, 'foo-2')\n\n    def test_empty_slug_source(self):\n        # regression test\n\n        m = SluggedTestModel(title='')\n        m.save()\n        self.assertEqual(m.slug, '-2')\n\n        n = SluggedTestModel(title='')\n        n.save()\n        self.assertEqual(n.slug, '-3')\n\n        n.save()\n        self.assertEqual(n.slug, '-3')\n\n    def test_inheritance_creates_next_slug(self):\n        m = SluggedTestModel(title='foo')\n        m.save()\n\n        n = ChildSluggedTestModel(title='foo')\n        n.save()\n        self.assertEqual(n.slug, 'foo-2')\n\n        o = SluggedTestModel(title='foo')\n        o.save()\n        self.assertEqual(o.slug, 'foo-3')\n\n    def test_separator_and_uppercase_options(self):\n        m = CustomSluggedTestModel(title=\"Password reset\")\n        m.save()\n        self.assertEqual(m.slug, 'PASSWORD_RESET')\n\n        m = CustomSluggedTestModel(title=\"Password reset\")\n        m.save()\n        self.assertEqual(m.slug, 'PASSWORD_RESET_2')\n\n    def test_migration(self):\n        \"\"\"\n        Tests making migrations with Django 1.7+'s migration framework\n        \"\"\"\n\n        import oscar\n        from django.db import migrations\n        from django.db.migrations.writer import MigrationWriter\n        from oscar.models.fields import AutoSlugField\n        fields = {\n            'autoslugfield': AutoSlugField(populate_from='otherfield'),\n        }\n\n        migration = type(str(\"Migration\"), (migrations.Migration,), {\n            \"operations\": [\n                migrations.CreateModel(\"MyModel\", tuple(fields.items()),\n                                       {'populate_from': 'otherfield'},\n                                       (models.Model,)),\n            ],\n        })\n        writer = MigrationWriter(migration)\n        output = writer.as_string()\n\n        if isinstance(output, str):\n            output = output.encode('utf-8')\n\n        # We don't test the output formatting - that's too fragile.\n        # Just make sure it runs for now, and that things look alright.\n        context = {\n            'migrations': migrations,\n            'oscar': oscar,\n        }\n        result = self.safe_exec(output, context=context)\n        self.assertIn(\"Migration\", result)\n\n    def safe_exec(self, string, value=None, context=None):\n        loc = {}\n        g = globals()\n        g.update(context)\n        try:\n            exec(string, g, loc)\n        except Exception as e:\n            if value:\n                self.fail(\"Could not exec %r (from value %r): %s\" % (\n                    string.strip(), value, e))\n            else:\n                self.fail(\"Could not exec %r: %s\" % (string.strip(), e))\n        return loc\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0001_initial'),\n    ]\n\n    operations = [\n        migrations.RenameField(\n            model_name='useraddress',\n            old_name='num_orders',\n            new_name='num_orders_as_shipping_address',\n        ),\n        migrations.AddField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n    ]\n",
    "output": "# -*- coding: utf-8 -*-\nimport codecs\nimport datetime\nimport io\nimport os\nfrom tempfile import NamedTemporaryFile\nfrom django.utils.encoding import smart_text\n\nfrom django.test import TestCase, override_settings\n\nfrom oscar.core.compat import UnicodeCSVWriter, existing_user_fields\n\n\nclass unicodeobj(object):\n\n    def __init__(self, s):\n        self.s = s\n\n    def __str__(self):\n        return self.s\n\n\nclass TestExistingUserFields(TestCase):\n\n    def test_order(self):\n        fields = existing_user_fields(['email', 'first_name', 'last_name'])\n        self.assertEqual(fields, ['email', 'first_name', 'last_name'])\n\n\nclass TestUnicodeCSVWriter(TestCase):\n\n    def test_can_write_different_values(self):\n        writer = UnicodeCSVWriter(open_file=io.StringIO())\n        s = '\u00fcn\u012fcod\u0113'\n        rows = [[s, unicodeobj(s), 123, datetime.date.today()], ]\n        writer.writerows(rows)\n        self.assertRaises(TypeError, writer.writerows, [object()])\n\n    def test_context_manager(self):\n        tmp_file = NamedTemporaryFile()\n        with UnicodeCSVWriter(filename=tmp_file.name) as writer:\n            s = '\u00fcn\u012fcod\u0113'\n            rows = [[s, unicodeobj(s), 123, datetime.date.today()], ]\n            writer.writerows(rows)\n\n    def test_csv_write_output(self):\n        tmp_file = NamedTemporaryFile(delete=False)\n        with UnicodeCSVWriter(filename=tmp_file.name) as writer:\n            s = '\u00fcn\u012fcod\u0113'\n            row = [s, 123, 'foo-bar']\n            writer.writerows([row])\n\n        with open(tmp_file.name, 'r') as read_file:\n            content = smart_text(read_file.read(), encoding='utf-8').strip()\n            self.assertEqual(content, '\u00fcn\u012fcod\u0113,123,foo-bar')\n\n        # Clean up\n        os.unlink(tmp_file.name)\n\n    @override_settings(OSCAR_CSV_INCLUDE_BOM=True)\n    def test_bom_write_with_open_file(self):\n        csv_file = NamedTemporaryFile(delete=False)\n        with open(csv_file.name, 'w') as open_file:\n            writer = UnicodeCSVWriter(open_file=open_file, encoding=\"utf-8\")\n            s = '\u00fcn\u012fcod\u0113'\n            row = [s, 123, datetime.date.today()]\n            writer.writerows([row])\n\n        with open(csv_file.name, 'rb') as read_file:\n            self.assertTrue(read_file.read().startswith(codecs.BOM_UTF8))\n\n        # Clean up\n        os.unlink(csv_file.name)\n\n    @override_settings(OSCAR_CSV_INCLUDE_BOM=True)\n    def test_bom_write_with_filename(self):\n        csv_file = NamedTemporaryFile(delete=False)\n        with UnicodeCSVWriter(filename=csv_file.name, encoding=\"utf-8\") as writer:\n            s = '\u00fcn\u012fcod\u0113'\n            row = [s, 123, datetime.date.today()]\n            writer.writerows([row])\n\n        with open(csv_file.name, 'rb') as read_file:\n            self.assertTrue(read_file.read().startswith(codecs.BOM_UTF8))\n\n        # Clean up\n        os.unlink(csv_file.name)\n\n    @override_settings(OSCAR_CSV_INCLUDE_BOM=True)\n    def test_bom_not_written_for_other_encodings(self):\n        csv_file = NamedTemporaryFile(delete=False)\n        with UnicodeCSVWriter(filename=csv_file.name, encoding=\"ascii\") as writer:\n            s = 'boring ascii'\n            row = [s, 123, datetime.date.today()]\n            writer.writerows([row])\n\n        with open(csv_file.name, 'rb') as read_file:\n            self.assertFalse(read_file.read().startswith(codecs.BOM_UTF8))\n\n        # Clean up\n        os.unlink(csv_file.name)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0001_initial'),\n    ]\n\n    operations = [\n        migrations.RenameField(\n            model_name='useraddress',\n            old_name='num_orders',\n            new_name='num_orders_as_shipping_address',\n        ),\n        migrations.AddField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n    ]\n",
    "output": "import pytest\nfrom django.conf import settings\nfrom django.test import TestCase\n\nfrom oscar.core import customisation\n\nVALID_FOLDER_PATH = 'tests/_site/apps'\n\n\nclass TestUtilities(TestCase):\n\n    def test_subfolder_extraction(self):\n        folders = list(customisation.subfolders('/var/www/eggs'))\n        self.assertEqual(folders, ['/var', '/var/www', '/var/www/eggs'])\n\n\ndef test_raises_exception_for_nonexistant_app_label():\n    with pytest.raises(ValueError):\n        customisation.fork_app('sillytown', 'somefolder')\n\n\ndef test_raises_exception_if_app_has_already_been_forked():\n    # We piggyback on another test which means a custom app is already in\n    # the settings we use for the test suite. We just check that's still\n    # the case here.\n    assert 'tests._site.apps.partner' in settings.INSTALLED_APPS\n    with pytest.raises(ValueError):\n        customisation.fork_app('partner', VALID_FOLDER_PATH)\n\n\ndef test_creates_new_folder(tmpdir):\n    path = tmpdir.mkdir('fork')\n    customisation.fork_app('order', str(path))\n    path.join('order').ensure_dir()\n\n\ndef test_creates_init_file(tmpdir):\n    path = tmpdir.mkdir('fork')\n    customisation.fork_app('order', str(path))\n\n    path.join('order').join('__init__.py').ensure()\n\n\ndef test_handles_dashboard_app(tmpdir):\n    # Dashboard apps are fiddly as they aren't identified by a single app\n    # label.\n    path = tmpdir.mkdir('fork')\n    customisation.fork_app('dashboard.catalogue', str(path))\n    # Check __init__.py created (and supporting folders)\n\n    path.join('dashboard').join('catalogue').join('__init__.py').ensure()\n\n\ndef test_creates_models_and_admin_file(tmpdir):\n    path = tmpdir.mkdir('fork')\n    customisation.fork_app('order', str(path))\n    for module, expected_string in [\n        ('models', 'from oscar.apps.order.models import *'),\n        ('admin', 'from oscar.apps.order.admin import *'),\n        ('config', 'OrderConfig')\n    ]:\n        filepath = path.join('order').join('%s.py' % module)\n        filepath.ensure()\n        contents = filepath.read()\n        assert expected_string in contents\n\n\ndef test_copies_in_migrations_when_needed(tmpdir):\n    path = tmpdir.mkdir('fork')\n    for app, has_models in [('order', True), ('search', False)]:\n        customisation.fork_app(app, str(path))\n\n        native_migration_path = path.join(app).join('migrations')\n        assert has_models == native_migration_path.check()\n\n\ndef test_dashboard_app_config(tmpdir, monkeypatch):\n    path = tmpdir.mkdir('fork')\n    customisation.fork_app('dashboard', str(path))\n\n    path.join('__init__.py').write('')\n    monkeypatch.syspath_prepend(str(tmpdir))\n\n    config_module = __import__(\n        '%s.dashboard.config' % path.basename, fromlist=['DashboardConfig']\n    )\n\n    assert hasattr(config_module, 'DashboardConfig')\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0001_initial'),\n    ]\n\n    operations = [\n        migrations.RenameField(\n            model_name='useraddress',\n            old_name='num_orders',\n            new_name='num_orders_as_shipping_address',\n        ),\n        migrations.AddField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n    ]\n",
    "output": "import warnings\n\nfrom django.contrib.auth.models import AnonymousUser, Permission\nfrom django.test import TestCase\n\nfrom oscar.core.decorators import deprecated\nfrom oscar.test import factories\nfrom oscar.views.decorators import check_permissions\n\n\nclass TestPermissionsDecorator(TestCase):\n\n    def test_empty_permissions_passes(self):\n        user = factories.UserFactory.build()\n        self.assertTrue(check_permissions(user, []))\n\n    def test_properties_are_checked(self):\n        staff_user = factories.UserFactory.build(is_staff=True)\n        non_staff_user = factories.UserFactory.build(is_staff=False)\n        self.assertTrue(check_permissions(staff_user, ['is_staff']))\n        self.assertFalse(check_permissions(non_staff_user, ['is_staff']))\n\n    def test_methods_are_checked(self):\n        anonymous_user = AnonymousUser()\n        known_user = factories.UserFactory.build()\n        self.assertTrue(check_permissions(anonymous_user, ['is_anonymous']))\n        self.assertFalse(check_permissions(known_user, ['is_anonymous']))\n\n    def test_permissions_are_checked(self):\n        user_with_perm = factories.UserFactory()\n        user_without_perm = factories.UserFactory()\n        perm = Permission.objects.get(\n            content_type__app_label='address', codename='add_country')\n        user_with_perm.user_permissions.add(perm)\n        self.assertTrue(\n            check_permissions(user_with_perm, ['address.add_country']))\n        self.assertFalse(\n            check_permissions(user_without_perm, ['address.add_country']))\n\n\nclass TestDeprecatedDecorator(TestCase):\n\n    def test_decorate_function(self):\n\n        @deprecated\n        def func():\n            return True\n\n        with warnings.catch_warnings(record=True) as caught:\n            warnings.simplefilter(\"always\")\n            self.assertTrue(func())\n            assert len(caught) == 1\n            assert issubclass(caught[0].category, DeprecationWarning)\n\n    def test_decorate_class(self):\n\n        class Cls(object):\n            val = False\n\n            def __init__(self):\n                self.val = True\n\n        Deprecated = deprecated(Cls)  # noqa\n\n        with warnings.catch_warnings(record=True) as caught:\n            warnings.simplefilter(\"always\")\n            obj = Deprecated()\n            self.assertTrue(obj.val)\n            assert len(caught) == 1\n            assert issubclass(caught[0].category, DeprecationWarning)\n\n    def test_subclass_decorated(self):\n\n        class Cls(object):\n            val = False\n\n            def __init__(self):\n                self.val = True\n\n        Deprecated = deprecated(Cls)  # noqa\n\n        class SubCls(Deprecated):\n            pass\n\n        with warnings.catch_warnings(record=True) as caught:\n            warnings.simplefilter(\"always\")\n            obj = SubCls()\n            self.assertTrue(obj.val)\n            assert len(caught) == 1\n            assert issubclass(caught[0].category, DeprecationWarning)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0001_initial'),\n    ]\n\n    operations = [\n        migrations.RenameField(\n            model_name='useraddress',\n            old_name='num_orders',\n            new_name='num_orders_as_shipping_address',\n        ),\n        migrations.AddField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n    ]\n",
    "output": "from os.path import dirname\nimport sys\n\nfrom django.test import override_settings, TestCase\nfrom django.conf import settings\n\nimport oscar\nfrom oscar.core.loading import (\n    get_model, AppNotFoundError, get_classes, get_class, get_class_loader,\n    ClassNotFoundError)\nfrom tests import temporary_python_path\nfrom tests._site.loader import DummyClass\n\n\nclass TestClassLoading(TestCase):\n    \"\"\"\n    Oscar's class loading utilities\n    \"\"\"\n\n    def test_load_oscar_classes_correctly(self):\n        Product, Category = get_classes('catalogue.models', ('Product', 'Category'))\n        self.assertEqual('oscar.apps.catalogue.models', Product.__module__)\n        self.assertEqual('oscar.apps.catalogue.models', Category.__module__)\n\n    def test_load_oscar_class_correctly(self):\n        Product = get_class('catalogue.models', 'Product')\n        self.assertEqual('oscar.apps.catalogue.models', Product.__module__)\n\n    def test_load_oscar_class_from_dashboard_subapp(self):\n        ReportForm = get_class('dashboard.reports.forms', 'ReportForm')\n        self.assertEqual('oscar.apps.dashboard.reports.forms', ReportForm.__module__)\n\n    def test_raise_exception_when_bad_appname_used(self):\n        with self.assertRaises(AppNotFoundError):\n            get_classes('fridge.models', ('Product', 'Category'))\n\n    def test_raise_exception_when_bad_classname_used(self):\n        with self.assertRaises(ClassNotFoundError):\n            get_class('catalogue.models', 'Monkey')\n\n    def test_raise_importerror_if_app_raises_importerror(self):\n        \"\"\"\n        This tests that Oscar doesn't fall back to using the Oscar catalogue\n        app if the overriding app throws an ImportError.\n        \"\"\"\n        apps = list(settings.INSTALLED_APPS)\n        apps[apps.index('oscar.apps.catalogue')] = 'tests._site.import_error_app.catalogue'\n        with override_settings(INSTALLED_APPS=apps):\n            with self.assertRaises(ImportError):\n                get_class('catalogue.app', 'CatalogueApplication')\n\n\nclass ClassLoadingWithLocalOverrideTests(TestCase):\n\n    def setUp(self):\n        self.installed_apps = list(settings.INSTALLED_APPS)\n        self.installed_apps[self.installed_apps.index('oscar.apps.shipping')] = 'tests._site.shipping'\n\n    def test_loading_class_defined_in_local_module(self):\n        with override_settings(INSTALLED_APPS=self.installed_apps):\n            (Free,) = get_classes('shipping.methods', ('Free',))\n            self.assertEqual('tests._site.shipping.methods', Free.__module__)\n\n    def test_loading_class_which_is_not_defined_in_local_module(self):\n        with override_settings(INSTALLED_APPS=self.installed_apps):\n            (FixedPrice,) = get_classes('shipping.methods', ('FixedPrice',))\n            self.assertEqual('oscar.apps.shipping.methods', FixedPrice.__module__)\n\n    def test_loading_class_from_module_not_defined_in_local_app(self):\n        with override_settings(INSTALLED_APPS=self.installed_apps):\n            (Repository,) = get_classes('shipping.repository', ('Repository',))\n            self.assertEqual('oscar.apps.shipping.repository', Repository.__module__)\n\n    def test_loading_classes_defined_in_both_local_and_oscar_modules(self):\n        with override_settings(INSTALLED_APPS=self.installed_apps):\n            (Free, FixedPrice) = get_classes('shipping.methods', ('Free', 'FixedPrice'))\n            self.assertEqual('tests._site.shipping.methods', Free.__module__)\n            self.assertEqual('oscar.apps.shipping.methods', FixedPrice.__module__)\n\n    def test_loading_classes_with_root_app(self):\n        import tests._site.shipping\n        path = dirname(dirname(tests._site.shipping.__file__))\n        with temporary_python_path([path]):\n            self.installed_apps[\n                self.installed_apps.index('tests._site.shipping')] = 'shipping'\n            with override_settings(INSTALLED_APPS=self.installed_apps):\n                (Free,) = get_classes('shipping.methods', ('Free',))\n                self.assertEqual('shipping.methods', Free.__module__)\n\n    def test_overriding_view_is_possible_without_overriding_app(self):\n        from oscar.apps.customer.app import application, CustomerApplication\n        # If test fails, it's helpful to know if it's caused by order of\n        # execution\n        self.assertEqual(CustomerApplication().summary_view.__module__,\n                         'tests._site.apps.customer.views')\n        self.assertEqual(application.summary_view.__module__,\n                         'tests._site.apps.customer.views')\n\n\nclass ClassLoadingWithLocalOverrideWithMultipleSegmentsTests(TestCase):\n\n    def setUp(self):\n        self.installed_apps = list(settings.INSTALLED_APPS)\n        self.installed_apps[self.installed_apps.index('oscar.apps.shipping')] = 'tests._site.apps.shipping'\n\n    def test_loading_class_defined_in_local_module(self):\n        with override_settings(INSTALLED_APPS=self.installed_apps):\n            (Free,) = get_classes('shipping.methods', ('Free',))\n            self.assertEqual('tests._site.apps.shipping.methods', Free.__module__)\n\n\nclass TestGetCoreAppsFunction(TestCase):\n    \"\"\"\n    oscar.get_core_apps function\n    \"\"\"\n\n    def test_returns_core_apps_when_no_overrides_specified(self):\n        apps = oscar.get_core_apps()\n        self.assertEqual(oscar.OSCAR_CORE_APPS, apps)\n\n    def test_uses_non_dashboard_override_when_specified(self):\n        apps = oscar.get_core_apps(overrides=['apps.shipping'])\n        self.assertTrue('apps.shipping' in apps)\n        self.assertTrue('oscar.apps.shipping' not in apps)\n\n    def test_uses_dashboard_override_when_specified(self):\n        apps = oscar.get_core_apps(overrides=['apps.dashboard.catalogue'])\n        self.assertTrue('apps.dashboard.catalogue' in apps)\n        self.assertTrue('oscar.apps.dashboard.catalogue' not in apps)\n        self.assertTrue('oscar.apps.catalogue' in apps)\n\n\nclass TestOverridingCoreApps(TestCase):\n\n    def test_means_the_overriding_model_is_registered_first(self):\n        klass = get_model('partner', 'StockRecord')\n        self.assertEqual(\n            'tests._site.apps.partner.models', klass.__module__)\n\n\nclass TestAppLabelsForModels(TestCase):\n\n    def test_all_oscar_models_have_app_labels(self):\n        from django.apps import apps\n        models = apps.get_models()\n        missing = []\n        for model in models:\n            # Ignore non-Oscar models\n            if 'oscar' not in repr(model):\n                continue\n            # Don't know how to get the actual model's Meta class. But if\n            # the parent doesn't have a Meta class, it's doesn't have an\n            # base in Oscar anyway and is not intended to be overridden\n            abstract_model = model.__base__\n            meta_class = getattr(abstract_model, 'Meta', None)\n            if meta_class is None:\n                continue\n\n            if not hasattr(meta_class, 'app_label'):\n                missing.append(model)\n        if missing:\n            self.fail(\"Those models don't have an app_label set: %s\" % missing)\n\n\nclass TestDynamicLoadingOn3rdPartyApps(TestCase):\n\n    core_app_prefix = 'thirdparty_package.apps'\n\n    def setUp(self):\n        self.installed_apps = list(settings.INSTALLED_APPS)\n        sys.path.append('./tests/_site/')\n\n    def tearDown(self):\n        sys.path.remove('./tests/_site/')\n\n    def test_load_core_3rd_party_class_correctly(self):\n        self.installed_apps.append('thirdparty_package.apps.myapp')\n        with override_settings(INSTALLED_APPS=self.installed_apps):\n            Cow, Goat = get_classes('myapp.models', ('Cow', 'Goat'), self.core_app_prefix)\n            self.assertEqual('thirdparty_package.apps.myapp.models', Cow.__module__)\n            self.assertEqual('thirdparty_package.apps.myapp.models', Goat.__module__)\n\n    def test_load_overriden_3rd_party_class_correctly(self):\n        self.installed_apps.append('apps.myapp')\n        with override_settings(INSTALLED_APPS=self.installed_apps):\n            Cow, Goat = get_classes('myapp.models', ('Cow', 'Goat'), self.core_app_prefix)\n            self.assertEqual('thirdparty_package.apps.myapp.models', Cow.__module__)\n            self.assertEqual('apps.myapp.models', Goat.__module__)\n\n\nclass OverriddenClassLoadingTestCase(TestCase):\n\n    def test_non_override_class_loader(self):\n        from oscar.apps.catalogue.views import ProductDetailView\n        View = get_class('catalogue.views', 'ProductDetailView')\n        self.assertEqual(View, ProductDetailView)\n\n    @override_settings(OSCAR_DYNAMIC_CLASS_LOADER='tests._site.loader.custom_class_loader')\n    def test_override_class_loader(self):\n        # Clear lru cache for the class loader\n        get_class_loader.cache_clear()\n\n        View = get_class('catalogue.views', 'ProductDetailView')\n        self.assertEqual(View, DummyClass)\n\n        # Clear lru cache for the class loader again\n        get_class_loader.cache_clear()\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0001_initial'),\n    ]\n\n    operations = [\n        migrations.RenameField(\n            model_name='useraddress',\n            old_name='num_orders',\n            new_name='num_orders_as_shipping_address',\n        ),\n        migrations.AddField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n    ]\n",
    "output": "from django import forms\nfrom django.test import TestCase, override_settings\n\nfrom oscar.apps.address.forms import AbstractAddressForm\nfrom oscar.apps.address.models import UserAddress\nfrom oscar.apps.order.models import ShippingAddress\nfrom oscar.forms.mixins import PhoneNumberMixin\nfrom oscar.test.factories import CountryFactory\n\n\nclass PhoneNumberMixinTestCase(TestCase):\n\n    def test_mixin_adds_phone_number_field(self):\n\n        class TestForm(PhoneNumberMixin, forms.Form):\n            pass\n\n        form = TestForm()\n        self.assertIn('phone_number', form.fields)\n\n    def test_mixin_adds_all_phone_number_fields(self):\n\n        class TestForm(PhoneNumberMixin, forms.Form):\n            phone_number_fields = {\n                'phone_number': {\n                    'required': False,\n                    'help_text': '',\n                    'max_length': 32,\n                    'label': 'Phone number'\n                },\n                'another_phone_number': {\n                    'required': False,\n                    'help_text': 'Another phone number help text',\n                    'max_length': 32,\n                    'label': 'Another phone number'\n                },\n                'one_more_phone_number': {\n                    'required': False,\n                    'help_text': '',\n                    'max_length': 32,\n                    'label': 'One more phone number'\n                },\n            }\n\n        form = TestForm()\n        self.assertIn('phone_number', form.fields)\n        self.assertIn('another_phone_number', form.fields)\n        self.assertIn('one_more_phone_number', form.fields)\n\n        field = form.fields['another_phone_number']\n        self.assertEqual(field.help_text, 'Another phone number help text')\n\n    def test_mixin_retains_existing_field_properties(self):\n\n        class TestForm(PhoneNumberMixin, forms.ModelForm):\n\n            class Meta:\n                model = UserAddress\n                fields = ['country', 'phone_number']\n                # Override default label and help text\n                labels = {'phone_number': 'Special number'}\n                help_texts = {'phone_number': 'Special help text'}\n\n        form = TestForm()\n        field = form.fields['phone_number']\n        self.assertEqual(field.label, 'Special number')\n        self.assertEqual(field.help_text, 'Special help text')\n\n    @override_settings(OSCAR_REQUIRED_ADDRESS_FIELDS=('phone_number',))\n    def test_required_empty_field_raises_validation_error(self):\n\n        class TestForm(PhoneNumberMixin, AbstractAddressForm):\n            phone_number_fields = {\n                'phone_number': {\n                    'required': True,\n                    'help_text': '',\n                    'max_length': 32,\n                    'label': 'Phone number'\n                }\n            }\n\n            class Meta:\n                model = ShippingAddress\n                fields = ['country', 'phone_number', 'postcode']\n\n        CountryFactory(iso_3166_1_a2='GB', is_shipping_country=True)\n        form = TestForm(data={'phone_number': '', 'country': 'GB', 'postcode': 'WW1 2BB'})\n        self.assertFalse(form.is_valid())\n        self.assertEqual(form.errors['phone_number'], ['This field is required.'])\n\n    @override_settings(OSCAR_REQUIRED_ADDRESS_FIELDS=[])\n    def test_optional_empty_field_validates(self):\n\n        class TestForm(PhoneNumberMixin, AbstractAddressForm):\n            phone_number_fields = {\n                'phone_number': {\n                    'required': False,\n                    'help_text': '',\n                    'max_length': 32,\n                    'label': 'Phone number'\n                }\n            }\n\n            class Meta:\n                model = ShippingAddress\n                fields = ['country', 'phone_number', 'postcode']\n\n        CountryFactory(iso_3166_1_a2='GB', is_shipping_country=True)\n        form = TestForm(data={'phone_number': '', 'country': 'GB', 'postcode': 'WW1 2BB'})\n        self.assertTrue(form.is_valid())\n\n    @override_settings(OSCAR_REQUIRED_ADDRESS_FIELDS=[])\n    def test_invalid_number_fails_validation(self):\n\n        class TestForm(PhoneNumberMixin, AbstractAddressForm):\n            phone_number_fields = {\n                'phone_number': {\n                    'required': False,\n                    'help_text': '',\n                    'max_length': 32,\n                    'label': 'Phone number'\n                }\n            }\n\n            class Meta:\n                model = ShippingAddress\n                fields = ['country', 'phone_number', 'postcode']\n\n        CountryFactory(iso_3166_1_a2='GB', is_shipping_country=True)\n        form = TestForm(data={'phone_number': '123456', 'country': 'GB', 'postcode': 'WW1 2BB'})\n        self.assertFalse(form.is_valid())\n        self.assertEqual(form.errors['phone_number'], ['This is not a valid local phone format for UNITED KINGDOM.'])\n\n    @override_settings(OSCAR_REQUIRED_ADDRESS_FIELDS=[])\n    def test_valid_number_passes_validation(self):\n\n        class TestForm(PhoneNumberMixin, AbstractAddressForm):\n            phone_number_fields = {\n                'phone_number': {\n                    'required': False,\n                    'help_text': '',\n                    'max_length': 32,\n                    'label': 'Phone number'\n                }\n            }\n\n            class Meta:\n                model = ShippingAddress\n                fields = ['country', 'phone_number', 'postcode']\n\n        CountryFactory(iso_3166_1_a2='GB', is_shipping_country=True)\n        form = TestForm(data={'phone_number': '02089001234', 'country': 'GB', 'postcode': 'WW1 2BB'})\n        self.assertTrue(form.is_valid())\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0001_initial'),\n    ]\n\n    operations = [\n        migrations.RenameField(\n            model_name='useraddress',\n            old_name='num_orders',\n            new_name='num_orders_as_shipping_address',\n        ),\n        migrations.AddField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n    ]\n",
    "output": "from django.core.exceptions import ImproperlyConfigured\nfrom django.test import TestCase\n\nfrom oscar.models.fields import NullCharField\n\n\nclass NullCharFieldTest(TestCase):\n\n    def test_from_db_value_converts_null_to_string(self):\n        field = NullCharField()\n        self.assertEqual('', field.from_db_value(None, expression=None, connection=None, context=None))\n\n    def test_get_prep_value_converts_empty_string_to_null(self):\n        field = NullCharField()\n        self.assertEqual(None, field.get_prep_value(''))\n\n    def test_raises_exception_for_invalid_null_blank_combo(self):\n        with self.assertRaises(ImproperlyConfigured):\n            NullCharField(null=True, blank=False)\n\n        with self.assertRaises(ImproperlyConfigured):\n            NullCharField(null=False, blank=True)\n\n        with self.assertRaises(ImproperlyConfigured):\n            NullCharField(null=False, blank=False)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0001_initial'),\n    ]\n\n    operations = [\n        migrations.RenameField(\n            model_name='useraddress',\n            old_name='num_orders',\n            new_name='num_orders_as_shipping_address',\n        ),\n        migrations.AddField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n    ]\n",
    "output": "from decimal import Decimal as D\nfrom itertools import product\nfrom django.test import TestCase\n\nfrom oscar.core.prices import Price\n\n\nclass TestPriceObject(TestCase):\n\n    def test_can_be_instantiated_with_tax_amount(self):\n        price = Price('USD', D('10.00'), tax=D('2.00'))\n        self.assertTrue(price.is_tax_known)\n        self.assertEqual(D('12.00'), price.incl_tax)\n\n    def test_can_have_tax_set_later(self):\n        price = Price('USD', D('10.00'))\n        price.tax = D('2.00')\n        self.assertEqual(D('12.00'), price.incl_tax)\n\n    def test_price_equals_reflexivity(self):\n        for price in (\n            Price(currency='USD', excl_tax=D('10.00')),\n            Price(currency='USD', excl_tax=D('10.00'), tax=D('2.00')),\n            Price(currency='USD', excl_tax=D('10.00'), incl_tax=D('12.00')),\n        ):\n            self.assertEqual(price, price)\n\n    def test_price_equals_formats(self):\n        price1 = Price(currency='USD', excl_tax=D('10.00'), tax=D('2.00'))\n        price2 = Price(currency='USD', excl_tax=D('10.00'), incl_tax=D('12.00'))\n        self.assertEqual(price1, price2)\n\n    def test_price_equals_currency_matters(self):\n        price1 = Price(currency='EUR', excl_tax=D('10.00'), tax=D('2.00'))\n        price2 = Price(currency='USD', excl_tax=D('10.00'), tax=D('2.00'))\n        self.assertNotEqual(price1, price2)\n\n    def test_price_equals_transitivity(self):\n        prices = (\n            Price(currency='EUR', excl_tax=D('10.00'), tax=D('2.00')),\n            Price(currency='USD', excl_tax=D('10.00'), tax=D('2.00')),\n            Price(currency='USD', excl_tax=D('10.00'), incl_tax=D('12.00')),\n            Price(currency='USD', excl_tax=D('10.00'), tax=D('8.00'))\n        )\n        prices_product = product(prices, prices)\n        for price1, price2 in prices_product:\n            self.assertEqual(price1 == price2, price2 == price1)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0001_initial'),\n    ]\n\n    operations = [\n        migrations.RenameField(\n            model_name='useraddress',\n            old_name='num_orders',\n            new_name='num_orders_as_shipping_address',\n        ),\n        migrations.AddField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n    ]\n",
    "output": "# coding=utf-8\n\nfrom django.test import TestCase\nfrom django.test.utils import override_settings\n\n\nclass SlugFieldTest(TestCase):\n\n    def test_slugfield_allow_unicode_kwargs_precedence(self):\n        from oscar.models.fields.slugfield import SlugField\n        with override_settings(OSCAR_SLUG_ALLOW_UNICODE=True):\n            slug_field = SlugField(allow_unicode=False)\n            self.assertFalse(slug_field.allow_unicode)\n            slug_field = SlugField()\n            self.assertTrue(slug_field.allow_unicode)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0001_initial'),\n    ]\n\n    operations = [\n        migrations.RenameField(\n            model_name='useraddress',\n            old_name='num_orders',\n            new_name='num_orders_as_shipping_address',\n        ),\n        migrations.AddField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n    ]\n",
    "output": "# coding=utf-8\nfrom django.test import TestCase\nfrom django.test.utils import override_settings\n\nfrom oscar.core import utils\n\n\ndef sluggish(value, allow_unicode=False):\n    return value.upper()\n\n\nclass TestSlugify(TestCase):\n\n    def test_default_unicode_to_ascii(self):\n        self.assertEqual('konig-der-straxdfe', utils.slugify('K\u00f6nig der Stra\u00dfe'))\n        self.assertEqual('not-fancy', utils.slugify('Not fancy'))\n        self.assertEqual('u4e01u4e02-u4e03u4e04u4e05', utils.slugify('\u4e01\u4e02 \u4e03\u4e04\u4e05'))\n\n    @override_settings(OSCAR_SLUG_ALLOW_UNICODE=True)\n    def test_allow_unicode(self):\n        self.assertEqual('k\u00f6nig-der-stra\u00dfe', utils.slugify('K\u00f6nig der Stra\u00dfe'))\n        self.assertEqual('\u4e01\u4e02-\u4e03\u4e04\u4e05', utils.slugify('\u4e01\u4e02 \u4e03\u4e04\u4e05'))\n        self.assertEqual('not-fancy', utils.slugify('Not fancy'))\n\n    @override_settings(OSCAR_SLUG_FUNCTION='tests.integration.core.test_utils.sluggish')\n    def test_custom_slugifier(self):\n        self.assertEqual('HAM AND EGGS', utils.slugify('Ham and eggs'))\n\n    @override_settings(OSCAR_SLUG_MAP={'c++': 'cpp'})\n    def test_uses_custom_mappings(self):\n        self.assertEqual('cpp', utils.slugify('c++'))\n\n    @override_settings(OSCAR_SLUG_BLACKLIST=['the'])\n    def test_uses_blacklist(self):\n        self.assertEqual('bible', utils.slugify('The Bible'))\n\n    @override_settings(OSCAR_SLUG_BLACKLIST=['the', 'bible'])\n    def test_uses_blacklist_doesnt_reduce_to_nothing(self):\n        self.assertEqual('bible', utils.slugify('The Bible'))\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0001_initial'),\n    ]\n\n    operations = [\n        migrations.RenameField(\n            model_name='useraddress',\n            old_name='num_orders',\n            new_name='num_orders_as_shipping_address',\n        ),\n        migrations.AddField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n    ]\n",
    "output": "from django.core.exceptions import ValidationError\nfrom django.contrib.flatpages.models import FlatPage\nfrom django.test import TestCase, override_settings\nfrom django.utils.translation import activate\n\nfrom oscar.core.validators import ExtendedURLValidator, URLDoesNotExistValidator\n\n\nclass TestExtendedURLValidator(TestCase):\n\n    def setUp(self):\n        self.validator = ExtendedURLValidator()\n\n    def test_validates_local_url(self):\n        try:\n            self.validator('/')\n        except ValidationError:\n            self.fail('ExtendedURLValidator raised ValidationError'\n                      'unexpectedly!')\n\n    def test_validates_local_url_with_query_strings(self):\n        try:\n            self.validator('/?q=test')  # Query strings shouldn't affect validation\n        except ValidationError:\n            self.fail('ExtendedURLValidator raised ValidationError'\n                      'unexpectedly!')\n\n    def test_raises_validation_error_for_missing_urls(self):\n        with self.assertRaises(ValidationError):\n            self.validator('/invalid/')\n\n    def test_validates_urls_missing_preceding_slash(self):\n        try:\n            self.validator('catalogue/')\n        except ValidationError:\n            self.fail('ExtendedURLValidator raised ValidationError'\n                      'unexpectedly!')\n\n    def test_raises_validation_error_for_urls_without_trailing_slash(self):\n        with self.assertRaises(ValidationError):\n            self.validator('/catalogue')  # Missing the / is bad\n\n    def test_validates_flatpages_urls(self):\n        FlatPage.objects.create(title='test page', url='/test/page/')\n        try:\n            self.validator('/test/page/')\n        except ValidationError:\n            self.fail('ExtendedURLValidator raises ValidationError'\n                      'unexpectedly!')\n\n\n@override_settings(\n    LANGUAGES=(\n        ('de', 'German'),\n        ('en-gb', 'British English'),\n    )\n)\nclass TestExtendedURLValidatorForLocalePrefixURLS(TestCase):\n    def setUp(self):\n        self.validator = ExtendedURLValidator()\n\n    def test_validate_same_locals(self):\n        \"\"\"\n        Current locale is default (\"en-gb\"), URL has locale prefix\n        of default and current locale (\"en-gb\").\n        \"\"\"\n        try:\n            self.validator('/en-gb/test/')\n        except ValidationError:\n            self.fail('ExtendedURLValidator raised ValidationError'\n                      'unexpectedly!')\n\n    def test_validate_prefix_locale_is_non_default(self):\n        \"\"\"\n        Current locale is default (\"en-gb\"), URL has locale prefix\n        of non-default locale (\"de\").\n        \"\"\"\n        try:\n            self.validator('/de/test/')\n        except ValidationError:\n            self.fail('ExtendedURLValidator raised ValidationError'\n                      'unexpectedly!')\n\n    def test_validate_current_locale_is_non_default(self):\n        \"\"\"\n        Current locale is non-default (\"de\"), URL has locale prefix\n        of default locale (\"en-gb\").\n        \"\"\"\n        activate('de')\n        try:\n            self.validator('/en-gb/test/')\n        except ValidationError:\n            self.fail('ExtendedURLValidator raised ValidationError'\n                      'unexpectedly!')\n\n    def test_validate_current_and_prefix_locales_are_non_default_and_same(self):\n        \"\"\"\n        Current locale is non-default (\"de\"), URL has locale prefix\n        of non-default locale (\"de\").\n        \"\"\"\n        activate('de')\n        try:\n            self.validator('/de/test/')\n        except ValidationError:\n            self.fail('ExtendedURLValidator raised ValidationError'\n                      'unexpectedly!')\n\n    def test_validate_current_and_prefix_locales_are_non_default_and_different(self):\n        \"\"\"\n        Current locale is non-default (\"it\"), URL has locale prefix\n        of non-default locale (\"de\").\n        \"\"\"\n        activate('it')\n        try:\n            self.validator('/de/test/')\n        except ValidationError:\n            self.fail('ExtendedURLValidator raised ValidationError'\n                      'unexpectedly!')\n\n\nclass TestURLDoesNotExistValidator(TestCase):\n\n    def setUp(self):\n        self.validator = URLDoesNotExistValidator()\n\n    def test_raises_exception_for_local_urls(self):\n        self.assertRaises(ValidationError, self.validator, '/')\n\n    def test_raises_exception_for_flatpages(self):\n        FlatPage.objects.create(title='test page', url='/test/page/')\n        self.assertRaises(ValidationError, self.validator, '/test/page/')\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0001_initial'),\n    ]\n\n    operations = [\n        migrations.RenameField(\n            model_name='useraddress',\n            old_name='num_orders',\n            new_name='num_orders_as_shipping_address',\n        ),\n        migrations.AddField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n    ]\n",
    "output": "import pytest\n\nfrom oscar.views import handler403, handler404, handler500\n\n\n@pytest.mark.django_db\ndef test_handler403_response_status(rf):\n    request = rf.get('/')\n    response = handler403(request, exception=None)\n    assert response.status_code == 403\n\n\n@pytest.mark.django_db\ndef test_handler404_response_status(rf):\n    request = rf.get('/')\n    response = handler404(request, exception=None)\n    assert response.status_code == 404\n\n\n@pytest.mark.django_db\ndef test_handler500_response_status(rf):\n    request = rf.get('/')\n    response = handler500(request)\n    assert response.status_code == 500\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0001_initial'),\n    ]\n\n    operations = [\n        migrations.RenameField(\n            model_name='useraddress',\n            old_name='num_orders',\n            new_name='num_orders_as_shipping_address',\n        ),\n        migrations.AddField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n    ]\n",
    "output": ""
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0002_auto_20150927_1547'),\n    ]\n\n    operations = [\n        migrations.AlterModelOptions(\n            name='useraddress',\n            options={'ordering': ['-num_orders_as_shipping_address'], 'verbose_name': 'User address',\n                     'verbose_name_plural': 'User addresses'},\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Shipping Address'),\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_shipping_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n    ]\n",
    "output": "from django.test import TestCase\n\nfrom oscar.apps.address import models, forms\nfrom oscar.test.factories import UserFactory\n\n\nclass TestUserAddressForm(TestCase):\n\n    def setUp(self):\n        self.user = UserFactory()\n        self.country = models.Country.objects.create(\n            iso_3166_1_a2='GB', name=\"UNITED KINGDOM\")\n\n    def test_merges_addresses_with_same_hash(self):\n        data = {\n            'user': self.user,\n            'first_name': \"Matus\",\n            'last_name': \"Moravcik\",\n            'line1': \"1 Egg Street\",\n            'line4': \"London\",\n            'postcode': \"N12 9RE\",\n            'country': self.country}\n\n        # Create two addresses, which are slightly different\n        models.UserAddress.objects.create(**data)\n        other = data.copy()\n        other['first_name'] = 'Izidor'\n        duplicate = models.UserAddress.objects.create(**other)\n\n        # Edit duplicate to be same as original and check that the two\n        # addresses are merged when the form saves.\n        post_data = data.copy()\n        post_data['country'] = self.country.iso_3166_1_a2\n        form = forms.UserAddressForm(self.user, post_data, instance=duplicate)\n        self.assertFalse(form.is_valid())\n        self.assertTrue(len(form.errors['__all__']) > 0)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0002_auto_20150927_1547'),\n    ]\n\n    operations = [\n        migrations.AlterModelOptions(\n            name='useraddress',\n            options={'ordering': ['-num_orders_as_shipping_address'], 'verbose_name': 'User address',\n                     'verbose_name_plural': 'User addresses'},\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Shipping Address'),\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_shipping_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n    ]\n",
    "output": "# -*- coding: utf-8 -*-\nimport pytest\nfrom django.test import TestCase\nfrom django.core import exceptions\n\nfrom oscar.apps.order.models import ShippingAddress\nfrom oscar.core.compat import get_user_model\nfrom oscar.apps.address import models\nfrom oscar.test import factories\n\nfrom tests._site.model_tests_app.models import (\n    UserAddressModelWithCustomBaseFields, UserAddressModelWithCustomHashFields\n)\n\nUser = get_user_model()\n\n\nclass UserAddressModelWithCustomBaseFieldsFactory(factories.UserAddressFactory):\n    class Meta:\n        model = UserAddressModelWithCustomBaseFields\n\n\nclass UserAddressModelWithCustomHashFieldsFactory(factories.UserAddressFactory):\n    class Meta:\n        model = UserAddressModelWithCustomHashFields\n\n\nclass TestUserAddress(TestCase):\n\n    def setUp(self):\n        self.country = factories.CountryFactory.build()\n        self.user = factories.UserFactory()\n\n    def test_uses_title_firstname_and_lastname_in_salutation(self):\n        a = factories.UserAddressFactory.build(\n            country=self.country,\n            title='Dr',\n            first_name='Barry',\n            last_name='Barrington',\n            user=self.user)\n        self.assertEqual(\"Dr Barry Barrington\", a.salutation)\n\n    def test_strips_whitespace_from_salutation(self):\n        a = factories.UserAddressFactory.build(\n            title='',\n            first_name='',\n            last_name='Barrington',\n            country=self.country,\n            user=self.user)\n        self.assertEqual(\"Barrington\", a.salutation)\n\n    def test_has_name_property(self):\n        a = factories.UserAddressFactory.build(\n            country=self.country,\n            first_name='Barry',\n            last_name='Barrington',\n            user=self.user)\n        self.assertEqual(\"Barry Barrington\", a.name)\n\n    def test_has_summary_property(self):\n        c = factories.CountryFactory(name='')\n        a = factories.UserAddressFactory(\n            country=c,\n            title='Dr',\n            first_name='Barry',\n            last_name='Barrington',\n            line1='1 King Road',\n            line4='London',\n            postcode='SW1 9RE')\n        self.assertEqual(\n            \"Dr Barry Barrington, 1 King Road, London, SW1 9RE, UNITED KINGDOM\",\n            a.summary)\n\n    def test_summary_includes_country(self):\n        c = factories.CountryFactory.build(name='UNITED KINGDOM')\n        a = factories.UserAddressFactory.build(\n            country=c,\n            title='Dr',\n            first_name='Barry',\n            last_name='Barrington',\n            line1='1 King Road',\n            line4='London',\n            postcode='SW1 9RE',\n            user=self.user)\n        self.assertEqual(\n            \"Dr Barry Barrington, 1 King Road, London, SW1 9RE, UNITED KINGDOM\",\n            a.summary)\n\n    def test_hash_value(self):\n        a = factories.UserAddressFactory.build(\n            country=self.country,\n            user=self.user)\n        self.assertEqual(a.generate_hash(), 2668616117)\n\n    def test_hash_and_summary_values_on_model_with_custom_base_fields(self):\n        a = UserAddressModelWithCustomBaseFieldsFactory.build(country=self.country, user=self.user)\n        self.assertEqual(a.summary, '1 King Road, London')\n        self.assertEqual(a.generate_hash(), 2668616117)\n\n    def test_hash_and_summary_values_on_model_with_custom_hash_fields(self):\n        a = UserAddressModelWithCustomHashFieldsFactory.build(country=self.country, user=self.user)\n        self.assertEqual(a.summary, 'Dr Barry Barrington, 1 King Road, London, SW1 9RE, UNITED KINGDOM')\n        self.assertEqual(a.generate_hash(), 2153195893)\n\n    def test_can_be_hashed_including_non_ascii(self):\n        a = factories.UserAddressFactory.build(\n            first_name=\"\\u0141ukasz Smith\",\n            last_name='Smith',\n            line1=\"75 Smith Road\",\n            postcode=\"n4 8ty\",\n            country=self.country,\n            user=self.user)\n        hash = a.generate_hash()\n        self.assertTrue(hash is not None)\n\n    def test_strips_whitespace_in_name_property(self):\n        a = factories.UserAddressFactory.build(\n            first_name='',\n            last_name='Barrington',\n            country=self.country,\n            user=self.user)\n        self.assertEqual(\"Barrington\", a.name)\n\n    def test_uses_city_as_an_alias_of_line4(self):\n        a = factories.UserAddressFactory.build(\n            line4='London',\n            country=self.country,\n            user=self.user)\n        self.assertEqual('London', a.city)\n\n    def test_converts_postcode_to_uppercase_when_cleaning(self):\n        address = factories.UserAddressFactory.build(\n            postcode=\"n4 8ty\",\n            country=self.country,\n            user=self.user)\n        address.clean()\n        self.assertEqual(\"N4 8TY\", address.postcode)\n\n    def test_strips_whitespace_when_cleaning(self):\n        a = factories.UserAddressFactory.build(\n            line1=\"  75 Smith Road  \",\n            postcode=\"  n4 8ty\",\n            country=self.country,\n            user=self.user)\n        a.clean()\n        self.assertEqual(\"N4 8TY\", a.postcode)\n        self.assertEqual(\"75 Smith Road\", a.line1)\n\n    def test_active_address_fields_skips_whitespace_only_fields(self):\n        a = factories.UserAddressFactory.build(\n            first_name='   ',\n            last_name='Barrington',\n            line1='  75 Smith Road  ',\n            postcode='  n4 8ty',\n            title='',\n            country=self.country,\n            user=self.user)\n        active_fields = a.active_address_fields()\n        self.assertEqual(\"Barrington\", active_fields[0])\n\n    def test_ignores_whitespace_when_hashing(self):\n        a1 = factories.UserAddressFactory.build(\n            first_name='Terry',\n            last_name='Barrington',\n            country=self.country,\n            user=self.user)\n        a1.clean()\n        a2 = factories.UserAddressFactory.build(\n            first_name='   Terry  ',\n            last_name='     Barrington',\n            country=self.country,\n            user=self.user)\n        a2.clean()\n        self.assertEqual(a1.generate_hash(), a2.generate_hash())\n\n    def test_populate_shipping_address_doesnt_set_id(self):\n        a = factories.UserAddressFactory.build(\n            country=self.country,\n            user=self.user)\n        a.clean()\n        sa = ShippingAddress()\n        a.populate_alternative_model(sa)\n        self.assertIsNone(sa.id)\n\n    def test_populated_shipping_address_has_same_summary_user_address(self):\n        a = factories.UserAddressFactory.build(\n            country=self.country,\n            user=self.user)\n        a.clean()\n        sa = ShippingAddress()\n        a.populate_alternative_model(sa)\n        self.assertEqual(sa.summary, a.summary)\n\n    def test_summary_value(self):\n        a = factories.UserAddressFactory.build(\n            country=self.country,\n            user=self.user)\n        self.assertEqual(a.summary, 'Dr Barry Barrington, 1 King Road, London, SW1 9RE, UNITED KINGDOM')\n\n    def test_summary_is_property(self):\n        a = factories.UserAddressFactory.build(\n            title='',\n            line4='',\n            first_name=\" Terry  \",\n            last_name='Barrington',\n            line1=\"  75 Smith Road  \",\n            postcode=\"  n4 8ty\",\n            country=self.country,\n            user=self.user)\n        a.clean()\n        self.assertEqual(\n            \"Terry Barrington, 75 Smith Road, N4 8TY, UNITED KINGDOM\",\n            a.summary)\n\n\nVALID_POSTCODES = [\n    ('GB', 'N1 9RT'),\n    ('SK', '991 41'),\n    ('CZ', '612 00'),\n    ('CC', '6799'),\n    ('CY', '8240'),\n    ('MC', '98000'),\n    ('SH', 'STHL 1ZZ'),\n    ('JP', '150-2345'),\n    ('PG', '314'),\n    ('HN', '41202'),\n    ('BN', 'BC3615'),\n    ('TW', '104'),\n    ('TW', '10444'),\n    # It works for small cases as well\n    ('GB', 'sw2 1rw'),\n]\n\n\nINVALID_POSTCODES = [\n    ('GB', 'not-a-postcode'),\n    ('DE', '123b4'),\n]\n\n\n@pytest.mark.parametrize('country_value, postcode_value', VALID_POSTCODES)\ndef test_assert_valid_postcode(country_value, postcode_value):\n    country = models.Country(iso_3166_1_a2=country_value)\n    address = models.UserAddress(country=country, postcode=postcode_value)\n    address.clean()\n\n\n@pytest.mark.parametrize('country_value, postcode_value', INVALID_POSTCODES)\ndef test_assert_invalid_postcode(country_value, postcode_value):\n    country = models.Country(iso_3166_1_a2=country_value)\n    address = models.UserAddress(country=country, postcode=postcode_value)\n\n    with pytest.raises(exceptions.ValidationError):\n        address.clean()\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0002_auto_20150927_1547'),\n    ]\n\n    operations = [\n        migrations.AlterModelOptions(\n            name='useraddress',\n            options={'ordering': ['-num_orders_as_shipping_address'], 'verbose_name': 'User address',\n                     'verbose_name_plural': 'User addresses'},\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Shipping Address'),\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_shipping_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n    ]\n",
    "output": ""
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0002_auto_20150927_1547'),\n    ]\n\n    operations = [\n        migrations.AlterModelOptions(\n            name='useraddress',\n            options={'ordering': ['-num_orders_as_shipping_address'], 'verbose_name': 'User address',\n                     'verbose_name_plural': 'User addresses'},\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Shipping Address'),\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_shipping_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n    ]\n",
    "output": "from datetime import datetime, date\n\nfrom django.test import TestCase\nfrom django.core.exceptions import ValidationError\nfrom django.core.files.uploadedfile import SimpleUploadedFile\n\nfrom oscar.test import factories\n\n\nclass TestBooleanAttributes(TestCase):\n\n    def setUp(self):\n        self.attr = factories.ProductAttributeFactory(type=\"boolean\")\n\n    def test_validate_boolean_values(self):\n        self.assertIsNone(self.attr.validate_value(True))\n\n    def test_validate_invalid_boolean_values(self):\n        with self.assertRaises(ValidationError):\n            self.attr.validate_value(1)\n\n\nclass TestMultiOptionAttributes(TestCase):\n\n    def setUp(self):\n        self.option_group = factories.AttributeOptionGroupFactory()\n        self.attr = factories.ProductAttributeFactory(\n            type='multi_option',\n            name='Sizes',\n            code='sizes',\n            option_group=self.option_group,\n        )\n\n        # Add some options to the group\n        self.options = factories.AttributeOptionFactory.create_batch(\n            3, group=self.option_group)\n\n    def test_validate_multi_option_values(self):\n        self.assertIsNone(self.attr.validate_value([\n            self.options[0], self.options[1]]))\n\n    def test_validate_invalid_multi_option_values(self):\n        with self.assertRaises(ValidationError):\n            # value must be an iterable\n            self.attr.validate_value('foobar')\n\n        with self.assertRaises(ValidationError):\n            # Items must all be AttributeOption objects\n            self.attr.validate_value([self.options[0], 'notanOption'])\n\n    def test_save_multi_option_value(self):\n        product = factories.ProductFactory()\n        # We'll save two out of the three available options\n        self.attr.save_value(product, [self.options[0], self.options[2]])\n        product.refresh_from_db()\n        self.assertEqual(list(product.attr.sizes), [self.options[0], self.options[2]])\n\n    def test_delete_multi_option_value(self):\n        product = factories.ProductFactory()\n        self.attr.save_value(product, [self.options[0], self.options[1]])\n        # Now delete these values\n        self.attr.save_value(product, None)\n        product.refresh_from_db()\n        self.assertFalse(hasattr(product.attr, 'sizes'))\n\n    def test_multi_option_value_as_text(self):\n        product = factories.ProductFactory()\n        self.attr.save_value(product, self.options)\n        attr_val = product.attribute_values.get(attribute=self.attr)\n        self.assertEqual(attr_val.value_as_text, \", \".join(o.option for o in self.options))\n\n\nclass TestDatetimeAttributes(TestCase):\n\n    def setUp(self):\n        self.attr = factories.ProductAttributeFactory(type=\"datetime\")\n\n    def test_validate_datetime_values(self):\n        self.assertIsNone(self.attr.validate_value(datetime.now()))\n\n    def test_validate_invalid_datetime_values(self):\n        with self.assertRaises(ValidationError):\n            self.attr.validate_value(1)\n\n\nclass TestDateAttributes(TestCase):\n\n    def setUp(self):\n        self.attr = factories.ProductAttributeFactory(type=\"date\")\n\n    def test_validate_datetime_values(self):\n        self.assertIsNone(self.attr.validate_value(datetime.now()))\n\n    def test_validate_date_values(self):\n        self.assertIsNone(self.attr.validate_value(date.today()))\n\n    def test_validate_invalid_date_values(self):\n        with self.assertRaises(ValidationError):\n            self.attr.validate_value(1)\n\n\nclass TestIntegerAttributes(TestCase):\n\n    def setUp(self):\n        self.attr = factories.ProductAttributeFactory(type=\"integer\")\n\n    def test_validate_integer_values(self):\n        self.assertIsNone(self.attr.validate_value(1))\n\n    def test_validate_str_integer_values(self):\n        self.assertIsNone(self.attr.validate_value('1'))\n\n    def test_validate_invalid_integer_values(self):\n        with self.assertRaises(ValidationError):\n            self.attr.validate_value('notanInteger')\n\n\nclass TestFloatAttributes(TestCase):\n\n    def setUp(self):\n        self.attr = factories.ProductAttributeFactory(type=\"float\")\n\n    def test_validate_integer_values(self):\n        self.assertIsNone(self.attr.validate_value(1))\n\n    def test_validate_float_values(self):\n        self.assertIsNone(self.attr.validate_value(1.2))\n\n    def test_validate_str_float_values(self):\n        self.assertIsNone(self.attr.validate_value('1.2'))\n\n    def test_validate_invalid_float_values(self):\n        with self.assertRaises(ValidationError):\n            self.attr.validate_value('notaFloat')\n\n\nclass TestTextAttributes(TestCase):\n\n    def setUp(self):\n        self.attr = factories.ProductAttributeFactory(type=\"text\")\n\n    def test_validate_string_and_unicode_values(self):\n        self.assertIsNone(self.attr.validate_value('String'))\n\n    def test_validate_invalid_float_values(self):\n        with self.assertRaises(ValidationError):\n            self.attr.validate_value(1)\n\n\nclass TestFileAttributes(TestCase):\n    def setUp(self):\n        self.attr = factories.ProductAttributeFactory(type=\"file\")\n\n    def test_validate_file_values(self):\n        file_field = SimpleUploadedFile('test_file.txt', b'Test')\n        self.assertIsNone(self.attr.validate_value(file_field))\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0002_auto_20150927_1547'),\n    ]\n\n    operations = [\n        migrations.AlterModelOptions(\n            name='useraddress',\n            options={'ordering': ['-num_orders_as_shipping_address'], 'verbose_name': 'User address',\n                     'verbose_name_plural': 'User addresses'},\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Shipping Address'),\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_shipping_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n    ]\n",
    "output": "# -*- coding: utf-8 -*-\nfrom django.core.cache import cache\nfrom django.test import TestCase\nfrom django.test.utils import override_settings\n\nfrom oscar.apps.catalogue.models import Category\nfrom oscar.apps.catalogue.categories import create_from_breadcrumbs\nfrom oscar.templatetags.category_tags import get_annotated_list\n\n\nclass TestCategory(TestCase):\n\n    def setUp(self):\n        self.products = Category.add_root(name=\"Pr\u00f6ducts\")\n        self.books = self.products.add_child(name=\"B\u00fccher\")\n\n    def tearDown(self):\n        cache.clear()\n\n    def test_includes_parents_name_in_full_name(self):\n        self.assertTrue(self.products.name in self.books.full_name)\n\n    def test_has_children_method(self):\n        self.assertTrue(self.products.has_children())\n\n    def test_slugs_were_autogenerated(self):\n        self.assertTrue(self.products.slug)\n        self.assertTrue(self.books.slug)\n\n    def test_supplied_slug_is_not_altered(self):\n        more_books = self.products.add_child(\n            name=self.books.name, slug=self.books.slug)\n        self.assertEqual(more_books.slug, self.books.slug)\n\n    @override_settings(OSCAR_SLUG_ALLOW_UNICODE=True)\n    def test_unicode_slug(self):\n        root_category = Category.add_root(name=\"Vins fran\u00e7ais\")\n        child_category = root_category.add_child(name=\"Ch\u00e2teau d'Yquem\")\n        self.assertEqual(root_category.slug, 'vins-fran\u00e7ais')\n        self.assertEqual(\n            root_category.get_absolute_url(), '/catalogue/category/vins-fran%C3%A7ais_{}/'.format(root_category.pk)\n        )\n        self.assertEqual(child_category.slug, 'ch\u00e2teau-dyquem')\n        self.assertEqual(\n            child_category.get_absolute_url(),\n            '/catalogue/category/vins-fran%C3%A7ais/ch%C3%A2teau-dyquem_{}/'.format(child_category.pk)\n        )\n\n    @override_settings(OSCAR_SLUG_ALLOW_UNICODE=True)\n    def test_url_caching(self):\n        category = self.products.add_child(name=\"Fromages fran\u00e7ais\")\n        absolute_url = category.get_absolute_url()\n        url = cache.get(category.get_url_cache_key())\n        self.assertEqual(url, '/catalogue/category/products/fromages-fran%C3%A7ais_{}/'.format(category.pk))\n        self.assertEqual(absolute_url, '/catalogue/category/products/fromages-fran%C3%A7ais_{}/'.format(category.pk))\n\n\nclass TestMovingACategory(TestCase):\n\n    def setUp(self):\n        breadcrumbs = (\n            'Books > Fiction > Horror > Teen',\n            'Books > Fiction > Horror > Gothic',\n            'Books > Fiction > Comedy',\n            'Books > Non-fiction > Biography',\n            'Books > Non-fiction > Programming',\n            'Books > Children',\n        )\n        for trail in breadcrumbs:\n            create_from_breadcrumbs(trail)\n\n        horror = Category.objects.get(name=\"Horror\")\n        programming = Category.objects.get(name=\"Programming\")\n        horror.move(programming)\n\n        # Reload horror instance to pick up changes\n        self.horror = Category.objects.get(name=\"Horror\")\n\n    def test_updates_instance_name(self):\n        self.assertEqual('Books > Non-fiction > Horror', self.horror.full_name)\n\n    def test_updates_subtree_names(self):\n        teen = Category.objects.get(name=\"Teen\")\n        self.assertEqual('Books > Non-fiction > Horror > Teen',\n                         teen.full_name)\n        gothic = Category.objects.get(name=\"Gothic\")\n        self.assertEqual('Books > Non-fiction > Horror > Gothic',\n                         gothic.full_name)\n\n\nclass TestCategoryFactory(TestCase):\n\n    def test_can_create_single_level_category(self):\n        trail = 'Books'\n        category = create_from_breadcrumbs(trail)\n        self.assertIsNotNone(category)\n        self.assertEqual(category.name, 'Books')\n        self.assertEqual(category.slug, 'books')\n\n    def test_can_create_parent_and_child_categories(self):\n        trail = 'Books > Science-Fiction'\n        category = create_from_breadcrumbs(trail)\n\n        self.assertIsNotNone(category)\n        self.assertEqual(category.name, 'Science-Fiction')\n        self.assertEqual(category.get_depth(), 2)\n        self.assertEqual(category.get_parent().name, 'Books')\n        self.assertEqual(2, Category.objects.count())\n        self.assertEqual(category.full_slug, 'books/science-fiction')\n\n    def test_can_create_multiple_categories(self):\n        trail = 'Books > Science-Fiction > Star Trek'\n        create_from_breadcrumbs(trail)\n        trail = 'Books > Factual > Popular Science'\n        category = create_from_breadcrumbs(trail)\n\n        self.assertIsNotNone(category)\n        self.assertEqual(category.name, 'Popular Science')\n        self.assertEqual(category.get_depth(), 3)\n        self.assertEqual(category.get_parent().name, 'Factual')\n        self.assertEqual(5, Category.objects.count())\n        self.assertEqual(category.full_slug, 'books/factual/popular-science', )\n\n    def test_can_use_alternative_separator(self):\n        trail = 'Food|Cheese|Blue'\n        create_from_breadcrumbs(trail, separator='|')\n        self.assertEqual(3, len(Category.objects.all()))\n\n    def test_updating_subtree_slugs_when_moving_category_to_new_parent(self):\n        trail = 'A > B > C'\n        create_from_breadcrumbs(trail)\n        trail = 'A > B > D'\n        create_from_breadcrumbs(trail)\n        trail = 'A > E > F'\n        create_from_breadcrumbs(trail)\n        trail = 'A > E > G'\n        create_from_breadcrumbs(trail)\n\n        trail = 'T'\n        target = create_from_breadcrumbs(trail)\n        category = Category.objects.get(name='A')\n\n        category.move(target, pos='first-child')\n\n        c1 = Category.objects.get(name='A')\n        self.assertEqual(c1.full_slug, 't/a')\n        self.assertEqual(c1.full_name, 'T > A')\n\n        child = Category.objects.get(name='F')\n        self.assertEqual(child.full_slug, 't/a/e/f')\n        self.assertEqual(child.full_name, 'T > A > E > F')\n\n        child = Category.objects.get(name='D')\n        self.assertEqual(child.full_slug, 't/a/b/d')\n        self.assertEqual(child.full_name, 'T > A > B > D')\n\n    def test_updating_subtree_when_moving_category_to_new_sibling(self):\n        trail = 'A > B > C'\n        create_from_breadcrumbs(trail)\n        trail = 'A > B > D'\n        create_from_breadcrumbs(trail)\n        trail = 'A > E > F'\n        create_from_breadcrumbs(trail)\n        trail = 'A > E > G'\n        create_from_breadcrumbs(trail)\n\n        category = Category.objects.get(name='E')\n        target = Category.objects.get(name='A')\n\n        category.move(target, pos='right')\n\n        child = Category.objects.get(name='E')\n        self.assertEqual(child.full_slug, 'e')\n        self.assertEqual(child.full_name, 'E')\n\n        child = Category.objects.get(name='F')\n        self.assertEqual(child.full_slug, 'e/f')\n        self.assertEqual(child.full_name, 'E > F')\n\n\nclass TestCategoryTemplateTags(TestCase):\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.template = \"\"\"\n          {% if tree_categories %}\n              <ul>\n              {% for tree_category, info in tree_categories %}\n                  <li>\n                  {% if tree_category.pk == category.pk %}\n                      <strong>{{ tree_category.name }}</strong>\n                  {% else %}\n                      <a href=\"{{ tree_category.get_absolute_url }}\">\n                          {{ tree_category.name }}</a>\n                  {% endif %}\n                  {% if info.has_children %}<ul>{% else %}</li>{% endif %}\n                  {% for n in info.num_to_close %}\n                      </ul></li>\n                  {% endfor %}\n              {% endfor %}\n              </ul>\n          {% endif %}\n        \"\"\"\n\n    def setUp(self):\n        breadcrumbs = (\n            'Books > Fiction > Horror > Teen',\n            'Books > Fiction > Horror > Gothic',\n            'Books > Fiction > Comedy',\n            'Books > Non-fiction > Biography',\n            'Books > Non-fiction > Programming',\n            'Books > Children',\n        )\n        for trail in breadcrumbs:\n            create_from_breadcrumbs(trail)\n\n    def get_category_names(self, depth=None, parent=None):\n        \"\"\"\n        For the tests, we are only interested in the category names returned\n        from the template tag. This helper calls the template tag and\n        returns a list of the included categories.\n        \"\"\"\n        annotated_list = get_annotated_list(depth, parent)\n        names = [category.name for category, __ in annotated_list]\n        names_set = set(names)\n        # We return a set to ease testing, but need to be sure we're not\n        # losing any duplicates through that conversion.\n        self.assertEqual(len(names_set), len(names))\n        return names_set\n\n    def test_all_categories(self):\n        expected_categories = {\n            'Books', 'Fiction', 'Horror', 'Teen', 'Gothic', 'Comedy',\n            'Non-fiction', 'Biography', 'Programming', 'Children'}\n        actual_categories = self.get_category_names()\n        self.assertEqual(expected_categories, actual_categories)\n\n    def test_categories_depth(self):\n        expected_categories = {'Books'}\n        actual_categories = self.get_category_names(depth=1)\n        self.assertEqual(expected_categories, actual_categories)\n\n    def test_categories_parent(self):\n        parent = Category.objects.get(name=\"Fiction\")\n        actual_categories = self.get_category_names(parent=parent)\n        expected_categories = {'Horror', 'Teen', 'Gothic', 'Comedy'}\n        self.assertEqual(expected_categories, actual_categories)\n\n    def test_categories_depth_parent(self):\n        parent = Category.objects.get(name=\"Fiction\")\n        actual_categories = self.get_category_names(depth=1, parent=parent)\n        expected_categories = {'Horror', 'Comedy'}\n        self.assertEqual(expected_categories, actual_categories)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0002_auto_20150927_1547'),\n    ]\n\n    operations = [\n        migrations.AlterModelOptions(\n            name='useraddress',\n            options={'ordering': ['-num_orders_as_shipping_address'], 'verbose_name': 'User address',\n                     'verbose_name_plural': 'User addresses'},\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Shipping Address'),\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_shipping_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n    ]\n",
    "output": "import pytest\nfrom django.core.exceptions import ValidationError\n\nfrom oscar.apps.catalogue import models\n\n\ndef test_product_attributes_can_contain_underscores():\n    attr = models.ProductAttribute(name=\"A\", code=\"a_b\")\n    attr.full_clean()\n\n\ndef test_product_attributes_cant_contain_hyphens():\n    attr = models.ProductAttribute(name=\"A\", code=\"a-b\")\n    with pytest.raises(ValidationError):\n        attr.full_clean()\n\n\ndef test_product_attributes_cant_be_python_keywords():\n    attr = models.ProductAttribute(name=\"A\", code=\"import\")\n    with pytest.raises(ValidationError):\n        attr.full_clean()\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0002_auto_20150927_1547'),\n    ]\n\n    operations = [\n        migrations.AlterModelOptions(\n            name='useraddress',\n            options={'ordering': ['-num_orders_as_shipping_address'], 'verbose_name': 'User address',\n                     'verbose_name_plural': 'User addresses'},\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Shipping Address'),\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_shipping_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n    ]\n",
    "output": "from django.test import TestCase\n\nfrom oscar.test import factories\nfrom oscar.core.loading import get_model\n\n\nProduct = get_model('catalogue', 'Product')\n\n\nclass ProductOptionTests(TestCase):\n    def setUp(self):\n        self.product_class = factories.ProductClassFactory()\n        self.product = factories.create_product(product_class=self.product_class)\n        self.option = factories.OptionFactory()\n\n    def test_product_has_options_per_product_class(self):\n        self.product_class.options.add(self.option)\n        self.assertTrue(self.product.has_options)\n\n    def test_product_has_options_per_product(self):\n        self.product.product_options.add(self.option)\n        self.assertTrue(self.product.has_options)\n\n    def test_queryset_per_product_class(self):\n        self.product_class.options.add(self.option)\n        qs = Product.browsable.base_queryset().filter(id=self.product.id)\n        product = qs.first()\n        self.assertTrue(product.has_options)\n        self.assertEquals(product.num_product_class_options, 1)\n\n    def test_queryset_per_product(self):\n        self.product.product_options.add(self.option)\n        qs = Product.browsable.base_queryset().filter(id=self.product.id)\n        product = qs.first()\n        self.assertTrue(product.has_options)\n        self.assertEquals(product.num_product_options, 1)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0002_auto_20150927_1547'),\n    ]\n\n    operations = [\n        migrations.AlterModelOptions(\n            name='useraddress',\n            options={'ordering': ['-num_orders_as_shipping_address'], 'verbose_name': 'User address',\n                     'verbose_name_plural': 'User addresses'},\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Shipping Address'),\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_shipping_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n    ]\n",
    "output": "# coding=utf-8\nfrom django.db import IntegrityError\nfrom django.test import TestCase\nfrom django.core.exceptions import ValidationError\n\nfrom oscar.apps.catalogue.models import (Product, ProductClass,\n                                         ProductAttribute,\n                                         AttributeOption,\n                                         ProductRecommendation)\nfrom oscar.test import factories\n\n\nclass ProductTests(TestCase):\n\n    def setUp(self):\n        self.product_class, _ = ProductClass.objects.get_or_create(\n            name='Clothing')\n\n\nclass ProductCreationTests(ProductTests):\n\n    def setUp(self):\n        super().setUp()\n        ProductAttribute.objects.create(product_class=self.product_class,\n                                        name='Number of pages',\n                                        code='num_pages',\n                                        type='integer')\n        Product.ENABLE_ATTRIBUTE_BINDING = True\n\n    def tearDown(self):\n        Product.ENABLE_ATTRIBUTE_BINDING = False\n\n    def test_create_products_with_attributes(self):\n        product = Product(upc='1234',\n                          product_class=self.product_class,\n                          title='testing')\n        product.attr.num_pages = 100\n        product.save()\n\n    def test_none_upc_is_represented_as_empty_string(self):\n        product = Product(product_class=self.product_class,\n                          title='testing', upc=None)\n        product.save()\n        product.refresh_from_db()\n        self.assertEqual(product.upc, '')\n\n    def test_upc_uniqueness_enforced(self):\n        Product.objects.create(product_class=self.product_class,\n                               title='testing', upc='bah')\n        self.assertRaises(IntegrityError, Product.objects.create,\n                          product_class=self.product_class,\n                          title='testing', upc='bah')\n\n    def test_allow_two_products_without_upc(self):\n        for x in range(2):\n            Product.objects.create(product_class=self.product_class,\n                                   title='testing', upc=None)\n\n\nclass TopLevelProductTests(ProductTests):\n\n    def test_top_level_products_must_have_titles(self):\n        product = Product(product_class=self.product_class)\n        self.assertRaises(ValidationError, product.clean)\n\n    def test_top_level_products_must_have_product_class(self):\n        product = Product(title=\"Kopfh\u00f6rer\")\n        self.assertRaises(ValidationError, product.clean)\n\n    def test_top_level_products_are_part_of_browsable_set(self):\n        product = Product.objects.create(\n            product_class=self.product_class, title=\"Kopfh\u00f6rer\")\n        self.assertEqual(set([product]), set(Product.browsable.all()))\n\n\nclass ChildProductTests(ProductTests):\n\n    def setUp(self):\n        super().setUp()\n        self.parent = Product.objects.create(\n            title=\"Parent product\",\n            product_class=self.product_class,\n            structure=Product.PARENT,\n            is_discountable=False)\n\n    def test_child_products_dont_need_titles(self):\n        Product.objects.create(\n            parent=self.parent, structure=Product.CHILD)\n\n    def test_child_products_dont_need_a_product_class(self):\n        Product.objects.create(parent=self.parent, structure=Product.CHILD)\n\n    def test_child_products_inherit_fields(self):\n        p = Product.objects.create(\n            parent=self.parent,\n            structure=Product.CHILD,\n            is_discountable=True)\n        self.assertEqual(\"Parent product\", p.get_title())\n        self.assertEqual(\"Clothing\", p.get_product_class().name)\n        self.assertEqual(False, p.get_is_discountable())\n\n    def test_child_products_are_not_part_of_browsable_set(self):\n        Product.objects.create(\n            product_class=self.product_class, parent=self.parent,\n            structure=Product.CHILD)\n        self.assertEqual(set([self.parent]), set(Product.browsable.all()))\n\n\nclass TestAChildProduct(TestCase):\n\n    def setUp(self):\n        clothing = ProductClass.objects.create(\n            name='Clothing', requires_shipping=True)\n        self.parent = clothing.products.create(\n            title=\"Parent\", structure=Product.PARENT)\n        self.child = self.parent.children.create(structure=Product.CHILD)\n\n    def test_delegates_requires_shipping_logic(self):\n        self.assertTrue(self.child.is_shipping_required)\n\n\nclass ProductAttributeCreationTests(TestCase):\n\n    def test_validating_option_attribute(self):\n        option_group = factories.AttributeOptionGroupFactory()\n        option_1 = factories.AttributeOptionFactory(group=option_group)\n        option_2 = factories.AttributeOptionFactory(group=option_group)\n        pa = factories.ProductAttribute(\n            type='option', option_group=option_group)\n\n        self.assertRaises(ValidationError, pa.validate_value, 'invalid')\n        pa.validate_value(option_1)\n        pa.validate_value(option_2)\n\n        invalid_option = AttributeOption(option='invalid option')\n        self.assertRaises(\n            ValidationError, pa.validate_value, invalid_option)\n\n    def test_entity_attributes(self):\n        unrelated_object = factories.PartnerFactory()\n        attribute = factories.ProductAttributeFactory(type='entity')\n\n        attribute_value = factories.ProductAttributeValueFactory(\n            attribute=attribute, value_entity=unrelated_object)\n\n        self.assertEqual(attribute_value.value, unrelated_object)\n\n\nclass ProductRecommendationTests(ProductTests):\n\n    def setUp(self):\n        super().setUp()\n        self.primary_product = Product.objects.create(\n            upc='1234', product_class=self.product_class, title='Primary Product'\n        )\n\n    def test_recommended_products_ordering(self):\n        secondary_products = []\n        for i in range(5):\n            secondary_products.append(Product.objects.create(\n                upc='secondary%s' % i, product_class=self.product_class, title='Secondary Product #%s' % i\n            ))\n\n        ProductRecommendation.objects.create(\n            primary=self.primary_product, recommendation=secondary_products[3], ranking=5)\n        ProductRecommendation.objects.create(\n            primary=self.primary_product, recommendation=secondary_products[1], ranking=2)\n        ProductRecommendation.objects.create(\n            primary=self.primary_product, recommendation=secondary_products[2], ranking=4)\n        ProductRecommendation.objects.create(\n            primary=self.primary_product, recommendation=secondary_products[4], ranking=1)\n        ProductRecommendation.objects.create(\n            primary=self.primary_product, recommendation=secondary_products[0], ranking=3)\n        recommended_products = [\n            secondary_products[3], secondary_products[2], secondary_products[0],\n            secondary_products[1], secondary_products[4]\n        ]\n        self.assertEqual(self.primary_product.sorted_recommended_products, recommended_products)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0002_auto_20150927_1547'),\n    ]\n\n    operations = [\n        migrations.AlterModelOptions(\n            name='useraddress',\n            options={'ordering': ['-num_orders_as_shipping_address'], 'verbose_name': 'User address',\n                     'verbose_name_plural': 'User addresses'},\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Shipping Address'),\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_shipping_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n    ]\n",
    "output": "from django.test import TestCase\n\nfrom oscar.apps.catalogue import models\n\n\nclass TestProductClassModel(TestCase):\n\n    def test_slug_is_auto_created(self):\n        books = models.ProductClass.objects.create(\n            name=\"Book\",\n        )\n        self.assertEqual('book', books.slug)\n\n    def test_has_attribute_for_whether_shipping_is_required(self):\n        models.ProductClass.objects.create(\n            name=\"Download\",\n            requires_shipping=False,\n        )\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0002_auto_20150927_1547'),\n    ]\n\n    operations = [\n        migrations.AlterModelOptions(\n            name='useraddress',\n            options={'ordering': ['-num_orders_as_shipping_address'], 'verbose_name': 'User address',\n                     'verbose_name_plural': 'User addresses'},\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Shipping Address'),\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_shipping_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n    ]\n",
    "output": "import os\nimport tempfile\nfrom unittest import mock\n\nfrom django.contrib.staticfiles.testing import StaticLiveServerTestCase\nfrom django.test import TestCase, override_settings\n\nfrom oscar.apps.catalogue.abstract_models import MissingProductImage\nfrom oscar.test import factories\n\n\nclass TestProductImages(TestCase):\n\n    def test_images_are_in_consecutive_order(self):\n        product = factories.create_product()\n        for i in range(4):\n            factories.create_product_image(product=product, display_order=i)\n\n        product.images.all()[2].delete()\n\n        for idx, im in enumerate(product.images.all()):\n            self.assertEqual(im.display_order, idx)\n\n    def test_variant_images(self):\n        parent = factories.ProductFactory(structure='parent')\n        variant = factories.create_product(parent=parent)\n        factories.create_product_image(product=variant, caption='Variant Image')\n        all_images = variant.get_all_images()\n        self.assertEquals(all_images.count(), 1)\n        product_image = all_images.first()\n        self.assertEquals(product_image.caption, 'Variant Image')\n\n    def test_variant_images_fallback_to_parent(self):\n        parent = factories.ProductFactory(structure='parent')\n        variant = factories.create_product(parent=parent)\n        factories.create_product_image(product=parent, caption='Parent Product Image')\n        all_images = variant.get_all_images()\n        self.assertEquals(all_images.count(), 1)\n        product_image = all_images.first()\n        self.assertEquals(product_image.caption, 'Parent Product Image')\n\n\nclass TestMissingProductImage(StaticLiveServerTestCase):\n\n    TEMP_MEDIA_ROOT = tempfile.mkdtemp()\n\n    @override_settings(MEDIA_ROOT=TEMP_MEDIA_ROOT)\n    @mock.patch('oscar.apps.catalogue.abstract_models.find')\n    def test_symlink_creates_directories(self, mock_find):\n        # Create a fake empty file to symlink\n        img = tempfile.NamedTemporaryFile(delete=False)\n        img.close()\n\n        mock_find.return_value = img.name\n        # Initialise the class with a nested path\n        path = 'image/path.jpg'\n        MissingProductImage(path)\n        # Check that the directory exists\n        image_path = os.path.join(self.TEMP_MEDIA_ROOT, path)\n        self.assertTrue(os.path.exists(image_path))\n\n        # Clean up\n        for f in [image_path, img.name]:\n            os.unlink(f)\n        for d in [os.path.join(self.TEMP_MEDIA_ROOT, 'image'), self.TEMP_MEDIA_ROOT]:\n            os.rmdir(d)\n\n    @mock.patch('oscar.apps.catalogue.abstract_models.MissingProductImage.symlink_missing_image')\n    def test_no_symlink_when_no_media_root(self, mock_symlink):\n        MissingProductImage()\n        self.assertEqual(mock_symlink.call_count, 0)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0002_auto_20150927_1547'),\n    ]\n\n    operations = [\n        migrations.AlterModelOptions(\n            name='useraddress',\n            options={'ordering': ['-num_orders_as_shipping_address'], 'verbose_name': 'User address',\n                     'verbose_name_plural': 'User addresses'},\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Shipping Address'),\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_shipping_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n    ]\n",
    "output": "from django.test import TestCase\nfrom django.test.utils import override_settings\n\nfrom oscar.apps.catalogue.search_handlers import (\n    get_product_search_handler_class,\n)\n\n\nclass TestSearchHandler(object):\n    pass\n\n\nclass TestProductSearchHandlerSetting(TestCase):\n    def test_product_search_handler_setting(self):\n        \"\"\"\n        Test that the `OSCAR_PRODUCT_SEARCH_HANDLER` setting, when set,\n        dictates the return value of the `get_product_search_handler_class`\n        function.\n        \"\"\"\n        handler_override = 'tests.integration.catalogue.test_product_search_handler_setting.TestSearchHandler'\n        with override_settings(OSCAR_PRODUCT_SEARCH_HANDLER=handler_override):\n            handler_class = get_product_search_handler_class()\n\n        self.assertEqual(handler_class, TestSearchHandler)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0002_auto_20150927_1547'),\n    ]\n\n    operations = [\n        migrations.AlterModelOptions(\n            name='useraddress',\n            options={'ordering': ['-num_orders_as_shipping_address'], 'verbose_name': 'User address',\n                     'verbose_name_plural': 'User addresses'},\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Shipping Address'),\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_shipping_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n    ]\n",
    "output": ""
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0002_auto_20150927_1547'),\n    ]\n\n    operations = [\n        migrations.AlterModelOptions(\n            name='useraddress',\n            options={'ordering': ['-num_orders_as_shipping_address'], 'verbose_name': 'User address',\n                     'verbose_name_plural': 'User addresses'},\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Shipping Address'),\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_shipping_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n    ]\n",
    "output": "from django.test import TestCase\n\nfrom oscar.apps.catalogue.reviews import forms\nfrom oscar.test.factories import UserFactory, create_product\n\n\nclass TestReviewForm(TestCase):\n\n    def test_cleans_title(self):\n        product = create_product()\n        reviewer = UserFactory()\n        data = {\n            'title': '  This product is lovely',\n            'body': 'I really like this cheese',\n            'score': 0,\n            'name': 'JR Hartley',\n            'email': 'hartley@example.com'\n        }\n        form = forms.ProductReviewForm(\n            product=product, user=reviewer, data=data)\n\n        assert form.is_valid()\n\n        review = form.save()\n        assert review.title == \"This product is lovely\"\n\n    def test_validates_empty_data_correctly(self):\n        form = forms.ProductReviewForm(product=None, user=None, data={})\n        assert form.is_valid() is False\n\n    def test_validates_correctly(self):\n        data = {\n            'title': 'This product is lovely',\n            'body': 'I really like this cheese',\n            'score': 0,\n            'name': 'JR Hartley',\n            'email': 'hartley@example.com'\n        }\n        form = forms.ProductReviewForm(product=None, user=None, data=data)\n        assert form.is_valid()\n\n\nclass TestVoteForm(TestCase):\n\n    def setUp(self):\n        self.product = create_product()\n        self.reviewer = UserFactory()\n        self.voter = UserFactory()\n        self.review = self.product.reviews.create(\n            title='This is nice',\n            score=3,\n            body=\"This is the body\",\n            user=self.reviewer)\n\n    def test_allows_real_users_to_vote(self):\n        form = forms.VoteForm(self.review, self.voter, data={'delta': 1})\n        self.assertTrue(form.is_valid())\n\n    def test_prevents_users_from_voting_more_than_once(self):\n        self.review.vote_up(self.voter)\n        form = forms.VoteForm(self.review, self.voter, data={'delta': 1})\n        self.assertFalse(form.is_valid())\n        self.assertTrue(len(form.errors['__all__']) > 0)\n\n    def test_prevents_users_voting_on_their_own_reviews(self):\n        form = forms.VoteForm(self.review, self.reviewer, data={'delta': 1})\n        self.assertFalse(form.is_valid())\n        self.assertTrue(len(form.errors['__all__']) > 0)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0002_auto_20150927_1547'),\n    ]\n\n    operations = [\n        migrations.AlterModelOptions(\n            name='useraddress',\n            options={'ordering': ['-num_orders_as_shipping_address'], 'verbose_name': 'User address',\n                     'verbose_name_plural': 'User addresses'},\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Shipping Address'),\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_shipping_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n    ]\n",
    "output": "from django.test import TestCase\nfrom django.core.exceptions import ValidationError\n\nfrom oscar.core.compat import get_user_model\nfrom oscar.apps.catalogue.reviews import models\nfrom oscar.test.factories import create_product\nfrom oscar.test.factories import UserFactory\n\nUser = get_user_model()\n\n\nclass TestAnAnonymousReview(TestCase):\n\n    def setUp(self):\n        self.product = create_product()\n        self.data = {\n            'product': self.product,\n            'title': 'This product is lovely',\n            'body': 'I really like this cheese',\n            'score': 0,\n            'name': 'JR Hartley',\n            'email': 'hartley@example.com'\n        }\n\n    def review(self, **kwargs):\n        if kwargs:\n            data = self.data.copy()\n            data.update(kwargs)\n        else:\n            data = self.data\n        return models.ProductReview(**data)\n\n    def test_can_be_created(self):\n        review = self.review()\n        review.full_clean()\n\n    def test_requires_a_title(self):\n        review = self.review(title=\"\")\n        self.assertRaises(ValidationError, review.full_clean)\n\n    def test_requires_a_body(self):\n        review = self.review(body=\"\")\n        self.assertRaises(ValidationError, review.full_clean)\n\n    def test_requires_a_name(self):\n        review = self.review(name=\"\")\n        self.assertRaises(ValidationError, review.full_clean)\n\n    def test_requires_an_email_address(self):\n        review = self.review(email=\"\")\n        self.assertRaises(ValidationError, review.full_clean)\n\n    def test_requires_non_whitespace_title(self):\n        review = self.review(title=\"    \")\n        self.assertRaises(ValidationError, review.full_clean)\n\n    def test_starts_with_no_votes(self):\n        review = self.review()\n        review.save()\n        self.assertFalse(review.has_votes)\n        self.assertEqual(0, review.num_up_votes)\n        self.assertEqual(0, review.num_down_votes)\n\n    def test_has_reviewer_name_property(self):\n        review = self.review(name=\"Dave\")\n        self.assertEqual(\"Dave\", review.reviewer_name)\n\n    def test_review_moderate_setting_false(self):\n        with self.settings(OSCAR_MODERATE_REVIEWS=False):\n            review = self.review()\n            self.assertEqual(1, review.status)\n\n    def test_review_moderate_setting_true(self):\n        with self.settings(OSCAR_MODERATE_REVIEWS=True):\n            review = self.review()\n            self.assertEqual(0, review.status)\n\n\nclass TestAUserReview(TestCase):\n\n    def setUp(self):\n        self.product = create_product()\n        self.user = UserFactory(first_name=\"Tom\", last_name=\"Thumb\")\n        self.data = {\n            'product': self.product,\n            'title': 'This product is lovely',\n            'body': 'I really like this cheese',\n            'score': 0,\n            'user': self.user\n        }\n\n    def review(self, **kwargs):\n        if kwargs:\n            data = self.data.copy()\n            data.update(kwargs)\n        else:\n            data = self.data\n        return models.ProductReview(**data)\n\n    def test_can_be_created(self):\n        review = self.review()\n        review.full_clean()\n\n    def test_requires_a_title(self):\n        review = self.review(title=\"\")\n        self.assertRaises(ValidationError, review.full_clean)\n\n    def test_requires_a_body(self):\n        review = self.review(body=\"\")\n        self.assertRaises(ValidationError, review.full_clean)\n\n    def test_has_reviewer_name_property(self):\n        review = self.review()\n        self.assertEqual(\"Tom Thumb\", review.reviewer_name)\n\n    def test_num_approved_reviews(self):\n        review = self.review()\n        review.save()\n        self.assertEqual(self.product.num_approved_reviews, 1)\n        self.assertEqual(self.product.reviews.approved().first(), review)\n\n    def test_review_moderate_setting_false(self):\n        with self.settings(OSCAR_MODERATE_REVIEWS=False):\n            review = self.review()\n            self.assertEqual(1, review.status)\n\n    def test_review_moderate_setting_true(self):\n        with self.settings(OSCAR_MODERATE_REVIEWS=True):\n            review = self.review()\n            self.assertEqual(0, review.status)\n\n\nclass TestVotingOnAReview(TestCase):\n\n    def setUp(self):\n        self.product = create_product()\n        self.user = UserFactory()\n        self.voter = UserFactory()\n        self.review = self.product.reviews.create(\n            title='This is nice',\n            score=3,\n            body=\"This is the body\",\n            user=self.user)\n\n    def test_updates_totals_for_upvote(self):\n        self.review.vote_up(self.voter)\n        self.assertTrue(self.review.has_votes)\n        self.assertEqual(1, self.review.total_votes)\n        self.assertEqual(1, self.review.delta_votes)\n\n    def test_updates_totals_for_downvote(self):\n        self.review.vote_down(self.voter)\n        self.assertTrue(self.review.has_votes)\n        self.assertEqual(1, self.review.total_votes)\n        self.assertEqual(-1, self.review.delta_votes)\n\n    def test_is_permitted_for_normal_user(self):\n        is_allowed, reason = self.review.can_user_vote(self.voter)\n        self.assertTrue(is_allowed, reason)\n\n    def test_is_not_permitted_for_reviewer(self):\n        is_allowed, reason = self.review.can_user_vote(self.user)\n        self.assertFalse(is_allowed, reason)\n\n    def test_is_not_permitted_for_previous_voter(self):\n        self.review.vote_up(self.voter)\n        is_allowed, reason = self.review.can_user_vote(self.voter)\n        self.assertFalse(is_allowed, reason)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0002_auto_20150927_1547'),\n    ]\n\n    operations = [\n        migrations.AlterModelOptions(\n            name='useraddress',\n            options={'ordering': ['-num_orders_as_shipping_address'], 'verbose_name': 'User address',\n                     'verbose_name_plural': 'User addresses'},\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Shipping Address'),\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_shipping_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n    ]\n",
    "output": ""
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0002_auto_20150927_1547'),\n    ]\n\n    operations = [\n        migrations.AlterModelOptions(\n            name='useraddress',\n            options={'ordering': ['-num_orders_as_shipping_address'], 'verbose_name': 'User address',\n                     'verbose_name_plural': 'User addresses'},\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Shipping Address'),\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_shipping_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n    ]\n",
    "output": "from decimal import Decimal as D\nfrom unittest import mock\n\nfrom django.test import TestCase, override_settings\nfrom django.conf import settings\n\nfrom oscar.apps.basket import forms, formsets\nfrom oscar.apps.offer.utils import Applicator\nfrom oscar.core.loading import get_model\nfrom oscar.test import factories\nfrom oscar.test.basket import add_product\nfrom oscar.test.factories import (\n    BenefitFactory, ConditionalOfferFactory, ConditionFactory, RangeFactory)\n\n\nLine = get_model('basket', 'Line')\n\n\nclass TestBasketLineForm(TestCase):\n\n    def setUp(self):\n        self.applicator = Applicator()\n        rng = RangeFactory(includes_all_products=True)\n        self.condition = ConditionFactory(\n            range=rng, type=ConditionFactory._meta.model.VALUE,\n            value=D('100'), proxy_class=None)\n        self.benefit = BenefitFactory(\n            range=rng, type=BenefitFactory._meta.model.FIXED,\n            value=D('10'), max_affected_items=1)\n        self.basket = factories.create_basket()\n        self.line = self.basket.all_lines()[0]\n\n    def mock_availability_return_value(self, is_available, reason=''):\n        policy = self.line.purchase_info.availability\n        policy.is_purchase_permitted = mock.MagicMock(\n            return_value=(is_available, reason))\n\n    def build_form(self, quantity=None):\n        if quantity is None:\n            quantity = self.line.quantity\n        return forms.BasketLineForm(\n            strategy=self.basket.strategy,\n            data={'quantity': quantity},\n            instance=self.line)\n\n    def test_enforces_availability_policy_for_valid_quantities(self):\n        self.mock_availability_return_value(True)\n        form = self.build_form()\n        self.assertTrue(form.is_valid())\n\n    def test_enforces_availability_policy_for_invalid_quantities(self):\n        self.mock_availability_return_value(False, \"Some reason\")\n        form = self.build_form()\n        self.assertFalse(form.is_valid())\n        self.assertEqual(\n            form.errors['quantity'], ['Some reason'])\n\n    def test_skips_availability_policy_for_zero_quantities(self):\n        self.mock_availability_return_value(True)\n        form = self.build_form(quantity=0)\n        self.assertTrue(form.is_valid())\n\n    def test_enforces_max_line_quantity_for_new_product(self):\n        invalid_qty = settings.OSCAR_MAX_BASKET_QUANTITY_THRESHOLD + 1\n        form = self.build_form(quantity=invalid_qty)\n        self.assertFalse(form.is_valid())\n\n    @override_settings(OSCAR_MAX_BASKET_QUANTITY_THRESHOLD=10)\n    def test_enforce_max_line_quantity_for_existing_product(self):\n        self.basket.flush()\n        product = factories.create_product(num_in_stock=20)\n        add_product(self.basket, D('100'), 4, product)\n        self.line = self.basket.all_lines()[0]\n        form = self.build_form(quantity=6)\n        self.assertTrue(form.is_valid())\n        form.save()\n        form = self.build_form(quantity=11)\n        self.assertFalse(form.is_valid())\n\n    def test_line_quantity_max_attribute_per_num_available(self):\n        self.basket.flush()\n        product = factories.create_product(num_in_stock=20)\n        add_product(self.basket, D('100'), 4, product)\n        self.line = self.basket.all_lines()[0]\n        form = self.build_form()\n        self.assertIn('max=\"20\"', str(form['quantity']))\n\n    @override_settings(OSCAR_MAX_BASKET_QUANTITY_THRESHOLD=10)\n    def test_line_quantity_max_attribute_per_basket_threshold(self):\n        self.basket.flush()\n        product = factories.create_product(num_in_stock=20)\n        add_product(self.basket, D('100'), 4, product)\n        self.line = self.basket.all_lines()[0]\n        form = self.build_form()\n        self.assertIn('max=\"6\"', str(form['quantity']))\n\n    def test_basketline_formset_ordering(self):\n        # when we use a unordered queryset in the Basketlineformset, the\n        # discounts will be lost because django will query the database\n        # again to enforce ordered results\n        add_product(self.basket, D('100'), 5)\n        offer = ConditionalOfferFactory(\n            pk=1, condition=self.condition, benefit=self.benefit)\n\n        # now we force an unordered queryset so we can see that our discounts\n        # will disappear due to a new ordering query (see django/forms/model.py)\n        default_line_ordering = Line._meta.ordering\n        Line._meta.ordering = []\n        self.basket._lines = self.basket.lines.all()\n\n        self.applicator.apply_offers(self.basket, [offer])\n        formset = formsets.BasketLineFormSet(\n            strategy=self.basket.strategy,\n            queryset=self.basket.all_lines())\n\n        # the discount is in all_lines():\n        self.assertTrue(self.basket.all_lines()[0].has_discount)\n\n        # but not in the formset\n        self.assertFalse(formset.forms[0].instance.has_discount)\n\n        # Restore the ordering on the line\n        Line._meta.ordering = default_line_ordering\n\n        # clear the cached lines and apply the offer again\n        self.basket._lines = None\n        self.applicator.apply_offers(self.basket, [offer])\n\n        formset = formsets.BasketLineFormSet(\n            strategy=self.basket.strategy,\n            queryset=self.basket.all_lines())\n        self.assertTrue(formset.forms[0].instance.has_discount)\n\n\nclass TestAddToBasketForm(TestCase):\n\n    def test_allows_a_product_quantity_to_be_increased(self):\n        basket = factories.create_basket()\n        product = basket.all_lines()[0].product\n\n        # Add more of the same product\n        data = {'quantity': 1}\n        form = forms.AddToBasketForm(\n            basket=basket, product=product, data=data)\n        self.assertTrue(form.is_valid())\n\n    def test_checks_whether_passed_product_id_matches_a_real_product(self):\n        basket = factories.create_basket()\n        product = basket.all_lines()[0].product\n\n        # Add more of the same product\n        data = {'quantity': -1}\n        form = forms.AddToBasketForm(\n            basket=basket, product=product, data=data)\n        self.assertFalse(form.is_valid())\n\n    def test_checks_if_purchase_is_permitted(self):\n        basket = factories.BasketFactory()\n        product = factories.ProductFactory()\n\n        # Build a 4-level mock monster so we can force the return value of\n        # whether the product is available to buy. This is a serious code smell\n        # and needs to be remedied.\n        info = mock.Mock()\n        info.availability = mock.Mock()\n        info.availability.is_purchase_permitted = mock.Mock(\n            return_value=(False, \"Not on your nelly!\"))\n        basket.strategy.fetch_for_product = mock.Mock(\n            return_value=info)\n\n        data = {'quantity': 1}\n        form = forms.AddToBasketForm(\n            basket=basket, product=product, data=data)\n        self.assertFalse(form.is_valid())\n        self.assertEqual('Not on your nelly!', form.errors['__all__'][0])\n\n    def test_mixed_currency_baskets_are_not_permitted(self):\n        # Ensure basket is one currency\n        basket = mock.Mock()\n        basket.currency = 'GBP'\n        basket.num_items = 1\n\n        # Ensure new product has different currency\n        info = mock.Mock()\n        info.price.currency = 'EUR'\n        basket.strategy.fetch_for_product = mock.Mock(\n            return_value=info)\n\n        product = factories.ProductFactory()\n\n        data = {'quantity': 1}\n        form = forms.AddToBasketForm(\n            basket=basket, product=product, data=data)\n        self.assertFalse(form.is_valid())\n\n    def test_cannot_add_a_product_without_price(self):\n        basket = factories.BasketFactory()\n        product = factories.create_product(price=None)\n\n        data = {'quantity': 1}\n        form = forms.AddToBasketForm(\n            basket=basket, product=product, data=data)\n        self.assertFalse(form.is_valid())\n        self.assertEqual(\n            form.errors['__all__'][0],\n            'This product cannot be added to the basket because a price '\n            'could not be determined for it.',\n        )\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0002_auto_20150927_1547'),\n    ]\n\n    operations = [\n        migrations.AlterModelOptions(\n            name='useraddress',\n            options={'ordering': ['-num_orders_as_shipping_address'], 'verbose_name': 'User address',\n                     'verbose_name_plural': 'User addresses'},\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Shipping Address'),\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_shipping_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n    ]\n",
    "output": "from django.http import HttpResponse\nfrom django.test import TestCase\nfrom django.test.client import RequestFactory\nfrom django.contrib.auth.models import AnonymousUser\n\nfrom oscar.apps.basket import middleware\n\n\nclass TestBasketMiddleware(TestCase):\n\n    @staticmethod\n    def get_response_for_test(request):\n        return HttpResponse()\n\n    def setUp(self):\n        self.middleware = middleware.BasketMiddleware(self.get_response_for_test)\n        self.request = RequestFactory().get('/')\n        self.request.user = AnonymousUser()\n        self.middleware(self.request)\n\n    def test_basket_is_attached_to_request(self):\n        self.assertTrue(hasattr(self.request, 'basket'))\n\n    def test_strategy_is_attached_to_basket(self):\n        self.assertTrue(hasattr(self.request.basket, 'strategy'))\n\n    def test_strategy_is_attached_to_request(self):\n        self.assertTrue(hasattr(self.request, 'strategy'))\n\n    def test_get_cookie_basket_handles_invalid_signatures(self):\n        request_factory = RequestFactory()\n        request_factory.cookies['oscar_open_basket'] = '1:NOTAVALIDHASH'\n        request = request_factory.get('/')\n        request.cookies_to_delete = []\n\n        cookie_basket = self.middleware.get_cookie_basket(\"oscar_open_basket\", request, None)\n\n        self.assertEqual(None, cookie_basket)\n        self.assertIn(\"oscar_open_basket\", request.cookies_to_delete)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0002_auto_20150927_1547'),\n    ]\n\n    operations = [\n        migrations.AlterModelOptions(\n            name='useraddress',\n            options={'ordering': ['-num_orders_as_shipping_address'], 'verbose_name': 'User address',\n                     'verbose_name_plural': 'User addresses'},\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Shipping Address'),\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_shipping_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n    ]\n",
    "output": "# -*- coding: utf-8 -*-\nfrom decimal import Decimal as D\n\nfrom django.test import TestCase\n\nfrom oscar.apps.basket.models import Basket\nfrom oscar.apps.catalogue.models import Option\nfrom oscar.apps.partner import availability, prices, strategy\nfrom oscar.test import factories\nfrom oscar.test.factories import (\n    BasketFactory, BasketLineAttributeFactory, OptionFactory, ProductFactory)\n\n\nclass TestANewBasket(TestCase):\n\n    def setUp(self):\n        self.basket = Basket()\n        self.basket.strategy = strategy.Default()\n\n    def test_has_zero_lines(self):\n        self.assertEqual(0, self.basket.num_lines)\n\n    def test_has_zero_items(self):\n        self.assertEqual(0, self.basket.num_items)\n\n    def test_doesnt_contain_vouchers(self):\n        self.assertFalse(self.basket.contains_a_voucher)\n\n    def test_can_be_edited(self):\n        self.assertTrue(self.basket.can_be_edited)\n\n    def test_is_empty(self):\n        self.assertTrue(self.basket.is_empty)\n\n    def test_is_not_submitted(self):\n        self.assertFalse(self.basket.is_submitted)\n\n    def test_has_no_applied_offers(self):\n        self.assertEqual({}, self.basket.applied_offers())\n\n\nclass TestBasketLine(TestCase):\n\n    def test_description(self):\n        basket = BasketFactory()\n        product = ProductFactory(title=\"A product\")\n        basket.add_product(product)\n\n        line = basket.lines.first()\n        self.assertEqual(line.description, \"A product\")\n\n    def test_description_with_attributes(self):\n        basket = BasketFactory()\n        product = ProductFactory(title=\"A product\")\n        basket.add_product(product)\n\n        line = basket.lines.first()\n        BasketLineAttributeFactory(\n            line=line, value='\\u2603', option__name='with')\n        self.assertEqual(line.description, \"A product (with = '\\u2603')\")\n\n    def test_create_line_reference(self):\n        basket = BasketFactory()\n        product = ProductFactory(title=\"A product\")\n        option = OptionFactory(name=\"product_option\", code=\"product_option\")\n        option_product = ProductFactory(title='Asunci\u00f3n')\n        options = [{'option': option, 'value': option_product}]\n        basket.add_product(product, options=options)\n\n    def test_basket_lines_queryset_is_ordered(self):\n        # This is needed to make sure a formset is not performing the query\n        # again with an order_by clause (losing all calculated discounts)\n        basket = BasketFactory()\n        product = ProductFactory(title=\"A product\")\n        another_product = ProductFactory(title=\"Another product\")\n        basket.add_product(product)\n        basket.add_product(another_product)\n        queryset = basket.all_lines()\n        self.assertTrue(queryset.ordered)\n\n    def test_line_tax_for_zero_tax_strategies(self):\n        basket = Basket()\n        basket.strategy = strategy.Default()\n        product = factories.create_product()\n        # Tax for the default strategy will be 0\n        factories.create_stockrecord(\n            product, price_excl_tax=D('75.00'), num_in_stock=10)\n        basket.add(product, 1)\n\n        self.assertEqual(basket.lines.first().line_tax, D('0'))\n\n    def test_line_tax_for_unknown_tax_strategies(self):\n\n        class UnknownTaxStrategy(strategy.Default):\n            \"\"\" A test strategy where the tax is not known \"\"\"\n\n            def pricing_policy(self, product, stockrecord):\n                return prices.FixedPrice('GBP', stockrecord.price_excl_tax, tax=None)\n\n        basket = Basket()\n        basket.strategy = UnknownTaxStrategy()\n        product = factories.create_product()\n        factories.create_stockrecord(product, num_in_stock=10)\n        basket.add(product, 1)\n\n        self.assertEqual(basket.lines.first().line_tax, None)\n\n\nclass TestAddingAProductToABasket(TestCase):\n\n    def setUp(self):\n        self.basket = Basket()\n        self.basket.strategy = strategy.Default()\n        self.product = factories.create_product()\n        self.record = factories.create_stockrecord(\n            currency='GBP',\n            product=self.product, price_excl_tax=D('10.00'))\n        self.purchase_info = factories.create_purchase_info(self.record)\n        self.basket.add(self.product)\n\n    def test_creates_a_line(self):\n        self.assertEqual(1, self.basket.num_lines)\n\n    def test_sets_line_prices(self):\n        line = self.basket.lines.all()[0]\n        self.assertEqual(line.price_incl_tax, self.purchase_info.price.incl_tax)\n        self.assertEqual(line.price_excl_tax, self.purchase_info.price.excl_tax)\n\n    def test_adding_negative_quantity(self):\n        self.assertEqual(1, self.basket.num_lines)\n        self.basket.add(self.product, quantity=4)\n        self.assertEqual(5, self.basket.line_quantity(self.product, self.record))\n        self.basket.add(self.product, quantity=-10)\n        self.assertEqual(0, self.basket.line_quantity(self.product, self.record))\n\n    def test_means_another_currency_product_cannot_be_added(self):\n        product = factories.create_product()\n        factories.create_stockrecord(\n            currency='USD', product=product, price_excl_tax=D('20.00'))\n        with self.assertRaises(ValueError):\n            self.basket.add(product)\n\n    def test_cannot_add_a_product_without_price(self):\n        product = factories.create_product(price=None)\n        with self.assertRaises(ValueError):\n            self.basket.add(product)\n\n\nclass TestANonEmptyBasket(TestCase):\n\n    def setUp(self):\n        self.basket = Basket()\n        self.basket.strategy = strategy.Default()\n        self.product = factories.create_product()\n        self.record = factories.create_stockrecord(\n            self.product, price_excl_tax=D('10.00'))\n        self.purchase_info = factories.create_purchase_info(self.record)\n        self.basket.add(self.product, 10)\n\n    def test_can_be_flushed(self):\n        self.basket.flush()\n        self.assertEqual(self.basket.num_items, 0)\n\n    def test_returns_correct_product_quantity(self):\n        self.assertEqual(10, self.basket.product_quantity(\n            self.product))\n\n    def test_returns_correct_line_quantity_for_existing_product_and_stockrecord(self):\n        self.assertEqual(10, self.basket.line_quantity(\n            self.product, self.record))\n\n    def test_returns_zero_line_quantity_for_alternative_stockrecord(self):\n        record = factories.create_stockrecord(\n            self.product, price_excl_tax=D('5.00'))\n        self.assertEqual(0, self.basket.line_quantity(\n            self.product, record))\n\n    def test_returns_zero_line_quantity_for_missing_product_and_stockrecord(self):\n        product = factories.create_product()\n        record = factories.create_stockrecord(\n            product, price_excl_tax=D('5.00'))\n        self.assertEqual(0, self.basket.line_quantity(\n            product, record))\n\n    def test_returns_correct_quantity_for_existing_product_and_stockrecord_and_options(self):\n        product = factories.create_product()\n        record = factories.create_stockrecord(\n            product, price_excl_tax=D('5.00'))\n        option = Option.objects.create(name=\"Message\")\n        options = [{\"option\": option, \"value\": \"2\"}]\n\n        self.basket.add(product, options=options)\n        self.assertEqual(0, self.basket.line_quantity(\n            product, record))\n        self.assertEqual(1, self.basket.line_quantity(\n            product, record, options))\n\n    def test_total_sums_product_totals(self):\n        product = factories.create_product()\n        factories.create_stockrecord(\n            product, price_excl_tax=D('5.00'))\n        self.basket.add(product, 1)\n        self.assertEqual(self.basket.total_excl_tax, 105)\n\n    def test_totals_for_free_products(self):\n        basket = Basket()\n        basket.strategy = strategy.Default()\n        # Add a zero-priced product to the basket\n        product = factories.create_product()\n        factories.create_stockrecord(\n            product, price_excl_tax=D('0.00'), num_in_stock=10)\n        basket.add(product, 1)\n\n        self.assertEqual(basket.lines.count(), 1)\n        self.assertEqual(basket.total_excl_tax, 0)\n        self.assertEqual(basket.total_incl_tax, 0)\n\n    def test_basket_prices_calculation_for_unavailable_pricing(self):\n        new_product = factories.create_product()\n        factories.create_stockrecord(\n            new_product, price_excl_tax=D('5.00'))\n        self.basket.add(new_product, 1)\n\n        class UnavailableProductStrategy(strategy.Default):\n            \"\"\" A test strategy that makes a specific product unavailable \"\"\"\n\n            def availability_policy(self, product, stockrecord):\n                if product == new_product:\n                    return availability.Unavailable()\n                return super().availability_policy(product, stockrecord)\n\n            def pricing_policy(self, product, stockrecord):\n                if product == new_product:\n                    return prices.Unavailable()\n                return super().pricing_policy(product, stockrecord)\n\n        self.basket.strategy = UnavailableProductStrategy()\n        line = self.basket.all_lines()[1]\n        self.assertEqual(line.get_warning(), \"'D\\xf9\\uff4d\\u03fb\\u03d2 title' is no longer available\")\n        self.assertIsNone(line.line_price_excl_tax)\n        self.assertIsNone(line.line_price_incl_tax)\n        self.assertIsNone(line.line_price_excl_tax_incl_discounts)\n        self.assertIsNone(line.line_price_incl_tax_incl_discounts)\n        self.assertIsNone(line.line_tax)\n        self.assertEqual(self.basket.total_excl_tax, 100)\n        self.assertEqual(self.basket.total_incl_tax, 100)\n        self.assertEqual(self.basket.total_excl_tax_excl_discounts, 100)\n        self.assertEqual(self.basket.total_incl_tax_excl_discounts, 100)\n\n    def test_max_allowed_quantity(self):\n        self.basket.add_product(self.product, quantity=3)\n\n        # max allowed here is 7 (20-10+3)\n        with self.settings(OSCAR_MAX_BASKET_QUANTITY_THRESHOLD=20):\n            max_allowed, basket_threshold = self.basket.max_allowed_quantity()\n            self.assertEqual(max_allowed, 7)\n            self.assertEqual(basket_threshold, 20)\n\n        # but we can also completely disable the threshold\n        with self.settings(OSCAR_MAX_BASKET_QUANTITY_THRESHOLD=None):\n            max_allowed, basket_threshold = self.basket.max_allowed_quantity()\n            self.assertEqual(max_allowed, None)\n            self.assertEqual(basket_threshold, None)\n\n    def test_is_quantity_allowed(self):\n        with self.settings(OSCAR_MAX_BASKET_QUANTITY_THRESHOLD=20):\n            # 7 or below is possible\n            allowed, message = self.basket.is_quantity_allowed(qty=7)\n            self.assertTrue(allowed)\n            self.assertIsNone(message)\n            # but above it's not\n            allowed, message = self.basket.is_quantity_allowed(qty=11)\n            self.assertFalse(allowed)\n            self.assertIsNotNone(message)\n\n        with self.settings(OSCAR_MAX_BASKET_QUANTITY_THRESHOLD=None):\n            # with the treshold disabled all quantities are possible\n            allowed, message = self.basket.is_quantity_allowed(qty=7)\n            self.assertTrue(allowed)\n            self.assertIsNone(message)\n            allowed, message = self.basket.is_quantity_allowed(qty=5000)\n            self.assertTrue(allowed)\n            self.assertIsNone(message)\n\n\nclass TestMergingTwoBaskets(TestCase):\n\n    def setUp(self):\n        self.product = factories.create_product()\n        self.record = factories.create_stockrecord(\n            self.product, price_excl_tax=D('10.00'))\n        self.purchase_info = factories.create_purchase_info(self.record)\n\n        self.main_basket = Basket()\n        self.main_basket.strategy = strategy.Default()\n        self.main_basket.add(self.product, quantity=2)\n\n        self.merge_basket = Basket()\n        self.merge_basket.strategy = strategy.Default()\n        self.merge_basket.add(self.product, quantity=1)\n\n        self.main_basket.merge(self.merge_basket)\n\n    def test_doesnt_sum_quantities(self):\n        self.assertEqual(1, self.main_basket.num_lines)\n\n    def test_changes_status_of_merge_basket(self):\n        self.assertEqual(Basket.MERGED, self.merge_basket.status)\n\n\nclass TestASubmittedBasket(TestCase):\n\n    def setUp(self):\n        self.basket = Basket()\n        self.basket.strategy = strategy.Default()\n        self.basket.submit()\n\n    def test_has_correct_status(self):\n        self.assertTrue(self.basket.is_submitted)\n\n    def test_can_be_edited(self):\n        self.assertFalse(self.basket.can_be_edited)\n\n\nclass TestMergingAVoucherBasket(TestCase):\n\n    def test_transfers_vouchers_to_new_basket(self):\n        baskets = [factories.BasketFactory(), factories.BasketFactory()]\n        voucher = factories.VoucherFactory()\n        baskets[0].vouchers.add(voucher)\n        baskets[1].merge(baskets[0])\n\n        self.assertEqual(1, baskets[1].vouchers.all().count())\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0002_auto_20150927_1547'),\n    ]\n\n    operations = [\n        migrations.AlterModelOptions(\n            name='useraddress',\n            options={'ordering': ['-num_orders_as_shipping_address'], 'verbose_name': 'User address',\n                     'verbose_name_plural': 'User addresses'},\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Shipping Address'),\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_shipping_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n    ]\n",
    "output": "import datetime\n\nfrom django.test import TestCase\n\nfrom oscar.apps.basket.reports import (\n    OpenBasketReportGenerator, SubmittedBasketReportGenerator)\n\n\nclass TestBasketReports(TestCase):\n\n    def test_open_report_doesnt_error(self):\n        data = {\n            'start_date': datetime.date(2012, 5, 1),\n            'end_date': datetime.date(2012, 5, 17),\n            'formatter': 'CSV'\n        }\n        generator = OpenBasketReportGenerator(**data)\n        generator.generate()\n\n    def test_submitted_report_doesnt_error(self):\n        data = {\n            'start_date': datetime.date(2012, 5, 1),\n            'end_date': datetime.date(2012, 5, 17),\n            'formatter': 'CSV'\n        }\n        generator = SubmittedBasketReportGenerator(**data)\n        generator.generate()\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0002_auto_20150927_1547'),\n    ]\n\n    operations = [\n        migrations.AlterModelOptions(\n            name='useraddress',\n            options={'ordering': ['-num_orders_as_shipping_address'], 'verbose_name': 'User address',\n                     'verbose_name_plural': 'User addresses'},\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Shipping Address'),\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_shipping_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n    ]\n",
    "output": "\nimport pytest\nfrom oscar.test.factories import (\n    BasketFactory, ConditionalOfferFactory, ProductFactory)\n\n\n@pytest.fixture\ndef filled_basket():\n    basket = BasketFactory()\n    product1 = ProductFactory()\n    product2 = ProductFactory()\n    basket.add_product(product1, quantity=10)\n    basket.add_product(product2, quantity=20)\n    return basket\n\n\n@pytest.mark.django_db\nclass TestLineOfferConsumer(object):\n\n    def test_consumed_no_offer(self, filled_basket):\n        for line in filled_basket.all_lines():\n            assert line.consumer.consumed() == 0\n\n    def test_consumed_with_offer(self, filled_basket):\n        offer1 = ConditionalOfferFactory(name='offer1')\n        offer2 = ConditionalOfferFactory(name='offer2')\n        offer1.exclusive = False\n        offer2.exclusive = False\n\n        for line in filled_basket.all_lines():\n            assert line.consumer.consumed(offer1) == 0\n            assert line.consumer.consumed(offer2) == 0\n\n        line1 = filled_basket.all_lines()[0]\n        line2 = filled_basket.all_lines()[1]\n\n        line1.consumer.consume(1, offer1)\n        assert line1.consumer.consumed() == 1\n        assert line1.consumer.consumed(offer1) == 1\n        assert line1.consumer.consumed(offer2) == 0\n\n        line1.consumer.consume(9, offer1)\n        assert line1.consumer.consumed() == line1.quantity\n        assert line1.consumer.consumed(offer1) == line1.quantity\n        assert line1.consumer.consumed(offer2) == 0\n\n        line1.consumer.consume(99, offer1)\n        assert line1.consumer.consumed(offer1) == line1.quantity\n        assert line1.consumer.consumed(offer2) == 0\n\n        line1.consumer.consume(1, offer2)\n        line2.consumer.consume(1, offer2)\n\n        assert line1.consumer.consumed(offer2) == 1\n        assert line2.consumer.consumed(offer2) == 1\n\n    def test_consume(self, filled_basket):\n        line = filled_basket.all_lines()[0]\n        line.consume(1)\n        assert line.quantity_with_discount == 1\n        line.consume(99)\n        assert line.quantity_with_discount == 10\n\n    def test_consumed_with_exclusive_offer(self, filled_basket):\n        offer1 = ConditionalOfferFactory(name='offer1')\n        offer2 = ConditionalOfferFactory(name='offer2')\n        offer3 = ConditionalOfferFactory(name='offer3')\n        offer1.exclusive = True\n        offer2.exclusive = False\n        offer3.exclusive = False\n\n        for line in filled_basket.all_lines():\n            assert line.consumer.consumed(offer1) == 0\n            assert line.consumer.consumed(offer2) == 0\n\n        line1 = filled_basket.all_lines()[0]\n        line2 = filled_basket.all_lines()[1]\n\n        line1.consumer.consume(1, offer1)\n        assert line1.is_available_for_offer_discount(offer2) is True\n\n        line1.consumer.consume(99, offer1)\n        assert line1.is_available_for_offer_discount(offer2) is False\n\n        line2.consumer.consume(1, offer2)\n        assert line2.is_available_for_offer_discount(offer1) is True\n\n        line2.consumer.consume(99, offer2)\n        assert line2.is_available_for_offer_discount(offer1) is False\n        assert line2.is_available_for_offer_discount(offer3) is True\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0002_auto_20150927_1547'),\n    ]\n\n    operations = [\n        migrations.AlterModelOptions(\n            name='useraddress',\n            options={'ordering': ['-num_orders_as_shipping_address'], 'verbose_name': 'User address',\n                     'verbose_name_plural': 'User addresses'},\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Shipping Address'),\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_shipping_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n    ]\n",
    "output": "from django.contrib.messages import get_messages\nfrom django.test import TestCase\nfrom django.urls import reverse\n\nfrom oscar.apps.basket import views\nfrom oscar.test import factories\nfrom tests.fixtures import RequestFactory\n\n\nclass TestVoucherAddView(TestCase):\n    def test_get(self):\n        request = RequestFactory().get('/')\n\n        view = views.VoucherAddView.as_view()\n        response = view(request)\n\n        self.assertEqual(response.status_code, 302)\n\n    def _get_voucher_message(self, request):\n        return '\\n'.join(str(m.message) for m in get_messages(request))\n\n    def test_post_valid(self):\n        voucher = factories.VoucherFactory()\n        self.assertTrue(voucher.is_active())\n\n        data = {\n            'code': voucher.code\n        }\n        request = RequestFactory().post('/', data=data)\n        request.basket.save()\n\n        view = views.VoucherAddView.as_view()\n        response = view(request)\n        self.assertEqual(response.status_code, 302)\n\n        voucher = voucher.__class__.objects.get(pk=voucher.pk)\n        self.assertEqual(voucher.num_basket_additions, 1, msg=self._get_voucher_message(request))\n\n    def test_post_valid_from_set(self):\n        voucherset = factories.VoucherSetFactory()\n        voucher = voucherset.vouchers.first()\n\n        self.assertTrue(voucher.is_active())\n\n        data = {\n            'code': voucher.code\n        }\n        request = RequestFactory().post('/', data=data)\n        request.basket.save()\n\n        view = views.VoucherAddView.as_view()\n        response = view(request)\n        self.assertEqual(response.status_code, 302)\n\n        voucher = voucher.__class__.objects.get(pk=voucher.pk)\n        self.assertEqual(voucher.num_basket_additions, 1, msg=self._get_voucher_message(request))\n\n        self.assertEqual(voucherset.num_basket_additions, 1)\n\n\nclass TestVoucherRemoveView(TestCase):\n    def test_post_valid(self):\n        voucher = factories.VoucherFactory(num_basket_additions=5)\n\n        data = {\n            'code': voucher.code\n        }\n        request = RequestFactory().post('/', data=data)\n        request.basket.save()\n        request.basket.vouchers.add(voucher)\n\n        view = views.VoucherRemoveView.as_view()\n        response = view(request, pk=voucher.pk)\n        self.assertEqual(response.status_code, 302)\n\n        voucher = voucher.__class__.objects.get(pk=voucher.pk)\n        self.assertEqual(voucher.num_basket_additions, 4)\n\n    def test_post_with_missing_voucher(self):\n        \"\"\" If the voucher is missing, verify the view queues a message and redirects. \"\"\"\n        pk = '12345'\n        view = views.VoucherRemoveView.as_view()\n        request = RequestFactory().post('/')\n        request.basket.save()\n        response = view(request, pk=pk)\n\n        self.assertEqual(response.status_code, 302)\n\n        actual = list(get_messages(request))[-1].message\n        expected = \"No voucher found with id '{}'\".format(pk)\n        self.assertEqual(actual, expected)\n\n\nclass TestBasketSummaryView(TestCase):\n    def setUp(self):\n        self.url = reverse('basket:summary')\n        self.country = factories.CountryFactory()\n        self.user = factories.UserFactory()\n\n    def test_default_shipping_address(self):\n        user_address = factories.UserAddressFactory(\n            country=self.country, user=self.user, is_default_for_shipping=True\n        )\n        request = RequestFactory().get(self.url, user=self.user)\n        view = views.BasketView(request=request)\n        self.assertEquals(view.get_default_shipping_address(), user_address)\n\n    def test_default_shipping_address_for_anonymous_user(self):\n        request = RequestFactory().get(self.url)\n        view = views.BasketView(request=request)\n        self.assertIsNone(view.get_default_shipping_address())\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0002_auto_20150927_1547'),\n    ]\n\n    operations = [\n        migrations.AlterModelOptions(\n            name='useraddress',\n            options={'ordering': ['-num_orders_as_shipping_address'], 'verbose_name': 'User address',\n                     'verbose_name_plural': 'User addresses'},\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Shipping Address'),\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_shipping_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n    ]\n",
    "output": ""
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0002_auto_20150927_1547'),\n    ]\n\n    operations = [\n        migrations.AlterModelOptions(\n            name='useraddress',\n            options={'ordering': ['-num_orders_as_shipping_address'], 'verbose_name': 'User address',\n                     'verbose_name_plural': 'User addresses'},\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Shipping Address'),\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_shipping_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n    ]\n",
    "output": "from decimal import Decimal as D\nfrom unittest import mock\n\nfrom django.test import TestCase\n\nfrom oscar.apps.checkout import calculators\nfrom oscar.core import prices\n\n\nclass TestOrderTotalCalculator(TestCase):\n\n    def setUp(self):\n        self.calculator = calculators.OrderTotalCalculator()\n\n    def test_returns_correct_totals_when_tax_is_not_known(self):\n        basket = mock.Mock()\n        basket.total_excl_tax = D('10.00')\n        basket.is_tax_known = False\n\n        shipping_charge = prices.Price(\n            currency=basket.currency, excl_tax=D('5.00'))\n\n        total = self.calculator.calculate(basket, shipping_charge)\n\n        self.assertIsInstance(total, prices.Price)\n        self.assertEqual(D('10.00') + D('5.00'), total.excl_tax)\n        self.assertFalse(total.is_tax_known)\n\n    def test_returns_correct_totals_when_tax_is_known(self):\n        basket = mock.Mock()\n        basket.total_excl_tax = D('10.00')\n        basket.total_incl_tax = D('12.00')\n        basket.is_tax_known = True\n\n        shipping_charge = prices.Price(\n            currency=basket.currency, excl_tax=D('5.00'),\n            tax=D('0.50'))\n\n        total = self.calculator.calculate(basket, shipping_charge)\n\n        self.assertIsInstance(total, prices.Price)\n        self.assertEqual(D('10.00') + D('5.00'), total.excl_tax)\n        self.assertTrue(total.is_tax_known)\n        self.assertEqual(D('12.00') + D('5.50'), total.incl_tax)\n        self.assertEqual(D('2.00') + D('0.50'), total.tax)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0002_auto_20150927_1547'),\n    ]\n\n    operations = [\n        migrations.AlterModelOptions(\n            name='useraddress',\n            options={'ordering': ['-num_orders_as_shipping_address'], 'verbose_name': 'User address',\n                     'verbose_name_plural': 'User addresses'},\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Shipping Address'),\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_shipping_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n    ]\n",
    "output": "# coding=utf-8\nfrom django.test import TestCase\nfrom django.test.utils import override_settings\n\nfrom oscar.apps.address.models import Country\nfrom oscar.apps.checkout.forms import ShippingAddressForm\nfrom oscar.test.factories import CountryFactory\n\n\nclass AnotherShippingAddressForm(ShippingAddressForm):\n    phone_number_fields = {\n        'phone_number': {\n            'required': False,\n            'help_text': '',\n            'max_length': 32,\n            'label': 'Phone number'\n        },\n        'another_phone_number': {\n            'required': False,\n            'help_text': 'Another phone number help text',\n            'max_length': 32,\n            'label': 'Another phone number'\n        },\n    }\n\n\nclass TestShippingAddressForm(TestCase):\n    minimal_data = {\n        'first_name': 'B\u00e4rry',\n        'last_name': 'Chuckle',\n        'line1': '1 King St',\n        'line4': 'Goth\u00e1m',\n        'postcode': 'N1 7RR'\n    }\n\n    def setUp(self):\n        CountryFactory(iso_3166_1_a2='GB', is_shipping_country=True)\n\n    def test_removes_country_field(self):\n        self.assertTrue('country' not in ShippingAddressForm().fields)\n\n    def test_keeps_country_field(self):\n        CountryFactory(iso_3166_1_a2='DE', is_shipping_country=True)\n        self.assertTrue('country' in ShippingAddressForm().fields)\n\n    @override_settings(OSCAR_REQUIRED_ADDRESS_FIELDS=('last_name', 'postcode'))\n    def test_required_fields_validated(self):\n        form = ShippingAddressForm()\n        self.assertTrue(form.fields['last_name'].required)\n        self.assertTrue(form.fields['postcode'].required)\n        self.assertFalse(form.fields['first_name'].required)\n        self.assertFalse(form.fields['line2'].required)\n        self.assertFalse(form.fields['line3'].required)\n        self.assertFalse(form.fields['line4'].required)\n\n    @override_settings(OSCAR_REQUIRED_ADDRESS_FIELDS=('phone_number',))\n    def test_required_phone_number_validated(self):\n        # This needs a separate test because of the logic in PhoneNumberMixin\n        form = ShippingAddressForm()\n        self.assertTrue(form.fields['phone_number'].required)\n\n    # Tests where the country field is hidden\n\n    def test_is_valid_without_phone_number(self):\n        self.assertTrue(ShippingAddressForm(self.minimal_data).is_valid())\n\n    def test_only_accepts_british_local_phone_number(self):\n        data = self.minimal_data.copy()\n        data['phone_number'] = '07 914721389'  # local UK number\n        self.assertTrue(ShippingAddressForm(data).is_valid())\n\n        data['phone_number'] = '0176 968 426 71'  # local German number\n        self.assertFalse(ShippingAddressForm(data).is_valid())\n\n    def test_only_accepts_british_local_phone_numbers(self):\n        data = self.minimal_data.copy()\n        # Both numbers are British local numbers\n        data['phone_number'] = '07 914721389'\n        data['another_phone_number'] = '0344493 0787'  # British Airways\n        self.assertTrue(AnotherShippingAddressForm(data).is_valid())\n\n        # Both numbers are local German numbers\n        data['phone_number'] = '0176 968 426 71'\n        data['another_phone_number'] = '07032 15 49225'  # IBM Germany\n        self.assertFalse(AnotherShippingAddressForm(data).is_valid())\n\n        # One number is British number, another is German number\n        data['phone_number'] = '07 914721389'\n        data['another_phone_number'] = '0176 968 426 71'\n        self.assertFalse(AnotherShippingAddressForm(data).is_valid())\n\n        # As previous case, but numbers are reversed\n        data['phone_number'] = '0176 968 426 71'\n        data['another_phone_number'] = '07 914721389'\n        self.assertFalse(AnotherShippingAddressForm(data).is_valid())\n\n    def test_is_valid_with_international_phone_number(self):\n        data = self.minimal_data.copy()\n        data['phone_number'] = '+49 176 968426 71'\n        form = ShippingAddressForm(data)\n        self.assertTrue(form.is_valid())\n\n    def test_is_valid_with_international_phone_numbers(self):\n        data = self.minimal_data.copy()\n        data['phone_number'] = '+49 176 968426 71'\n        data['another_phone_number'] = '+49-1805-426452'\n        form = AnotherShippingAddressForm(data)\n        self.assertTrue(form.is_valid())\n\n    # Tests where the country field exists\n\n    def test_needs_country_data(self):\n        CountryFactory(iso_3166_1_a2='DE', is_shipping_country=True)\n\n        self.assertFalse(ShippingAddressForm(self.minimal_data).is_valid())\n\n        data = self.minimal_data.copy()\n        data['country'] = Country.objects.get(iso_3166_1_a2='GB').pk\n        self.assertTrue(ShippingAddressForm(data).is_valid())\n\n    def test_only_accepts_local_phone_number_when_country_matches(self):\n        CountryFactory(iso_3166_1_a2='DE', is_shipping_country=True)\n\n        data = self.minimal_data.copy()\n        data['phone_number'] = '07 914721389'  # local UK number\n\n        data['country'] = Country.objects.get(iso_3166_1_a2='DE').pk\n        self.assertFalse(ShippingAddressForm(data).is_valid())\n\n        data['country'] = Country.objects.get(iso_3166_1_a2='GB').pk\n        self.assertTrue(ShippingAddressForm(data).is_valid())\n\n    def test_only_accepts_local_phone_numbers_when_country_matches(self):\n        CountryFactory(iso_3166_1_a2='DE', is_shipping_country=True)\n        data = self.minimal_data.copy()\n        # Local UK numbers\n        data['phone_number'] = '07 914721389'\n        data['another_phone_number'] = '0344493 0787'\n\n        data['country'] = Country.objects.get(iso_3166_1_a2='DE').pk\n        self.assertFalse(ShippingAddressForm(data).is_valid())\n\n        data['country'] = Country.objects.get(iso_3166_1_a2='GB').pk\n        self.assertTrue(ShippingAddressForm(data).is_valid())\n\n    @override_settings(OSCAR_REQUIRED_ADDRESS_FIELDS=('phone_number',))\n    def test_local_phone_number_invalid_without_country(self):\n        # Add another country, so we have two.\n        CountryFactory(iso_3166_1_a2='DE', is_shipping_country=True)\n        data = self.minimal_data.copy()\n        data['phone_number'] = '07 914721389'\n        # User hasn't selected a country. Because there are multiple country\n        # choices we should not accept the local number.\n        form = ShippingAddressForm(data)\n        self.assertFalse(form.is_valid())\n        self.assertIn('phone_number', form.errors)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0002_auto_20150927_1547'),\n    ]\n\n    operations = [\n        migrations.AlterModelOptions(\n            name='useraddress',\n            options={'ordering': ['-num_orders_as_shipping_address'], 'verbose_name': 'User address',\n                     'verbose_name_plural': 'User addresses'},\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Shipping Address'),\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_shipping_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n    ]\n",
    "output": "from decimal import Decimal as D\nfrom unittest import mock\n\nfrom django.http import HttpRequest\nfrom django.test import TestCase\nfrom django.test.utils import override_settings\n\nfrom oscar.apps.checkout.calculators import OrderTotalCalculator\nfrom oscar.apps.checkout.mixins import CheckoutSessionMixin, OrderPlacementMixin\nfrom oscar.apps.checkout.exceptions import FailedPreCondition\nfrom oscar.core.loading import get_model\nfrom oscar.test import factories\nfrom oscar.test.basket import add_product\nfrom oscar.test.utils import RequestFactory\nfrom oscar.apps.shipping.methods import FixedPrice, Free\n\n\nOrder = get_model('order', 'Order')\n\n\nclass TestOrderPlacementMixin(TestCase):\n\n    def test_returns_none_when_no_shipping_address_passed_to_creation_method(self):\n        address = OrderPlacementMixin().create_shipping_address(\n            user=mock.Mock(), shipping_address=None)\n        self.assertEqual(address, None)\n\n    def test_update_address_book(self):\n        basket = factories.create_basket(empty=True)\n        user = factories.UserFactory()\n        add_product(basket, D('12.00'))\n        shipping_method = FixedPrice(D('5.00'), D('5.00'))\n\n        billing_address = factories.BillingAddressFactory(line1='1 Boardwalk Place',\n                                                          line2='Trafalgar Way',\n                                                          line3='Tower Hamlets',\n                                                          line4='London')\n        shipping_address = factories.ShippingAddressFactory(line1='Knightsbridge',\n                                                            line2='159',\n                                                            line4='London')\n        shipping_charge = shipping_method.calculate(basket)\n        order_total = OrderTotalCalculator().calculate(basket, shipping_charge)\n\n        order_submission_data = {'user': user,\n                                 'order_number': '12345',\n                                 'basket': basket,\n                                 'shipping_address': shipping_address,\n                                 'shipping_method': shipping_method,\n                                 'shipping_charge': shipping_charge,\n                                 'billing_address': billing_address,\n                                 'order_total': order_total}\n        OrderPlacementMixin().place_order(**order_submission_data)\n\n        self.assertEqual(user.addresses.filter(hash=billing_address.generate_hash()).count(), 1)\n        self.assertEqual(user.addresses.filter(hash=shipping_address.generate_hash()).count(), 1)\n\n        user_billing_address = user.addresses.get(hash=billing_address.generate_hash())\n        user_shipping_address = user.addresses.get(hash=shipping_address.generate_hash())\n        self.assertEqual(user_billing_address.num_orders_as_billing_address, 1)\n        self.assertEqual(user_shipping_address.num_orders_as_shipping_address, 1)\n\n        order_submission_data['order_number'] = '12346'\n\n        OrderPlacementMixin().place_order(**order_submission_data)\n\n        user_billing_address = user.addresses.get(hash=billing_address.generate_hash())\n        user_shipping_address = user.addresses.get(hash=shipping_address.generate_hash())\n        self.assertEqual(user_billing_address.num_orders_as_billing_address, 2)\n        self.assertEqual(user_shipping_address.num_orders_as_shipping_address, 2)\n\n        order_submission_data.pop('billing_address', None)\n        order_submission_data['order_number'] = '123457'\n        OrderPlacementMixin().place_order(**order_submission_data)\n\n        user_billing_address = user.addresses.get(hash=billing_address.generate_hash())\n        user_shipping_address = user.addresses.get(hash=shipping_address.generate_hash())\n        self.assertEqual(user_billing_address.num_orders_as_billing_address, 2)\n        self.assertEqual(user_shipping_address.num_orders_as_shipping_address, 3)\n\n        shipping_address.line2 = '160'\n        order_submission_data['billing_address'] = billing_address\n        order_submission_data['order_number'] = '123458'\n        OrderPlacementMixin().place_order(**order_submission_data)\n\n        user_billing_address = user.addresses.get(hash=billing_address.generate_hash())\n        user_shipping_address = user.addresses.get(hash=shipping_address.generate_hash())\n        self.assertEqual(user_billing_address.num_orders_as_billing_address, 3)\n        self.assertEqual(user_shipping_address.num_orders_as_shipping_address, 1)\n\n    @override_settings(SITE_ID='')\n    def test_multi_site(self):\n        basket = factories.create_basket(empty=True)\n        site1 = factories.SiteFactory()\n        site2 = factories.SiteFactory()\n        request = HttpRequest()\n        request.META['SERVER_PORT'] = 80\n        request.META['SERVER_NAME'] = site1.domain\n        user = factories.UserFactory()\n        add_product(basket, D('12.00'))\n        shipping_method = Free()\n        shipping_charge = shipping_method.calculate(basket)\n        order_total = OrderTotalCalculator().calculate(basket, shipping_charge)\n\n        billing_address = factories.BillingAddressFactory()\n        shipping_address = factories.ShippingAddressFactory()\n        order_submission_data = {'user': user,\n                                 'order_number': '12345',\n                                 'basket': basket,\n                                 'shipping_method': shipping_method,\n                                 'shipping_charge': shipping_charge,\n                                 'order_total': order_total,\n                                 'billing_address': billing_address,\n                                 'shipping_address': shipping_address,\n                                 'request': request}\n        OrderPlacementMixin().place_order(**order_submission_data)\n        order1 = Order.objects.get(number='12345')\n        self.assertEqual(order1.site, site1)\n\n        add_product(basket, D('12.00'))\n        request.META['SERVER_NAME'] = site2.domain\n        order_submission_data['order_number'] = '12346'\n        order_submission_data['request'] = request\n        OrderPlacementMixin().place_order(**order_submission_data)\n        order2 = Order.objects.get(number='12346')\n        self.assertEqual(order2.site, site2)\n\n    def test_multiple_payment_events(self):\n        basket = factories.create_basket(empty=True)\n        user = factories.UserFactory()\n        add_product(basket, D('100.00'))\n        order_placement = OrderPlacementMixin()\n        order_placement.add_payment_event('Gift Card Payment', D('10'))\n        order_placement.add_payment_event('Credit Card Payment', D('90'))\n        shipping_method = Free()\n        shipping_charge = shipping_method.calculate(basket)\n        order_total = OrderTotalCalculator().calculate(basket, shipping_charge)\n\n        billing_address = factories.BillingAddressFactory()\n        shipping_address = factories.ShippingAddressFactory()\n        order_submission_data = {'user': user,\n                                 'order_number': '12345',\n                                 'basket': basket,\n                                 'shipping_method': shipping_method,\n                                 'shipping_charge': shipping_charge,\n                                 'order_total': order_total,\n                                 'billing_address': billing_address,\n                                 'shipping_address': shipping_address}\n        order_placement.place_order(**order_submission_data)\n        order1 = Order.objects.get(number='12345')\n        self.assertEqual(order1.payment_events.count(), 2)\n        event1 = order1.payment_events.all()[0]\n        event2 = order1.payment_events.all()[1]\n        self.assertEqual(event1.event_type.name, 'Credit Card Payment')\n        self.assertEqual(event1.amount, D('90'))\n        self.assertEqual(event1.lines.count(), 1)\n        self.assertEqual(event2.event_type.name, 'Gift Card Payment')\n        self.assertEqual(event2.amount, D('10'))\n        self.assertEqual(event2.lines.count(), 1)\n\n\nclass TestCheckoutSessionMixin(TestCase):\n\n    def setUp(self):\n        self.request = RequestFactory().get('/')\n        self.product = factories.create_product(num_in_stock=10)\n        self.stock_record = self.product.stockrecords.first()\n\n    def add_product_to_basket(self, product, quantity=1):\n        self.request.basket.add_product(product, quantity=quantity)\n        self.assertEqual(len(self.request.basket.all_lines()), 1)\n        self.assertEqual(self.request.basket.all_lines()[0].product, product)\n\n    def test_check_basket_is_valid_no_stock_available(self):\n        self.add_product_to_basket(self.product)\n        CheckoutSessionMixin().check_basket_is_valid(self.request)\n        self.stock_record.allocate(10)\n        self.stock_record.save()\n        with self.assertRaises(FailedPreCondition):\n            CheckoutSessionMixin().check_basket_is_valid(self.request)\n\n    def test_check_basket_is_valid_stock_exceeded(self):\n        self.add_product_to_basket(self.product)\n        CheckoutSessionMixin().check_basket_is_valid(self.request)\n        self.request.basket.add_product(self.product, quantity=11)\n        with self.assertRaises(FailedPreCondition):\n            CheckoutSessionMixin().check_basket_is_valid(self.request)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0002_auto_20150927_1547'),\n    ]\n\n    operations = [\n        migrations.AlterModelOptions(\n            name='useraddress',\n            options={'ordering': ['-num_orders_as_shipping_address'], 'verbose_name': 'User address',\n                     'verbose_name_plural': 'User addresses'},\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Shipping Address'),\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_shipping_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n    ]\n",
    "output": "from unittest import mock\n\nfrom django.test import TestCase\nfrom django.test.client import RequestFactory\nfrom django.contrib.sessions.middleware import SessionMiddleware\n\nfrom oscar.apps.checkout.utils import CheckoutSessionData\n\n\nclass TestCheckoutSession(TestCase):\n    \"\"\"\n    oscar.apps.checkout.utils.CheckoutSessionData\n    \"\"\"\n\n    def setUp(self):\n        request = RequestFactory().get('/')\n        SessionMiddleware().process_request(request)\n        self.session_data = CheckoutSessionData(request)\n\n    def test_allows_data_to_be_written_and_read_out(self):\n        self.session_data._set('namespace', 'key', 'value')\n        self.assertEqual('value', self.session_data._get('namespace', 'key'))\n\n    def test_allows_set_data_can_be_unset(self):\n        self.session_data._set('namespace', 'key', 'value')\n        self.session_data._unset('namespace', 'key')\n        self.assertIsNone(self.session_data._get('namespace', 'key'))\n\n    def test_stores_guest_email(self):\n        self.session_data.set_guest_email('a@a.com')\n        self.assertEqual('a@a.com', self.session_data.get_guest_email())\n\n    def test_allows_a_namespace_to_be_flushed(self):\n        self.session_data._set('ns', 'a', 1)\n        self.session_data._set('ns', 'b', 2)\n        self.session_data._flush_namespace('ns')\n        self.assertIsNone(self.session_data._get('ns', 'a'))\n        self.assertIsNone(self.session_data._get('ns', 'b'))\n\n    def test_allows_bill_to_user_address(self):\n        address = mock.Mock()\n        address.id = 1\n        self.session_data.bill_to_user_address(address)\n        self.assertEqual(1, self.session_data.billing_user_address_id())\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0002_auto_20150927_1547'),\n    ]\n\n    operations = [\n        migrations.AlterModelOptions(\n            name='useraddress',\n            options={'ordering': ['-num_orders_as_shipping_address'], 'verbose_name': 'User address',\n                     'verbose_name_plural': 'User addresses'},\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Shipping Address'),\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_shipping_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n    ]\n",
    "output": "from django.test import TestCase\nfrom django.test.utils import override_settings\nfrom django.urls import reverse\n\nfrom oscar.test.factories import OrderFactory\n\n\nclass ThankYouViewTestCase(TestCase):\n\n    @override_settings(OSCAR_ALLOW_ANON_CHECKOUT=True)\n    def test_analytics_event_triggered_only_on_first_view(self):\n        order = OrderFactory()\n        session = self.client.session\n        # Put the order ID in the session, mimicking a completed order,\n        # so that we can reach the thank you page.\n        session['checkout_order_id'] = order.pk\n        session.save()\n\n        r1 = self.client.get(reverse('checkout:thank-you'), follow=True)\n        self.assertTrue(r1.context['send_analytics_event'])\n\n        # Request the view a second time\n        r2 = self.client.get(reverse('checkout:thank-you'), follow=True)\n        self.assertFalse(r2.context['send_analytics_event'])\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0002_auto_20150927_1547'),\n    ]\n\n    operations = [\n        migrations.AlterModelOptions(\n            name='useraddress',\n            options={'ordering': ['-num_orders_as_shipping_address'], 'verbose_name': 'User address',\n                     'verbose_name_plural': 'User addresses'},\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Shipping Address'),\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_shipping_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n    ]\n",
    "output": ""
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0002_auto_20150927_1547'),\n    ]\n\n    operations = [\n        migrations.AlterModelOptions(\n            name='useraddress',\n            options={'ordering': ['-num_orders_as_shipping_address'], 'verbose_name': 'User address',\n                     'verbose_name_plural': 'User addresses'},\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Shipping Address'),\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_shipping_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n    ]\n",
    "output": "# coding=utf-8\n\"\"\"\nAutoSlugField taken from django-extensions at\n15d3eb305957cee4768dd86e44df1bdad341a10e\nUses Oscar's slugify function instead of Django's\n\nCopyright (c) 2007 Michael Trier\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\"\"\nfrom django.db import models\nfrom django.test import TestCase\nfrom django.test.utils import override_settings\n\nfrom oscar.core.loading import get_model\n\nSluggedTestModel = get_model('model_tests_app', 'sluggedtestmodel')\nChildSluggedTestModel = get_model('model_tests_app', 'childsluggedtestmodel')\nCustomSluggedTestModel = get_model('model_tests_app', 'CustomSluggedTestModel')\n\n\nclass AutoSlugFieldTest(TestCase):\n    def tearDown(self):\n        super().tearDown()\n\n        SluggedTestModel.objects.all().delete()\n\n    def test_auto_create_slug(self):\n        m = SluggedTestModel(title='foo')\n        m.save()\n        self.assertEqual(m.slug, 'foo')\n\n    def test_auto_create_next_slug(self):\n        m = SluggedTestModel(title='foo')\n        m.save()\n\n        m = SluggedTestModel(title='foo')\n        m.save()\n        self.assertEqual(m.slug, 'foo-2')\n\n    def test_auto_create_slug_with_number(self):\n        m = SluggedTestModel(title='foo 2012')\n        m.save()\n        self.assertEqual(m.slug, 'foo-2012')\n\n    def test_auto_update_slug_with_number(self):\n        m = SluggedTestModel(title='foo 2012')\n        m.save()\n        m.save()\n        self.assertEqual(m.slug, 'foo-2012')\n\n    def test_auto_create_unicode_slug(self):\n        with override_settings(OSCAR_SLUG_ALLOW_UNICODE=True):\n            m = SluggedTestModel(title='Ch\u00e2teau Margaux 1960')\n            m.save()\n            self.assertEqual(m.slug, 'ch\u00e2teau-margaux-1960')\n\n    def test_auto_create_next_unicode_slug(self):\n        with override_settings(OSCAR_SLUG_ALLOW_UNICODE=True):\n            m1 = SluggedTestModel(title='Ch\u00e2teau Margaux 1960')\n            m1.save()\n\n            m2 = SluggedTestModel(title='Ch\u00e2teau Margaux 1960')\n            m2.save()\n\n            self.assertEqual(m2.slug, 'ch\u00e2teau-margaux-1960-2')\n\n    def test_switch_to_unicode_slug(self):\n        m = SluggedTestModel(title='Ch\u00e2teau Margaux 1960')\n        m.save()\n        self.assertEqual(m.slug, 'chateau-margaux-1960')\n        with override_settings(OSCAR_SLUG_ALLOW_UNICODE=True):\n            m = SluggedTestModel(title='Ch\u00e2teau Margaux 1960')\n            m.save()\n            self.assertEqual(m.slug, 'ch\u00e2teau-margaux-1960')\n\n    def test_autoslugfield_allow_unicode_kwargs_precedence(self):\n        from oscar.models.fields import AutoSlugField\n        with override_settings(OSCAR_SLUG_ALLOW_UNICODE=True):\n            autoslug_field = AutoSlugField(populate_from='title', allow_unicode=False)\n            self.assertFalse(autoslug_field.allow_unicode)\n            autoslug_field = AutoSlugField(populate_from='title')\n            self.assertTrue(autoslug_field.allow_unicode)\n\n    def test_update_slug(self):\n        m = SluggedTestModel(title='foo')\n        m.save()\n        self.assertEqual(m.slug, 'foo')\n\n        # update m instance without using `save'\n        SluggedTestModel.objects.filter(pk=m.pk).update(slug='foo-2012')\n        # update m instance with new data from the db\n        m = SluggedTestModel.objects.get(pk=m.pk)\n        self.assertEqual(m.slug, 'foo-2012')\n\n        m.save()\n        self.assertEqual(m.title, 'foo')\n        self.assertEqual(m.slug, 'foo-2012')\n\n        # Check slug is not overwrite\n        m.title = 'bar'\n        m.save()\n        self.assertEqual(m.title, 'bar')\n        self.assertEqual(m.slug, 'foo-2012')\n\n    def test_simple_slug_source(self):\n        m = SluggedTestModel(title='-foo')\n        m.save()\n        self.assertEqual(m.slug, 'foo')\n\n        n = SluggedTestModel(title='-foo')\n        n.save()\n        self.assertEqual(n.slug, 'foo-2')\n\n        n.save()\n        self.assertEqual(n.slug, 'foo-2')\n\n    def test_empty_slug_source(self):\n        # regression test\n\n        m = SluggedTestModel(title='')\n        m.save()\n        self.assertEqual(m.slug, '-2')\n\n        n = SluggedTestModel(title='')\n        n.save()\n        self.assertEqual(n.slug, '-3')\n\n        n.save()\n        self.assertEqual(n.slug, '-3')\n\n    def test_inheritance_creates_next_slug(self):\n        m = SluggedTestModel(title='foo')\n        m.save()\n\n        n = ChildSluggedTestModel(title='foo')\n        n.save()\n        self.assertEqual(n.slug, 'foo-2')\n\n        o = SluggedTestModel(title='foo')\n        o.save()\n        self.assertEqual(o.slug, 'foo-3')\n\n    def test_separator_and_uppercase_options(self):\n        m = CustomSluggedTestModel(title=\"Password reset\")\n        m.save()\n        self.assertEqual(m.slug, 'PASSWORD_RESET')\n\n        m = CustomSluggedTestModel(title=\"Password reset\")\n        m.save()\n        self.assertEqual(m.slug, 'PASSWORD_RESET_2')\n\n    def test_migration(self):\n        \"\"\"\n        Tests making migrations with Django 1.7+'s migration framework\n        \"\"\"\n\n        import oscar\n        from django.db import migrations\n        from django.db.migrations.writer import MigrationWriter\n        from oscar.models.fields import AutoSlugField\n        fields = {\n            'autoslugfield': AutoSlugField(populate_from='otherfield'),\n        }\n\n        migration = type(str(\"Migration\"), (migrations.Migration,), {\n            \"operations\": [\n                migrations.CreateModel(\"MyModel\", tuple(fields.items()),\n                                       {'populate_from': 'otherfield'},\n                                       (models.Model,)),\n            ],\n        })\n        writer = MigrationWriter(migration)\n        output = writer.as_string()\n\n        if isinstance(output, str):\n            output = output.encode('utf-8')\n\n        # We don't test the output formatting - that's too fragile.\n        # Just make sure it runs for now, and that things look alright.\n        context = {\n            'migrations': migrations,\n            'oscar': oscar,\n        }\n        result = self.safe_exec(output, context=context)\n        self.assertIn(\"Migration\", result)\n\n    def safe_exec(self, string, value=None, context=None):\n        loc = {}\n        g = globals()\n        g.update(context)\n        try:\n            exec(string, g, loc)\n        except Exception as e:\n            if value:\n                self.fail(\"Could not exec %r (from value %r): %s\" % (\n                    string.strip(), value, e))\n            else:\n                self.fail(\"Could not exec %r: %s\" % (string.strip(), e))\n        return loc\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0002_auto_20150927_1547'),\n    ]\n\n    operations = [\n        migrations.AlterModelOptions(\n            name='useraddress',\n            options={'ordering': ['-num_orders_as_shipping_address'], 'verbose_name': 'User address',\n                     'verbose_name_plural': 'User addresses'},\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Shipping Address'),\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_shipping_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n    ]\n",
    "output": "# -*- coding: utf-8 -*-\nimport codecs\nimport datetime\nimport io\nimport os\nfrom tempfile import NamedTemporaryFile\nfrom django.utils.encoding import smart_text\n\nfrom django.test import TestCase, override_settings\n\nfrom oscar.core.compat import UnicodeCSVWriter, existing_user_fields\n\n\nclass unicodeobj(object):\n\n    def __init__(self, s):\n        self.s = s\n\n    def __str__(self):\n        return self.s\n\n\nclass TestExistingUserFields(TestCase):\n\n    def test_order(self):\n        fields = existing_user_fields(['email', 'first_name', 'last_name'])\n        self.assertEqual(fields, ['email', 'first_name', 'last_name'])\n\n\nclass TestUnicodeCSVWriter(TestCase):\n\n    def test_can_write_different_values(self):\n        writer = UnicodeCSVWriter(open_file=io.StringIO())\n        s = '\u00fcn\u012fcod\u0113'\n        rows = [[s, unicodeobj(s), 123, datetime.date.today()], ]\n        writer.writerows(rows)\n        self.assertRaises(TypeError, writer.writerows, [object()])\n\n    def test_context_manager(self):\n        tmp_file = NamedTemporaryFile()\n        with UnicodeCSVWriter(filename=tmp_file.name) as writer:\n            s = '\u00fcn\u012fcod\u0113'\n            rows = [[s, unicodeobj(s), 123, datetime.date.today()], ]\n            writer.writerows(rows)\n\n    def test_csv_write_output(self):\n        tmp_file = NamedTemporaryFile(delete=False)\n        with UnicodeCSVWriter(filename=tmp_file.name) as writer:\n            s = '\u00fcn\u012fcod\u0113'\n            row = [s, 123, 'foo-bar']\n            writer.writerows([row])\n\n        with open(tmp_file.name, 'r') as read_file:\n            content = smart_text(read_file.read(), encoding='utf-8').strip()\n            self.assertEqual(content, '\u00fcn\u012fcod\u0113,123,foo-bar')\n\n        # Clean up\n        os.unlink(tmp_file.name)\n\n    @override_settings(OSCAR_CSV_INCLUDE_BOM=True)\n    def test_bom_write_with_open_file(self):\n        csv_file = NamedTemporaryFile(delete=False)\n        with open(csv_file.name, 'w') as open_file:\n            writer = UnicodeCSVWriter(open_file=open_file, encoding=\"utf-8\")\n            s = '\u00fcn\u012fcod\u0113'\n            row = [s, 123, datetime.date.today()]\n            writer.writerows([row])\n\n        with open(csv_file.name, 'rb') as read_file:\n            self.assertTrue(read_file.read().startswith(codecs.BOM_UTF8))\n\n        # Clean up\n        os.unlink(csv_file.name)\n\n    @override_settings(OSCAR_CSV_INCLUDE_BOM=True)\n    def test_bom_write_with_filename(self):\n        csv_file = NamedTemporaryFile(delete=False)\n        with UnicodeCSVWriter(filename=csv_file.name, encoding=\"utf-8\") as writer:\n            s = '\u00fcn\u012fcod\u0113'\n            row = [s, 123, datetime.date.today()]\n            writer.writerows([row])\n\n        with open(csv_file.name, 'rb') as read_file:\n            self.assertTrue(read_file.read().startswith(codecs.BOM_UTF8))\n\n        # Clean up\n        os.unlink(csv_file.name)\n\n    @override_settings(OSCAR_CSV_INCLUDE_BOM=True)\n    def test_bom_not_written_for_other_encodings(self):\n        csv_file = NamedTemporaryFile(delete=False)\n        with UnicodeCSVWriter(filename=csv_file.name, encoding=\"ascii\") as writer:\n            s = 'boring ascii'\n            row = [s, 123, datetime.date.today()]\n            writer.writerows([row])\n\n        with open(csv_file.name, 'rb') as read_file:\n            self.assertFalse(read_file.read().startswith(codecs.BOM_UTF8))\n\n        # Clean up\n        os.unlink(csv_file.name)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0002_auto_20150927_1547'),\n    ]\n\n    operations = [\n        migrations.AlterModelOptions(\n            name='useraddress',\n            options={'ordering': ['-num_orders_as_shipping_address'], 'verbose_name': 'User address',\n                     'verbose_name_plural': 'User addresses'},\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Shipping Address'),\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_shipping_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n    ]\n",
    "output": "import pytest\nfrom django.conf import settings\nfrom django.test import TestCase\n\nfrom oscar.core import customisation\n\nVALID_FOLDER_PATH = 'tests/_site/apps'\n\n\nclass TestUtilities(TestCase):\n\n    def test_subfolder_extraction(self):\n        folders = list(customisation.subfolders('/var/www/eggs'))\n        self.assertEqual(folders, ['/var', '/var/www', '/var/www/eggs'])\n\n\ndef test_raises_exception_for_nonexistant_app_label():\n    with pytest.raises(ValueError):\n        customisation.fork_app('sillytown', 'somefolder')\n\n\ndef test_raises_exception_if_app_has_already_been_forked():\n    # We piggyback on another test which means a custom app is already in\n    # the settings we use for the test suite. We just check that's still\n    # the case here.\n    assert 'tests._site.apps.partner' in settings.INSTALLED_APPS\n    with pytest.raises(ValueError):\n        customisation.fork_app('partner', VALID_FOLDER_PATH)\n\n\ndef test_creates_new_folder(tmpdir):\n    path = tmpdir.mkdir('fork')\n    customisation.fork_app('order', str(path))\n    path.join('order').ensure_dir()\n\n\ndef test_creates_init_file(tmpdir):\n    path = tmpdir.mkdir('fork')\n    customisation.fork_app('order', str(path))\n\n    path.join('order').join('__init__.py').ensure()\n\n\ndef test_handles_dashboard_app(tmpdir):\n    # Dashboard apps are fiddly as they aren't identified by a single app\n    # label.\n    path = tmpdir.mkdir('fork')\n    customisation.fork_app('dashboard.catalogue', str(path))\n    # Check __init__.py created (and supporting folders)\n\n    path.join('dashboard').join('catalogue').join('__init__.py').ensure()\n\n\ndef test_creates_models_and_admin_file(tmpdir):\n    path = tmpdir.mkdir('fork')\n    customisation.fork_app('order', str(path))\n    for module, expected_string in [\n        ('models', 'from oscar.apps.order.models import *'),\n        ('admin', 'from oscar.apps.order.admin import *'),\n        ('config', 'OrderConfig')\n    ]:\n        filepath = path.join('order').join('%s.py' % module)\n        filepath.ensure()\n        contents = filepath.read()\n        assert expected_string in contents\n\n\ndef test_copies_in_migrations_when_needed(tmpdir):\n    path = tmpdir.mkdir('fork')\n    for app, has_models in [('order', True), ('search', False)]:\n        customisation.fork_app(app, str(path))\n\n        native_migration_path = path.join(app).join('migrations')\n        assert has_models == native_migration_path.check()\n\n\ndef test_dashboard_app_config(tmpdir, monkeypatch):\n    path = tmpdir.mkdir('fork')\n    customisation.fork_app('dashboard', str(path))\n\n    path.join('__init__.py').write('')\n    monkeypatch.syspath_prepend(str(tmpdir))\n\n    config_module = __import__(\n        '%s.dashboard.config' % path.basename, fromlist=['DashboardConfig']\n    )\n\n    assert hasattr(config_module, 'DashboardConfig')\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0002_auto_20150927_1547'),\n    ]\n\n    operations = [\n        migrations.AlterModelOptions(\n            name='useraddress',\n            options={'ordering': ['-num_orders_as_shipping_address'], 'verbose_name': 'User address',\n                     'verbose_name_plural': 'User addresses'},\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Shipping Address'),\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_shipping_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n    ]\n",
    "output": "import warnings\n\nfrom django.contrib.auth.models import AnonymousUser, Permission\nfrom django.test import TestCase\n\nfrom oscar.core.decorators import deprecated\nfrom oscar.test import factories\nfrom oscar.views.decorators import check_permissions\n\n\nclass TestPermissionsDecorator(TestCase):\n\n    def test_empty_permissions_passes(self):\n        user = factories.UserFactory.build()\n        self.assertTrue(check_permissions(user, []))\n\n    def test_properties_are_checked(self):\n        staff_user = factories.UserFactory.build(is_staff=True)\n        non_staff_user = factories.UserFactory.build(is_staff=False)\n        self.assertTrue(check_permissions(staff_user, ['is_staff']))\n        self.assertFalse(check_permissions(non_staff_user, ['is_staff']))\n\n    def test_methods_are_checked(self):\n        anonymous_user = AnonymousUser()\n        known_user = factories.UserFactory.build()\n        self.assertTrue(check_permissions(anonymous_user, ['is_anonymous']))\n        self.assertFalse(check_permissions(known_user, ['is_anonymous']))\n\n    def test_permissions_are_checked(self):\n        user_with_perm = factories.UserFactory()\n        user_without_perm = factories.UserFactory()\n        perm = Permission.objects.get(\n            content_type__app_label='address', codename='add_country')\n        user_with_perm.user_permissions.add(perm)\n        self.assertTrue(\n            check_permissions(user_with_perm, ['address.add_country']))\n        self.assertFalse(\n            check_permissions(user_without_perm, ['address.add_country']))\n\n\nclass TestDeprecatedDecorator(TestCase):\n\n    def test_decorate_function(self):\n\n        @deprecated\n        def func():\n            return True\n\n        with warnings.catch_warnings(record=True) as caught:\n            warnings.simplefilter(\"always\")\n            self.assertTrue(func())\n            assert len(caught) == 1\n            assert issubclass(caught[0].category, DeprecationWarning)\n\n    def test_decorate_class(self):\n\n        class Cls(object):\n            val = False\n\n            def __init__(self):\n                self.val = True\n\n        Deprecated = deprecated(Cls)  # noqa\n\n        with warnings.catch_warnings(record=True) as caught:\n            warnings.simplefilter(\"always\")\n            obj = Deprecated()\n            self.assertTrue(obj.val)\n            assert len(caught) == 1\n            assert issubclass(caught[0].category, DeprecationWarning)\n\n    def test_subclass_decorated(self):\n\n        class Cls(object):\n            val = False\n\n            def __init__(self):\n                self.val = True\n\n        Deprecated = deprecated(Cls)  # noqa\n\n        class SubCls(Deprecated):\n            pass\n\n        with warnings.catch_warnings(record=True) as caught:\n            warnings.simplefilter(\"always\")\n            obj = SubCls()\n            self.assertTrue(obj.val)\n            assert len(caught) == 1\n            assert issubclass(caught[0].category, DeprecationWarning)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0002_auto_20150927_1547'),\n    ]\n\n    operations = [\n        migrations.AlterModelOptions(\n            name='useraddress',\n            options={'ordering': ['-num_orders_as_shipping_address'], 'verbose_name': 'User address',\n                     'verbose_name_plural': 'User addresses'},\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Shipping Address'),\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_shipping_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n    ]\n",
    "output": "from os.path import dirname\nimport sys\n\nfrom django.test import override_settings, TestCase\nfrom django.conf import settings\n\nimport oscar\nfrom oscar.core.loading import (\n    get_model, AppNotFoundError, get_classes, get_class, get_class_loader,\n    ClassNotFoundError)\nfrom tests import temporary_python_path\nfrom tests._site.loader import DummyClass\n\n\nclass TestClassLoading(TestCase):\n    \"\"\"\n    Oscar's class loading utilities\n    \"\"\"\n\n    def test_load_oscar_classes_correctly(self):\n        Product, Category = get_classes('catalogue.models', ('Product', 'Category'))\n        self.assertEqual('oscar.apps.catalogue.models', Product.__module__)\n        self.assertEqual('oscar.apps.catalogue.models', Category.__module__)\n\n    def test_load_oscar_class_correctly(self):\n        Product = get_class('catalogue.models', 'Product')\n        self.assertEqual('oscar.apps.catalogue.models', Product.__module__)\n\n    def test_load_oscar_class_from_dashboard_subapp(self):\n        ReportForm = get_class('dashboard.reports.forms', 'ReportForm')\n        self.assertEqual('oscar.apps.dashboard.reports.forms', ReportForm.__module__)\n\n    def test_raise_exception_when_bad_appname_used(self):\n        with self.assertRaises(AppNotFoundError):\n            get_classes('fridge.models', ('Product', 'Category'))\n\n    def test_raise_exception_when_bad_classname_used(self):\n        with self.assertRaises(ClassNotFoundError):\n            get_class('catalogue.models', 'Monkey')\n\n    def test_raise_importerror_if_app_raises_importerror(self):\n        \"\"\"\n        This tests that Oscar doesn't fall back to using the Oscar catalogue\n        app if the overriding app throws an ImportError.\n        \"\"\"\n        apps = list(settings.INSTALLED_APPS)\n        apps[apps.index('oscar.apps.catalogue')] = 'tests._site.import_error_app.catalogue'\n        with override_settings(INSTALLED_APPS=apps):\n            with self.assertRaises(ImportError):\n                get_class('catalogue.app', 'CatalogueApplication')\n\n\nclass ClassLoadingWithLocalOverrideTests(TestCase):\n\n    def setUp(self):\n        self.installed_apps = list(settings.INSTALLED_APPS)\n        self.installed_apps[self.installed_apps.index('oscar.apps.shipping')] = 'tests._site.shipping'\n\n    def test_loading_class_defined_in_local_module(self):\n        with override_settings(INSTALLED_APPS=self.installed_apps):\n            (Free,) = get_classes('shipping.methods', ('Free',))\n            self.assertEqual('tests._site.shipping.methods', Free.__module__)\n\n    def test_loading_class_which_is_not_defined_in_local_module(self):\n        with override_settings(INSTALLED_APPS=self.installed_apps):\n            (FixedPrice,) = get_classes('shipping.methods', ('FixedPrice',))\n            self.assertEqual('oscar.apps.shipping.methods', FixedPrice.__module__)\n\n    def test_loading_class_from_module_not_defined_in_local_app(self):\n        with override_settings(INSTALLED_APPS=self.installed_apps):\n            (Repository,) = get_classes('shipping.repository', ('Repository',))\n            self.assertEqual('oscar.apps.shipping.repository', Repository.__module__)\n\n    def test_loading_classes_defined_in_both_local_and_oscar_modules(self):\n        with override_settings(INSTALLED_APPS=self.installed_apps):\n            (Free, FixedPrice) = get_classes('shipping.methods', ('Free', 'FixedPrice'))\n            self.assertEqual('tests._site.shipping.methods', Free.__module__)\n            self.assertEqual('oscar.apps.shipping.methods', FixedPrice.__module__)\n\n    def test_loading_classes_with_root_app(self):\n        import tests._site.shipping\n        path = dirname(dirname(tests._site.shipping.__file__))\n        with temporary_python_path([path]):\n            self.installed_apps[\n                self.installed_apps.index('tests._site.shipping')] = 'shipping'\n            with override_settings(INSTALLED_APPS=self.installed_apps):\n                (Free,) = get_classes('shipping.methods', ('Free',))\n                self.assertEqual('shipping.methods', Free.__module__)\n\n    def test_overriding_view_is_possible_without_overriding_app(self):\n        from oscar.apps.customer.app import application, CustomerApplication\n        # If test fails, it's helpful to know if it's caused by order of\n        # execution\n        self.assertEqual(CustomerApplication().summary_view.__module__,\n                         'tests._site.apps.customer.views')\n        self.assertEqual(application.summary_view.__module__,\n                         'tests._site.apps.customer.views')\n\n\nclass ClassLoadingWithLocalOverrideWithMultipleSegmentsTests(TestCase):\n\n    def setUp(self):\n        self.installed_apps = list(settings.INSTALLED_APPS)\n        self.installed_apps[self.installed_apps.index('oscar.apps.shipping')] = 'tests._site.apps.shipping'\n\n    def test_loading_class_defined_in_local_module(self):\n        with override_settings(INSTALLED_APPS=self.installed_apps):\n            (Free,) = get_classes('shipping.methods', ('Free',))\n            self.assertEqual('tests._site.apps.shipping.methods', Free.__module__)\n\n\nclass TestGetCoreAppsFunction(TestCase):\n    \"\"\"\n    oscar.get_core_apps function\n    \"\"\"\n\n    def test_returns_core_apps_when_no_overrides_specified(self):\n        apps = oscar.get_core_apps()\n        self.assertEqual(oscar.OSCAR_CORE_APPS, apps)\n\n    def test_uses_non_dashboard_override_when_specified(self):\n        apps = oscar.get_core_apps(overrides=['apps.shipping'])\n        self.assertTrue('apps.shipping' in apps)\n        self.assertTrue('oscar.apps.shipping' not in apps)\n\n    def test_uses_dashboard_override_when_specified(self):\n        apps = oscar.get_core_apps(overrides=['apps.dashboard.catalogue'])\n        self.assertTrue('apps.dashboard.catalogue' in apps)\n        self.assertTrue('oscar.apps.dashboard.catalogue' not in apps)\n        self.assertTrue('oscar.apps.catalogue' in apps)\n\n\nclass TestOverridingCoreApps(TestCase):\n\n    def test_means_the_overriding_model_is_registered_first(self):\n        klass = get_model('partner', 'StockRecord')\n        self.assertEqual(\n            'tests._site.apps.partner.models', klass.__module__)\n\n\nclass TestAppLabelsForModels(TestCase):\n\n    def test_all_oscar_models_have_app_labels(self):\n        from django.apps import apps\n        models = apps.get_models()\n        missing = []\n        for model in models:\n            # Ignore non-Oscar models\n            if 'oscar' not in repr(model):\n                continue\n            # Don't know how to get the actual model's Meta class. But if\n            # the parent doesn't have a Meta class, it's doesn't have an\n            # base in Oscar anyway and is not intended to be overridden\n            abstract_model = model.__base__\n            meta_class = getattr(abstract_model, 'Meta', None)\n            if meta_class is None:\n                continue\n\n            if not hasattr(meta_class, 'app_label'):\n                missing.append(model)\n        if missing:\n            self.fail(\"Those models don't have an app_label set: %s\" % missing)\n\n\nclass TestDynamicLoadingOn3rdPartyApps(TestCase):\n\n    core_app_prefix = 'thirdparty_package.apps'\n\n    def setUp(self):\n        self.installed_apps = list(settings.INSTALLED_APPS)\n        sys.path.append('./tests/_site/')\n\n    def tearDown(self):\n        sys.path.remove('./tests/_site/')\n\n    def test_load_core_3rd_party_class_correctly(self):\n        self.installed_apps.append('thirdparty_package.apps.myapp')\n        with override_settings(INSTALLED_APPS=self.installed_apps):\n            Cow, Goat = get_classes('myapp.models', ('Cow', 'Goat'), self.core_app_prefix)\n            self.assertEqual('thirdparty_package.apps.myapp.models', Cow.__module__)\n            self.assertEqual('thirdparty_package.apps.myapp.models', Goat.__module__)\n\n    def test_load_overriden_3rd_party_class_correctly(self):\n        self.installed_apps.append('apps.myapp')\n        with override_settings(INSTALLED_APPS=self.installed_apps):\n            Cow, Goat = get_classes('myapp.models', ('Cow', 'Goat'), self.core_app_prefix)\n            self.assertEqual('thirdparty_package.apps.myapp.models', Cow.__module__)\n            self.assertEqual('apps.myapp.models', Goat.__module__)\n\n\nclass OverriddenClassLoadingTestCase(TestCase):\n\n    def test_non_override_class_loader(self):\n        from oscar.apps.catalogue.views import ProductDetailView\n        View = get_class('catalogue.views', 'ProductDetailView')\n        self.assertEqual(View, ProductDetailView)\n\n    @override_settings(OSCAR_DYNAMIC_CLASS_LOADER='tests._site.loader.custom_class_loader')\n    def test_override_class_loader(self):\n        # Clear lru cache for the class loader\n        get_class_loader.cache_clear()\n\n        View = get_class('catalogue.views', 'ProductDetailView')\n        self.assertEqual(View, DummyClass)\n\n        # Clear lru cache for the class loader again\n        get_class_loader.cache_clear()\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0002_auto_20150927_1547'),\n    ]\n\n    operations = [\n        migrations.AlterModelOptions(\n            name='useraddress',\n            options={'ordering': ['-num_orders_as_shipping_address'], 'verbose_name': 'User address',\n                     'verbose_name_plural': 'User addresses'},\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Shipping Address'),\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_shipping_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n    ]\n",
    "output": "from django import forms\nfrom django.test import TestCase, override_settings\n\nfrom oscar.apps.address.forms import AbstractAddressForm\nfrom oscar.apps.address.models import UserAddress\nfrom oscar.apps.order.models import ShippingAddress\nfrom oscar.forms.mixins import PhoneNumberMixin\nfrom oscar.test.factories import CountryFactory\n\n\nclass PhoneNumberMixinTestCase(TestCase):\n\n    def test_mixin_adds_phone_number_field(self):\n\n        class TestForm(PhoneNumberMixin, forms.Form):\n            pass\n\n        form = TestForm()\n        self.assertIn('phone_number', form.fields)\n\n    def test_mixin_adds_all_phone_number_fields(self):\n\n        class TestForm(PhoneNumberMixin, forms.Form):\n            phone_number_fields = {\n                'phone_number': {\n                    'required': False,\n                    'help_text': '',\n                    'max_length': 32,\n                    'label': 'Phone number'\n                },\n                'another_phone_number': {\n                    'required': False,\n                    'help_text': 'Another phone number help text',\n                    'max_length': 32,\n                    'label': 'Another phone number'\n                },\n                'one_more_phone_number': {\n                    'required': False,\n                    'help_text': '',\n                    'max_length': 32,\n                    'label': 'One more phone number'\n                },\n            }\n\n        form = TestForm()\n        self.assertIn('phone_number', form.fields)\n        self.assertIn('another_phone_number', form.fields)\n        self.assertIn('one_more_phone_number', form.fields)\n\n        field = form.fields['another_phone_number']\n        self.assertEqual(field.help_text, 'Another phone number help text')\n\n    def test_mixin_retains_existing_field_properties(self):\n\n        class TestForm(PhoneNumberMixin, forms.ModelForm):\n\n            class Meta:\n                model = UserAddress\n                fields = ['country', 'phone_number']\n                # Override default label and help text\n                labels = {'phone_number': 'Special number'}\n                help_texts = {'phone_number': 'Special help text'}\n\n        form = TestForm()\n        field = form.fields['phone_number']\n        self.assertEqual(field.label, 'Special number')\n        self.assertEqual(field.help_text, 'Special help text')\n\n    @override_settings(OSCAR_REQUIRED_ADDRESS_FIELDS=('phone_number',))\n    def test_required_empty_field_raises_validation_error(self):\n\n        class TestForm(PhoneNumberMixin, AbstractAddressForm):\n            phone_number_fields = {\n                'phone_number': {\n                    'required': True,\n                    'help_text': '',\n                    'max_length': 32,\n                    'label': 'Phone number'\n                }\n            }\n\n            class Meta:\n                model = ShippingAddress\n                fields = ['country', 'phone_number', 'postcode']\n\n        CountryFactory(iso_3166_1_a2='GB', is_shipping_country=True)\n        form = TestForm(data={'phone_number': '', 'country': 'GB', 'postcode': 'WW1 2BB'})\n        self.assertFalse(form.is_valid())\n        self.assertEqual(form.errors['phone_number'], ['This field is required.'])\n\n    @override_settings(OSCAR_REQUIRED_ADDRESS_FIELDS=[])\n    def test_optional_empty_field_validates(self):\n\n        class TestForm(PhoneNumberMixin, AbstractAddressForm):\n            phone_number_fields = {\n                'phone_number': {\n                    'required': False,\n                    'help_text': '',\n                    'max_length': 32,\n                    'label': 'Phone number'\n                }\n            }\n\n            class Meta:\n                model = ShippingAddress\n                fields = ['country', 'phone_number', 'postcode']\n\n        CountryFactory(iso_3166_1_a2='GB', is_shipping_country=True)\n        form = TestForm(data={'phone_number': '', 'country': 'GB', 'postcode': 'WW1 2BB'})\n        self.assertTrue(form.is_valid())\n\n    @override_settings(OSCAR_REQUIRED_ADDRESS_FIELDS=[])\n    def test_invalid_number_fails_validation(self):\n\n        class TestForm(PhoneNumberMixin, AbstractAddressForm):\n            phone_number_fields = {\n                'phone_number': {\n                    'required': False,\n                    'help_text': '',\n                    'max_length': 32,\n                    'label': 'Phone number'\n                }\n            }\n\n            class Meta:\n                model = ShippingAddress\n                fields = ['country', 'phone_number', 'postcode']\n\n        CountryFactory(iso_3166_1_a2='GB', is_shipping_country=True)\n        form = TestForm(data={'phone_number': '123456', 'country': 'GB', 'postcode': 'WW1 2BB'})\n        self.assertFalse(form.is_valid())\n        self.assertEqual(form.errors['phone_number'], ['This is not a valid local phone format for UNITED KINGDOM.'])\n\n    @override_settings(OSCAR_REQUIRED_ADDRESS_FIELDS=[])\n    def test_valid_number_passes_validation(self):\n\n        class TestForm(PhoneNumberMixin, AbstractAddressForm):\n            phone_number_fields = {\n                'phone_number': {\n                    'required': False,\n                    'help_text': '',\n                    'max_length': 32,\n                    'label': 'Phone number'\n                }\n            }\n\n            class Meta:\n                model = ShippingAddress\n                fields = ['country', 'phone_number', 'postcode']\n\n        CountryFactory(iso_3166_1_a2='GB', is_shipping_country=True)\n        form = TestForm(data={'phone_number': '02089001234', 'country': 'GB', 'postcode': 'WW1 2BB'})\n        self.assertTrue(form.is_valid())\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0002_auto_20150927_1547'),\n    ]\n\n    operations = [\n        migrations.AlterModelOptions(\n            name='useraddress',\n            options={'ordering': ['-num_orders_as_shipping_address'], 'verbose_name': 'User address',\n                     'verbose_name_plural': 'User addresses'},\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Shipping Address'),\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_shipping_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n    ]\n",
    "output": "from django.core.exceptions import ImproperlyConfigured\nfrom django.test import TestCase\n\nfrom oscar.models.fields import NullCharField\n\n\nclass NullCharFieldTest(TestCase):\n\n    def test_from_db_value_converts_null_to_string(self):\n        field = NullCharField()\n        self.assertEqual('', field.from_db_value(None, expression=None, connection=None, context=None))\n\n    def test_get_prep_value_converts_empty_string_to_null(self):\n        field = NullCharField()\n        self.assertEqual(None, field.get_prep_value(''))\n\n    def test_raises_exception_for_invalid_null_blank_combo(self):\n        with self.assertRaises(ImproperlyConfigured):\n            NullCharField(null=True, blank=False)\n\n        with self.assertRaises(ImproperlyConfigured):\n            NullCharField(null=False, blank=True)\n\n        with self.assertRaises(ImproperlyConfigured):\n            NullCharField(null=False, blank=False)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0002_auto_20150927_1547'),\n    ]\n\n    operations = [\n        migrations.AlterModelOptions(\n            name='useraddress',\n            options={'ordering': ['-num_orders_as_shipping_address'], 'verbose_name': 'User address',\n                     'verbose_name_plural': 'User addresses'},\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Shipping Address'),\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_shipping_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n    ]\n",
    "output": "from decimal import Decimal as D\nfrom itertools import product\nfrom django.test import TestCase\n\nfrom oscar.core.prices import Price\n\n\nclass TestPriceObject(TestCase):\n\n    def test_can_be_instantiated_with_tax_amount(self):\n        price = Price('USD', D('10.00'), tax=D('2.00'))\n        self.assertTrue(price.is_tax_known)\n        self.assertEqual(D('12.00'), price.incl_tax)\n\n    def test_can_have_tax_set_later(self):\n        price = Price('USD', D('10.00'))\n        price.tax = D('2.00')\n        self.assertEqual(D('12.00'), price.incl_tax)\n\n    def test_price_equals_reflexivity(self):\n        for price in (\n            Price(currency='USD', excl_tax=D('10.00')),\n            Price(currency='USD', excl_tax=D('10.00'), tax=D('2.00')),\n            Price(currency='USD', excl_tax=D('10.00'), incl_tax=D('12.00')),\n        ):\n            self.assertEqual(price, price)\n\n    def test_price_equals_formats(self):\n        price1 = Price(currency='USD', excl_tax=D('10.00'), tax=D('2.00'))\n        price2 = Price(currency='USD', excl_tax=D('10.00'), incl_tax=D('12.00'))\n        self.assertEqual(price1, price2)\n\n    def test_price_equals_currency_matters(self):\n        price1 = Price(currency='EUR', excl_tax=D('10.00'), tax=D('2.00'))\n        price2 = Price(currency='USD', excl_tax=D('10.00'), tax=D('2.00'))\n        self.assertNotEqual(price1, price2)\n\n    def test_price_equals_transitivity(self):\n        prices = (\n            Price(currency='EUR', excl_tax=D('10.00'), tax=D('2.00')),\n            Price(currency='USD', excl_tax=D('10.00'), tax=D('2.00')),\n            Price(currency='USD', excl_tax=D('10.00'), incl_tax=D('12.00')),\n            Price(currency='USD', excl_tax=D('10.00'), tax=D('8.00'))\n        )\n        prices_product = product(prices, prices)\n        for price1, price2 in prices_product:\n            self.assertEqual(price1 == price2, price2 == price1)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0002_auto_20150927_1547'),\n    ]\n\n    operations = [\n        migrations.AlterModelOptions(\n            name='useraddress',\n            options={'ordering': ['-num_orders_as_shipping_address'], 'verbose_name': 'User address',\n                     'verbose_name_plural': 'User addresses'},\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Shipping Address'),\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_shipping_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n    ]\n",
    "output": "# coding=utf-8\n\nfrom django.test import TestCase\nfrom django.test.utils import override_settings\n\n\nclass SlugFieldTest(TestCase):\n\n    def test_slugfield_allow_unicode_kwargs_precedence(self):\n        from oscar.models.fields.slugfield import SlugField\n        with override_settings(OSCAR_SLUG_ALLOW_UNICODE=True):\n            slug_field = SlugField(allow_unicode=False)\n            self.assertFalse(slug_field.allow_unicode)\n            slug_field = SlugField()\n            self.assertTrue(slug_field.allow_unicode)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0002_auto_20150927_1547'),\n    ]\n\n    operations = [\n        migrations.AlterModelOptions(\n            name='useraddress',\n            options={'ordering': ['-num_orders_as_shipping_address'], 'verbose_name': 'User address',\n                     'verbose_name_plural': 'User addresses'},\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Shipping Address'),\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_shipping_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n    ]\n",
    "output": "# coding=utf-8\nfrom django.test import TestCase\nfrom django.test.utils import override_settings\n\nfrom oscar.core import utils\n\n\ndef sluggish(value, allow_unicode=False):\n    return value.upper()\n\n\nclass TestSlugify(TestCase):\n\n    def test_default_unicode_to_ascii(self):\n        self.assertEqual('konig-der-straxdfe', utils.slugify('K\u00f6nig der Stra\u00dfe'))\n        self.assertEqual('not-fancy', utils.slugify('Not fancy'))\n        self.assertEqual('u4e01u4e02-u4e03u4e04u4e05', utils.slugify('\u4e01\u4e02 \u4e03\u4e04\u4e05'))\n\n    @override_settings(OSCAR_SLUG_ALLOW_UNICODE=True)\n    def test_allow_unicode(self):\n        self.assertEqual('k\u00f6nig-der-stra\u00dfe', utils.slugify('K\u00f6nig der Stra\u00dfe'))\n        self.assertEqual('\u4e01\u4e02-\u4e03\u4e04\u4e05', utils.slugify('\u4e01\u4e02 \u4e03\u4e04\u4e05'))\n        self.assertEqual('not-fancy', utils.slugify('Not fancy'))\n\n    @override_settings(OSCAR_SLUG_FUNCTION='tests.integration.core.test_utils.sluggish')\n    def test_custom_slugifier(self):\n        self.assertEqual('HAM AND EGGS', utils.slugify('Ham and eggs'))\n\n    @override_settings(OSCAR_SLUG_MAP={'c++': 'cpp'})\n    def test_uses_custom_mappings(self):\n        self.assertEqual('cpp', utils.slugify('c++'))\n\n    @override_settings(OSCAR_SLUG_BLACKLIST=['the'])\n    def test_uses_blacklist(self):\n        self.assertEqual('bible', utils.slugify('The Bible'))\n\n    @override_settings(OSCAR_SLUG_BLACKLIST=['the', 'bible'])\n    def test_uses_blacklist_doesnt_reduce_to_nothing(self):\n        self.assertEqual('bible', utils.slugify('The Bible'))\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0002_auto_20150927_1547'),\n    ]\n\n    operations = [\n        migrations.AlterModelOptions(\n            name='useraddress',\n            options={'ordering': ['-num_orders_as_shipping_address'], 'verbose_name': 'User address',\n                     'verbose_name_plural': 'User addresses'},\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Shipping Address'),\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_shipping_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n    ]\n",
    "output": "from django.core.exceptions import ValidationError\nfrom django.contrib.flatpages.models import FlatPage\nfrom django.test import TestCase, override_settings\nfrom django.utils.translation import activate\n\nfrom oscar.core.validators import ExtendedURLValidator, URLDoesNotExistValidator\n\n\nclass TestExtendedURLValidator(TestCase):\n\n    def setUp(self):\n        self.validator = ExtendedURLValidator()\n\n    def test_validates_local_url(self):\n        try:\n            self.validator('/')\n        except ValidationError:\n            self.fail('ExtendedURLValidator raised ValidationError'\n                      'unexpectedly!')\n\n    def test_validates_local_url_with_query_strings(self):\n        try:\n            self.validator('/?q=test')  # Query strings shouldn't affect validation\n        except ValidationError:\n            self.fail('ExtendedURLValidator raised ValidationError'\n                      'unexpectedly!')\n\n    def test_raises_validation_error_for_missing_urls(self):\n        with self.assertRaises(ValidationError):\n            self.validator('/invalid/')\n\n    def test_validates_urls_missing_preceding_slash(self):\n        try:\n            self.validator('catalogue/')\n        except ValidationError:\n            self.fail('ExtendedURLValidator raised ValidationError'\n                      'unexpectedly!')\n\n    def test_raises_validation_error_for_urls_without_trailing_slash(self):\n        with self.assertRaises(ValidationError):\n            self.validator('/catalogue')  # Missing the / is bad\n\n    def test_validates_flatpages_urls(self):\n        FlatPage.objects.create(title='test page', url='/test/page/')\n        try:\n            self.validator('/test/page/')\n        except ValidationError:\n            self.fail('ExtendedURLValidator raises ValidationError'\n                      'unexpectedly!')\n\n\n@override_settings(\n    LANGUAGES=(\n        ('de', 'German'),\n        ('en-gb', 'British English'),\n    )\n)\nclass TestExtendedURLValidatorForLocalePrefixURLS(TestCase):\n    def setUp(self):\n        self.validator = ExtendedURLValidator()\n\n    def test_validate_same_locals(self):\n        \"\"\"\n        Current locale is default (\"en-gb\"), URL has locale prefix\n        of default and current locale (\"en-gb\").\n        \"\"\"\n        try:\n            self.validator('/en-gb/test/')\n        except ValidationError:\n            self.fail('ExtendedURLValidator raised ValidationError'\n                      'unexpectedly!')\n\n    def test_validate_prefix_locale_is_non_default(self):\n        \"\"\"\n        Current locale is default (\"en-gb\"), URL has locale prefix\n        of non-default locale (\"de\").\n        \"\"\"\n        try:\n            self.validator('/de/test/')\n        except ValidationError:\n            self.fail('ExtendedURLValidator raised ValidationError'\n                      'unexpectedly!')\n\n    def test_validate_current_locale_is_non_default(self):\n        \"\"\"\n        Current locale is non-default (\"de\"), URL has locale prefix\n        of default locale (\"en-gb\").\n        \"\"\"\n        activate('de')\n        try:\n            self.validator('/en-gb/test/')\n        except ValidationError:\n            self.fail('ExtendedURLValidator raised ValidationError'\n                      'unexpectedly!')\n\n    def test_validate_current_and_prefix_locales_are_non_default_and_same(self):\n        \"\"\"\n        Current locale is non-default (\"de\"), URL has locale prefix\n        of non-default locale (\"de\").\n        \"\"\"\n        activate('de')\n        try:\n            self.validator('/de/test/')\n        except ValidationError:\n            self.fail('ExtendedURLValidator raised ValidationError'\n                      'unexpectedly!')\n\n    def test_validate_current_and_prefix_locales_are_non_default_and_different(self):\n        \"\"\"\n        Current locale is non-default (\"it\"), URL has locale prefix\n        of non-default locale (\"de\").\n        \"\"\"\n        activate('it')\n        try:\n            self.validator('/de/test/')\n        except ValidationError:\n            self.fail('ExtendedURLValidator raised ValidationError'\n                      'unexpectedly!')\n\n\nclass TestURLDoesNotExistValidator(TestCase):\n\n    def setUp(self):\n        self.validator = URLDoesNotExistValidator()\n\n    def test_raises_exception_for_local_urls(self):\n        self.assertRaises(ValidationError, self.validator, '/')\n\n    def test_raises_exception_for_flatpages(self):\n        FlatPage.objects.create(title='test page', url='/test/page/')\n        self.assertRaises(ValidationError, self.validator, '/test/page/')\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0002_auto_20150927_1547'),\n    ]\n\n    operations = [\n        migrations.AlterModelOptions(\n            name='useraddress',\n            options={'ordering': ['-num_orders_as_shipping_address'], 'verbose_name': 'User address',\n                     'verbose_name_plural': 'User addresses'},\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Shipping Address'),\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_shipping_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n    ]\n",
    "output": "import pytest\n\nfrom oscar.views import handler403, handler404, handler500\n\n\n@pytest.mark.django_db\ndef test_handler403_response_status(rf):\n    request = rf.get('/')\n    response = handler403(request, exception=None)\n    assert response.status_code == 403\n\n\n@pytest.mark.django_db\ndef test_handler404_response_status(rf):\n    request = rf.get('/')\n    response = handler404(request, exception=None)\n    assert response.status_code == 404\n\n\n@pytest.mark.django_db\ndef test_handler500_response_status(rf):\n    request = rf.get('/')\n    response = handler500(request)\n    assert response.status_code == 500\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0002_auto_20150927_1547'),\n    ]\n\n    operations = [\n        migrations.AlterModelOptions(\n            name='useraddress',\n            options={'ordering': ['-num_orders_as_shipping_address'], 'verbose_name': 'User address',\n                     'verbose_name_plural': 'User addresses'},\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Shipping Address'),\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_shipping_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n    ]\n",
    "output": ""
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\n# Generated by Django 1.9.12 on 2017-02-26 11:22\nfrom __future__ import unicode_literals\n\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0003_auto_20150927_1551'),\n    ]\n\n    operations = [\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_shipping_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Shipping Address'),\n        ),\n    ]\n",
    "output": "from django.test import TestCase\n\nfrom oscar.apps.address import models, forms\nfrom oscar.test.factories import UserFactory\n\n\nclass TestUserAddressForm(TestCase):\n\n    def setUp(self):\n        self.user = UserFactory()\n        self.country = models.Country.objects.create(\n            iso_3166_1_a2='GB', name=\"UNITED KINGDOM\")\n\n    def test_merges_addresses_with_same_hash(self):\n        data = {\n            'user': self.user,\n            'first_name': \"Matus\",\n            'last_name': \"Moravcik\",\n            'line1': \"1 Egg Street\",\n            'line4': \"London\",\n            'postcode': \"N12 9RE\",\n            'country': self.country}\n\n        # Create two addresses, which are slightly different\n        models.UserAddress.objects.create(**data)\n        other = data.copy()\n        other['first_name'] = 'Izidor'\n        duplicate = models.UserAddress.objects.create(**other)\n\n        # Edit duplicate to be same as original and check that the two\n        # addresses are merged when the form saves.\n        post_data = data.copy()\n        post_data['country'] = self.country.iso_3166_1_a2\n        form = forms.UserAddressForm(self.user, post_data, instance=duplicate)\n        self.assertFalse(form.is_valid())\n        self.assertTrue(len(form.errors['__all__']) > 0)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\n# Generated by Django 1.9.12 on 2017-02-26 11:22\nfrom __future__ import unicode_literals\n\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0003_auto_20150927_1551'),\n    ]\n\n    operations = [\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_shipping_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Shipping Address'),\n        ),\n    ]\n",
    "output": "# -*- coding: utf-8 -*-\nimport pytest\nfrom django.test import TestCase\nfrom django.core import exceptions\n\nfrom oscar.apps.order.models import ShippingAddress\nfrom oscar.core.compat import get_user_model\nfrom oscar.apps.address import models\nfrom oscar.test import factories\n\nfrom tests._site.model_tests_app.models import (\n    UserAddressModelWithCustomBaseFields, UserAddressModelWithCustomHashFields\n)\n\nUser = get_user_model()\n\n\nclass UserAddressModelWithCustomBaseFieldsFactory(factories.UserAddressFactory):\n    class Meta:\n        model = UserAddressModelWithCustomBaseFields\n\n\nclass UserAddressModelWithCustomHashFieldsFactory(factories.UserAddressFactory):\n    class Meta:\n        model = UserAddressModelWithCustomHashFields\n\n\nclass TestUserAddress(TestCase):\n\n    def setUp(self):\n        self.country = factories.CountryFactory.build()\n        self.user = factories.UserFactory()\n\n    def test_uses_title_firstname_and_lastname_in_salutation(self):\n        a = factories.UserAddressFactory.build(\n            country=self.country,\n            title='Dr',\n            first_name='Barry',\n            last_name='Barrington',\n            user=self.user)\n        self.assertEqual(\"Dr Barry Barrington\", a.salutation)\n\n    def test_strips_whitespace_from_salutation(self):\n        a = factories.UserAddressFactory.build(\n            title='',\n            first_name='',\n            last_name='Barrington',\n            country=self.country,\n            user=self.user)\n        self.assertEqual(\"Barrington\", a.salutation)\n\n    def test_has_name_property(self):\n        a = factories.UserAddressFactory.build(\n            country=self.country,\n            first_name='Barry',\n            last_name='Barrington',\n            user=self.user)\n        self.assertEqual(\"Barry Barrington\", a.name)\n\n    def test_has_summary_property(self):\n        c = factories.CountryFactory(name='')\n        a = factories.UserAddressFactory(\n            country=c,\n            title='Dr',\n            first_name='Barry',\n            last_name='Barrington',\n            line1='1 King Road',\n            line4='London',\n            postcode='SW1 9RE')\n        self.assertEqual(\n            \"Dr Barry Barrington, 1 King Road, London, SW1 9RE, UNITED KINGDOM\",\n            a.summary)\n\n    def test_summary_includes_country(self):\n        c = factories.CountryFactory.build(name='UNITED KINGDOM')\n        a = factories.UserAddressFactory.build(\n            country=c,\n            title='Dr',\n            first_name='Barry',\n            last_name='Barrington',\n            line1='1 King Road',\n            line4='London',\n            postcode='SW1 9RE',\n            user=self.user)\n        self.assertEqual(\n            \"Dr Barry Barrington, 1 King Road, London, SW1 9RE, UNITED KINGDOM\",\n            a.summary)\n\n    def test_hash_value(self):\n        a = factories.UserAddressFactory.build(\n            country=self.country,\n            user=self.user)\n        self.assertEqual(a.generate_hash(), 2668616117)\n\n    def test_hash_and_summary_values_on_model_with_custom_base_fields(self):\n        a = UserAddressModelWithCustomBaseFieldsFactory.build(country=self.country, user=self.user)\n        self.assertEqual(a.summary, '1 King Road, London')\n        self.assertEqual(a.generate_hash(), 2668616117)\n\n    def test_hash_and_summary_values_on_model_with_custom_hash_fields(self):\n        a = UserAddressModelWithCustomHashFieldsFactory.build(country=self.country, user=self.user)\n        self.assertEqual(a.summary, 'Dr Barry Barrington, 1 King Road, London, SW1 9RE, UNITED KINGDOM')\n        self.assertEqual(a.generate_hash(), 2153195893)\n\n    def test_can_be_hashed_including_non_ascii(self):\n        a = factories.UserAddressFactory.build(\n            first_name=\"\\u0141ukasz Smith\",\n            last_name='Smith',\n            line1=\"75 Smith Road\",\n            postcode=\"n4 8ty\",\n            country=self.country,\n            user=self.user)\n        hash = a.generate_hash()\n        self.assertTrue(hash is not None)\n\n    def test_strips_whitespace_in_name_property(self):\n        a = factories.UserAddressFactory.build(\n            first_name='',\n            last_name='Barrington',\n            country=self.country,\n            user=self.user)\n        self.assertEqual(\"Barrington\", a.name)\n\n    def test_uses_city_as_an_alias_of_line4(self):\n        a = factories.UserAddressFactory.build(\n            line4='London',\n            country=self.country,\n            user=self.user)\n        self.assertEqual('London', a.city)\n\n    def test_converts_postcode_to_uppercase_when_cleaning(self):\n        address = factories.UserAddressFactory.build(\n            postcode=\"n4 8ty\",\n            country=self.country,\n            user=self.user)\n        address.clean()\n        self.assertEqual(\"N4 8TY\", address.postcode)\n\n    def test_strips_whitespace_when_cleaning(self):\n        a = factories.UserAddressFactory.build(\n            line1=\"  75 Smith Road  \",\n            postcode=\"  n4 8ty\",\n            country=self.country,\n            user=self.user)\n        a.clean()\n        self.assertEqual(\"N4 8TY\", a.postcode)\n        self.assertEqual(\"75 Smith Road\", a.line1)\n\n    def test_active_address_fields_skips_whitespace_only_fields(self):\n        a = factories.UserAddressFactory.build(\n            first_name='   ',\n            last_name='Barrington',\n            line1='  75 Smith Road  ',\n            postcode='  n4 8ty',\n            title='',\n            country=self.country,\n            user=self.user)\n        active_fields = a.active_address_fields()\n        self.assertEqual(\"Barrington\", active_fields[0])\n\n    def test_ignores_whitespace_when_hashing(self):\n        a1 = factories.UserAddressFactory.build(\n            first_name='Terry',\n            last_name='Barrington',\n            country=self.country,\n            user=self.user)\n        a1.clean()\n        a2 = factories.UserAddressFactory.build(\n            first_name='   Terry  ',\n            last_name='     Barrington',\n            country=self.country,\n            user=self.user)\n        a2.clean()\n        self.assertEqual(a1.generate_hash(), a2.generate_hash())\n\n    def test_populate_shipping_address_doesnt_set_id(self):\n        a = factories.UserAddressFactory.build(\n            country=self.country,\n            user=self.user)\n        a.clean()\n        sa = ShippingAddress()\n        a.populate_alternative_model(sa)\n        self.assertIsNone(sa.id)\n\n    def test_populated_shipping_address_has_same_summary_user_address(self):\n        a = factories.UserAddressFactory.build(\n            country=self.country,\n            user=self.user)\n        a.clean()\n        sa = ShippingAddress()\n        a.populate_alternative_model(sa)\n        self.assertEqual(sa.summary, a.summary)\n\n    def test_summary_value(self):\n        a = factories.UserAddressFactory.build(\n            country=self.country,\n            user=self.user)\n        self.assertEqual(a.summary, 'Dr Barry Barrington, 1 King Road, London, SW1 9RE, UNITED KINGDOM')\n\n    def test_summary_is_property(self):\n        a = factories.UserAddressFactory.build(\n            title='',\n            line4='',\n            first_name=\" Terry  \",\n            last_name='Barrington',\n            line1=\"  75 Smith Road  \",\n            postcode=\"  n4 8ty\",\n            country=self.country,\n            user=self.user)\n        a.clean()\n        self.assertEqual(\n            \"Terry Barrington, 75 Smith Road, N4 8TY, UNITED KINGDOM\",\n            a.summary)\n\n\nVALID_POSTCODES = [\n    ('GB', 'N1 9RT'),\n    ('SK', '991 41'),\n    ('CZ', '612 00'),\n    ('CC', '6799'),\n    ('CY', '8240'),\n    ('MC', '98000'),\n    ('SH', 'STHL 1ZZ'),\n    ('JP', '150-2345'),\n    ('PG', '314'),\n    ('HN', '41202'),\n    ('BN', 'BC3615'),\n    ('TW', '104'),\n    ('TW', '10444'),\n    # It works for small cases as well\n    ('GB', 'sw2 1rw'),\n]\n\n\nINVALID_POSTCODES = [\n    ('GB', 'not-a-postcode'),\n    ('DE', '123b4'),\n]\n\n\n@pytest.mark.parametrize('country_value, postcode_value', VALID_POSTCODES)\ndef test_assert_valid_postcode(country_value, postcode_value):\n    country = models.Country(iso_3166_1_a2=country_value)\n    address = models.UserAddress(country=country, postcode=postcode_value)\n    address.clean()\n\n\n@pytest.mark.parametrize('country_value, postcode_value', INVALID_POSTCODES)\ndef test_assert_invalid_postcode(country_value, postcode_value):\n    country = models.Country(iso_3166_1_a2=country_value)\n    address = models.UserAddress(country=country, postcode=postcode_value)\n\n    with pytest.raises(exceptions.ValidationError):\n        address.clean()\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\n# Generated by Django 1.9.12 on 2017-02-26 11:22\nfrom __future__ import unicode_literals\n\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0003_auto_20150927_1551'),\n    ]\n\n    operations = [\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_shipping_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Shipping Address'),\n        ),\n    ]\n",
    "output": ""
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\n# Generated by Django 1.9.12 on 2017-02-26 11:22\nfrom __future__ import unicode_literals\n\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0003_auto_20150927_1551'),\n    ]\n\n    operations = [\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_shipping_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Shipping Address'),\n        ),\n    ]\n",
    "output": "from datetime import datetime, date\n\nfrom django.test import TestCase\nfrom django.core.exceptions import ValidationError\nfrom django.core.files.uploadedfile import SimpleUploadedFile\n\nfrom oscar.test import factories\n\n\nclass TestBooleanAttributes(TestCase):\n\n    def setUp(self):\n        self.attr = factories.ProductAttributeFactory(type=\"boolean\")\n\n    def test_validate_boolean_values(self):\n        self.assertIsNone(self.attr.validate_value(True))\n\n    def test_validate_invalid_boolean_values(self):\n        with self.assertRaises(ValidationError):\n            self.attr.validate_value(1)\n\n\nclass TestMultiOptionAttributes(TestCase):\n\n    def setUp(self):\n        self.option_group = factories.AttributeOptionGroupFactory()\n        self.attr = factories.ProductAttributeFactory(\n            type='multi_option',\n            name='Sizes',\n            code='sizes',\n            option_group=self.option_group,\n        )\n\n        # Add some options to the group\n        self.options = factories.AttributeOptionFactory.create_batch(\n            3, group=self.option_group)\n\n    def test_validate_multi_option_values(self):\n        self.assertIsNone(self.attr.validate_value([\n            self.options[0], self.options[1]]))\n\n    def test_validate_invalid_multi_option_values(self):\n        with self.assertRaises(ValidationError):\n            # value must be an iterable\n            self.attr.validate_value('foobar')\n\n        with self.assertRaises(ValidationError):\n            # Items must all be AttributeOption objects\n            self.attr.validate_value([self.options[0], 'notanOption'])\n\n    def test_save_multi_option_value(self):\n        product = factories.ProductFactory()\n        # We'll save two out of the three available options\n        self.attr.save_value(product, [self.options[0], self.options[2]])\n        product.refresh_from_db()\n        self.assertEqual(list(product.attr.sizes), [self.options[0], self.options[2]])\n\n    def test_delete_multi_option_value(self):\n        product = factories.ProductFactory()\n        self.attr.save_value(product, [self.options[0], self.options[1]])\n        # Now delete these values\n        self.attr.save_value(product, None)\n        product.refresh_from_db()\n        self.assertFalse(hasattr(product.attr, 'sizes'))\n\n    def test_multi_option_value_as_text(self):\n        product = factories.ProductFactory()\n        self.attr.save_value(product, self.options)\n        attr_val = product.attribute_values.get(attribute=self.attr)\n        self.assertEqual(attr_val.value_as_text, \", \".join(o.option for o in self.options))\n\n\nclass TestDatetimeAttributes(TestCase):\n\n    def setUp(self):\n        self.attr = factories.ProductAttributeFactory(type=\"datetime\")\n\n    def test_validate_datetime_values(self):\n        self.assertIsNone(self.attr.validate_value(datetime.now()))\n\n    def test_validate_invalid_datetime_values(self):\n        with self.assertRaises(ValidationError):\n            self.attr.validate_value(1)\n\n\nclass TestDateAttributes(TestCase):\n\n    def setUp(self):\n        self.attr = factories.ProductAttributeFactory(type=\"date\")\n\n    def test_validate_datetime_values(self):\n        self.assertIsNone(self.attr.validate_value(datetime.now()))\n\n    def test_validate_date_values(self):\n        self.assertIsNone(self.attr.validate_value(date.today()))\n\n    def test_validate_invalid_date_values(self):\n        with self.assertRaises(ValidationError):\n            self.attr.validate_value(1)\n\n\nclass TestIntegerAttributes(TestCase):\n\n    def setUp(self):\n        self.attr = factories.ProductAttributeFactory(type=\"integer\")\n\n    def test_validate_integer_values(self):\n        self.assertIsNone(self.attr.validate_value(1))\n\n    def test_validate_str_integer_values(self):\n        self.assertIsNone(self.attr.validate_value('1'))\n\n    def test_validate_invalid_integer_values(self):\n        with self.assertRaises(ValidationError):\n            self.attr.validate_value('notanInteger')\n\n\nclass TestFloatAttributes(TestCase):\n\n    def setUp(self):\n        self.attr = factories.ProductAttributeFactory(type=\"float\")\n\n    def test_validate_integer_values(self):\n        self.assertIsNone(self.attr.validate_value(1))\n\n    def test_validate_float_values(self):\n        self.assertIsNone(self.attr.validate_value(1.2))\n\n    def test_validate_str_float_values(self):\n        self.assertIsNone(self.attr.validate_value('1.2'))\n\n    def test_validate_invalid_float_values(self):\n        with self.assertRaises(ValidationError):\n            self.attr.validate_value('notaFloat')\n\n\nclass TestTextAttributes(TestCase):\n\n    def setUp(self):\n        self.attr = factories.ProductAttributeFactory(type=\"text\")\n\n    def test_validate_string_and_unicode_values(self):\n        self.assertIsNone(self.attr.validate_value('String'))\n\n    def test_validate_invalid_float_values(self):\n        with self.assertRaises(ValidationError):\n            self.attr.validate_value(1)\n\n\nclass TestFileAttributes(TestCase):\n    def setUp(self):\n        self.attr = factories.ProductAttributeFactory(type=\"file\")\n\n    def test_validate_file_values(self):\n        file_field = SimpleUploadedFile('test_file.txt', b'Test')\n        self.assertIsNone(self.attr.validate_value(file_field))\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\n# Generated by Django 1.9.12 on 2017-02-26 11:22\nfrom __future__ import unicode_literals\n\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0003_auto_20150927_1551'),\n    ]\n\n    operations = [\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_shipping_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Shipping Address'),\n        ),\n    ]\n",
    "output": "# -*- coding: utf-8 -*-\nfrom django.core.cache import cache\nfrom django.test import TestCase\nfrom django.test.utils import override_settings\n\nfrom oscar.apps.catalogue.models import Category\nfrom oscar.apps.catalogue.categories import create_from_breadcrumbs\nfrom oscar.templatetags.category_tags import get_annotated_list\n\n\nclass TestCategory(TestCase):\n\n    def setUp(self):\n        self.products = Category.add_root(name=\"Pr\u00f6ducts\")\n        self.books = self.products.add_child(name=\"B\u00fccher\")\n\n    def tearDown(self):\n        cache.clear()\n\n    def test_includes_parents_name_in_full_name(self):\n        self.assertTrue(self.products.name in self.books.full_name)\n\n    def test_has_children_method(self):\n        self.assertTrue(self.products.has_children())\n\n    def test_slugs_were_autogenerated(self):\n        self.assertTrue(self.products.slug)\n        self.assertTrue(self.books.slug)\n\n    def test_supplied_slug_is_not_altered(self):\n        more_books = self.products.add_child(\n            name=self.books.name, slug=self.books.slug)\n        self.assertEqual(more_books.slug, self.books.slug)\n\n    @override_settings(OSCAR_SLUG_ALLOW_UNICODE=True)\n    def test_unicode_slug(self):\n        root_category = Category.add_root(name=\"Vins fran\u00e7ais\")\n        child_category = root_category.add_child(name=\"Ch\u00e2teau d'Yquem\")\n        self.assertEqual(root_category.slug, 'vins-fran\u00e7ais')\n        self.assertEqual(\n            root_category.get_absolute_url(), '/catalogue/category/vins-fran%C3%A7ais_{}/'.format(root_category.pk)\n        )\n        self.assertEqual(child_category.slug, 'ch\u00e2teau-dyquem')\n        self.assertEqual(\n            child_category.get_absolute_url(),\n            '/catalogue/category/vins-fran%C3%A7ais/ch%C3%A2teau-dyquem_{}/'.format(child_category.pk)\n        )\n\n    @override_settings(OSCAR_SLUG_ALLOW_UNICODE=True)\n    def test_url_caching(self):\n        category = self.products.add_child(name=\"Fromages fran\u00e7ais\")\n        absolute_url = category.get_absolute_url()\n        url = cache.get(category.get_url_cache_key())\n        self.assertEqual(url, '/catalogue/category/products/fromages-fran%C3%A7ais_{}/'.format(category.pk))\n        self.assertEqual(absolute_url, '/catalogue/category/products/fromages-fran%C3%A7ais_{}/'.format(category.pk))\n\n\nclass TestMovingACategory(TestCase):\n\n    def setUp(self):\n        breadcrumbs = (\n            'Books > Fiction > Horror > Teen',\n            'Books > Fiction > Horror > Gothic',\n            'Books > Fiction > Comedy',\n            'Books > Non-fiction > Biography',\n            'Books > Non-fiction > Programming',\n            'Books > Children',\n        )\n        for trail in breadcrumbs:\n            create_from_breadcrumbs(trail)\n\n        horror = Category.objects.get(name=\"Horror\")\n        programming = Category.objects.get(name=\"Programming\")\n        horror.move(programming)\n\n        # Reload horror instance to pick up changes\n        self.horror = Category.objects.get(name=\"Horror\")\n\n    def test_updates_instance_name(self):\n        self.assertEqual('Books > Non-fiction > Horror', self.horror.full_name)\n\n    def test_updates_subtree_names(self):\n        teen = Category.objects.get(name=\"Teen\")\n        self.assertEqual('Books > Non-fiction > Horror > Teen',\n                         teen.full_name)\n        gothic = Category.objects.get(name=\"Gothic\")\n        self.assertEqual('Books > Non-fiction > Horror > Gothic',\n                         gothic.full_name)\n\n\nclass TestCategoryFactory(TestCase):\n\n    def test_can_create_single_level_category(self):\n        trail = 'Books'\n        category = create_from_breadcrumbs(trail)\n        self.assertIsNotNone(category)\n        self.assertEqual(category.name, 'Books')\n        self.assertEqual(category.slug, 'books')\n\n    def test_can_create_parent_and_child_categories(self):\n        trail = 'Books > Science-Fiction'\n        category = create_from_breadcrumbs(trail)\n\n        self.assertIsNotNone(category)\n        self.assertEqual(category.name, 'Science-Fiction')\n        self.assertEqual(category.get_depth(), 2)\n        self.assertEqual(category.get_parent().name, 'Books')\n        self.assertEqual(2, Category.objects.count())\n        self.assertEqual(category.full_slug, 'books/science-fiction')\n\n    def test_can_create_multiple_categories(self):\n        trail = 'Books > Science-Fiction > Star Trek'\n        create_from_breadcrumbs(trail)\n        trail = 'Books > Factual > Popular Science'\n        category = create_from_breadcrumbs(trail)\n\n        self.assertIsNotNone(category)\n        self.assertEqual(category.name, 'Popular Science')\n        self.assertEqual(category.get_depth(), 3)\n        self.assertEqual(category.get_parent().name, 'Factual')\n        self.assertEqual(5, Category.objects.count())\n        self.assertEqual(category.full_slug, 'books/factual/popular-science', )\n\n    def test_can_use_alternative_separator(self):\n        trail = 'Food|Cheese|Blue'\n        create_from_breadcrumbs(trail, separator='|')\n        self.assertEqual(3, len(Category.objects.all()))\n\n    def test_updating_subtree_slugs_when_moving_category_to_new_parent(self):\n        trail = 'A > B > C'\n        create_from_breadcrumbs(trail)\n        trail = 'A > B > D'\n        create_from_breadcrumbs(trail)\n        trail = 'A > E > F'\n        create_from_breadcrumbs(trail)\n        trail = 'A > E > G'\n        create_from_breadcrumbs(trail)\n\n        trail = 'T'\n        target = create_from_breadcrumbs(trail)\n        category = Category.objects.get(name='A')\n\n        category.move(target, pos='first-child')\n\n        c1 = Category.objects.get(name='A')\n        self.assertEqual(c1.full_slug, 't/a')\n        self.assertEqual(c1.full_name, 'T > A')\n\n        child = Category.objects.get(name='F')\n        self.assertEqual(child.full_slug, 't/a/e/f')\n        self.assertEqual(child.full_name, 'T > A > E > F')\n\n        child = Category.objects.get(name='D')\n        self.assertEqual(child.full_slug, 't/a/b/d')\n        self.assertEqual(child.full_name, 'T > A > B > D')\n\n    def test_updating_subtree_when_moving_category_to_new_sibling(self):\n        trail = 'A > B > C'\n        create_from_breadcrumbs(trail)\n        trail = 'A > B > D'\n        create_from_breadcrumbs(trail)\n        trail = 'A > E > F'\n        create_from_breadcrumbs(trail)\n        trail = 'A > E > G'\n        create_from_breadcrumbs(trail)\n\n        category = Category.objects.get(name='E')\n        target = Category.objects.get(name='A')\n\n        category.move(target, pos='right')\n\n        child = Category.objects.get(name='E')\n        self.assertEqual(child.full_slug, 'e')\n        self.assertEqual(child.full_name, 'E')\n\n        child = Category.objects.get(name='F')\n        self.assertEqual(child.full_slug, 'e/f')\n        self.assertEqual(child.full_name, 'E > F')\n\n\nclass TestCategoryTemplateTags(TestCase):\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.template = \"\"\"\n          {% if tree_categories %}\n              <ul>\n              {% for tree_category, info in tree_categories %}\n                  <li>\n                  {% if tree_category.pk == category.pk %}\n                      <strong>{{ tree_category.name }}</strong>\n                  {% else %}\n                      <a href=\"{{ tree_category.get_absolute_url }}\">\n                          {{ tree_category.name }}</a>\n                  {% endif %}\n                  {% if info.has_children %}<ul>{% else %}</li>{% endif %}\n                  {% for n in info.num_to_close %}\n                      </ul></li>\n                  {% endfor %}\n              {% endfor %}\n              </ul>\n          {% endif %}\n        \"\"\"\n\n    def setUp(self):\n        breadcrumbs = (\n            'Books > Fiction > Horror > Teen',\n            'Books > Fiction > Horror > Gothic',\n            'Books > Fiction > Comedy',\n            'Books > Non-fiction > Biography',\n            'Books > Non-fiction > Programming',\n            'Books > Children',\n        )\n        for trail in breadcrumbs:\n            create_from_breadcrumbs(trail)\n\n    def get_category_names(self, depth=None, parent=None):\n        \"\"\"\n        For the tests, we are only interested in the category names returned\n        from the template tag. This helper calls the template tag and\n        returns a list of the included categories.\n        \"\"\"\n        annotated_list = get_annotated_list(depth, parent)\n        names = [category.name for category, __ in annotated_list]\n        names_set = set(names)\n        # We return a set to ease testing, but need to be sure we're not\n        # losing any duplicates through that conversion.\n        self.assertEqual(len(names_set), len(names))\n        return names_set\n\n    def test_all_categories(self):\n        expected_categories = {\n            'Books', 'Fiction', 'Horror', 'Teen', 'Gothic', 'Comedy',\n            'Non-fiction', 'Biography', 'Programming', 'Children'}\n        actual_categories = self.get_category_names()\n        self.assertEqual(expected_categories, actual_categories)\n\n    def test_categories_depth(self):\n        expected_categories = {'Books'}\n        actual_categories = self.get_category_names(depth=1)\n        self.assertEqual(expected_categories, actual_categories)\n\n    def test_categories_parent(self):\n        parent = Category.objects.get(name=\"Fiction\")\n        actual_categories = self.get_category_names(parent=parent)\n        expected_categories = {'Horror', 'Teen', 'Gothic', 'Comedy'}\n        self.assertEqual(expected_categories, actual_categories)\n\n    def test_categories_depth_parent(self):\n        parent = Category.objects.get(name=\"Fiction\")\n        actual_categories = self.get_category_names(depth=1, parent=parent)\n        expected_categories = {'Horror', 'Comedy'}\n        self.assertEqual(expected_categories, actual_categories)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\n# Generated by Django 1.9.12 on 2017-02-26 11:22\nfrom __future__ import unicode_literals\n\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0003_auto_20150927_1551'),\n    ]\n\n    operations = [\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_shipping_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Shipping Address'),\n        ),\n    ]\n",
    "output": "import pytest\nfrom django.core.exceptions import ValidationError\n\nfrom oscar.apps.catalogue import models\n\n\ndef test_product_attributes_can_contain_underscores():\n    attr = models.ProductAttribute(name=\"A\", code=\"a_b\")\n    attr.full_clean()\n\n\ndef test_product_attributes_cant_contain_hyphens():\n    attr = models.ProductAttribute(name=\"A\", code=\"a-b\")\n    with pytest.raises(ValidationError):\n        attr.full_clean()\n\n\ndef test_product_attributes_cant_be_python_keywords():\n    attr = models.ProductAttribute(name=\"A\", code=\"import\")\n    with pytest.raises(ValidationError):\n        attr.full_clean()\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\n# Generated by Django 1.9.12 on 2017-02-26 11:22\nfrom __future__ import unicode_literals\n\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0003_auto_20150927_1551'),\n    ]\n\n    operations = [\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_shipping_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Shipping Address'),\n        ),\n    ]\n",
    "output": "from django.test import TestCase\n\nfrom oscar.test import factories\nfrom oscar.core.loading import get_model\n\n\nProduct = get_model('catalogue', 'Product')\n\n\nclass ProductOptionTests(TestCase):\n    def setUp(self):\n        self.product_class = factories.ProductClassFactory()\n        self.product = factories.create_product(product_class=self.product_class)\n        self.option = factories.OptionFactory()\n\n    def test_product_has_options_per_product_class(self):\n        self.product_class.options.add(self.option)\n        self.assertTrue(self.product.has_options)\n\n    def test_product_has_options_per_product(self):\n        self.product.product_options.add(self.option)\n        self.assertTrue(self.product.has_options)\n\n    def test_queryset_per_product_class(self):\n        self.product_class.options.add(self.option)\n        qs = Product.browsable.base_queryset().filter(id=self.product.id)\n        product = qs.first()\n        self.assertTrue(product.has_options)\n        self.assertEquals(product.num_product_class_options, 1)\n\n    def test_queryset_per_product(self):\n        self.product.product_options.add(self.option)\n        qs = Product.browsable.base_queryset().filter(id=self.product.id)\n        product = qs.first()\n        self.assertTrue(product.has_options)\n        self.assertEquals(product.num_product_options, 1)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\n# Generated by Django 1.9.12 on 2017-02-26 11:22\nfrom __future__ import unicode_literals\n\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0003_auto_20150927_1551'),\n    ]\n\n    operations = [\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_shipping_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Shipping Address'),\n        ),\n    ]\n",
    "output": "# coding=utf-8\nfrom django.db import IntegrityError\nfrom django.test import TestCase\nfrom django.core.exceptions import ValidationError\n\nfrom oscar.apps.catalogue.models import (Product, ProductClass,\n                                         ProductAttribute,\n                                         AttributeOption,\n                                         ProductRecommendation)\nfrom oscar.test import factories\n\n\nclass ProductTests(TestCase):\n\n    def setUp(self):\n        self.product_class, _ = ProductClass.objects.get_or_create(\n            name='Clothing')\n\n\nclass ProductCreationTests(ProductTests):\n\n    def setUp(self):\n        super().setUp()\n        ProductAttribute.objects.create(product_class=self.product_class,\n                                        name='Number of pages',\n                                        code='num_pages',\n                                        type='integer')\n        Product.ENABLE_ATTRIBUTE_BINDING = True\n\n    def tearDown(self):\n        Product.ENABLE_ATTRIBUTE_BINDING = False\n\n    def test_create_products_with_attributes(self):\n        product = Product(upc='1234',\n                          product_class=self.product_class,\n                          title='testing')\n        product.attr.num_pages = 100\n        product.save()\n\n    def test_none_upc_is_represented_as_empty_string(self):\n        product = Product(product_class=self.product_class,\n                          title='testing', upc=None)\n        product.save()\n        product.refresh_from_db()\n        self.assertEqual(product.upc, '')\n\n    def test_upc_uniqueness_enforced(self):\n        Product.objects.create(product_class=self.product_class,\n                               title='testing', upc='bah')\n        self.assertRaises(IntegrityError, Product.objects.create,\n                          product_class=self.product_class,\n                          title='testing', upc='bah')\n\n    def test_allow_two_products_without_upc(self):\n        for x in range(2):\n            Product.objects.create(product_class=self.product_class,\n                                   title='testing', upc=None)\n\n\nclass TopLevelProductTests(ProductTests):\n\n    def test_top_level_products_must_have_titles(self):\n        product = Product(product_class=self.product_class)\n        self.assertRaises(ValidationError, product.clean)\n\n    def test_top_level_products_must_have_product_class(self):\n        product = Product(title=\"Kopfh\u00f6rer\")\n        self.assertRaises(ValidationError, product.clean)\n\n    def test_top_level_products_are_part_of_browsable_set(self):\n        product = Product.objects.create(\n            product_class=self.product_class, title=\"Kopfh\u00f6rer\")\n        self.assertEqual(set([product]), set(Product.browsable.all()))\n\n\nclass ChildProductTests(ProductTests):\n\n    def setUp(self):\n        super().setUp()\n        self.parent = Product.objects.create(\n            title=\"Parent product\",\n            product_class=self.product_class,\n            structure=Product.PARENT,\n            is_discountable=False)\n\n    def test_child_products_dont_need_titles(self):\n        Product.objects.create(\n            parent=self.parent, structure=Product.CHILD)\n\n    def test_child_products_dont_need_a_product_class(self):\n        Product.objects.create(parent=self.parent, structure=Product.CHILD)\n\n    def test_child_products_inherit_fields(self):\n        p = Product.objects.create(\n            parent=self.parent,\n            structure=Product.CHILD,\n            is_discountable=True)\n        self.assertEqual(\"Parent product\", p.get_title())\n        self.assertEqual(\"Clothing\", p.get_product_class().name)\n        self.assertEqual(False, p.get_is_discountable())\n\n    def test_child_products_are_not_part_of_browsable_set(self):\n        Product.objects.create(\n            product_class=self.product_class, parent=self.parent,\n            structure=Product.CHILD)\n        self.assertEqual(set([self.parent]), set(Product.browsable.all()))\n\n\nclass TestAChildProduct(TestCase):\n\n    def setUp(self):\n        clothing = ProductClass.objects.create(\n            name='Clothing', requires_shipping=True)\n        self.parent = clothing.products.create(\n            title=\"Parent\", structure=Product.PARENT)\n        self.child = self.parent.children.create(structure=Product.CHILD)\n\n    def test_delegates_requires_shipping_logic(self):\n        self.assertTrue(self.child.is_shipping_required)\n\n\nclass ProductAttributeCreationTests(TestCase):\n\n    def test_validating_option_attribute(self):\n        option_group = factories.AttributeOptionGroupFactory()\n        option_1 = factories.AttributeOptionFactory(group=option_group)\n        option_2 = factories.AttributeOptionFactory(group=option_group)\n        pa = factories.ProductAttribute(\n            type='option', option_group=option_group)\n\n        self.assertRaises(ValidationError, pa.validate_value, 'invalid')\n        pa.validate_value(option_1)\n        pa.validate_value(option_2)\n\n        invalid_option = AttributeOption(option='invalid option')\n        self.assertRaises(\n            ValidationError, pa.validate_value, invalid_option)\n\n    def test_entity_attributes(self):\n        unrelated_object = factories.PartnerFactory()\n        attribute = factories.ProductAttributeFactory(type='entity')\n\n        attribute_value = factories.ProductAttributeValueFactory(\n            attribute=attribute, value_entity=unrelated_object)\n\n        self.assertEqual(attribute_value.value, unrelated_object)\n\n\nclass ProductRecommendationTests(ProductTests):\n\n    def setUp(self):\n        super().setUp()\n        self.primary_product = Product.objects.create(\n            upc='1234', product_class=self.product_class, title='Primary Product'\n        )\n\n    def test_recommended_products_ordering(self):\n        secondary_products = []\n        for i in range(5):\n            secondary_products.append(Product.objects.create(\n                upc='secondary%s' % i, product_class=self.product_class, title='Secondary Product #%s' % i\n            ))\n\n        ProductRecommendation.objects.create(\n            primary=self.primary_product, recommendation=secondary_products[3], ranking=5)\n        ProductRecommendation.objects.create(\n            primary=self.primary_product, recommendation=secondary_products[1], ranking=2)\n        ProductRecommendation.objects.create(\n            primary=self.primary_product, recommendation=secondary_products[2], ranking=4)\n        ProductRecommendation.objects.create(\n            primary=self.primary_product, recommendation=secondary_products[4], ranking=1)\n        ProductRecommendation.objects.create(\n            primary=self.primary_product, recommendation=secondary_products[0], ranking=3)\n        recommended_products = [\n            secondary_products[3], secondary_products[2], secondary_products[0],\n            secondary_products[1], secondary_products[4]\n        ]\n        self.assertEqual(self.primary_product.sorted_recommended_products, recommended_products)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\n# Generated by Django 1.9.12 on 2017-02-26 11:22\nfrom __future__ import unicode_literals\n\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0003_auto_20150927_1551'),\n    ]\n\n    operations = [\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_shipping_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Shipping Address'),\n        ),\n    ]\n",
    "output": "from django.test import TestCase\n\nfrom oscar.apps.catalogue import models\n\n\nclass TestProductClassModel(TestCase):\n\n    def test_slug_is_auto_created(self):\n        books = models.ProductClass.objects.create(\n            name=\"Book\",\n        )\n        self.assertEqual('book', books.slug)\n\n    def test_has_attribute_for_whether_shipping_is_required(self):\n        models.ProductClass.objects.create(\n            name=\"Download\",\n            requires_shipping=False,\n        )\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\n# Generated by Django 1.9.12 on 2017-02-26 11:22\nfrom __future__ import unicode_literals\n\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0003_auto_20150927_1551'),\n    ]\n\n    operations = [\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_shipping_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Shipping Address'),\n        ),\n    ]\n",
    "output": "import os\nimport tempfile\nfrom unittest import mock\n\nfrom django.contrib.staticfiles.testing import StaticLiveServerTestCase\nfrom django.test import TestCase, override_settings\n\nfrom oscar.apps.catalogue.abstract_models import MissingProductImage\nfrom oscar.test import factories\n\n\nclass TestProductImages(TestCase):\n\n    def test_images_are_in_consecutive_order(self):\n        product = factories.create_product()\n        for i in range(4):\n            factories.create_product_image(product=product, display_order=i)\n\n        product.images.all()[2].delete()\n\n        for idx, im in enumerate(product.images.all()):\n            self.assertEqual(im.display_order, idx)\n\n    def test_variant_images(self):\n        parent = factories.ProductFactory(structure='parent')\n        variant = factories.create_product(parent=parent)\n        factories.create_product_image(product=variant, caption='Variant Image')\n        all_images = variant.get_all_images()\n        self.assertEquals(all_images.count(), 1)\n        product_image = all_images.first()\n        self.assertEquals(product_image.caption, 'Variant Image')\n\n    def test_variant_images_fallback_to_parent(self):\n        parent = factories.ProductFactory(structure='parent')\n        variant = factories.create_product(parent=parent)\n        factories.create_product_image(product=parent, caption='Parent Product Image')\n        all_images = variant.get_all_images()\n        self.assertEquals(all_images.count(), 1)\n        product_image = all_images.first()\n        self.assertEquals(product_image.caption, 'Parent Product Image')\n\n\nclass TestMissingProductImage(StaticLiveServerTestCase):\n\n    TEMP_MEDIA_ROOT = tempfile.mkdtemp()\n\n    @override_settings(MEDIA_ROOT=TEMP_MEDIA_ROOT)\n    @mock.patch('oscar.apps.catalogue.abstract_models.find')\n    def test_symlink_creates_directories(self, mock_find):\n        # Create a fake empty file to symlink\n        img = tempfile.NamedTemporaryFile(delete=False)\n        img.close()\n\n        mock_find.return_value = img.name\n        # Initialise the class with a nested path\n        path = 'image/path.jpg'\n        MissingProductImage(path)\n        # Check that the directory exists\n        image_path = os.path.join(self.TEMP_MEDIA_ROOT, path)\n        self.assertTrue(os.path.exists(image_path))\n\n        # Clean up\n        for f in [image_path, img.name]:\n            os.unlink(f)\n        for d in [os.path.join(self.TEMP_MEDIA_ROOT, 'image'), self.TEMP_MEDIA_ROOT]:\n            os.rmdir(d)\n\n    @mock.patch('oscar.apps.catalogue.abstract_models.MissingProductImage.symlink_missing_image')\n    def test_no_symlink_when_no_media_root(self, mock_symlink):\n        MissingProductImage()\n        self.assertEqual(mock_symlink.call_count, 0)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\n# Generated by Django 1.9.12 on 2017-02-26 11:22\nfrom __future__ import unicode_literals\n\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0003_auto_20150927_1551'),\n    ]\n\n    operations = [\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_shipping_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Shipping Address'),\n        ),\n    ]\n",
    "output": "from django.test import TestCase\nfrom django.test.utils import override_settings\n\nfrom oscar.apps.catalogue.search_handlers import (\n    get_product_search_handler_class,\n)\n\n\nclass TestSearchHandler(object):\n    pass\n\n\nclass TestProductSearchHandlerSetting(TestCase):\n    def test_product_search_handler_setting(self):\n        \"\"\"\n        Test that the `OSCAR_PRODUCT_SEARCH_HANDLER` setting, when set,\n        dictates the return value of the `get_product_search_handler_class`\n        function.\n        \"\"\"\n        handler_override = 'tests.integration.catalogue.test_product_search_handler_setting.TestSearchHandler'\n        with override_settings(OSCAR_PRODUCT_SEARCH_HANDLER=handler_override):\n            handler_class = get_product_search_handler_class()\n\n        self.assertEqual(handler_class, TestSearchHandler)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\n# Generated by Django 1.9.12 on 2017-02-26 11:22\nfrom __future__ import unicode_literals\n\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0003_auto_20150927_1551'),\n    ]\n\n    operations = [\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_shipping_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Shipping Address'),\n        ),\n    ]\n",
    "output": ""
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\n# Generated by Django 1.9.12 on 2017-02-26 11:22\nfrom __future__ import unicode_literals\n\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0003_auto_20150927_1551'),\n    ]\n\n    operations = [\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_shipping_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Shipping Address'),\n        ),\n    ]\n",
    "output": "from django.test import TestCase\n\nfrom oscar.apps.catalogue.reviews import forms\nfrom oscar.test.factories import UserFactory, create_product\n\n\nclass TestReviewForm(TestCase):\n\n    def test_cleans_title(self):\n        product = create_product()\n        reviewer = UserFactory()\n        data = {\n            'title': '  This product is lovely',\n            'body': 'I really like this cheese',\n            'score': 0,\n            'name': 'JR Hartley',\n            'email': 'hartley@example.com'\n        }\n        form = forms.ProductReviewForm(\n            product=product, user=reviewer, data=data)\n\n        assert form.is_valid()\n\n        review = form.save()\n        assert review.title == \"This product is lovely\"\n\n    def test_validates_empty_data_correctly(self):\n        form = forms.ProductReviewForm(product=None, user=None, data={})\n        assert form.is_valid() is False\n\n    def test_validates_correctly(self):\n        data = {\n            'title': 'This product is lovely',\n            'body': 'I really like this cheese',\n            'score': 0,\n            'name': 'JR Hartley',\n            'email': 'hartley@example.com'\n        }\n        form = forms.ProductReviewForm(product=None, user=None, data=data)\n        assert form.is_valid()\n\n\nclass TestVoteForm(TestCase):\n\n    def setUp(self):\n        self.product = create_product()\n        self.reviewer = UserFactory()\n        self.voter = UserFactory()\n        self.review = self.product.reviews.create(\n            title='This is nice',\n            score=3,\n            body=\"This is the body\",\n            user=self.reviewer)\n\n    def test_allows_real_users_to_vote(self):\n        form = forms.VoteForm(self.review, self.voter, data={'delta': 1})\n        self.assertTrue(form.is_valid())\n\n    def test_prevents_users_from_voting_more_than_once(self):\n        self.review.vote_up(self.voter)\n        form = forms.VoteForm(self.review, self.voter, data={'delta': 1})\n        self.assertFalse(form.is_valid())\n        self.assertTrue(len(form.errors['__all__']) > 0)\n\n    def test_prevents_users_voting_on_their_own_reviews(self):\n        form = forms.VoteForm(self.review, self.reviewer, data={'delta': 1})\n        self.assertFalse(form.is_valid())\n        self.assertTrue(len(form.errors['__all__']) > 0)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\n# Generated by Django 1.9.12 on 2017-02-26 11:22\nfrom __future__ import unicode_literals\n\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0003_auto_20150927_1551'),\n    ]\n\n    operations = [\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_shipping_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Shipping Address'),\n        ),\n    ]\n",
    "output": "from django.test import TestCase\nfrom django.core.exceptions import ValidationError\n\nfrom oscar.core.compat import get_user_model\nfrom oscar.apps.catalogue.reviews import models\nfrom oscar.test.factories import create_product\nfrom oscar.test.factories import UserFactory\n\nUser = get_user_model()\n\n\nclass TestAnAnonymousReview(TestCase):\n\n    def setUp(self):\n        self.product = create_product()\n        self.data = {\n            'product': self.product,\n            'title': 'This product is lovely',\n            'body': 'I really like this cheese',\n            'score': 0,\n            'name': 'JR Hartley',\n            'email': 'hartley@example.com'\n        }\n\n    def review(self, **kwargs):\n        if kwargs:\n            data = self.data.copy()\n            data.update(kwargs)\n        else:\n            data = self.data\n        return models.ProductReview(**data)\n\n    def test_can_be_created(self):\n        review = self.review()\n        review.full_clean()\n\n    def test_requires_a_title(self):\n        review = self.review(title=\"\")\n        self.assertRaises(ValidationError, review.full_clean)\n\n    def test_requires_a_body(self):\n        review = self.review(body=\"\")\n        self.assertRaises(ValidationError, review.full_clean)\n\n    def test_requires_a_name(self):\n        review = self.review(name=\"\")\n        self.assertRaises(ValidationError, review.full_clean)\n\n    def test_requires_an_email_address(self):\n        review = self.review(email=\"\")\n        self.assertRaises(ValidationError, review.full_clean)\n\n    def test_requires_non_whitespace_title(self):\n        review = self.review(title=\"    \")\n        self.assertRaises(ValidationError, review.full_clean)\n\n    def test_starts_with_no_votes(self):\n        review = self.review()\n        review.save()\n        self.assertFalse(review.has_votes)\n        self.assertEqual(0, review.num_up_votes)\n        self.assertEqual(0, review.num_down_votes)\n\n    def test_has_reviewer_name_property(self):\n        review = self.review(name=\"Dave\")\n        self.assertEqual(\"Dave\", review.reviewer_name)\n\n    def test_review_moderate_setting_false(self):\n        with self.settings(OSCAR_MODERATE_REVIEWS=False):\n            review = self.review()\n            self.assertEqual(1, review.status)\n\n    def test_review_moderate_setting_true(self):\n        with self.settings(OSCAR_MODERATE_REVIEWS=True):\n            review = self.review()\n            self.assertEqual(0, review.status)\n\n\nclass TestAUserReview(TestCase):\n\n    def setUp(self):\n        self.product = create_product()\n        self.user = UserFactory(first_name=\"Tom\", last_name=\"Thumb\")\n        self.data = {\n            'product': self.product,\n            'title': 'This product is lovely',\n            'body': 'I really like this cheese',\n            'score': 0,\n            'user': self.user\n        }\n\n    def review(self, **kwargs):\n        if kwargs:\n            data = self.data.copy()\n            data.update(kwargs)\n        else:\n            data = self.data\n        return models.ProductReview(**data)\n\n    def test_can_be_created(self):\n        review = self.review()\n        review.full_clean()\n\n    def test_requires_a_title(self):\n        review = self.review(title=\"\")\n        self.assertRaises(ValidationError, review.full_clean)\n\n    def test_requires_a_body(self):\n        review = self.review(body=\"\")\n        self.assertRaises(ValidationError, review.full_clean)\n\n    def test_has_reviewer_name_property(self):\n        review = self.review()\n        self.assertEqual(\"Tom Thumb\", review.reviewer_name)\n\n    def test_num_approved_reviews(self):\n        review = self.review()\n        review.save()\n        self.assertEqual(self.product.num_approved_reviews, 1)\n        self.assertEqual(self.product.reviews.approved().first(), review)\n\n    def test_review_moderate_setting_false(self):\n        with self.settings(OSCAR_MODERATE_REVIEWS=False):\n            review = self.review()\n            self.assertEqual(1, review.status)\n\n    def test_review_moderate_setting_true(self):\n        with self.settings(OSCAR_MODERATE_REVIEWS=True):\n            review = self.review()\n            self.assertEqual(0, review.status)\n\n\nclass TestVotingOnAReview(TestCase):\n\n    def setUp(self):\n        self.product = create_product()\n        self.user = UserFactory()\n        self.voter = UserFactory()\n        self.review = self.product.reviews.create(\n            title='This is nice',\n            score=3,\n            body=\"This is the body\",\n            user=self.user)\n\n    def test_updates_totals_for_upvote(self):\n        self.review.vote_up(self.voter)\n        self.assertTrue(self.review.has_votes)\n        self.assertEqual(1, self.review.total_votes)\n        self.assertEqual(1, self.review.delta_votes)\n\n    def test_updates_totals_for_downvote(self):\n        self.review.vote_down(self.voter)\n        self.assertTrue(self.review.has_votes)\n        self.assertEqual(1, self.review.total_votes)\n        self.assertEqual(-1, self.review.delta_votes)\n\n    def test_is_permitted_for_normal_user(self):\n        is_allowed, reason = self.review.can_user_vote(self.voter)\n        self.assertTrue(is_allowed, reason)\n\n    def test_is_not_permitted_for_reviewer(self):\n        is_allowed, reason = self.review.can_user_vote(self.user)\n        self.assertFalse(is_allowed, reason)\n\n    def test_is_not_permitted_for_previous_voter(self):\n        self.review.vote_up(self.voter)\n        is_allowed, reason = self.review.can_user_vote(self.voter)\n        self.assertFalse(is_allowed, reason)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\n# Generated by Django 1.9.12 on 2017-02-26 11:22\nfrom __future__ import unicode_literals\n\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0003_auto_20150927_1551'),\n    ]\n\n    operations = [\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_shipping_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Shipping Address'),\n        ),\n    ]\n",
    "output": ""
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\n# Generated by Django 1.9.12 on 2017-02-26 11:22\nfrom __future__ import unicode_literals\n\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0003_auto_20150927_1551'),\n    ]\n\n    operations = [\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_shipping_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Shipping Address'),\n        ),\n    ]\n",
    "output": "from decimal import Decimal as D\nfrom unittest import mock\n\nfrom django.test import TestCase, override_settings\nfrom django.conf import settings\n\nfrom oscar.apps.basket import forms, formsets\nfrom oscar.apps.offer.utils import Applicator\nfrom oscar.core.loading import get_model\nfrom oscar.test import factories\nfrom oscar.test.basket import add_product\nfrom oscar.test.factories import (\n    BenefitFactory, ConditionalOfferFactory, ConditionFactory, RangeFactory)\n\n\nLine = get_model('basket', 'Line')\n\n\nclass TestBasketLineForm(TestCase):\n\n    def setUp(self):\n        self.applicator = Applicator()\n        rng = RangeFactory(includes_all_products=True)\n        self.condition = ConditionFactory(\n            range=rng, type=ConditionFactory._meta.model.VALUE,\n            value=D('100'), proxy_class=None)\n        self.benefit = BenefitFactory(\n            range=rng, type=BenefitFactory._meta.model.FIXED,\n            value=D('10'), max_affected_items=1)\n        self.basket = factories.create_basket()\n        self.line = self.basket.all_lines()[0]\n\n    def mock_availability_return_value(self, is_available, reason=''):\n        policy = self.line.purchase_info.availability\n        policy.is_purchase_permitted = mock.MagicMock(\n            return_value=(is_available, reason))\n\n    def build_form(self, quantity=None):\n        if quantity is None:\n            quantity = self.line.quantity\n        return forms.BasketLineForm(\n            strategy=self.basket.strategy,\n            data={'quantity': quantity},\n            instance=self.line)\n\n    def test_enforces_availability_policy_for_valid_quantities(self):\n        self.mock_availability_return_value(True)\n        form = self.build_form()\n        self.assertTrue(form.is_valid())\n\n    def test_enforces_availability_policy_for_invalid_quantities(self):\n        self.mock_availability_return_value(False, \"Some reason\")\n        form = self.build_form()\n        self.assertFalse(form.is_valid())\n        self.assertEqual(\n            form.errors['quantity'], ['Some reason'])\n\n    def test_skips_availability_policy_for_zero_quantities(self):\n        self.mock_availability_return_value(True)\n        form = self.build_form(quantity=0)\n        self.assertTrue(form.is_valid())\n\n    def test_enforces_max_line_quantity_for_new_product(self):\n        invalid_qty = settings.OSCAR_MAX_BASKET_QUANTITY_THRESHOLD + 1\n        form = self.build_form(quantity=invalid_qty)\n        self.assertFalse(form.is_valid())\n\n    @override_settings(OSCAR_MAX_BASKET_QUANTITY_THRESHOLD=10)\n    def test_enforce_max_line_quantity_for_existing_product(self):\n        self.basket.flush()\n        product = factories.create_product(num_in_stock=20)\n        add_product(self.basket, D('100'), 4, product)\n        self.line = self.basket.all_lines()[0]\n        form = self.build_form(quantity=6)\n        self.assertTrue(form.is_valid())\n        form.save()\n        form = self.build_form(quantity=11)\n        self.assertFalse(form.is_valid())\n\n    def test_line_quantity_max_attribute_per_num_available(self):\n        self.basket.flush()\n        product = factories.create_product(num_in_stock=20)\n        add_product(self.basket, D('100'), 4, product)\n        self.line = self.basket.all_lines()[0]\n        form = self.build_form()\n        self.assertIn('max=\"20\"', str(form['quantity']))\n\n    @override_settings(OSCAR_MAX_BASKET_QUANTITY_THRESHOLD=10)\n    def test_line_quantity_max_attribute_per_basket_threshold(self):\n        self.basket.flush()\n        product = factories.create_product(num_in_stock=20)\n        add_product(self.basket, D('100'), 4, product)\n        self.line = self.basket.all_lines()[0]\n        form = self.build_form()\n        self.assertIn('max=\"6\"', str(form['quantity']))\n\n    def test_basketline_formset_ordering(self):\n        # when we use a unordered queryset in the Basketlineformset, the\n        # discounts will be lost because django will query the database\n        # again to enforce ordered results\n        add_product(self.basket, D('100'), 5)\n        offer = ConditionalOfferFactory(\n            pk=1, condition=self.condition, benefit=self.benefit)\n\n        # now we force an unordered queryset so we can see that our discounts\n        # will disappear due to a new ordering query (see django/forms/model.py)\n        default_line_ordering = Line._meta.ordering\n        Line._meta.ordering = []\n        self.basket._lines = self.basket.lines.all()\n\n        self.applicator.apply_offers(self.basket, [offer])\n        formset = formsets.BasketLineFormSet(\n            strategy=self.basket.strategy,\n            queryset=self.basket.all_lines())\n\n        # the discount is in all_lines():\n        self.assertTrue(self.basket.all_lines()[0].has_discount)\n\n        # but not in the formset\n        self.assertFalse(formset.forms[0].instance.has_discount)\n\n        # Restore the ordering on the line\n        Line._meta.ordering = default_line_ordering\n\n        # clear the cached lines and apply the offer again\n        self.basket._lines = None\n        self.applicator.apply_offers(self.basket, [offer])\n\n        formset = formsets.BasketLineFormSet(\n            strategy=self.basket.strategy,\n            queryset=self.basket.all_lines())\n        self.assertTrue(formset.forms[0].instance.has_discount)\n\n\nclass TestAddToBasketForm(TestCase):\n\n    def test_allows_a_product_quantity_to_be_increased(self):\n        basket = factories.create_basket()\n        product = basket.all_lines()[0].product\n\n        # Add more of the same product\n        data = {'quantity': 1}\n        form = forms.AddToBasketForm(\n            basket=basket, product=product, data=data)\n        self.assertTrue(form.is_valid())\n\n    def test_checks_whether_passed_product_id_matches_a_real_product(self):\n        basket = factories.create_basket()\n        product = basket.all_lines()[0].product\n\n        # Add more of the same product\n        data = {'quantity': -1}\n        form = forms.AddToBasketForm(\n            basket=basket, product=product, data=data)\n        self.assertFalse(form.is_valid())\n\n    def test_checks_if_purchase_is_permitted(self):\n        basket = factories.BasketFactory()\n        product = factories.ProductFactory()\n\n        # Build a 4-level mock monster so we can force the return value of\n        # whether the product is available to buy. This is a serious code smell\n        # and needs to be remedied.\n        info = mock.Mock()\n        info.availability = mock.Mock()\n        info.availability.is_purchase_permitted = mock.Mock(\n            return_value=(False, \"Not on your nelly!\"))\n        basket.strategy.fetch_for_product = mock.Mock(\n            return_value=info)\n\n        data = {'quantity': 1}\n        form = forms.AddToBasketForm(\n            basket=basket, product=product, data=data)\n        self.assertFalse(form.is_valid())\n        self.assertEqual('Not on your nelly!', form.errors['__all__'][0])\n\n    def test_mixed_currency_baskets_are_not_permitted(self):\n        # Ensure basket is one currency\n        basket = mock.Mock()\n        basket.currency = 'GBP'\n        basket.num_items = 1\n\n        # Ensure new product has different currency\n        info = mock.Mock()\n        info.price.currency = 'EUR'\n        basket.strategy.fetch_for_product = mock.Mock(\n            return_value=info)\n\n        product = factories.ProductFactory()\n\n        data = {'quantity': 1}\n        form = forms.AddToBasketForm(\n            basket=basket, product=product, data=data)\n        self.assertFalse(form.is_valid())\n\n    def test_cannot_add_a_product_without_price(self):\n        basket = factories.BasketFactory()\n        product = factories.create_product(price=None)\n\n        data = {'quantity': 1}\n        form = forms.AddToBasketForm(\n            basket=basket, product=product, data=data)\n        self.assertFalse(form.is_valid())\n        self.assertEqual(\n            form.errors['__all__'][0],\n            'This product cannot be added to the basket because a price '\n            'could not be determined for it.',\n        )\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\n# Generated by Django 1.9.12 on 2017-02-26 11:22\nfrom __future__ import unicode_literals\n\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0003_auto_20150927_1551'),\n    ]\n\n    operations = [\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_shipping_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Shipping Address'),\n        ),\n    ]\n",
    "output": "from django.http import HttpResponse\nfrom django.test import TestCase\nfrom django.test.client import RequestFactory\nfrom django.contrib.auth.models import AnonymousUser\n\nfrom oscar.apps.basket import middleware\n\n\nclass TestBasketMiddleware(TestCase):\n\n    @staticmethod\n    def get_response_for_test(request):\n        return HttpResponse()\n\n    def setUp(self):\n        self.middleware = middleware.BasketMiddleware(self.get_response_for_test)\n        self.request = RequestFactory().get('/')\n        self.request.user = AnonymousUser()\n        self.middleware(self.request)\n\n    def test_basket_is_attached_to_request(self):\n        self.assertTrue(hasattr(self.request, 'basket'))\n\n    def test_strategy_is_attached_to_basket(self):\n        self.assertTrue(hasattr(self.request.basket, 'strategy'))\n\n    def test_strategy_is_attached_to_request(self):\n        self.assertTrue(hasattr(self.request, 'strategy'))\n\n    def test_get_cookie_basket_handles_invalid_signatures(self):\n        request_factory = RequestFactory()\n        request_factory.cookies['oscar_open_basket'] = '1:NOTAVALIDHASH'\n        request = request_factory.get('/')\n        request.cookies_to_delete = []\n\n        cookie_basket = self.middleware.get_cookie_basket(\"oscar_open_basket\", request, None)\n\n        self.assertEqual(None, cookie_basket)\n        self.assertIn(\"oscar_open_basket\", request.cookies_to_delete)\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\n# Generated by Django 1.9.12 on 2017-02-26 11:22\nfrom __future__ import unicode_literals\n\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0003_auto_20150927_1551'),\n    ]\n\n    operations = [\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_shipping_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Shipping Address'),\n        ),\n    ]\n",
    "output": "# -*- coding: utf-8 -*-\nfrom decimal import Decimal as D\n\nfrom django.test import TestCase\n\nfrom oscar.apps.basket.models import Basket\nfrom oscar.apps.catalogue.models import Option\nfrom oscar.apps.partner import availability, prices, strategy\nfrom oscar.test import factories\nfrom oscar.test.factories import (\n    BasketFactory, BasketLineAttributeFactory, OptionFactory, ProductFactory)\n\n\nclass TestANewBasket(TestCase):\n\n    def setUp(self):\n        self.basket = Basket()\n        self.basket.strategy = strategy.Default()\n\n    def test_has_zero_lines(self):\n        self.assertEqual(0, self.basket.num_lines)\n\n    def test_has_zero_items(self):\n        self.assertEqual(0, self.basket.num_items)\n\n    def test_doesnt_contain_vouchers(self):\n        self.assertFalse(self.basket.contains_a_voucher)\n\n    def test_can_be_edited(self):\n        self.assertTrue(self.basket.can_be_edited)\n\n    def test_is_empty(self):\n        self.assertTrue(self.basket.is_empty)\n\n    def test_is_not_submitted(self):\n        self.assertFalse(self.basket.is_submitted)\n\n    def test_has_no_applied_offers(self):\n        self.assertEqual({}, self.basket.applied_offers())\n\n\nclass TestBasketLine(TestCase):\n\n    def test_description(self):\n        basket = BasketFactory()\n        product = ProductFactory(title=\"A product\")\n        basket.add_product(product)\n\n        line = basket.lines.first()\n        self.assertEqual(line.description, \"A product\")\n\n    def test_description_with_attributes(self):\n        basket = BasketFactory()\n        product = ProductFactory(title=\"A product\")\n        basket.add_product(product)\n\n        line = basket.lines.first()\n        BasketLineAttributeFactory(\n            line=line, value='\\u2603', option__name='with')\n        self.assertEqual(line.description, \"A product (with = '\\u2603')\")\n\n    def test_create_line_reference(self):\n        basket = BasketFactory()\n        product = ProductFactory(title=\"A product\")\n        option = OptionFactory(name=\"product_option\", code=\"product_option\")\n        option_product = ProductFactory(title='Asunci\u00f3n')\n        options = [{'option': option, 'value': option_product}]\n        basket.add_product(product, options=options)\n\n    def test_basket_lines_queryset_is_ordered(self):\n        # This is needed to make sure a formset is not performing the query\n        # again with an order_by clause (losing all calculated discounts)\n        basket = BasketFactory()\n        product = ProductFactory(title=\"A product\")\n        another_product = ProductFactory(title=\"Another product\")\n        basket.add_product(product)\n        basket.add_product(another_product)\n        queryset = basket.all_lines()\n        self.assertTrue(queryset.ordered)\n\n    def test_line_tax_for_zero_tax_strategies(self):\n        basket = Basket()\n        basket.strategy = strategy.Default()\n        product = factories.create_product()\n        # Tax for the default strategy will be 0\n        factories.create_stockrecord(\n            product, price_excl_tax=D('75.00'), num_in_stock=10)\n        basket.add(product, 1)\n\n        self.assertEqual(basket.lines.first().line_tax, D('0'))\n\n    def test_line_tax_for_unknown_tax_strategies(self):\n\n        class UnknownTaxStrategy(strategy.Default):\n            \"\"\" A test strategy where the tax is not known \"\"\"\n\n            def pricing_policy(self, product, stockrecord):\n                return prices.FixedPrice('GBP', stockrecord.price_excl_tax, tax=None)\n\n        basket = Basket()\n        basket.strategy = UnknownTaxStrategy()\n        product = factories.create_product()\n        factories.create_stockrecord(product, num_in_stock=10)\n        basket.add(product, 1)\n\n        self.assertEqual(basket.lines.first().line_tax, None)\n\n\nclass TestAddingAProductToABasket(TestCase):\n\n    def setUp(self):\n        self.basket = Basket()\n        self.basket.strategy = strategy.Default()\n        self.product = factories.create_product()\n        self.record = factories.create_stockrecord(\n            currency='GBP',\n            product=self.product, price_excl_tax=D('10.00'))\n        self.purchase_info = factories.create_purchase_info(self.record)\n        self.basket.add(self.product)\n\n    def test_creates_a_line(self):\n        self.assertEqual(1, self.basket.num_lines)\n\n    def test_sets_line_prices(self):\n        line = self.basket.lines.all()[0]\n        self.assertEqual(line.price_incl_tax, self.purchase_info.price.incl_tax)\n        self.assertEqual(line.price_excl_tax, self.purchase_info.price.excl_tax)\n\n    def test_adding_negative_quantity(self):\n        self.assertEqual(1, self.basket.num_lines)\n        self.basket.add(self.product, quantity=4)\n        self.assertEqual(5, self.basket.line_quantity(self.product, self.record))\n        self.basket.add(self.product, quantity=-10)\n        self.assertEqual(0, self.basket.line_quantity(self.product, self.record))\n\n    def test_means_another_currency_product_cannot_be_added(self):\n        product = factories.create_product()\n        factories.create_stockrecord(\n            currency='USD', product=product, price_excl_tax=D('20.00'))\n        with self.assertRaises(ValueError):\n            self.basket.add(product)\n\n    def test_cannot_add_a_product_without_price(self):\n        product = factories.create_product(price=None)\n        with self.assertRaises(ValueError):\n            self.basket.add(product)\n\n\nclass TestANonEmptyBasket(TestCase):\n\n    def setUp(self):\n        self.basket = Basket()\n        self.basket.strategy = strategy.Default()\n        self.product = factories.create_product()\n        self.record = factories.create_stockrecord(\n            self.product, price_excl_tax=D('10.00'))\n        self.purchase_info = factories.create_purchase_info(self.record)\n        self.basket.add(self.product, 10)\n\n    def test_can_be_flushed(self):\n        self.basket.flush()\n        self.assertEqual(self.basket.num_items, 0)\n\n    def test_returns_correct_product_quantity(self):\n        self.assertEqual(10, self.basket.product_quantity(\n            self.product))\n\n    def test_returns_correct_line_quantity_for_existing_product_and_stockrecord(self):\n        self.assertEqual(10, self.basket.line_quantity(\n            self.product, self.record))\n\n    def test_returns_zero_line_quantity_for_alternative_stockrecord(self):\n        record = factories.create_stockrecord(\n            self.product, price_excl_tax=D('5.00'))\n        self.assertEqual(0, self.basket.line_quantity(\n            self.product, record))\n\n    def test_returns_zero_line_quantity_for_missing_product_and_stockrecord(self):\n        product = factories.create_product()\n        record = factories.create_stockrecord(\n            product, price_excl_tax=D('5.00'))\n        self.assertEqual(0, self.basket.line_quantity(\n            product, record))\n\n    def test_returns_correct_quantity_for_existing_product_and_stockrecord_and_options(self):\n        product = factories.create_product()\n        record = factories.create_stockrecord(\n            product, price_excl_tax=D('5.00'))\n        option = Option.objects.create(name=\"Message\")\n        options = [{\"option\": option, \"value\": \"2\"}]\n\n        self.basket.add(product, options=options)\n        self.assertEqual(0, self.basket.line_quantity(\n            product, record))\n        self.assertEqual(1, self.basket.line_quantity(\n            product, record, options))\n\n    def test_total_sums_product_totals(self):\n        product = factories.create_product()\n        factories.create_stockrecord(\n            product, price_excl_tax=D('5.00'))\n        self.basket.add(product, 1)\n        self.assertEqual(self.basket.total_excl_tax, 105)\n\n    def test_totals_for_free_products(self):\n        basket = Basket()\n        basket.strategy = strategy.Default()\n        # Add a zero-priced product to the basket\n        product = factories.create_product()\n        factories.create_stockrecord(\n            product, price_excl_tax=D('0.00'), num_in_stock=10)\n        basket.add(product, 1)\n\n        self.assertEqual(basket.lines.count(), 1)\n        self.assertEqual(basket.total_excl_tax, 0)\n        self.assertEqual(basket.total_incl_tax, 0)\n\n    def test_basket_prices_calculation_for_unavailable_pricing(self):\n        new_product = factories.create_product()\n        factories.create_stockrecord(\n            new_product, price_excl_tax=D('5.00'))\n        self.basket.add(new_product, 1)\n\n        class UnavailableProductStrategy(strategy.Default):\n            \"\"\" A test strategy that makes a specific product unavailable \"\"\"\n\n            def availability_policy(self, product, stockrecord):\n                if product == new_product:\n                    return availability.Unavailable()\n                return super().availability_policy(product, stockrecord)\n\n            def pricing_policy(self, product, stockrecord):\n                if product == new_product:\n                    return prices.Unavailable()\n                return super().pricing_policy(product, stockrecord)\n\n        self.basket.strategy = UnavailableProductStrategy()\n        line = self.basket.all_lines()[1]\n        self.assertEqual(line.get_warning(), \"'D\\xf9\\uff4d\\u03fb\\u03d2 title' is no longer available\")\n        self.assertIsNone(line.line_price_excl_tax)\n        self.assertIsNone(line.line_price_incl_tax)\n        self.assertIsNone(line.line_price_excl_tax_incl_discounts)\n        self.assertIsNone(line.line_price_incl_tax_incl_discounts)\n        self.assertIsNone(line.line_tax)\n        self.assertEqual(self.basket.total_excl_tax, 100)\n        self.assertEqual(self.basket.total_incl_tax, 100)\n        self.assertEqual(self.basket.total_excl_tax_excl_discounts, 100)\n        self.assertEqual(self.basket.total_incl_tax_excl_discounts, 100)\n\n    def test_max_allowed_quantity(self):\n        self.basket.add_product(self.product, quantity=3)\n\n        # max allowed here is 7 (20-10+3)\n        with self.settings(OSCAR_MAX_BASKET_QUANTITY_THRESHOLD=20):\n            max_allowed, basket_threshold = self.basket.max_allowed_quantity()\n            self.assertEqual(max_allowed, 7)\n            self.assertEqual(basket_threshold, 20)\n\n        # but we can also completely disable the threshold\n        with self.settings(OSCAR_MAX_BASKET_QUANTITY_THRESHOLD=None):\n            max_allowed, basket_threshold = self.basket.max_allowed_quantity()\n            self.assertEqual(max_allowed, None)\n            self.assertEqual(basket_threshold, None)\n\n    def test_is_quantity_allowed(self):\n        with self.settings(OSCAR_MAX_BASKET_QUANTITY_THRESHOLD=20):\n            # 7 or below is possible\n            allowed, message = self.basket.is_quantity_allowed(qty=7)\n            self.assertTrue(allowed)\n            self.assertIsNone(message)\n            # but above it's not\n            allowed, message = self.basket.is_quantity_allowed(qty=11)\n            self.assertFalse(allowed)\n            self.assertIsNotNone(message)\n\n        with self.settings(OSCAR_MAX_BASKET_QUANTITY_THRESHOLD=None):\n            # with the treshold disabled all quantities are possible\n            allowed, message = self.basket.is_quantity_allowed(qty=7)\n            self.assertTrue(allowed)\n            self.assertIsNone(message)\n            allowed, message = self.basket.is_quantity_allowed(qty=5000)\n            self.assertTrue(allowed)\n            self.assertIsNone(message)\n\n\nclass TestMergingTwoBaskets(TestCase):\n\n    def setUp(self):\n        self.product = factories.create_product()\n        self.record = factories.create_stockrecord(\n            self.product, price_excl_tax=D('10.00'))\n        self.purchase_info = factories.create_purchase_info(self.record)\n\n        self.main_basket = Basket()\n        self.main_basket.strategy = strategy.Default()\n        self.main_basket.add(self.product, quantity=2)\n\n        self.merge_basket = Basket()\n        self.merge_basket.strategy = strategy.Default()\n        self.merge_basket.add(self.product, quantity=1)\n\n        self.main_basket.merge(self.merge_basket)\n\n    def test_doesnt_sum_quantities(self):\n        self.assertEqual(1, self.main_basket.num_lines)\n\n    def test_changes_status_of_merge_basket(self):\n        self.assertEqual(Basket.MERGED, self.merge_basket.status)\n\n\nclass TestASubmittedBasket(TestCase):\n\n    def setUp(self):\n        self.basket = Basket()\n        self.basket.strategy = strategy.Default()\n        self.basket.submit()\n\n    def test_has_correct_status(self):\n        self.assertTrue(self.basket.is_submitted)\n\n    def test_can_be_edited(self):\n        self.assertFalse(self.basket.can_be_edited)\n\n\nclass TestMergingAVoucherBasket(TestCase):\n\n    def test_transfers_vouchers_to_new_basket(self):\n        baskets = [factories.BasketFactory(), factories.BasketFactory()]\n        voucher = factories.VoucherFactory()\n        baskets[0].vouchers.add(voucher)\n        baskets[1].merge(baskets[0])\n\n        self.assertEqual(1, baskets[1].vouchers.all().count())\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\n# Generated by Django 1.9.12 on 2017-02-26 11:22\nfrom __future__ import unicode_literals\n\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0003_auto_20150927_1551'),\n    ]\n\n    operations = [\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_shipping_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Shipping Address'),\n        ),\n    ]\n",
    "output": "import datetime\n\nfrom django.test import TestCase\n\nfrom oscar.apps.basket.reports import (\n    OpenBasketReportGenerator, SubmittedBasketReportGenerator)\n\n\nclass TestBasketReports(TestCase):\n\n    def test_open_report_doesnt_error(self):\n        data = {\n            'start_date': datetime.date(2012, 5, 1),\n            'end_date': datetime.date(2012, 5, 17),\n            'formatter': 'CSV'\n        }\n        generator = OpenBasketReportGenerator(**data)\n        generator.generate()\n\n    def test_submitted_report_doesnt_error(self):\n        data = {\n            'start_date': datetime.date(2012, 5, 1),\n            'end_date': datetime.date(2012, 5, 17),\n            'formatter': 'CSV'\n        }\n        generator = SubmittedBasketReportGenerator(**data)\n        generator.generate()\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\n# Generated by Django 1.9.12 on 2017-02-26 11:22\nfrom __future__ import unicode_literals\n\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0003_auto_20150927_1551'),\n    ]\n\n    operations = [\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_shipping_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Shipping Address'),\n        ),\n    ]\n",
    "output": "\nimport pytest\nfrom oscar.test.factories import (\n    BasketFactory, ConditionalOfferFactory, ProductFactory)\n\n\n@pytest.fixture\ndef filled_basket():\n    basket = BasketFactory()\n    product1 = ProductFactory()\n    product2 = ProductFactory()\n    basket.add_product(product1, quantity=10)\n    basket.add_product(product2, quantity=20)\n    return basket\n\n\n@pytest.mark.django_db\nclass TestLineOfferConsumer(object):\n\n    def test_consumed_no_offer(self, filled_basket):\n        for line in filled_basket.all_lines():\n            assert line.consumer.consumed() == 0\n\n    def test_consumed_with_offer(self, filled_basket):\n        offer1 = ConditionalOfferFactory(name='offer1')\n        offer2 = ConditionalOfferFactory(name='offer2')\n        offer1.exclusive = False\n        offer2.exclusive = False\n\n        for line in filled_basket.all_lines():\n            assert line.consumer.consumed(offer1) == 0\n            assert line.consumer.consumed(offer2) == 0\n\n        line1 = filled_basket.all_lines()[0]\n        line2 = filled_basket.all_lines()[1]\n\n        line1.consumer.consume(1, offer1)\n        assert line1.consumer.consumed() == 1\n        assert line1.consumer.consumed(offer1) == 1\n        assert line1.consumer.consumed(offer2) == 0\n\n        line1.consumer.consume(9, offer1)\n        assert line1.consumer.consumed() == line1.quantity\n        assert line1.consumer.consumed(offer1) == line1.quantity\n        assert line1.consumer.consumed(offer2) == 0\n\n        line1.consumer.consume(99, offer1)\n        assert line1.consumer.consumed(offer1) == line1.quantity\n        assert line1.consumer.consumed(offer2) == 0\n\n        line1.consumer.consume(1, offer2)\n        line2.consumer.consume(1, offer2)\n\n        assert line1.consumer.consumed(offer2) == 1\n        assert line2.consumer.consumed(offer2) == 1\n\n    def test_consume(self, filled_basket):\n        line = filled_basket.all_lines()[0]\n        line.consume(1)\n        assert line.quantity_with_discount == 1\n        line.consume(99)\n        assert line.quantity_with_discount == 10\n\n    def test_consumed_with_exclusive_offer(self, filled_basket):\n        offer1 = ConditionalOfferFactory(name='offer1')\n        offer2 = ConditionalOfferFactory(name='offer2')\n        offer3 = ConditionalOfferFactory(name='offer3')\n        offer1.exclusive = True\n        offer2.exclusive = False\n        offer3.exclusive = False\n\n        for line in filled_basket.all_lines():\n            assert line.consumer.consumed(offer1) == 0\n            assert line.consumer.consumed(offer2) == 0\n\n        line1 = filled_basket.all_lines()[0]\n        line2 = filled_basket.all_lines()[1]\n\n        line1.consumer.consume(1, offer1)\n        assert line1.is_available_for_offer_discount(offer2) is True\n\n        line1.consumer.consume(99, offer1)\n        assert line1.is_available_for_offer_discount(offer2) is False\n\n        line2.consumer.consume(1, offer2)\n        assert line2.is_available_for_offer_discount(offer1) is True\n\n        line2.consumer.consume(99, offer2)\n        assert line2.is_available_for_offer_discount(offer1) is False\n        assert line2.is_available_for_offer_discount(offer3) is True\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\n# Generated by Django 1.9.12 on 2017-02-26 11:22\nfrom __future__ import unicode_literals\n\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0003_auto_20150927_1551'),\n    ]\n\n    operations = [\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_shipping_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Shipping Address'),\n        ),\n    ]\n",
    "output": "from django.contrib.messages import get_messages\nfrom django.test import TestCase\nfrom django.urls import reverse\n\nfrom oscar.apps.basket import views\nfrom oscar.test import factories\nfrom tests.fixtures import RequestFactory\n\n\nclass TestVoucherAddView(TestCase):\n    def test_get(self):\n        request = RequestFactory().get('/')\n\n        view = views.VoucherAddView.as_view()\n        response = view(request)\n\n        self.assertEqual(response.status_code, 302)\n\n    def _get_voucher_message(self, request):\n        return '\\n'.join(str(m.message) for m in get_messages(request))\n\n    def test_post_valid(self):\n        voucher = factories.VoucherFactory()\n        self.assertTrue(voucher.is_active())\n\n        data = {\n            'code': voucher.code\n        }\n        request = RequestFactory().post('/', data=data)\n        request.basket.save()\n\n        view = views.VoucherAddView.as_view()\n        response = view(request)\n        self.assertEqual(response.status_code, 302)\n\n        voucher = voucher.__class__.objects.get(pk=voucher.pk)\n        self.assertEqual(voucher.num_basket_additions, 1, msg=self._get_voucher_message(request))\n\n    def test_post_valid_from_set(self):\n        voucherset = factories.VoucherSetFactory()\n        voucher = voucherset.vouchers.first()\n\n        self.assertTrue(voucher.is_active())\n\n        data = {\n            'code': voucher.code\n        }\n        request = RequestFactory().post('/', data=data)\n        request.basket.save()\n\n        view = views.VoucherAddView.as_view()\n        response = view(request)\n        self.assertEqual(response.status_code, 302)\n\n        voucher = voucher.__class__.objects.get(pk=voucher.pk)\n        self.assertEqual(voucher.num_basket_additions, 1, msg=self._get_voucher_message(request))\n\n        self.assertEqual(voucherset.num_basket_additions, 1)\n\n\nclass TestVoucherRemoveView(TestCase):\n    def test_post_valid(self):\n        voucher = factories.VoucherFactory(num_basket_additions=5)\n\n        data = {\n            'code': voucher.code\n        }\n        request = RequestFactory().post('/', data=data)\n        request.basket.save()\n        request.basket.vouchers.add(voucher)\n\n        view = views.VoucherRemoveView.as_view()\n        response = view(request, pk=voucher.pk)\n        self.assertEqual(response.status_code, 302)\n\n        voucher = voucher.__class__.objects.get(pk=voucher.pk)\n        self.assertEqual(voucher.num_basket_additions, 4)\n\n    def test_post_with_missing_voucher(self):\n        \"\"\" If the voucher is missing, verify the view queues a message and redirects. \"\"\"\n        pk = '12345'\n        view = views.VoucherRemoveView.as_view()\n        request = RequestFactory().post('/')\n        request.basket.save()\n        response = view(request, pk=pk)\n\n        self.assertEqual(response.status_code, 302)\n\n        actual = list(get_messages(request))[-1].message\n        expected = \"No voucher found with id '{}'\".format(pk)\n        self.assertEqual(actual, expected)\n\n\nclass TestBasketSummaryView(TestCase):\n    def setUp(self):\n        self.url = reverse('basket:summary')\n        self.country = factories.CountryFactory()\n        self.user = factories.UserFactory()\n\n    def test_default_shipping_address(self):\n        user_address = factories.UserAddressFactory(\n            country=self.country, user=self.user, is_default_for_shipping=True\n        )\n        request = RequestFactory().get(self.url, user=self.user)\n        view = views.BasketView(request=request)\n        self.assertEquals(view.get_default_shipping_address(), user_address)\n\n    def test_default_shipping_address_for_anonymous_user(self):\n        request = RequestFactory().get(self.url)\n        view = views.BasketView(request=request)\n        self.assertIsNone(view.get_default_shipping_address())\n"
  },
  {
    "instruction": "Given the following code snippet, write an integration test for it.",
    "input": "I need integration test for this code\n\n# -*- coding: utf-8 -*-\n# Generated by Django 1.9.12 on 2017-02-26 11:22\nfrom __future__ import unicode_literals\n\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('address', '0003_auto_20150927_1551'),\n    ]\n\n    operations = [\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_billing_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Billing Address'),\n        ),\n        migrations.AlterField(\n            model_name='useraddress',\n            name='num_orders_as_shipping_address',\n            field=models.PositiveIntegerField(default=0, verbose_name='Number of Orders as Shipping Address'),\n        ),\n    ]\n",
    "output": ""
  }
]
